using System;
using System.Windows.Forms;
using Sputnik.LBinary;
using Sputnik.LMarshal;
using Sputnik.LUtils;
using SputnikAsm.LBinary;
using SputnikAsm.LDisassembler.LEnums;
using SputnikAsm.LExtensions;
using SputnikAsm.LUtils;

namespace SputnikAsm.LDisassembler
{
    public partial class ADisassembler
    {
        #region Disassemble
        public String Disassemble(ref UIntPtr offset)
        {
            var ignore = "";
            var result = Disassemble(ref offset, ref ignore);
            return result;
        }
        public String Disassemble(ref UIntPtr offset, ref String description)
        {
            var actualread = 0;
            var startoffset = UIntPtr.Zero;
            var initialoffset = UIntPtr.Zero;
            String tempresult = "";
            var tempdescription = "";
            String tempst;
            var i = 0;
            var j = 0;
            var k = 0;
            var isprefix = false;
            UInt32 last = 0;
            var foundit = false;
            var tempaddress = UIntPtr.Zero;
            var prefixsize = 0;
            //tmoduleinfo mi;
            UInt64 va = 0;
            UInt64 pa = 0;
            var novexpossible = false;
            var bytestomove = 0;
            UInt32 td = 0;
            var breaknow = false;
            var result = "";
            try
            {
                LastDisassembleData.IsFloat = false;
                LastDisassembleData.IsFloat64 = false;
                LastDisassembleData.IsCloaked = false;
                LastDisassembleData.CommentsOverride = "";
                // todo add the binutils
                //if (defaultbinutils != nil)
                //{
                //    //use this
                //    lastdisassembledata.address = offset;
                //    lastdisassembledata.seperatorcount = 0;
                //    defaultbinutils.disassemble(lastdisassembledata);
                //    result = AStringUtils.IntToHex(lastdisassembledata.address, 8);
                //    result = result + " - ";
                //    for (i = 0; i <= length(lastdisassembledata.bytes) - 1; i++)
                //        result = result + AStringUtils.IntToHex(lastdisassembledata.bytes[i], 2) + ' ';
                //    result = result + " - ";
                //    result = result + lastdisassembledata.opcode;
                //    result = result + ' ';
                //    result = result + lastdisassembledata.parameters;
                //    if (length(lastdisassembledata.bytes) > 0)
                //        offset += length(lastdisassembledata.bytes);
                //    else
                //    {
                //        if (processhandler.systemarchitecture == archarm)
                //        {
                //            if ((offset | 1) == 1)
                //                offset += 2;
                //            else
                //                offset += 4;
                //        }
                //        else
                //            offset += 1;
                //    }
                //    return result;
                //}
                if (Is64BitOverride)
                    Is64Bit = Is64BitOverrideState;
                else
                {
                    Is64Bit = SymbolHandler.Process.IsX64;
                    if (Environment.Is64BitOperatingSystem)
                    {
                        if (offset.ToUInt64() >= 0x100000000UL)
                            Is64Bit = true;
                    }
                    // todo make this work!
                    //if (SymbolHandler.GetModuleByAddress(offset, out mi))
                    //    is64bit = mi.is64bitmodule;
                }
                // todo handle arm
                //if (processhandler.systemarchitecture == archarm)
                //{
                //    result = armdisassembler.disassemble(offset);
                //    lastdisassembledata = armdisassembler.lastdisassembledata;
                //    return result;
                //}
                _modRmPosition = ATmrPos.None;
                last = 0;
                tempresult = "";
                LastDisassembleData.Bytes.SetLength(0);
                LastDisassembleData.Address = offset;
                LastDisassembleData.SeparatorCount = 0;
                LastDisassembleData.Prefix = "";
                LastDisassembleData.PrefixSize = 0;
                LastDisassembleData.OpCode = "";
                LastDisassembleData.Parameters = "";
                LastDisassembleData.IsJump = false;
                LastDisassembleData.IsCall = false;
                LastDisassembleData.IsRet = false;
                LastDisassembleData.IsConditionalJump = false;
                LastDisassembleData.ModRmValueType = ADisassemblerValueType.None;
                LastDisassembleData.ParameterValueType = ADisassemblerValueType.None;
                LastDisassembleData.HasSib = false;
                LastDisassembleData.DataSize = 0;
                LastDisassembleData.RipRelative = 0;
                // todo uncomment user override
                //if (assigned(ondisassembleoverride))  //check if the user has defined it's own disassembler
                //{
                //    //if so, call the OnDisassemble propery, and if it returns true don't handle the original
                //    if (ondisassembleoverride(self, offset, LastDisassembleData, result, description))
                //    {
                //        if (length(lastdisassembledata.bytes) == 0)  //BAD!
                //            setlength(lastdisassembledata.bytes, 1);
                //
                //        offset += length(lastdisassembledata.bytes);
                //        return result;
                //    }
                //}
                // //also check global overrides
                // for (i = 0; i <= length(globaldisassembleoverrides) - 1; i++)
                // {
                //     if (assigned(globaldisassembleoverrides[i]))
                //     {
                //         if (globaldisassembleoverrides[i](self, offset, LastDisassembleData, result, description))
                //         {
                //             if (length(lastdisassembledata.bytes) == 0)  //BAD!
                //                 setlength(lastdisassembledata.bytes, 1);
                // 
                //             offset += length(lastdisassembledata.bytes);
                //             return result;
                //         }
                //     }
                // }
                _ripRelative = false;
                if (IsDataOnly)
                    result = "";
                else
                    result = AStringUtils.IntToHex(offset, 8) + " - ";
                isprefix = true;
                _prefix = new APrefix(0xf0, 0xf2, 0xf3, 0x2e, 0x36, 0x3e, 0x26, 0x64, 0x65, 0x66, 0x67);
                _prefix2 = new APrefix();
                startoffset = offset;
                initialoffset = offset;
                for (i = 32; i <= 63; i++) //debug code
                    _memory[i] = 0xce;
                actualread = ReadMemory(offset, _memory.ToIntPtr().ToUIntPtr(), 32);
                var memory = _memory.Shadow();
                if (actualread > 0)
                {
                    //{$ifndef jni}
                    //if debuggerthread<>nil then
                    //  for i:=0 to actualread-1 do
                    //    if memory[i]=$cc then
                    //    begin
                    //      //memory[i]:=debuggerthread.getrealbyte(offset+i);
                    //
                    //      repairbreakbyte(offset+i, memory[i]);
                    //    end;
                    //{$endif}
                    while (isprefix)
                    {
                        offset += 1; //offset will always inc by 1
                        if (_prefix.Contains(memory[0]))
                        {
                            if (LastDisassembleData.Bytes.Length > 10)
                            {
                                //prevent a too long prefix from crashing the disassembler (e.g 12GB filled with one prefix....)
                                isprefix = false;
                                break;
                            }
                            LastDisassembleData.Bytes.Inc();
                            LastDisassembleData.Bytes.Last = memory[0];
                            if (!IsDataOnly)
                                result = result + IntToHexSigned((UIntPtr)memory[0], 2) + ' ';
                            isprefix = true;
                            startoffset += 1;
                            _prefix2.Add(memory[0]);
                            memory.Inc();
                            if (offset.ToUInt64() > initialoffset.ToUInt64() + 24)  //too long
                            {
                                description = "";
                                LastDisassembleData.OpCode = "??";
                                offset = initialoffset + 1;
                                return result;
                            }

                        }
                        else
                            isprefix = false;
                    }
                    if (_prefix2.Contains(0xf0))
                    {
                        tempresult = "lock ";
                        novexpossible = true;
                    }
                    if (_prefix2.Contains(0xf2))
                    {
                        tempresult += "repne ";
                        novexpossible = true;
                    }
                    if (_prefix2.Contains(0xf3))
                    {
                        tempresult += "repe ";
                        novexpossible = true;
                    }
                    LastDisassembleData.Prefix = tempresult;
                    _opCodeFlags.Clear();
                    _rexPrefix = 0;
                    if (Is64Bit)
                    {
                        if (AMathUtils.InRangeX(memory[0], 0x40, 0x4f))  //does it start with a rex prefix ?
                        {
                            LastDisassembleData.Bytes.Inc();
                            LastDisassembleData.Bytes.Last = memory[0];
                            _rexPrefix = memory[0];
                            _opCodeFlags.B = (_rexPrefix & BIT_REX_B) == BIT_REX_B;
                            _opCodeFlags.X = (_rexPrefix & BIT_REX_X) == BIT_REX_X;
                            _opCodeFlags.R = (_rexPrefix & BIT_REX_R) == BIT_REX_R;
                            _opCodeFlags.W = (_rexPrefix & BIT_REX_W) == BIT_REX_W;
                            if (!IsDataOnly)
                                result = result + IntToHexSigned((UIntPtr)_rexPrefix, 2) + ' ';
                            offset += 1;
                            startoffset += 1;
                            _prefix2.Add(_rexPrefix);
                            memory.Inc();
                            novexpossible = true;
                            if (offset.ToUInt64() > initialoffset.ToUInt64() + 24)
                            {
                                description = "";
                                LastDisassembleData.OpCode = "??";
                                offset = initialoffset + 1;
                                return result;
                            }
                        }
                    }
                    prefixsize = LastDisassembleData.Bytes.Length;
                    LastDisassembleData.PrefixSize = prefixsize;
                    if (novexpossible == false && AMathUtils.InRangeX(memory[0], 0xc4, 0xc5))
                    {
                        _hasVex = true;
                        if (memory[0] == 0xc5)
                        {
                            //2 byte VEX
                            prefixsize += 2;
                            var vex2 = new AVex2Byte(memory.ToIntPtr(1));
                            _opCodeFlags.Pp = vex2.Pp;
                            _opCodeFlags.L = vex2.L == 1;
                            _opCodeFlags.Vvvv = vex2.Vvvv;
                            _opCodeFlags.R = vex2.R == 0;
                            _opCodeFlags.Mmmmm = 1;
                            i = LastDisassembleData.Bytes.Length;
                            LastDisassembleData.Bytes.SetLength(i + 2);
                            LastDisassembleData.Bytes[i] = memory[0];
                            LastDisassembleData.Bytes[i + 1] = memory[1];
                            memory[1] = 0xf;
                            bytestomove = 1;
                            memory.Inc();
                            offset += 1;
                        }
                        else
                        {
                            //3 byte vex
                            prefixsize += 3;
                            var vex3 = new AVex3Byte(memory.ToIntPtr(1));
                            _opCodeFlags.Pp = vex3.Pp;
                            _opCodeFlags.L = vex3.L == 1;
                            _opCodeFlags.Vvvv = vex3.Vvvv;
                            _opCodeFlags.W = vex3.W == 1; //this one is NOT inverted
                            _opCodeFlags.Mmmmm = vex3.Mmmmm;
                            _opCodeFlags.B = vex3.B == 0;
                            _opCodeFlags.X = vex3.X == 0;
                            _opCodeFlags.R = vex3.R == 0;
                            i = LastDisassembleData.Bytes.Length;
                            LastDisassembleData.Bytes.SetLength(i + 3);
                            LastDisassembleData.Bytes[i] = memory[0];
                            LastDisassembleData.Bytes[i + 1] = memory[1];
                            LastDisassembleData.Bytes[i + 2] = memory[2];
                            /* mmmmm:
                            00000: Reserved for future use (will #UD)
                            00001: implied 0F leading opcode byte
                            00010: implied 0F 38 leading opcode bytes
                            00011: implied 0F 3A leading opcode bytes
                            00100-11111: Reserved for future use (will #UD)
                            */
                            bytestomove = 3; //number of bytes to shift
                            switch (_opCodeFlags.Mmmmm)
                            {
                                case 1:
                                    {
                                        bytestomove = 2;
                                        memory[2] = 0xf;
                                    }
                                    break;
                                case 2:
                                    {
                                        bytestomove = 1;
                                        memory[1] = 0xf;
                                        memory[2] = 0x38;
                                    }
                                    break;
                                case 3:
                                    {
                                        bytestomove = 1;
                                        memory[1] = 0xf;
                                        memory[2] = 0x3a;
                                    }
                                    break; //else invalid
                            }
                            memory.IncBy(bytestomove);
                            offset += bytestomove;
                        }
                        switch (_opCodeFlags.Pp)
                        {
                            case 1:
                                _prefix2.Add(0x66);
                                break;
                            case 2:
                                _prefix2.Add(0xf3);
                                break;
                            case 3:
                                _prefix2.Add(0xf2);
                                break;
                        }
                    }
                    else
                        _hasVex = false;
                    //compatibility fix for code that still checks for rex.* or sets it as a temporary flag replacement
                    _rexPrefix = (Byte)(_opCodeFlags.B ? _rexPrefix | BIT_REX_B : _rexPrefix);
                    _rexPrefix = (Byte)(_opCodeFlags.X ? _rexPrefix | BIT_REX_X : _rexPrefix);
                    _rexPrefix = (Byte)(_opCodeFlags.R ? _rexPrefix | BIT_REX_R : _rexPrefix);
                    _rexPrefix = (Byte)(_opCodeFlags.W ? _rexPrefix | BIT_REX_W : _rexPrefix);
                    #region Insane Switch (Main Processor)
                    var aggressivealignment = _aggressiveAlignment;
                    switch (memory[0])
                    {  //opcode
                        case 0:
                            {
                                if ((aggressivealignment & (((offset.ToUInt64()) & 0xf) == 0) && (memory[1] != 0)) || ((memory[1] == 0x55) && (memory[2] == 0x89) && (memory[3] == 0xe5)))
                                {
                                    description = "Filler";
                                    LastDisassembleData.OpCode = "db";
                                    LastDisassembleData.Parameters = AStringUtils.IntToHex(memory[0], 2);
                                }
                                else
                                {
                                    description = "Add";

                                    LastDisassembleData.OpCode = "add";
                                    LastDisassembleData.Parameters = ModRm(memory, _prefix2, 1, 2, ref last) + R8(memory[1]);
                                    offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                }
                            }
                            break;

                        case 0x1:
                            {
                                description = "Add";

                                LastDisassembleData.OpCode = "add";
                                if (_prefix2.Contains(0x66)) LastDisassembleData.Parameters = ModRm(memory, _prefix2, 1, 1, ref last) + R16(memory[1]);
                                else
                                    LastDisassembleData.Parameters = ModRm(memory, _prefix2, 1, 0, ref last) + R32(memory[1]);


                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                            }
                            break;

                        case 0x2:
                            {
                                description = "Add";

                                LastDisassembleData.OpCode = "add";
                                LastDisassembleData.Parameters = R8(memory[1]) + ModRm(memory, _prefix2, 1, 2, ref last, ATmrPos.Right);

                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                            }
                            break;

                        case 0x3:
                            {
                                description = "Add";
                                LastDisassembleData.OpCode = "add";
                                if (_prefix2.Contains(0x66)) LastDisassembleData.Parameters = R16(memory[1]) + ModRm(memory, _prefix2, 1, 1, ref last, ATmrPos.Right);
                                else
                                    LastDisassembleData.Parameters = R32(memory[1]) + ModRm(memory, _prefix2, 1, 0, ref last, ATmrPos.Right);


                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                            }
                            break;



                        case 0x4:
                            {
                                description = "Add " + AStringUtils.IntToHex(memory[1], 2) + " to AL";
                                LastDisassembleData.OpCode = "add";
                                LastDisassembleData.ParameterValueType = ADisassemblerValueType.Value;
                                LastDisassembleData.ParameterValue = (UIntPtr)memory[1];
                                LastDisassembleData.Parameters = _colorReg + "al" + _endColor + ',' + IntToHexSigned((UIntPtr)memory[1], 2);

                                LastDisassembleData.Separators[LastDisassembleData.SeparatorCount] = 1;
                                LastDisassembleData.SeparatorCount += 1;

                                offset += 1;
                            }
                            break;

                        case 0x5:
                            {
                                LastDisassembleData.OpCode = "add";
                                LastDisassembleData.ParameterValueType = ADisassemblerValueType.Value;


                                var wordptr = memory.ToIntPtr(1).ReadUInt16();
                                var dwordptr = memory.ToIntPtr(1).ReadUInt32();
                                if (_prefix2.Contains(0x66))
                                {
                                    LastDisassembleData.ParameterValueType = ADisassemblerValueType.Value;
                                    LastDisassembleData.ParameterValue = (UIntPtr)wordptr;
                                    LastDisassembleData.Parameters = _colorReg + "ax" + _endColor + ',' + IntToHexSigned((UIntPtr)wordptr, 4);

                                    description = "add " + AStringUtils.IntToHex(wordptr, 4) + " to ax";



                                    offset += 2;
                                }
                                else
                                {
                                    if (RexW)
                                    {
                                        LastDisassembleData.ParameterValueType = ADisassemblerValueType.Value;
                                        LastDisassembleData.ParameterValue = (UIntPtr)dwordptr;
                                        LastDisassembleData.Parameters = _colorReg + "rax" + _endColor + ',' + IntToHexSigned((UIntPtr)(Int32)dwordptr, 8);

                                        description = "add " + AStringUtils.IntToHex(dwordptr, 8) + " to rax (sign extended)";
                                    }
                                    else
                                    {
                                        LastDisassembleData.ParameterValueType = ADisassemblerValueType.Value;
                                        LastDisassembleData.ParameterValue = (UIntPtr)dwordptr;
                                        LastDisassembleData.Parameters = _colorReg + "eax" + _endColor + ',' + IntToHexSigned((UIntPtr)dwordptr, 8);

                                        description = "add " + AStringUtils.IntToHex(dwordptr, 8) + " to eax";
                                    }
                                    offset += 4;
                                }

                                LastDisassembleData.Separators[LastDisassembleData.SeparatorCount] = 1;
                                LastDisassembleData.SeparatorCount += 1;
                            }
                            break;

                        case 0x6:
                            {
                                LastDisassembleData.OpCode = "push";
                                LastDisassembleData.Parameters = _colorReg + "es" + _endColor;
                                description = "place es on the stack";
                            }
                            break;

                        case 0x7:
                            {
                                LastDisassembleData.OpCode = "pop";
                                LastDisassembleData.Parameters = _colorReg + "es" + _endColor;
                                description = "remove es from the stack";
                            }
                            break;

                        case 0x8:
                            {
                                description = "logical inclusive or";
                                LastDisassembleData.OpCode = "or";
                                LastDisassembleData.Parameters = ModRm(memory, _prefix2, 1, 2, ref last) + R8(memory[1]);
                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                            }
                            break;

                        case 0x9:
                            {
                                description = "logical inclusive or";
                                LastDisassembleData.OpCode = "or";
                                if (_prefix2.Contains(0x66)) LastDisassembleData.Parameters = ModRm(memory, _prefix2, 1, 1, ref last) + R16(memory[1]);
                                else
                                    LastDisassembleData.Parameters = ModRm(memory, _prefix2, 1, 0, ref last) + R32(memory[1]);
                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                            }
                            break;

                        case 0xa:
                            {
                                description = "logical inclusive or";
                                LastDisassembleData.OpCode = "or";
                                LastDisassembleData.Parameters = R8(memory[1]) + ModRm(memory, _prefix2, 1, 2, ref last, ATmrPos.Right);
                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                            }
                            break;

                        case 0xb:
                            {
                                description = "logical inclusive or";
                                LastDisassembleData.OpCode = "or";
                                if (_prefix2.Contains(0x66)) LastDisassembleData.Parameters = R16(memory[1]) + ModRm(memory, _prefix2, 1, 1, ref last, ATmrPos.Right);
                                else
                                    LastDisassembleData.Parameters = R32(memory[1]) + ModRm(memory, _prefix2, 1, 0, ref last, ATmrPos.Right);

                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                            }
                            break;

                        case 0xc:
                            {
                                description = "logical inclusive or";
                                LastDisassembleData.OpCode = "or";
                                LastDisassembleData.Parameters = _colorReg + "al" + _endColor + ',' + IntToHexSigned((UIntPtr)memory[1], 2);
                                LastDisassembleData.ParameterValueType = ADisassemblerValueType.Value;
                                LastDisassembleData.ParameterValue = (UIntPtr)memory[1];

                                LastDisassembleData.Separators[LastDisassembleData.SeparatorCount] = 1;
                                LastDisassembleData.SeparatorCount += 1;

                                offset += 1;
                            }
                            break;

                        case 0xd:
                            {
                                description = "logical inclusive or";
                                LastDisassembleData.OpCode = "or";
                                LastDisassembleData.ParameterValueType = ADisassemblerValueType.Value;

                                if (_prefix2.Contains(0x66))
                                {
                                    var wordptr = memory.ToIntPtr(1).ReadUInt16();

                                    LastDisassembleData.ParameterValue = (UIntPtr)wordptr;
                                    LastDisassembleData.Parameters = _colorReg + "ax" + _endColor + ',' + IntToHexSigned(LastDisassembleData.ParameterValue, 4);

                                    offset += 2;
                                }
                                else
                                {
                                    var dwordptr = memory.ToIntPtr(1).ReadUInt32();
                                    LastDisassembleData.ParameterValue = (UIntPtr)dwordptr;

                                    if (RexW)
                                    {
                                        LastDisassembleData.Parameters = _colorReg + "rax" + _endColor + ',' + IntToHexSigned((UIntPtr)(int)(LastDisassembleData.ParameterValue), 8);
                                        description = description + " (sign-extended)";
                                    }
                                    else
                                        LastDisassembleData.Parameters = _colorReg + "eax" + _endColor + ',' + IntToHexSigned(LastDisassembleData.ParameterValue, 8);


                                    LastDisassembleData.Separators[LastDisassembleData.SeparatorCount] = 1;
                                    LastDisassembleData.SeparatorCount += 1;
                                    offset += 4;
                                }
                            }
                            break;

                        case 0xe:
                            {
                                description = "place cs on the stack";
                                LastDisassembleData.OpCode = "push";
                                LastDisassembleData.Parameters = _colorReg + "cs" + _endColor;
                            }
                            break;

                        case 0xf:
                            {  //simd extensions
                                if (_prefix2.Contains(0xf0))
                                    LastDisassembleData.Prefix = "lock ";
                                else
                                    LastDisassembleData.Prefix = ""; //these usually treat the f2/f3 prefix differently

                                switch (memory[1])
                                {
                                    case 0:
                                        {
                                            switch (GetReg(memory[2]))
                                            {
                                                case 0:
                                                    {
                                                        LastDisassembleData.OpCode = "sldt";
                                                        description = "store local descriptor table register";
                                                        if (_prefix2.Contains(0x66)) LastDisassembleData.Parameters = ModRm(memory, _prefix2, 2, 1, ref last, 16);
                                                        else
                                                            LastDisassembleData.Parameters = ModRm(memory, _prefix2, 2, 0, ref last);

                                                        offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                    }
                                                    break;

                                                case 1:
                                                    {
                                                        description = "store task register";
                                                        LastDisassembleData.OpCode = "str";
                                                        LastDisassembleData.Parameters = ModRm(memory, _prefix2, 2, 1, ref last, 16);
                                                        offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                    }
                                                    break;

                                                case 2:
                                                    {
                                                        description = "load local descriptor table register";
                                                        LastDisassembleData.OpCode = "lldt";
                                                        LastDisassembleData.Parameters = ModRm(memory, _prefix2, 2, 1, ref last, 16);
                                                        offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                    }
                                                    break;

                                                case 3:
                                                    {
                                                        description = "load task register";
                                                        LastDisassembleData.OpCode = "ltr";
                                                        LastDisassembleData.Parameters = ModRm(memory, _prefix2, 2, 1, ref last, 16);
                                                        offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                    }
                                                    break;

                                                case 4:
                                                    {
                                                        description = "verify a segment for reading";
                                                        LastDisassembleData.OpCode = "verr";
                                                        LastDisassembleData.Parameters = ModRm(memory, _prefix2, 2, 1, ref last, 16);
                                                        offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                    }
                                                    break;

                                                case 5:
                                                    {
                                                        description = "verify a segment for writing";
                                                        LastDisassembleData.OpCode = "verw";
                                                        LastDisassembleData.Parameters = ModRm(memory, _prefix2, 2, 1, ref last, 16);
                                                        offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                    }
                                                    break;
                                                default:
                                                    {
                                                        LastDisassembleData.OpCode = "db";
                                                        LastDisassembleData.Parameters = AStringUtils.IntToHex(memory[0], 2);
                                                        description = "not specified by the intel documentation";
                                                    }
                                                    break;

                                            }

                                        }
                                        break;

                                    case 0x1:
                                        {
                                            switch (memory[2])
                                            {
                                                case 0xc1:
                                                    {
                                                        description = "call to vm monitor by causing vm exit";
                                                        LastDisassembleData.OpCode = "vmcall";
                                                        offset += 2;
                                                    }
                                                    break;

                                                case 0xc2:
                                                    {
                                                        description = "launch virtual machine managed by current vmcs";
                                                        LastDisassembleData.OpCode = "vmlaunch";
                                                        offset += 2;
                                                    }
                                                    break;

                                                case 0xc3:
                                                    {
                                                        description = "resume virtual machine managed by current vmcs";
                                                        LastDisassembleData.OpCode = "vmresume";
                                                        offset += 2;
                                                    }
                                                    break;

                                                case 0xc4:
                                                    {
                                                        description = "leaves vmx operation";
                                                        LastDisassembleData.OpCode = "vmxoff";
                                                        offset += 2;
                                                    }
                                                    break;

                                                case 0xc8:
                                                    {
                                                        description = "set up monitor address";
                                                        LastDisassembleData.OpCode = "monitor";
                                                        offset += 2;
                                                    }
                                                    break;

                                                case 0xc9:
                                                    {
                                                        description = "Monitor wait";
                                                        LastDisassembleData.OpCode = "mwait";
                                                        offset += 2;
                                                    }
                                                    break;

                                                case 0xca:
                                                    {
                                                        description = "Clear AC flag in EFLAGS register";
                                                        LastDisassembleData.OpCode = "clac";
                                                        offset += 2;
                                                    }
                                                    break;

                                                case 0xd0:
                                                    {
                                                        description = "Get value of extended control register";
                                                        LastDisassembleData.OpCode = "xgetbv";
                                                        offset += 2;
                                                    }
                                                    break;

                                                case 0xd1:
                                                    {
                                                        description = "Set value of extended control register";
                                                        LastDisassembleData.OpCode = "xsetbv";
                                                        offset += 2;
                                                    }
                                                    break;

                                                case 0xd5:
                                                    {
                                                        description = "Transactional end";
                                                        LastDisassembleData.OpCode = "xend";
                                                        offset += 2;
                                                    }
                                                    break;

                                                case 0xd6:
                                                    {
                                                        description = "Test if in transactional execution";
                                                        LastDisassembleData.OpCode = "xtest";
                                                        offset += 2;
                                                    }
                                                    break;

                                                case 0xf8:
                                                    {
                                                        description = "Swap GS base register";
                                                        LastDisassembleData.OpCode = "swapgs";
                                                        offset += 2;
                                                    }
                                                    break;

                                                case 0xf9:
                                                    {
                                                        description = "Read time-stamp counter and processor ID";
                                                        LastDisassembleData.OpCode = "rdtscp";
                                                        offset += 2;
                                                    }
                                                    break;

                                                default:
                                                    {
                                                        switch (GetReg(memory[2]))
                                                        {
                                                            case 0:
                                                                {
                                                                    description = "store global descriptor table register";
                                                                    LastDisassembleData.OpCode = "sgdt";
                                                                    LastDisassembleData.Parameters = ModRm(memory, _prefix2, 2, 0, ref last);
                                                                    offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                                }
                                                                break;

                                                            case 1:
                                                                {
                                                                    description = "store interrupt descriptor table register";
                                                                    LastDisassembleData.OpCode = "sidt";
                                                                    LastDisassembleData.Parameters = ModRm(memory, _prefix2, 2, 0, ref last);
                                                                    offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                                }
                                                                break;

                                                            case 2:
                                                                {
                                                                    description = "load global descriptor table register";
                                                                    LastDisassembleData.OpCode = "lgdt";
                                                                    LastDisassembleData.Parameters = ModRm(memory, _prefix2, 2, 0, ref last);
                                                                    offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                                }
                                                                break;

                                                            case 3:
                                                                {
                                                                    description = "load interupt descriptor table register";
                                                                    LastDisassembleData.OpCode = "lidt";
                                                                    LastDisassembleData.Parameters = ModRm(memory, _prefix2, 2, 0, ref last);
                                                                    offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                                }
                                                                break;

                                                            case 4:
                                                                {
                                                                    description = "store machine status word";
                                                                    LastDisassembleData.OpCode = "smsw";

                                                                    if (_prefix2.Contains(0x66)) LastDisassembleData.Parameters = ModRm(memory, _prefix2, 2, 1, ref last);
                                                                    else LastDisassembleData.Parameters = ModRm(memory, _prefix2, 2, 0, ref last);
                                                                    offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                                }
                                                                break;

                                                            case 6:
                                                                {
                                                                    description = "load machine status word";
                                                                    LastDisassembleData.OpCode = "lmsw";
                                                                    LastDisassembleData.Parameters = ModRm(memory, _prefix2, 2, 1, ref last);
                                                                    offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                                }
                                                                break;

                                                            case 7:
                                                                {
                                                                    description = "invalidate tlb entry";
                                                                    LastDisassembleData.OpCode = "invplg";
                                                                    LastDisassembleData.Parameters = ModRm(memory, _prefix2, 2, 0, ref last);
                                                                    offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                                }
                                                                break;
                                                        }
                                                    }
                                                    break;
                                            }
                                        }
                                        break;

                                    case 0x2:
                                        {
                                            description = "load access rights byte";
                                            LastDisassembleData.OpCode = "lar";
                                            if (_prefix2.Contains(0x66)) LastDisassembleData.Parameters = R16(memory[2]) + ModRm(memory, _prefix2, 2, 1, ref last, ATmrPos.Right);
                                            else
                                                LastDisassembleData.Parameters = R32(memory[2]) + ModRm(memory, _prefix2, 2, 2, ref last, ATmrPos.Right);

                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                        }
                                        break;

                                    /*0f*/
                                    case 0x3:
                                        {
                                            description = "load segment limit";
                                            LastDisassembleData.OpCode = "lsl";
                                            if (_prefix2.Contains(0x66)) LastDisassembleData.Parameters = R16(memory[2]) + ModRm(memory, _prefix2, 2, 1, ref last, ATmrPos.Right);
                                            else
                                                LastDisassembleData.Parameters = R32(memory[2]) + ModRm(memory, _prefix2, 2, 2, ref last, ATmrPos.Right);

                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                        }
                                        break;

                                    case 0x5:
                                        {
                                            description = "fast system call";
                                            LastDisassembleData.OpCode = "syscall";
                                            offset += 1;
                                        }
                                        break;

                                    case 0x6:
                                        {
                                            description = "clear task-switched flag in cr0";
                                            LastDisassembleData.OpCode = "clts";
                                            offset += 1;
                                        }
                                        break;

                                    case 0x7:
                                        {
                                            description = "return from fast system call";
                                            LastDisassembleData.OpCode = "sysret";
                                            offset += 1;
                                        }
                                        break;

                                    case 0x8:
                                        {
                                            description = "invalidate internal caches";
                                            LastDisassembleData.OpCode = "invd";
                                            offset += 1;
                                        }
                                        break;

                                    case 0x9:
                                        {
                                            description = "write back and invalidate cache";
                                            LastDisassembleData.OpCode = "wbinvd";
                                            offset += 1;
                                        }
                                        break;

                                    case 0xb:
                                        {
                                            description = "undefined instruction(yes, this one really excists..)";
                                            LastDisassembleData.OpCode = "ud2";
                                            offset += 1;
                                        }
                                        break;

                                    case 0xd:
                                        {
                                            switch (GetReg(memory[2]))
                                            {
                                                case 1:
                                                    {
                                                        description = "Prefetch Data into Caches in Anticipation of a Write";
                                                        LastDisassembleData.OpCode = "prefetchw";
                                                        LastDisassembleData.Parameters = ModRm(memory, _prefix2, 2, 2, ref last);
                                                        offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                    }
                                                    break;

                                                case 2:
                                                    {
                                                        description = "Prefetch Vector Data Into Caches with Intent to Write and T1 Hint";
                                                        LastDisassembleData.OpCode = "prefetchwt1";
                                                        LastDisassembleData.Parameters = ModRm(memory, _prefix2, 2, 2, ref last);
                                                        offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                    }
                                                    break;
                                            }
                                        }
                                        break;


                                    case 0x10:
                                        {
                                            LastDisassembleData.IsFloat = true;

                                            if (_prefix2.Contains(0xf2))
                                            {
                                                description = "move scalar double-fp";
                                                _opCodeFlags.L = false; //LIG
                                                _opCodeFlags.SkipExtraRegOnMemoryAccess = true;
                                                LastDisassembleData.IsFloat64 = true;

                                                if (_hasVex)
                                                    LastDisassembleData.OpCode = "vmovsd";
                                                else
                                                    LastDisassembleData.OpCode = "movsd";

                                                _opCodeFlags.SkipExtraRegOnMemoryAccess = true;
                                                LastDisassembleData.Parameters = Xmm(memory[2]) + ModRm(memory, _prefix2, 2, 4, ref last, ATmrPos.Right);
                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                            else
                                            if (_prefix2.Contains(0xf3))
                                            {
                                                description = "move scalar single-fp";
                                                if (_hasVex)
                                                    LastDisassembleData.OpCode = "vmovss";
                                                else
                                                    LastDisassembleData.OpCode = "movss";

                                                _opCodeFlags.SkipExtraRegOnMemoryAccess = true;
                                                LastDisassembleData.Parameters = Xmm(memory[2]) + ModRm(memory, _prefix2, 2, 4, ref last, ATmrPos.Right);
                                                LastDisassembleData.DataSize = 4;
                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                            else
                                            if (_prefix2.Contains(0x66))
                                            {
                                                description = "move unaligned packed double-fp";
                                                if (_hasVex)
                                                    LastDisassembleData.OpCode = "lmovupd";
                                                else
                                                    LastDisassembleData.OpCode = "movupd";

                                                _opCodeFlags.SkipExtraReg = true;
                                                LastDisassembleData.Parameters = Xmm(memory[2]) + ModRm(memory, _prefix2, 2, 4, ref last, ATmrPos.Right);
                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                            else
                                            {
                                                description = "move unaligned four packed single-fp";
                                                if (_hasVex)
                                                    LastDisassembleData.OpCode = "vmovups";
                                                else
                                                    LastDisassembleData.OpCode = "movups";

                                                _opCodeFlags.SkipExtraReg = true;
                                                LastDisassembleData.Parameters = Xmm(memory[2]) + ModRm(memory, _prefix2, 2, 4, ref last, ATmrPos.Right);
                                                LastDisassembleData.DataSize = 4;
                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                        }
                                        break;

                                    case 0x11:
                                        {
                                            LastDisassembleData.IsFloat = true;
                                            if (_prefix2.Contains(0xf2))
                                            {
                                                description = "move scalar double-fp";
                                                if (_hasVex)
                                                    LastDisassembleData.OpCode = "vmovsd";
                                                else
                                                    LastDisassembleData.OpCode = "movsd";

                                                LastDisassembleData.IsFloat64 = true;

                                                _opCodeFlags.SkipExtraRegOnMemoryAccess = true;
                                                LastDisassembleData.Parameters = ModRm(memory, _prefix2, 2, 4, ref last, ATmrPos.Left) + Xmm(memory[2]);
                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                            else
                                            if (_prefix2.Contains(0xf3))
                                            {
                                                description = "move scalar single-fp";
                                                if (_hasVex)
                                                    LastDisassembleData.OpCode = "vmovss";
                                                else
                                                    LastDisassembleData.OpCode = "movss";

                                                _opCodeFlags.SkipExtraRegOnMemoryAccess = true;
                                                LastDisassembleData.Parameters = ModRm(memory, _prefix2, 2, 4, ref last) + Xmm(memory[2]);
                                                LastDisassembleData.DataSize = 4;
                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                            else
                                            if (_prefix2.Contains(0x66))
                                            {
                                                description = "move unaligned packed double-fp";
                                                if (_hasVex)
                                                    LastDisassembleData.OpCode = "lmovupd";
                                                else
                                                    LastDisassembleData.OpCode = "movupd";

                                                _opCodeFlags.SkipExtraRegOnMemoryAccess = true;
                                                LastDisassembleData.Parameters = ModRm(memory, _prefix2, 2, 4, ref last) + Xmm(memory[2]);
                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                            else
                                            {
                                                description = "move unaligned four packed single-fp";
                                                if (_hasVex)
                                                    LastDisassembleData.OpCode = "vmovups";
                                                else
                                                    LastDisassembleData.OpCode = "movups";

                                                _opCodeFlags.SkipExtraRegOnMemoryAccess = true;
                                                LastDisassembleData.Parameters = ModRm(memory, _prefix2, 2, 4, ref last) + Xmm(memory[2]);
                                                LastDisassembleData.DataSize = 4;
                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }

                                        }
                                        break;

                                    /*0f*/
                                    case 0x12:
                                        {
                                            if (_prefix2.Contains(0xf2))
                                            {
                                                description = "move one double-fp and duplicate";
                                                if (_hasVex)
                                                    LastDisassembleData.OpCode = "vmovddup";
                                                else
                                                    LastDisassembleData.OpCode = "movddup";

                                                LastDisassembleData.Parameters = Xmm(memory[2]) + ModRm(memory, _prefix2, 2, 4, ref last, ATmrPos.Right);
                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                            else
                                            if (_prefix2.Contains(0xf3))
                                            {
                                                description = "move packed single-fp Low and duplicate";
                                                if (_hasVex)
                                                    LastDisassembleData.OpCode = "vmovsldup";
                                                else
                                                    LastDisassembleData.OpCode = "movsldup";

                                                LastDisassembleData.Parameters = Xmm(memory[2]) + ModRm(memory, _prefix2, 2, 4, ref last, ATmrPos.Right);
                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                            else
                                            if (_prefix2.Contains(0x66))
                                            {
                                                description = "move low packed double-precision floating-point value";
                                                if (_hasVex)
                                                    LastDisassembleData.OpCode = "vmovlpd";
                                                else
                                                    LastDisassembleData.OpCode = "movlpd";

                                                LastDisassembleData.Parameters = Xmm(memory[2]) + ModRm(memory, _prefix2, 2, 4, ref last, ATmrPos.Right);
                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                            else
                                            {
                                                description = "high to low packed single-fp";

                                                if (GetMod(memory[2]) == 3)
                                                    LastDisassembleData.OpCode = "movhlps";
                                                else
                                                    LastDisassembleData.OpCode = "movlps";

                                                if (_hasVex)
                                                    LastDisassembleData.OpCode = 'v' + LastDisassembleData.OpCode;

                                                LastDisassembleData.Parameters = Xmm(memory[2]) + ModRm(memory, _prefix2, 2, 4, ref last, ATmrPos.Right);

                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                        }
                                        break;

                                    case 0x13:
                                        {
                                            LastDisassembleData.IsFloat = true;
                                            if (_prefix2.Contains(0x66))
                                            {
                                                description = "move low packed double-fp";
                                                if (_hasVex)
                                                    LastDisassembleData.OpCode = "vmovlpd";
                                                else
                                                    LastDisassembleData.OpCode = "movlpd";

                                                _opCodeFlags.SkipExtraReg = true;
                                                LastDisassembleData.Parameters = ModRm(memory, _prefix2, 2, 4, ref last) + Xmm(memory[2]);
                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                            else
                                            {
                                                description = "move low packed single-fp";

                                                if (_hasVex)
                                                    LastDisassembleData.OpCode = "vmovlps";
                                                else
                                                    LastDisassembleData.OpCode = "movlps";

                                                _opCodeFlags.SkipExtraReg = true;
                                                LastDisassembleData.Parameters = ModRm(memory, _prefix2, 2, 4, ref last) + Xmm(memory[2]);
                                                LastDisassembleData.DataSize = 4;
                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                        }
                                        break;

                                    /*0f*/
                                    case 0x14:
                                        {
                                            LastDisassembleData.IsFloat = true;
                                            if (_prefix2.Contains(0x66))
                                            {
                                                description = "unpack low packed single-fp";
                                                if (_hasVex)
                                                    LastDisassembleData.OpCode = "vunpcklpd";
                                                else
                                                    LastDisassembleData.OpCode = "unpcklpd";
                                                LastDisassembleData.Parameters = Xmm(memory[2]) + ModRm(memory, _prefix2, 2, 4, ref last, ATmrPos.Right);
                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                            else
                                            {
                                                description = "unpack low packed single-fp";
                                                if (_hasVex)
                                                    LastDisassembleData.OpCode = "vunpcklps";
                                                else
                                                    LastDisassembleData.OpCode = "unpcklps";
                                                LastDisassembleData.Parameters = Xmm(memory[2]) + ModRm(memory, _prefix2, 2, 4, ref last, ATmrPos.Right);
                                                LastDisassembleData.DataSize = 4;
                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                        }
                                        break;

                                    case 0x15:
                                        {
                                            LastDisassembleData.IsFloat = true;
                                            if (_prefix2.Contains(0x66))
                                            {
                                                description = "unpack and interleave high packed double-fp";
                                                if (_hasVex)
                                                    LastDisassembleData.OpCode = "vunpckhpd";
                                                else
                                                    LastDisassembleData.OpCode = "unpckhpd";
                                                LastDisassembleData.Parameters = Xmm(memory[2]) + ModRm(memory, _prefix2, 2, 4, ref last, ATmrPos.Right);
                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                            else
                                            {
                                                description = "unpack high packed single-fp";
                                                if (_hasVex)
                                                    LastDisassembleData.OpCode = "unpckhps";
                                                else
                                                    LastDisassembleData.OpCode = "unpckhps";
                                                LastDisassembleData.Parameters = Xmm(memory[2]) + ModRm(memory, _prefix2, 2, 4, ref last, ATmrPos.Right);
                                                LastDisassembleData.DataSize = 4;
                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                        }
                                        break;

                                    case 0x16:
                                        {
                                            LastDisassembleData.IsFloat = true;
                                            if (_prefix2.Contains(0xf3))
                                            {
                                                description = "move packed single-fp high and duplicate";
                                                if (_hasVex)
                                                    LastDisassembleData.OpCode = "vmovshdup";
                                                else
                                                    LastDisassembleData.OpCode = "movshdup";

                                                LastDisassembleData.Parameters = Xmm(memory[2]) + ModRm(memory, _prefix2, 2, 4, ref last, ATmrPos.Right);
                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                            else
                                            if (_prefix2.Contains(0x66))
                                            {
                                                description = "move high packed double-precision floating-point value";
                                                if (_hasVex)
                                                    LastDisassembleData.OpCode = "vmovhpd";
                                                else
                                                    LastDisassembleData.OpCode = "movhpd";

                                                LastDisassembleData.Parameters = Xmm(memory[2]) + ModRm(memory, _prefix2, 2, 4, ref last, ATmrPos.Right);
                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                            else
                                            {
                                                description = "high to low packed single-fp";

                                                if (GetMod(memory[2]) == 3)
                                                    LastDisassembleData.OpCode = "movlhps";
                                                else
                                                    LastDisassembleData.OpCode = "movhps";

                                                if (_hasVex)
                                                    LastDisassembleData.OpCode = 'v' + LastDisassembleData.OpCode;

                                                LastDisassembleData.Parameters = Xmm(memory[2]) + ModRm(memory, _prefix2, 2, 4, ref last, ATmrPos.Right);
                                                LastDisassembleData.DataSize = 4;
                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                        }
                                        break;

                                    case 0x17:
                                        {
                                            LastDisassembleData.IsFloat = true;
                                            if (_prefix2.Contains(0x66))
                                            {
                                                description = "move high packed double-precision floating-point value";
                                                if (_hasVex)
                                                    LastDisassembleData.OpCode = "vmovhpd";
                                                else
                                                    LastDisassembleData.OpCode = "movhpd";

                                                LastDisassembleData.Parameters = ModRm(memory, _prefix2, 2, 4, ref last) + Xmm(memory[2]);
                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                            else
                                            {
                                                description = "high to low packed single-fp";
                                                if (_hasVex)
                                                    LastDisassembleData.OpCode = "vmovhps";
                                                else
                                                    LastDisassembleData.OpCode = "movhps";
                                                LastDisassembleData.Parameters = ModRm(memory, _prefix2, 2, 4, ref last) + Xmm(memory[2]);
                                                LastDisassembleData.DataSize = 4;
                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                        }
                                        break;

                                    case 0x18:
                                        {
                                            switch (GetReg(memory[2]))
                                            {
                                                case 0:
                                                    {
                                                        description = "prefetch";
                                                        LastDisassembleData.OpCode = "prefetchnta";
                                                        LastDisassembleData.Parameters = ModRm(memory, _prefix2, 2, 2, ref last);
                                                        offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                    }
                                                    break;

                                                case 1:
                                                    {
                                                        description = "prefetch";
                                                        LastDisassembleData.OpCode = "prefetchto";
                                                        LastDisassembleData.Parameters = ModRm(memory, _prefix2, 2, 2, ref last);
                                                        offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                    }
                                                    break;

                                                case 2:
                                                    {
                                                        description = "prefetch";
                                                        LastDisassembleData.OpCode = "prefetcht1";
                                                        LastDisassembleData.Parameters = ModRm(memory, _prefix2, 2, 2, ref last);
                                                        offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                    }
                                                    break;

                                                case 3:
                                                    {
                                                        description = "prefetch";
                                                        LastDisassembleData.OpCode = "prefetcht2";
                                                        LastDisassembleData.Parameters = ModRm(memory, _prefix2, 2, 2, ref last);
                                                        offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                    }
                                                    break;

                                            }
                                        }
                                        break;

                                    case 0x1f:
                                        {
                                            switch (GetReg(memory[2]))
                                            {
                                                case 0:
                                                    {
                                                        description = "multibyte nop";
                                                        LastDisassembleData.OpCode = "nop";


                                                        if (RexW)
                                                            LastDisassembleData.Parameters = ModRm(memory, _prefix2, 2, 0, ref last, 64);
                                                        else
                                                        {
                                                            if (_prefix2.Contains(0x66))
                                                                LastDisassembleData.Parameters = ModRm(memory, _prefix2, 2, 0, ref last, 16);
                                                            else
                                                                LastDisassembleData.Parameters = ModRm(memory, _prefix2, 2, 0, ref last, 32);
                                                        }

                                                        offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                    }
                                                    break;
                                            }
                                        }
                                        break;



                                    case 0x20:
                                        {
                                            description = "move from control register";
                                            LastDisassembleData.OpCode = "mov";
                                            LastDisassembleData.Parameters = ModRm(memory, _prefix2, 2, 0, ref last) + Cr(memory[2]);
                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                        }
                                        break;

                                    case 0x21:
                                        {
                                            description = "move from debug register";
                                            LastDisassembleData.OpCode = "mov";
                                            LastDisassembleData.Parameters = ModRm(memory, _prefix2, 2, 0, ref last) + Dr(memory[2]);
                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                        }
                                        break;

                                    case 0x22:
                                        {
                                            description = "move to control register";
                                            LastDisassembleData.OpCode = "mov";
                                            LastDisassembleData.Parameters = Cr(memory[2]) + ModRm(memory, _prefix2, 2, 0, ref last, ATmrPos.Right);
                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                        }
                                        break;

                                    case 0x23:
                                        {
                                            description = "move to debug register";
                                            LastDisassembleData.OpCode = "mov";
                                            LastDisassembleData.Parameters = Dr(memory[2]) + ModRm(memory, _prefix2, 2, 0, ref last, ATmrPos.Right);
                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                        }
                                        break;

                                    case 0x28:
                                        {
                                            if (_prefix2.Contains(0x66))
                                            {
                                                description = "move aligned packed double-fp values";
                                                if (_hasVex)
                                                    LastDisassembleData.OpCode = "vmovapd";
                                                else
                                                    LastDisassembleData.OpCode = "movapd";

                                                _opCodeFlags.SkipExtraReg = true;
                                                LastDisassembleData.Parameters = Xmm(memory[2]) + ModRm(memory, _prefix2, 2, 4, ref last, ATmrPos.Right);
                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                            else
                                            {
                                                description = "move aligned four packed single-fp";
                                                if (_hasVex)
                                                    LastDisassembleData.OpCode = "vmovaps";
                                                else
                                                    LastDisassembleData.OpCode = "movaps";

                                                _opCodeFlags.SkipExtraReg = true;
                                                LastDisassembleData.Parameters = Xmm(memory[2]) + ModRm(memory, _prefix2, 2, 4, ref last, ATmrPos.Right);
                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                        }
                                        break;

                                    case 0x29:
                                        {
                                            if (_prefix2.Contains(0x66))
                                            {
                                                description = "move aligned packed double-fp values";
                                                if (_hasVex)
                                                    LastDisassembleData.OpCode = "vmovapd";
                                                else
                                                    LastDisassembleData.OpCode = "movapd";

                                                _opCodeFlags.SkipExtraReg = true;
                                                LastDisassembleData.Parameters = ModRm(memory, _prefix2, 2, 4, ref last) + Xmm(memory[2]);
                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                            else
                                            {
                                                description = "move aligned four packed single-fp";
                                                if (_hasVex)
                                                    LastDisassembleData.OpCode = "vmovaps";
                                                else
                                                    LastDisassembleData.OpCode = "movaps";

                                                _opCodeFlags.SkipExtraReg = true;
                                                LastDisassembleData.Parameters = ModRm(memory, _prefix2, 2, 4, ref last) + Xmm(memory[2]);
                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                        }
                                        break;


                                    case 0x2a:
                                        {
                                            if (_prefix2.Contains(0xf2))
                                            {

                                                description = "convert doubleword integer to scalar doubleprecision floating-point value";
                                                if (_hasVex)
                                                    LastDisassembleData.OpCode = "vcvtsi2sd";
                                                else
                                                    LastDisassembleData.OpCode = "cvtsi2sd";

                                                LastDisassembleData.Parameters = Xmm(memory[2]) + ModRm(memory, _prefix2, 2, 4, ref last, ATmrPos.Right);

                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                            else
                                            if (_prefix2.Contains(0xf3))
                                            {

                                                description = "scalar signed int32 to single-fp conversion";
                                                if (_hasVex)
                                                    LastDisassembleData.OpCode = "vcvtsi2ss";
                                                else
                                                    LastDisassembleData.OpCode = "cvtsi2ss";

                                                LastDisassembleData.Parameters = Xmm(memory[2]) + ModRm(memory, _prefix2, 2, 4, ref last, ATmrPos.Right);

                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                            else
                                            {
                                                if (_prefix2.Contains(0x66))
                                                {
                                                    description = "convert packed dword's to packed dp-fp's";
                                                    LastDisassembleData.OpCode = "cvtpi2pd";
                                                    LastDisassembleData.Parameters = Xmm(memory[2]) + ModRm(memory, _prefix2, 2, 3, ref last, ATmrPos.Right);

                                                    offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                }
                                                else
                                                {
                                                    description = "packed signed int32 to packed single-fp conversion";
                                                    LastDisassembleData.OpCode = "cvtpi2ps";
                                                    LastDisassembleData.Parameters = Xmm(memory[2]) + ModRm(memory, _prefix2, 2, 4, ref last, ATmrPos.Right);

                                                    offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                }
                                            }
                                        }
                                        break;

                                    case 0x2b:
                                        {
                                            if (_prefix2.Contains(0x66))
                                            {
                                                if (_hasVex)
                                                    LastDisassembleData.OpCode = "vmovntpd";
                                                else
                                                    LastDisassembleData.OpCode = "movntpd";
                                                LastDisassembleData.Parameters = ModRm(memory, _prefix2, 2, 4, ref last) + Xmm(memory[2]);
                                                description = "move packed double-precision floating-point using non-temporal hint";
                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                            else
                                            {
                                                if (_hasVex)
                                                    LastDisassembleData.OpCode = "vmovntps";
                                                else
                                                    LastDisassembleData.OpCode = "movntps";
                                                LastDisassembleData.Parameters = ModRm(memory, _prefix2, 2, 4, ref last) + Xmm(memory[2]);
                                                description = "move aligned four packed single-fp non temporal";
                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                        }
                                        break;

                                    case 0x2c:
                                        {
                                            if (_prefix2.Contains(0xf2))
                                            {

                                                description = "convert with truncation scalar double-precision floating point value to signed doubleword integer";
                                                if (_hasVex)
                                                    LastDisassembleData.OpCode = "vcvttsd2si";
                                                else
                                                    LastDisassembleData.OpCode = "cvttsd2si";

                                                _opCodeFlags.SkipExtraReg = true;
                                                LastDisassembleData.Parameters = R32(memory[2]) + ModRm(memory, _prefix2, 2, 4, ref last, ATmrPos.Right);
                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                            else
                                            if (_prefix2.Contains(0xf3))
                                            {
                                                description = "scalar single-fp to signed int32 conversion (truncate)";
                                                if (_hasVex)
                                                    LastDisassembleData.OpCode = "vcvttss2si";
                                                else
                                                    LastDisassembleData.OpCode = "cvttss2si";

                                                _opCodeFlags.SkipExtraReg = true;
                                                LastDisassembleData.Parameters = R32(memory[2]) + ModRm(memory, _prefix2, 2, 4, ref last, ATmrPos.Right);
                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                            else
                                            {
                                                if (_prefix2.Contains(0x66))
                                                {
                                                    description = "packed doubleprecision-fp to packed dword conversion (truncate)";
                                                    LastDisassembleData.OpCode = "cvttpd2pi";
                                                    LastDisassembleData.Parameters = Mm(memory[2]) + ModRm(memory, _prefix2, 2, 4, ref last, ATmrPos.Right);
                                                    offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                }
                                                else
                                                {
                                                    description = "packed single-fp to packed int32 conversion (truncate)";
                                                    LastDisassembleData.OpCode = "cvttps2pi";
                                                    LastDisassembleData.Parameters = Mm(memory[2]) + ModRm(memory, _prefix2, 2, 4, ref last, ATmrPos.Right);
                                                    offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                }
                                            }
                                        }
                                        break;

                                    case 0x2d:
                                        {
                                            LastDisassembleData.IsFloat = true;
                                            if (_prefix2.Contains(0xf2))
                                            {
                                                description = "convert scalar double-precision floating-point value to doubleword integer";
                                                if (_hasVex)
                                                    LastDisassembleData.OpCode = "vcvtsd2si";
                                                else
                                                    LastDisassembleData.OpCode = "cvtsd2si";

                                                _opCodeFlags.SkipExtraReg = true;
                                                LastDisassembleData.Parameters = R32(memory[2]) + ModRm(memory, _prefix2, 2, 4, ref last, ATmrPos.Right);
                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                            else
                                            if (_prefix2.Contains(0xf3))
                                            {
                                                description = "scalar single-fp to signed int32 conversion";
                                                if (_hasVex)
                                                    LastDisassembleData.OpCode = "vcvtss2si";
                                                else
                                                    LastDisassembleData.OpCode = "cvtss2si";

                                                _opCodeFlags.SkipExtraReg = true;
                                                LastDisassembleData.Parameters = R32(memory[2]) + ModRm(memory, _prefix2, 2, 4, ref last, ATmrPos.Right);
                                                LastDisassembleData.DataSize = 4;
                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                            else
                                            {
                                                if (_prefix2.Contains(0x66))
                                                {
                                                    description = "convert 2 packed dp-fp's from param 2 to packed signed dword in param1";
                                                    LastDisassembleData.OpCode = "cvtpi2ps";
                                                    LastDisassembleData.Parameters = Mm(memory[2]) + ModRm(memory, _prefix2, 2, 4, ref last, ATmrPos.Right);
                                                    offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                }
                                                else
                                                {
                                                    description = "packed single-fp to packed int32 conversion";
                                                    LastDisassembleData.OpCode = "cvtps2pi";
                                                    LastDisassembleData.Parameters = Mm(memory[2]) + ModRm(memory, _prefix2, 2, 4, ref last, ATmrPos.Right);
                                                    LastDisassembleData.DataSize = 4;
                                                    offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                }
                                            }
                                        }
                                        break;

                                    case 0x2e:
                                        {
                                            LastDisassembleData.IsFloat = true;
                                            if (_prefix2.Contains(0x66))
                                            {
                                                description = "unordered scalar double-fp compare and set eflags";
                                                if (_hasVex)
                                                    LastDisassembleData.OpCode = "vucomisd";
                                                else
                                                    LastDisassembleData.OpCode = "ucomisd";

                                                _opCodeFlags.SkipExtraReg = true;
                                                LastDisassembleData.Parameters = Xmm(memory[2]) + ModRm(memory, _prefix2, 2, 4, ref last, ATmrPos.Right);
                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                            else
                                            {
                                                description = "unordered scalar single-fp compare and set eflags";
                                                if (_hasVex)
                                                    LastDisassembleData.OpCode = "vucomiss";
                                                else
                                                    LastDisassembleData.OpCode = "ucomiss";

                                                _opCodeFlags.SkipExtraReg = true;
                                                LastDisassembleData.Parameters = Xmm(memory[2]) + ModRm(memory, _prefix2, 2, 4, ref last, ATmrPos.Right);
                                                LastDisassembleData.DataSize = 4;
                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                        }
                                        break;


                                    case 0x2f:
                                        {
                                            LastDisassembleData.IsFloat = true;
                                            if (_prefix2.Contains(0x66))
                                            {
                                                description = "compare scalar ordered double-precision floating point values and set eflags";
                                                if (_hasVex)
                                                    LastDisassembleData.OpCode = "vcomisd";
                                                else
                                                    LastDisassembleData.OpCode = "comisd";
                                                _opCodeFlags.SkipExtraReg = true;

                                                LastDisassembleData.Parameters = Xmm(memory[2]) + ModRm(memory, _prefix2, 2, 4, ref last, ATmrPos.Right);
                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                            else
                                            {
                                                description = "scalar ordered single-fp compare and set eflags";
                                                if (_hasVex)
                                                    LastDisassembleData.OpCode = "vcomiss";
                                                else
                                                    LastDisassembleData.OpCode = "comiss";

                                                _opCodeFlags.SkipExtraReg = true;
                                                LastDisassembleData.Parameters = Xmm(memory[2]) + ModRm(memory, _prefix2, 2, 4, ref last, ATmrPos.Right);
                                                LastDisassembleData.DataSize = 4;
                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                        }
                                        break;

                                    case 0x30:
                                        {
                                            description = "write to model specific register";
                                            LastDisassembleData.OpCode = "wrmsr";
                                            offset += 1;
                                        }
                                        break;

                                    case 0x31:
                                        {
                                            description = "read time-stamp counter";
                                            LastDisassembleData.OpCode = "rdtsc";
                                            offset += 1;
                                        }
                                        break;

                                    case 0x32:
                                        {
                                            description = "read from model specific register";
                                            LastDisassembleData.OpCode = "rdmsr";
                                            offset += 1;
                                        }
                                        break;

                                    case 0x33:
                                        {
                                            description = "read performance-monitoring counters";
                                            LastDisassembleData.OpCode = "rdpmc";
                                            offset += 1;
                                        }
                                        break;

                                    case 0x34:
                                        {
                                            description = "fast transistion to system call entry point";
                                            LastDisassembleData.OpCode = "sysenter";
                                            LastDisassembleData.IsRet = true;
                                            offset += 1;
                                        }
                                        break;

                                    case 0x35:
                                        {
                                            description = "fast transistion from system call entry point";
                                            LastDisassembleData.OpCode = "sysexit";
                                            offset += 1;
                                        }
                                        break;

                                    case 0x37:
                                        {
                                            description = "Safermode multipurpose function";
                                            LastDisassembleData.OpCode = "getsec";
                                            offset += 1;
                                        }
                                        break;

                                    /*0f*/
                                    case 0x38:
                                        {
                                            switch (memory[2])
                                            {
                                                case 0:
                                                    {
                                                        description = "Packed shuffle bytes";
                                                        LastDisassembleData.OpCode = "pshufb";

                                                        if (_prefix2.Contains(0x66))
                                                        {
                                                            LastDisassembleData.Parameters = Xmm(memory[3]) + ModRm(memory, _prefix2, 3, 4, ref last, ATmrPos.Right);

                                                            if (_hasVex)
                                                                LastDisassembleData.OpCode = 'v' + LastDisassembleData.OpCode;
                                                        }
                                                        else
                                                            LastDisassembleData.Parameters = Mm(memory[3]) + ModRm(memory, _prefix2, 3, 3, ref last, ATmrPos.Right);
                                                        offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                    }
                                                    break;

                                                case 0x1:
                                                    {
                                                        description = "Packed horizontal add";
                                                        LastDisassembleData.OpCode = "phaddw";

                                                        if (_prefix2.Contains(0x66))
                                                        {
                                                            LastDisassembleData.Parameters = Xmm(memory[3]) + ModRm(memory, _prefix2, 3, 4, ref last, ATmrPos.Right);

                                                            if (_hasVex)
                                                                LastDisassembleData.OpCode = 'v' + LastDisassembleData.OpCode;
                                                        }
                                                        else
                                                            LastDisassembleData.Parameters = Mm(memory[3]) + ModRm(memory, _prefix2, 3, 3, ref last, ATmrPos.Right);
                                                        offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                    }
                                                    break;

                                                /*0f*//*38*/
                                                case 0x2:
                                                    {
                                                        description = "Packed horizontal add";
                                                        LastDisassembleData.OpCode = "phaddd";

                                                        if (_prefix2.Contains(0x66))
                                                        {
                                                            LastDisassembleData.Parameters = Xmm(memory[3]) + ModRm(memory, _prefix2, 3, 4, ref last, ATmrPos.Right);

                                                            if (_hasVex)
                                                                LastDisassembleData.OpCode = 'v' + LastDisassembleData.OpCode;
                                                        }
                                                        else
                                                            LastDisassembleData.Parameters = Mm(memory[3]) + ModRm(memory, _prefix2, 3, 3, ref last, ATmrPos.Right);
                                                        offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                    }
                                                    break;

                                                case 0x3:
                                                    {
                                                        description = "Packed horizontal add and saturate";
                                                        LastDisassembleData.OpCode = "phaddsw";

                                                        if (_prefix2.Contains(0x66))
                                                        {
                                                            LastDisassembleData.Parameters = Xmm(memory[3]) + ModRm(memory, _prefix2, 3, 4, ref last, ATmrPos.Right);

                                                            if (_hasVex)
                                                                LastDisassembleData.OpCode = 'v' + LastDisassembleData.OpCode;
                                                        }
                                                        else
                                                            LastDisassembleData.Parameters = Mm(memory[3]) + ModRm(memory, _prefix2, 3, 3, ref last, ATmrPos.Right);
                                                        offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                    }
                                                    break;

                                                case 0x4:
                                                    {
                                                        description = "Multiply and add signed and unsigned bytes";
                                                        LastDisassembleData.OpCode = "pmaddubsw";

                                                        if (_prefix2.Contains(0x66))
                                                        {
                                                            LastDisassembleData.Parameters = Xmm(memory[3]) + ModRm(memory, _prefix2, 3, 4, ref last, ATmrPos.Right);

                                                            if (_hasVex)
                                                                LastDisassembleData.OpCode = 'v' + LastDisassembleData.OpCode;
                                                        }
                                                        else
                                                            LastDisassembleData.Parameters = Mm(memory[3]) + ModRm(memory, _prefix2, 3, 3, ref last, ATmrPos.Right);
                                                        offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                    }
                                                    break;

                                                /*0f*//*38*/
                                                case 0x5:
                                                    {
                                                        description = "Packed horizontal subtract";
                                                        LastDisassembleData.OpCode = "phsubw";

                                                        if (_prefix2.Contains(0x66))
                                                        {
                                                            LastDisassembleData.Parameters = Xmm(memory[3]) + ModRm(memory, _prefix2, 3, 4, ref last, ATmrPos.Right);

                                                            if (_hasVex)
                                                                LastDisassembleData.OpCode = 'v' + LastDisassembleData.OpCode;
                                                        }
                                                        else
                                                            LastDisassembleData.Parameters = Mm(memory[3]) + ModRm(memory, _prefix2, 3, 3, ref last, ATmrPos.Right);
                                                        offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                    }
                                                    break;

                                                case 0x6:
                                                    {
                                                        description = "Packed horizontal subtract";
                                                        LastDisassembleData.OpCode = "phsubd";

                                                        if (_prefix2.Contains(0x66))
                                                        {
                                                            LastDisassembleData.Parameters = Xmm(memory[3]) + ModRm(memory, _prefix2, 3, 4, ref last, ATmrPos.Right);

                                                            if (_hasVex)
                                                                LastDisassembleData.OpCode = 'v' + LastDisassembleData.OpCode;
                                                        }
                                                        else
                                                            LastDisassembleData.Parameters = Mm(memory[3]) + ModRm(memory, _prefix2, 3, 3, ref last, ATmrPos.Right);
                                                        offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                    }
                                                    break;

                                                case 0x7:
                                                    {
                                                        description = "Packed horizontal subtract";
                                                        LastDisassembleData.OpCode = "phsubsw";

                                                        if (_prefix2.Contains(0x66))
                                                        {
                                                            LastDisassembleData.Parameters = Xmm(memory[3]) + ModRm(memory, _prefix2, 3, 4, ref last, ATmrPos.Right);

                                                            if (_hasVex)
                                                                LastDisassembleData.OpCode = 'v' + LastDisassembleData.OpCode;
                                                        }
                                                        else
                                                            LastDisassembleData.Parameters = Mm(memory[3]) + ModRm(memory, _prefix2, 3, 3, ref last, ATmrPos.Right);
                                                        offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                    }
                                                    break;

                                                case 0x8:
                                                    {
                                                        description = "Packed SIGN";
                                                        LastDisassembleData.OpCode = "psignb";

                                                        if (_prefix2.Contains(0x66))
                                                        {
                                                            LastDisassembleData.Parameters = Xmm(memory[3]) + ModRm(memory, _prefix2, 3, 4, ref last, ATmrPos.Right);

                                                            if (_hasVex)
                                                                LastDisassembleData.OpCode = 'v' + LastDisassembleData.OpCode;
                                                        }
                                                        else
                                                            LastDisassembleData.Parameters = Mm(memory[3]) + ModRm(memory, _prefix2, 3, 3, ref last, ATmrPos.Right);
                                                        offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                    }
                                                    break;

                                                case 0x9:
                                                    {
                                                        description = "Packed SIGN";
                                                        LastDisassembleData.OpCode = "psignw";

                                                        if (_prefix2.Contains(0x66))
                                                        {
                                                            LastDisassembleData.Parameters = Xmm(memory[3]) + ModRm(memory, _prefix2, 3, 4, ref last, ATmrPos.Right);

                                                            if (_hasVex)
                                                                LastDisassembleData.OpCode = 'v' + LastDisassembleData.OpCode;
                                                        }
                                                        else
                                                            LastDisassembleData.Parameters = Mm(memory[3]) + ModRm(memory, _prefix2, 3, 3, ref last, ATmrPos.Right);
                                                        offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                    }
                                                    break;

                                                case 0xa:
                                                    {
                                                        description = "Packed SIGN";
                                                        LastDisassembleData.OpCode = "psignd";

                                                        if (_prefix2.Contains(0x66))
                                                        {
                                                            LastDisassembleData.Parameters = Xmm(memory[3]) + ModRm(memory, _prefix2, 3, 4, ref last, ATmrPos.Right);

                                                            if (_hasVex)
                                                                LastDisassembleData.OpCode = 'v' + LastDisassembleData.OpCode;
                                                        }
                                                        else
                                                            LastDisassembleData.Parameters = Mm(memory[3]) + ModRm(memory, _prefix2, 3, 3, ref last, ATmrPos.Right);
                                                        offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                    }
                                                    break;

                                                /*0f*//*38*/
                                                case 0xb:
                                                    {
                                                        description = "Packed multiply high with round and scale";
                                                        LastDisassembleData.OpCode = "phmulhrsw";

                                                        if (_prefix2.Contains(0x66))
                                                        {
                                                            LastDisassembleData.Parameters = Xmm(memory[3]) + ModRm(memory, _prefix2, 3, 4, ref last, ATmrPos.Right);

                                                            if (_hasVex)
                                                                LastDisassembleData.OpCode = 'v' + LastDisassembleData.OpCode;
                                                        }
                                                        else
                                                            LastDisassembleData.Parameters = Mm(memory[3]) + ModRm(memory, _prefix2, 3, 3, ref last, ATmrPos.Right);
                                                        offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                    }
                                                    break;

                                                /*0f*//*38*/
                                                case 0xc:
                                                    {
                                                        if (_prefix2.Contains(0x66))
                                                        {
                                                            if (_hasVex)
                                                            {
                                                                description = "permute single-precision floating-point values";
                                                                LastDisassembleData.OpCode = "vpermilps";
                                                                LastDisassembleData.Parameters = Xmm(memory[3]) + ModRm(memory, _prefix2, 3, 4, ref last, ATmrPos.Right);

                                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                            }
                                                        }

                                                    }
                                                    break;

                                                /*0f*//*38*/
                                                case 0xd:
                                                    {
                                                        if (_prefix2.Contains(0x66))
                                                        {
                                                            if (_hasVex)
                                                            {
                                                                description = "permute double-precision floating-point values";
                                                                LastDisassembleData.OpCode = "vpermilpd";
                                                                LastDisassembleData.Parameters = Xmm(memory[3]) + ModRm(memory, _prefix2, 3, 4, ref last, ATmrPos.Right);

                                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                            }
                                                        }

                                                    }
                                                    break;

                                                /*0f*//*38*/
                                                case 0xe:
                                                    {
                                                        if (_prefix2.Contains(0x66))
                                                        {
                                                            if (_hasVex)
                                                            {
                                                                description = "Packed bit test";
                                                                LastDisassembleData.OpCode = "vtestps";
                                                                _opCodeFlags.SkipExtraReg = true;
                                                                LastDisassembleData.Parameters = Xmm(memory[3]) + ModRm(memory, _prefix2, 3, 4, ref last, ATmrPos.Right);

                                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                            }
                                                        }
                                                    }
                                                    break;

                                                /*0f*//*38*/
                                                case 0xf:
                                                    {
                                                        if (_prefix2.Contains(0x66))
                                                        {
                                                            if (_hasVex)
                                                            {
                                                                description = "Packed bit test";
                                                                LastDisassembleData.OpCode = "vtestpd";
                                                                _opCodeFlags.SkipExtraReg = true;
                                                                LastDisassembleData.Parameters = Xmm(memory[3]) + ModRm(memory, _prefix2, 3, 4, ref last, ATmrPos.Right);

                                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                            }
                                                        }
                                                    }
                                                    break;

                                                case 0x10:
                                                    {
                                                        description = "Variable blend packed bytes";
                                                        if (_prefix2.Contains(0x66))
                                                        {
                                                            if (_hasVex)
                                                            {
                                                                LastDisassembleData.OpCode = "vpblendvb";
                                                                LastDisassembleData.Parameters = Xmm(memory[3]) + ModRm(memory, _prefix2, 3, 4, ref last, ATmrPos.Right);
                                                                LastDisassembleData.Parameters = LastDisassembleData.Parameters + ',' + RegNrToStr(ARegisterType.RtXmm, memory[(int)last]);
                                                                offset += 1;
                                                            }
                                                            else
                                                            {
                                                                LastDisassembleData.OpCode = "pblendvb";
                                                                LastDisassembleData.Parameters = Xmm(memory[3]) + ModRm(memory, _prefix2, 3, 4, ref last, ATmrPos.Right) + ',' + RegNrToStr(ARegisterType.RtXmm, 0);
                                                            }
                                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                        }
                                                    }
                                                    break;

                                                /*0f*//*38*/
                                                case 0x13:
                                                    {
                                                        if (_prefix2.Contains(0x66))
                                                        {
                                                            description = "Convert 16-bit FP values to single-precision FP values";
                                                            LastDisassembleData.OpCode = "vcvtph2ps";

                                                            LastDisassembleData.Parameters = Xmm(memory[3]) + ModRm(memory, _prefix2, 3, 4, ref last, ATmrPos.Right);
                                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                        }
                                                    }
                                                    break;


                                                case 0x14:
                                                    {
                                                        description = "Variable blend packed single precision floating-point values";
                                                        if (_prefix2.Contains(0x66))
                                                        {
                                                            if (_hasVex)
                                                            {
                                                                LastDisassembleData.OpCode = "vblendvps";
                                                                LastDisassembleData.Parameters = Xmm(memory[3]) + ModRm(memory, _prefix2, 3, 4, ref last, ATmrPos.Right);
                                                                LastDisassembleData.Parameters = LastDisassembleData.Parameters + ',' + RegNrToStr(ARegisterType.RtXmm, memory[(int)last]);
                                                                offset += 1;
                                                            }
                                                            else
                                                            {
                                                                LastDisassembleData.OpCode = "blendvps";
                                                                LastDisassembleData.Parameters = Xmm(memory[3]) + ModRm(memory, _prefix2, 3, 4, ref last, ATmrPos.Right) + ',' + RegNrToStr(ARegisterType.RtXmm, 0);
                                                            }
                                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                        }
                                                    }
                                                    break;

                                                case 0x15:
                                                    {
                                                        description = "Variable blend packed double precision floating-point values";
                                                        if (_prefix2.Contains(0x66))
                                                        {
                                                            if (_hasVex)
                                                            {
                                                                LastDisassembleData.OpCode = "vblendvpd invalid";
                                                                LastDisassembleData.Parameters = Xmm(memory[3]) + ModRm(memory, _prefix2, 3, 4, ref last, ATmrPos.Right);
                                                                LastDisassembleData.Parameters = LastDisassembleData.Parameters + ',' + RegNrToStr(ARegisterType.RtXmm, memory[(int)last]);
                                                                offset += 1;
                                                            }
                                                            else
                                                            {
                                                                LastDisassembleData.OpCode = "blendvpd";
                                                                LastDisassembleData.Parameters = Xmm(memory[3]) + ModRm(memory, _prefix2, 3, 4, ref last, ATmrPos.Right) + ',' + _colorReg + RegNrToStr(ARegisterType.RtXmm, 0) + _endColor;
                                                            }
                                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                        }
                                                    }
                                                    break;

                                                case 0x16:
                                                    {
                                                        if (_prefix2.Contains(0x66))
                                                        {
                                                            if (_hasVex)
                                                            {
                                                                description = "Permute single-precision floating-point elements";
                                                                LastDisassembleData.OpCode = "vpermps";
                                                                LastDisassembleData.Parameters = Xmm(memory[3]) + ModRm(memory, _prefix2, 3, 4, ref last, ATmrPos.Right);
                                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                            }
                                                        }
                                                    }
                                                    break;

                                                case 0x17:
                                                    {
                                                        if (_prefix2.Contains(0x66))
                                                        {
                                                            description = "Logical compare";
                                                            if (_hasVex)
                                                                LastDisassembleData.OpCode = "vptest";
                                                            else
                                                                LastDisassembleData.OpCode = "ptest";

                                                            _opCodeFlags.SkipExtraReg = true;
                                                            LastDisassembleData.Parameters = Xmm(memory[3]) + ModRm(memory, _prefix2, 3, 4, ref last, ATmrPos.Right);
                                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                        }
                                                    }
                                                    break;

                                                case 0x18:
                                                    {
                                                        if (_prefix2.Contains(0x66))
                                                        {
                                                            if (_hasVex)
                                                            {
                                                                description = "Broadcast floating-point-data";
                                                                LastDisassembleData.OpCode = "vbroadcastss";
                                                                _opCodeFlags.SkipExtraReg = true;
                                                                LastDisassembleData.Parameters = Xmm(memory[3]) + ModRm(memory, _prefix2, 3, 4, ref last, ATmrPos.Right);
                                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                            }
                                                        }
                                                    }
                                                    break;

                                                case 0x19:
                                                    {
                                                        if (_prefix2.Contains(0x66))
                                                        {
                                                            if (_hasVex)
                                                            {
                                                                description = "Broadcast floating-point-data";
                                                                LastDisassembleData.OpCode = "vbroadcastsd";
                                                                _opCodeFlags.SkipExtraReg = true;
                                                                LastDisassembleData.Parameters = Xmm(memory[3]) + ModRm(memory, _prefix2, 3, 4, ref last, ATmrPos.Right);
                                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                            }
                                                        }
                                                    }
                                                    break;

                                                case 0x1a:
                                                    {
                                                        if (_prefix2.Contains(0x66))
                                                        {
                                                            if (_hasVex)
                                                            {
                                                                description = "Broadcast floating-point-data";
                                                                LastDisassembleData.OpCode = "vbroadcastf128";
                                                                _opCodeFlags.SkipExtraReg = true;
                                                                LastDisassembleData.Parameters = Xmm(memory[3]) + ModRm(memory, _prefix2, 3, 4, ref last, ATmrPos.Right);
                                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                            }
                                                        }
                                                    }
                                                    break;

                                                /*0f*//*38*/
                                                case 0x1c:
                                                    {
                                                        if (_prefix2.Contains(0x66))
                                                        {
                                                            description = "Packed absolute value";
                                                            if (_hasVex)
                                                                LastDisassembleData.OpCode = "vpabsb";
                                                            else
                                                                LastDisassembleData.OpCode = "pabsb";

                                                            _opCodeFlags.SkipExtraReg = true;
                                                            LastDisassembleData.Parameters = Xmm(memory[3]) + ModRm(memory, _prefix2, 3, 4, ref last, ATmrPos.Right);
                                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                        }
                                                        else
                                                        {
                                                            description = "Packed absolute value";
                                                            LastDisassembleData.OpCode = "pabsb";
                                                            LastDisassembleData.Parameters = Mm(memory[3]) + ModRm(memory, _prefix2, 3, 3, ref last, ATmrPos.Right);
                                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                        }
                                                    }
                                                    break;

                                                /*0f*//*38*/
                                                case 0x1d:
                                                    {
                                                        if (_prefix2.Contains(0x66))
                                                        {
                                                            description = "Packed absolute value";
                                                            if (_hasVex)
                                                                LastDisassembleData.OpCode = "vpabsw";
                                                            else
                                                                LastDisassembleData.OpCode = "pabsw";

                                                            _opCodeFlags.SkipExtraReg = true;
                                                            LastDisassembleData.Parameters = Xmm(memory[3]) + ModRm(memory, _prefix2, 3, 4, ref last, ATmrPos.Right);
                                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                        }
                                                        else
                                                        {
                                                            description = "Packed absolute value";
                                                            LastDisassembleData.OpCode = "pabsw";
                                                            LastDisassembleData.Parameters = Mm(memory[3]) + ModRm(memory, _prefix2, 3, 3, ref last, ATmrPos.Right);
                                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                        }
                                                    }
                                                    break;

                                                /*0f*//*38*/
                                                case 0x1e:
                                                    {
                                                        if (_prefix2.Contains(0x66))
                                                        {
                                                            description = "Packed absolute value";
                                                            if (_hasVex)
                                                                LastDisassembleData.OpCode = "vpabsd";
                                                            else
                                                                LastDisassembleData.OpCode = "pabsd";

                                                            _opCodeFlags.SkipExtraReg = true;
                                                            LastDisassembleData.Parameters = Xmm(memory[3]) + ModRm(memory, _prefix2, 3, 4, ref last, ATmrPos.Right);
                                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                        }
                                                        else
                                                        {
                                                            description = "Packed absolute value";
                                                            LastDisassembleData.OpCode = "pabsd";
                                                            LastDisassembleData.Parameters = Mm(memory[3]) + ModRm(memory, _prefix2, 3, 3, ref last, ATmrPos.Right);
                                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                        }
                                                    }
                                                    break;

                                                /*0f*//*38*/
                                                case 0x20:
                                                    {
                                                        if (_prefix2.Contains(0x66))
                                                        {
                                                            description = "Packed move with sign extend";
                                                            if (_hasVex)
                                                                LastDisassembleData.OpCode = "vpmovsxbw";
                                                            else
                                                                LastDisassembleData.OpCode = "pmovsxbw";

                                                            LastDisassembleData.Parameters = Xmm(memory[3]) + ModRm(memory, _prefix2, 3, 4, ref last, ATmrPos.Right);
                                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                        }
                                                    }
                                                    break;

                                                /*0f*//*38*/
                                                case 0x21:
                                                    {
                                                        if (_prefix2.Contains(0x66))
                                                        {
                                                            description = "Packed move with sign extend";
                                                            if (_hasVex)
                                                                LastDisassembleData.OpCode = "vpmovsxbd";
                                                            else
                                                                LastDisassembleData.OpCode = "pmovsxbd";

                                                            LastDisassembleData.Parameters = Xmm(memory[3]) + ModRm(memory, _prefix2, 3, 4, ref last, ATmrPos.Right);
                                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                        }
                                                    }
                                                    break;

                                                /*0f*//*38*/
                                                case 0x22:
                                                    {
                                                        if (_prefix2.Contains(0x66))
                                                        {
                                                            description = "Packed move with sign extend";
                                                            if (_hasVex)
                                                                LastDisassembleData.OpCode = "vpmovsxbq";
                                                            else
                                                                LastDisassembleData.OpCode = "pmovsxbq";

                                                            LastDisassembleData.Parameters = Xmm(memory[3]) + ModRm(memory, _prefix2, 3, 4, ref last, ATmrPos.Right);
                                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                        }
                                                    }
                                                    break;

                                                /*0f*//*38*/
                                                case 0x23:
                                                    {
                                                        if (_prefix2.Contains(0x66))
                                                        {
                                                            description = "Packed move with sign extend";
                                                            if (_hasVex)
                                                                LastDisassembleData.OpCode = "vpmovsxwd";
                                                            else
                                                                LastDisassembleData.OpCode = "pmovsxwd";

                                                            LastDisassembleData.Parameters = Xmm(memory[3]) + ModRm(memory, _prefix2, 3, 4, ref last, ATmrPos.Right);
                                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                        }
                                                    }
                                                    break;

                                                /*0f*//*38*/
                                                case 0x24:
                                                    {
                                                        if (_prefix2.Contains(0x66))
                                                        {
                                                            description = "Packed move with sign extend";
                                                            if (_hasVex)
                                                                LastDisassembleData.OpCode = "vpmovsxwq";
                                                            else
                                                                LastDisassembleData.OpCode = "pmovsxwq";

                                                            LastDisassembleData.Parameters = Xmm(memory[3]) + ModRm(memory, _prefix2, 3, 4, ref last, ATmrPos.Right);
                                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                        }
                                                    }
                                                    break;

                                                /*0f*//*38*/
                                                case 0x25:
                                                    {
                                                        if (_prefix2.Contains(0x66))
                                                        {
                                                            description = "Packed move with sign extend";
                                                            if (_hasVex)
                                                                LastDisassembleData.OpCode = "vpmovsxdq";
                                                            else
                                                                LastDisassembleData.OpCode = "pmovsxdq";

                                                            LastDisassembleData.Parameters = Xmm(memory[3]) + ModRm(memory, _prefix2, 3, 4, ref last, ATmrPos.Right);
                                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                        }
                                                    }
                                                    break;

                                                /*0f*//*38*/
                                                case 0x28:
                                                    {
                                                        if (_prefix2.Contains(0x66))
                                                        {
                                                            description = "Multiple packed signed dword integers";
                                                            if (_hasVex)
                                                                LastDisassembleData.OpCode = "vpmuldq";
                                                            else
                                                                LastDisassembleData.OpCode = "pmuldq";

                                                            LastDisassembleData.Parameters = Xmm(memory[3]) + ModRm(memory, _prefix2, 3, 4, ref last, ATmrPos.Right);
                                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                        }
                                                    }
                                                    break;

                                                /*0f*//*38*/
                                                case 0x29:
                                                    {
                                                        if (_prefix2.Contains(0x66))
                                                        {
                                                            description = "Compare packed qword data for equal";
                                                            if (_hasVex)
                                                                LastDisassembleData.OpCode = "vpcmpeqq";
                                                            else
                                                                LastDisassembleData.OpCode = "pcmpeqq";

                                                            LastDisassembleData.Parameters = Xmm(memory[3]) + ModRm(memory, _prefix2, 3, 4, ref last, ATmrPos.Right);
                                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                        }
                                                    }
                                                    break;

                                                /*0f*//*38*/
                                                case 0x2a:
                                                    {
                                                        if (_prefix2.Contains(0x66))
                                                        {
                                                            description = "Load double quadword non-temporal aligned hint";
                                                            if (_hasVex)
                                                                LastDisassembleData.OpCode = "vmovntdqa";
                                                            else
                                                                LastDisassembleData.OpCode = "movntdqa";

                                                            _opCodeFlags.SkipExtraReg = true;
                                                            LastDisassembleData.Parameters = Xmm(memory[3]) + ModRm(memory, _prefix2, 3, 4, ref last, ATmrPos.Right);
                                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                        }
                                                    }
                                                    break;

                                                /*0f*//*38*/
                                                case 0x2b:
                                                    {
                                                        if (_prefix2.Contains(0x66))
                                                        {
                                                            description = "Pack with unsigned saturation";
                                                            if (_hasVex)
                                                                LastDisassembleData.OpCode = "vpackusdw";
                                                            else
                                                                LastDisassembleData.OpCode = "packusdw";

                                                            LastDisassembleData.Parameters = Xmm(memory[3]) + ModRm(memory, _prefix2, 3, 4, ref last, ATmrPos.Right);
                                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                        }
                                                    }
                                                    break;

                                                /*0f*//*38*/
                                                case 0x2c:
                                                    {
                                                        if (_prefix2.Contains(0x66))
                                                        {
                                                            if (_hasVex)
                                                            {
                                                                description = "Conditional SIMD packed loads and stores";
                                                                LastDisassembleData.OpCode = "vmaskmovps";
                                                                LastDisassembleData.Parameters = Xmm(memory[3]) + ModRm(memory, _prefix2, 3, 4, ref last, ATmrPos.Right);
                                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                            }
                                                        }
                                                    }
                                                    break;

                                                /*0f*//*38*/
                                                case 0x2d:
                                                    {
                                                        if (_prefix2.Contains(0x66))
                                                        {
                                                            if (_hasVex)
                                                            {
                                                                description = "Conditional SIMD packed loads and stores";
                                                                LastDisassembleData.OpCode = "vmaskmovpd";
                                                                LastDisassembleData.Parameters = Xmm(memory[3]) + ModRm(memory, _prefix2, 3, 4, ref last, ATmrPos.Right);
                                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                            }
                                                        }
                                                    }
                                                    break;

                                                /*0f*//*38*/
                                                case 0x2e:
                                                    {
                                                        if (_prefix2.Contains(0x66))
                                                        {
                                                            if (_hasVex)
                                                            {
                                                                description = "Conditional SIMD packed loads and stores";
                                                                LastDisassembleData.OpCode = "vmaskmovps";
                                                                LastDisassembleData.Parameters = ModRm(memory, _prefix2, 3, 4, ref last, ATmrPos.Left) + Xmm(memory[3]);
                                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                            }
                                                        }
                                                    }
                                                    break;

                                                /*0f*//*38*/
                                                case 0x2f:
                                                    {
                                                        if (_prefix2.Contains(0x66))
                                                        {
                                                            if (_hasVex)
                                                            {
                                                                description = "Conditional SIMD packed loads and stores";
                                                                LastDisassembleData.OpCode = "vmaskmovpd";
                                                                LastDisassembleData.Parameters = ModRm(memory, _prefix2, 3, 4, ref last, ATmrPos.Left) + Xmm(memory[3]);
                                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                            }
                                                        }
                                                    }
                                                    break;

                                                /*0f*//*38*/
                                                case 0x30:
                                                    {
                                                        if (_prefix2.Contains(0x66))
                                                        {
                                                            description = "Packed move with zero extend";
                                                            if (_hasVex)
                                                                LastDisassembleData.OpCode = "vpmovzxbw";
                                                            else
                                                                LastDisassembleData.OpCode = "pmovzxbw";

                                                            LastDisassembleData.Parameters = Xmm(memory[3]) + ModRm(memory, _prefix2, 3, 4, ref last, ATmrPos.Right);
                                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                        }
                                                    }
                                                    break;

                                                /*0f*//*38*/
                                                case 0x31:
                                                    {
                                                        if (_prefix2.Contains(0x66))
                                                        {
                                                            description = "Packed move with zero extend";
                                                            if (_hasVex)
                                                                LastDisassembleData.OpCode = "vpmovzxbd";
                                                            else
                                                                LastDisassembleData.OpCode = "pmovzxbd";

                                                            LastDisassembleData.Parameters = Xmm(memory[3]) + ModRm(memory, _prefix2, 3, 4, ref last, ATmrPos.Right);
                                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                        }
                                                    }
                                                    break;

                                                /*0f*//*38*/
                                                case 0x32:
                                                    {
                                                        if (_prefix2.Contains(0x66))
                                                        {
                                                            description = "Packed move with zero extend";
                                                            if (_hasVex)
                                                                LastDisassembleData.OpCode = "vpmovzxbq";
                                                            else
                                                                LastDisassembleData.OpCode = "pmovzxbq";

                                                            LastDisassembleData.Parameters = Xmm(memory[3]) + ModRm(memory, _prefix2, 3, 4, ref last, ATmrPos.Right);
                                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                        }
                                                    }
                                                    break;

                                                /*0f*//*38*/
                                                case 0x33:
                                                    {
                                                        if (_prefix2.Contains(0x66))
                                                        {
                                                            description = "Packed move with zero extend";
                                                            if (_hasVex)
                                                                LastDisassembleData.OpCode = "vpmovzxwd";
                                                            else
                                                                LastDisassembleData.OpCode = "pmovzxwd";

                                                            LastDisassembleData.Parameters = Xmm(memory[3]) + ModRm(memory, _prefix2, 3, 4, ref last, ATmrPos.Right);
                                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                        }
                                                    }
                                                    break;

                                                /*0f*//*38*/
                                                case 0x34:
                                                    {
                                                        if (_prefix2.Contains(0x66))
                                                        {
                                                            description = "Packed move with zero extend";
                                                            if (_hasVex)
                                                                LastDisassembleData.OpCode = "vpmovzxwq";
                                                            else
                                                                LastDisassembleData.OpCode = "pmovzxwq";

                                                            LastDisassembleData.Parameters = Xmm(memory[3]) + ModRm(memory, _prefix2, 3, 4, ref last, ATmrPos.Right);
                                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                        }
                                                    }
                                                    break;

                                                /*0f*//*38*/
                                                case 0x35:
                                                    {
                                                        if (_prefix2.Contains(0x66))
                                                        {
                                                            description = "Packed move with zero extend";
                                                            if (_hasVex)
                                                                LastDisassembleData.OpCode = "vpmovzxdq";
                                                            else
                                                                LastDisassembleData.OpCode = "pmovzxdq";

                                                            LastDisassembleData.Parameters = Xmm(memory[3]) + ModRm(memory, _prefix2, 3, 4, ref last, ATmrPos.Right);
                                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                        }
                                                    }
                                                    break;

                                                /*0f*//*38*/
                                                case 0x36:
                                                    {
                                                        if (_prefix2.Contains(0x66))
                                                        {
                                                            if (_hasVex)
                                                            {
                                                                description = "Full doublewords element permutation";
                                                                LastDisassembleData.OpCode = "vpermd";
                                                                LastDisassembleData.Parameters = Xmm(memory[3]) + ModRm(memory, _prefix2, 3, 4, ref last, ATmrPos.Right);
                                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                            }
                                                        }
                                                    }
                                                    break;


                                                /*0f*//*38*/
                                                case 0x37:
                                                    {
                                                        if (_prefix2.Contains(0x66))
                                                        {
                                                            description = "Compare packed data for greater than";
                                                            if (_hasVex)
                                                                LastDisassembleData.OpCode = "vpcmpgtq";
                                                            else
                                                                LastDisassembleData.OpCode = "pcmpgtq";

                                                            LastDisassembleData.Parameters = Xmm(memory[3]) + ModRm(memory, _prefix2, 3, 4, ref last, ATmrPos.Right);
                                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                        }
                                                    }
                                                    break;

                                                /*0f*//*38*/
                                                case 0x38:
                                                    {
                                                        if (_prefix2.Contains(0x66))
                                                        {
                                                            description = "Minimum of packed signed byte integers";
                                                            if (_hasVex)
                                                                LastDisassembleData.OpCode = "vpminsb";
                                                            else
                                                                LastDisassembleData.OpCode = "pminsb";

                                                            LastDisassembleData.Parameters = Xmm(memory[3]) + ModRm(memory, _prefix2, 3, 4, ref last, ATmrPos.Right);
                                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                        }
                                                    }
                                                    break;

                                                /*0f*//*38*/
                                                case 0x39:
                                                    {
                                                        if (_prefix2.Contains(0x66))
                                                        {
                                                            description = "Minimum of packed dword integers";
                                                            if (_hasVex)
                                                                LastDisassembleData.OpCode = "vpminsd";
                                                            else
                                                                LastDisassembleData.OpCode = "pminsd";

                                                            LastDisassembleData.Parameters = Xmm(memory[3]) + ModRm(memory, _prefix2, 3, 4, ref last, ATmrPos.Right);
                                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                        }
                                                    }
                                                    break;

                                                /*0f*//*38*/
                                                case 0x3a:
                                                    {
                                                        if (_prefix2.Contains(0x66))
                                                        {
                                                            description = "Minimum of packed word integers";
                                                            if (_hasVex)
                                                                LastDisassembleData.OpCode = "vpminuw";
                                                            else
                                                                LastDisassembleData.OpCode = "pminuw";

                                                            LastDisassembleData.Parameters = Xmm(memory[3]) + ModRm(memory, _prefix2, 3, 4, ref last, ATmrPos.Right);
                                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                        }
                                                    }
                                                    break;

                                                /*0f*//*38*/
                                                case 0x3b:
                                                    {
                                                        if (_prefix2.Contains(0x66))
                                                        {
                                                            description = "Minimum of packed dword integers";
                                                            if (_hasVex)
                                                                LastDisassembleData.OpCode = "vpminud";
                                                            else
                                                                LastDisassembleData.OpCode = "pminud";

                                                            LastDisassembleData.Parameters = Xmm(memory[3]) + ModRm(memory, _prefix2, 3, 4, ref last, ATmrPos.Right);
                                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                        }
                                                    }
                                                    break;

                                                /*0f*//*38*/
                                                case 0x3c:
                                                    {
                                                        if (_prefix2.Contains(0x66))
                                                        {
                                                            description = "Maximum of packed signed byte integers";
                                                            if (_hasVex)
                                                                LastDisassembleData.OpCode = "vpmaxsb";
                                                            else
                                                                LastDisassembleData.OpCode = "pmaxsb";

                                                            LastDisassembleData.Parameters = Xmm(memory[3]) + ModRm(memory, _prefix2, 3, 4, ref last, ATmrPos.Right);
                                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                        }
                                                    }
                                                    break;

                                                /*0f*//*38*/
                                                case 0x3d:
                                                    {
                                                        if (_prefix2.Contains(0x66))
                                                        {
                                                            description = "Maximum of packed signed dword integers";
                                                            if (_hasVex)
                                                                LastDisassembleData.OpCode = "vpmaxsd";
                                                            else
                                                                LastDisassembleData.OpCode = "pmaxsd";

                                                            LastDisassembleData.Parameters = Xmm(memory[3]) + ModRm(memory, _prefix2, 3, 4, ref last, ATmrPos.Right);
                                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                        }
                                                    }
                                                    break;

                                                /*0f*//*38*/
                                                case 0x3e:
                                                    {
                                                        if (_prefix2.Contains(0x66))
                                                        {
                                                            description = "Maximum of packed word integers";
                                                            if (_hasVex)
                                                                LastDisassembleData.OpCode = "vpmaxuw";
                                                            else
                                                                LastDisassembleData.OpCode = "pmaxuw";

                                                            LastDisassembleData.Parameters = Xmm(memory[3]) + ModRm(memory, _prefix2, 3, 4, ref last, ATmrPos.Right);
                                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                        }
                                                    }
                                                    break;

                                                /*0f*//*38*/
                                                case 0x3f:
                                                    {
                                                        if (_prefix2.Contains(0x66))
                                                        {
                                                            description = "Maximum of packed unsigned dword integers";
                                                            if (_hasVex)
                                                                LastDisassembleData.OpCode = "vpmaxud";
                                                            else
                                                                LastDisassembleData.OpCode = "pmaxud";

                                                            LastDisassembleData.Parameters = Xmm(memory[3]) + ModRm(memory, _prefix2, 3, 4, ref last, ATmrPos.Right);
                                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                        }
                                                    }
                                                    break;

                                                /*0f*//*38*/
                                                case 0x40:
                                                    {
                                                        if (_prefix2.Contains(0x66))
                                                        {
                                                            description = "Multiply Packed Signed Dword Integers and Store Low Result";
                                                            if (_hasVex)
                                                                LastDisassembleData.OpCode = "vpmulld";
                                                            else
                                                                LastDisassembleData.OpCode = "pmulld";

                                                            LastDisassembleData.Parameters = Xmm(memory[3]) + ModRm(memory, _prefix2, 3, 4, ref last, ATmrPos.Right);
                                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                        }
                                                    }
                                                    break;

                                                /*0f*//*38*/
                                                case 0x41:
                                                    {
                                                        if (_prefix2.Contains(0x66))
                                                        {
                                                            description = "Packed horitontal word minimum";
                                                            if (_hasVex)
                                                                LastDisassembleData.OpCode = "phminposuw";
                                                            else
                                                                LastDisassembleData.OpCode = "vphminposuw";

                                                            _opCodeFlags.SkipExtraReg = true;
                                                            LastDisassembleData.Parameters = Xmm(memory[3]) + ModRm(memory, _prefix2, 3, 4, ref last, ATmrPos.Right);
                                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                        }
                                                    }
                                                    break;

                                                case 0x45:
                                                    {
                                                        if (_prefix2.Contains(0x66))
                                                        {
                                                            if (_hasVex)
                                                            {
                                                                description = "Variable Bit Shift Right Logical";

                                                                if (RexW)
                                                                    LastDisassembleData.OpCode = "vpsrlvq";
                                                                else
                                                                    LastDisassembleData.OpCode = "vpsrlvd";

                                                                LastDisassembleData.Parameters = Xmm(memory[3]) + ModRm(memory, _prefix2, 3, 4, ref last, ATmrPos.Right);
                                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                            }
                                                        }
                                                    }
                                                    break;

                                                /*0f*//*38*/
                                                case 0x46:
                                                    {
                                                        if (_prefix2.Contains(0x66))
                                                        {
                                                            if (_hasVex)
                                                            {
                                                                description = "Variable bit shift right arithmetic";
                                                                LastDisassembleData.OpCode = "vpsravd";
                                                                LastDisassembleData.Parameters = Xmm(memory[3]) + ModRm(memory, _prefix2, 3, 4, ref last, ATmrPos.Right);
                                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                            }
                                                        }
                                                    }
                                                    break;

                                                case 0x47:
                                                    {
                                                        if (_prefix2.Contains(0x66))
                                                        {
                                                            if (_hasVex)
                                                            {
                                                                description = "Variable Bit Shift Left Logical";

                                                                if (RexW)
                                                                    LastDisassembleData.OpCode = "vpsllvq";
                                                                else
                                                                    LastDisassembleData.OpCode = "vpsllvd";

                                                                LastDisassembleData.Parameters = Xmm(memory[3]) + ModRm(memory, _prefix2, 3, 4, ref last, ATmrPos.Right);
                                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                            }
                                                        }
                                                    }
                                                    break;


                                                /*0f*//*38*/
                                                case 0x58:
                                                    {
                                                        if (_prefix2.Contains(0x66))
                                                        {
                                                            if (_hasVex)
                                                            {
                                                                description = "Broadcast integer data";
                                                                LastDisassembleData.OpCode = "vpbroadcastd";
                                                                _opCodeFlags.SkipExtraReg = true;
                                                                LastDisassembleData.Parameters = Xmm(memory[3]) + ModRm(memory, _prefix2, 3, 4, ref last, ATmrPos.Right);
                                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                            }
                                                        }
                                                    }
                                                    break;

                                                /*0f*//*38*/
                                                case 0x59:
                                                    {
                                                        if (_prefix2.Contains(0x66))
                                                        {
                                                            if (_hasVex)
                                                            {
                                                                description = "Broadcast integer data";
                                                                LastDisassembleData.OpCode = "vpbroadcastq";
                                                                _opCodeFlags.SkipExtraReg = true;
                                                                LastDisassembleData.Parameters = Xmm(memory[3]) + ModRm(memory, _prefix2, 3, 4, ref last, ATmrPos.Right);
                                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                            }
                                                        }
                                                    }
                                                    break;

                                                /*0f*//*38*/
                                                case 0x5a:
                                                    {
                                                        if (_prefix2.Contains(0x66))
                                                        {
                                                            if (_hasVex)
                                                            {
                                                                description = "Broadcast integer data";
                                                                LastDisassembleData.OpCode = "vpbroadcasti128";
                                                                _opCodeFlags.SkipExtraReg = true;
                                                                LastDisassembleData.Parameters = Xmm(memory[3]) + ModRm(memory, _prefix2, 3, 4, ref last, ATmrPos.Right);
                                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                            }
                                                        }
                                                    }
                                                    break;

                                                /*0f*//*38*/
                                                case 0x78:
                                                    {
                                                        if (_prefix2.Contains(0x66))
                                                        {
                                                            if (_hasVex)
                                                            {
                                                                description = "Broadcast integer data";
                                                                LastDisassembleData.OpCode = "vpbroadcastb";
                                                                _opCodeFlags.SkipExtraReg = true;
                                                                LastDisassembleData.Parameters = Xmm(memory[3]) + ModRm(memory, _prefix2, 3, 4, ref last, ATmrPos.Right);
                                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                            }
                                                        }
                                                    }
                                                    break;

                                                /*0f*//*38*/
                                                case 0x79:
                                                    {
                                                        if (_prefix2.Contains(0x66))
                                                        {
                                                            if (_hasVex)
                                                            {
                                                                description = "Broadcast integer data";
                                                                LastDisassembleData.OpCode = "vpbroadcastw";
                                                                _opCodeFlags.SkipExtraReg = true;
                                                                LastDisassembleData.Parameters = Xmm(memory[3]) + ModRm(memory, _prefix2, 3, 4, ref last, ATmrPos.Right);
                                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                            }
                                                        }
                                                    }
                                                    break;

                                                case 0x82:
                                                    {
                                                        description = "Invalidate process-context-identifier";
                                                        LastDisassembleData.OpCode = "invpcid";
                                                        if (SymbolHandler.Process.IsX64)
                                                            LastDisassembleData.Parameters = R64(memory[3]) + ModRm(memory, _prefix2, 3, 0, ref last, 128, 0, ATmrPos.Right);
                                                        else
                                                            LastDisassembleData.Parameters = R32(memory[3]) + ModRm(memory, _prefix2, 3, 0, ref last, 128, 0, ATmrPos.Right);

                                                        offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                    }
                                                    break;

                                                case 0x8c:
                                                    {
                                                        if (_prefix2.Contains(0x66))
                                                        {
                                                            if (_hasVex)
                                                            {
                                                                if (RexW)
                                                                {
                                                                    description = "Conditional SIMD Integer Packed Loads and Stores";
                                                                    LastDisassembleData.OpCode = "vpmaskmovq";
                                                                    LastDisassembleData.Parameters = Xmm(memory[3]) + ModRm(memory, _prefix2, 3, 4, ref last, ATmrPos.Right);
                                                                    offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                                }
                                                                else
                                                                {
                                                                    description = "Conditional SIMD Integer Packed Loads and Stores";
                                                                    LastDisassembleData.OpCode = "vpmaskmovd";
                                                                    LastDisassembleData.Parameters = Xmm(memory[3]) + ModRm(memory, _prefix2, 3, 4, ref last, ATmrPos.Right);
                                                                    offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                                }
                                                            }
                                                        }
                                                    }
                                                    break;

                                                case 0x8e:
                                                    {
                                                        if (_prefix2.Contains(0x66))
                                                        {
                                                            if (_hasVex)
                                                            {
                                                                if (RexW)
                                                                {
                                                                    description = "Conditional SIMD Integer Packed Loads and Stores";
                                                                    LastDisassembleData.OpCode = "vpmaskmovq";
                                                                    LastDisassembleData.Parameters = ModRm(memory, _prefix2, 3, 4, ref last, ATmrPos.Left) + Xmm(memory[3]);
                                                                    offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                                }
                                                                else
                                                                {
                                                                    description = "Conditional SIMD Integer Packed Loads and Stores";
                                                                    LastDisassembleData.OpCode = "vpmaskmovd";
                                                                    LastDisassembleData.Parameters = ModRm(memory, _prefix2, 3, 4, ref last, ATmrPos.Left) + Xmm(memory[3]);
                                                                    offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                                }
                                                            }
                                                        }
                                                    }
                                                    break;


                                                case 0x96:
                                                    {
                                                        if (_prefix2.Contains(0x66))
                                                        {
                                                            if (_hasVex)
                                                            {
                                                                if (RexW)
                                                                {
                                                                    description = "Fused multiple-alnterating add/subtract of packed double precision floating-point-values";
                                                                    LastDisassembleData.OpCode = "vfmaddsub132pd";
                                                                    LastDisassembleData.Parameters = Xmm(memory[3]) + ModRm(memory, _prefix2, 3, 4, ref last, ATmrPos.Right);
                                                                    offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                                }
                                                                else
                                                                {
                                                                    description = "Fused multiple-alnterating add/subtract of precision floating-point-values";
                                                                    LastDisassembleData.OpCode = "vfmaddsub132ps";
                                                                    LastDisassembleData.Parameters = Xmm(memory[3]) + ModRm(memory, _prefix2, 3, 4, ref last, ATmrPos.Right);
                                                                    offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                                }
                                                            }
                                                        }
                                                    }
                                                    break;

                                                case 0x97:
                                                    {
                                                        if (_prefix2.Contains(0x66))
                                                        {
                                                            if (_hasVex)
                                                            {
                                                                if (RexW)
                                                                {
                                                                    description = "Fused multiple-alnterating subtract/add of packed double precision floating-point-values";
                                                                    LastDisassembleData.OpCode = "vfmsubadd132pd";
                                                                    LastDisassembleData.Parameters = Xmm(memory[3]) + ModRm(memory, _prefix2, 3, 4, ref last, ATmrPos.Right);
                                                                    offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                                }
                                                                else
                                                                {
                                                                    description = "Fused multiple-alnterating subtract/add of precision floating-point-values";
                                                                    LastDisassembleData.OpCode = "vfmsubadd132ps";
                                                                    LastDisassembleData.Parameters = Xmm(memory[3]) + ModRm(memory, _prefix2, 3, 4, ref last, ATmrPos.Right);
                                                                    offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                                }
                                                            }
                                                        }
                                                    }
                                                    break;

                                                case 0x98:
                                                    {
                                                        if (_prefix2.Contains(0x66))
                                                        {
                                                            if (_hasVex)
                                                            {
                                                                if (RexW)
                                                                {
                                                                    description = "Fused multiple-add of packed double precision floating-point-values";
                                                                    LastDisassembleData.OpCode = "vfmadd132pd";
                                                                    LastDisassembleData.Parameters = Xmm(memory[3]) + ModRm(memory, _prefix2, 3, 4, ref last, ATmrPos.Right);
                                                                    offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                                }
                                                                else
                                                                {
                                                                    description = "Fused multiple-add of packed single precision floating-point-values";
                                                                    LastDisassembleData.OpCode = "vfmadd132ps";
                                                                    LastDisassembleData.Parameters = Xmm(memory[3]) + ModRm(memory, _prefix2, 3, 4, ref last, ATmrPos.Right);
                                                                    offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                                }
                                                            }
                                                        }
                                                    }
                                                    break;

                                                case 0x99:
                                                    {
                                                        if (_prefix2.Contains(0x66))
                                                        {
                                                            if (_hasVex)
                                                            {
                                                                if (RexW)
                                                                {
                                                                    description = "Fused multiple-add of scalar double precision floating-point-values";
                                                                    LastDisassembleData.OpCode = "vfmadd132sd";
                                                                    LastDisassembleData.Parameters = Xmm(memory[3]) + ModRm(memory, _prefix2, 3, 4, ref last, ATmrPos.Right);
                                                                    offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                                }
                                                                else
                                                                {
                                                                    description = "Fused multiple-add of scalar single precision floating-point-values";
                                                                    LastDisassembleData.OpCode = "vfmadd132ss";
                                                                    LastDisassembleData.Parameters = Xmm(memory[3]) + ModRm(memory, _prefix2, 3, 4, ref last, ATmrPos.Right);
                                                                    offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                                }
                                                            }
                                                        }
                                                    }
                                                    break;

                                                case 0x9a:
                                                    {
                                                        if (_prefix2.Contains(0x66))
                                                        {
                                                            if (_hasVex)
                                                            {
                                                                if (RexW)
                                                                {
                                                                    description = "Fused multiple-subtract of packed double precision floating-point-values";
                                                                    LastDisassembleData.OpCode = "vfmsub132pd";
                                                                    LastDisassembleData.Parameters = Xmm(memory[3]) + ModRm(memory, _prefix2, 3, 4, ref last, ATmrPos.Right);
                                                                    offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                                }
                                                                else
                                                                {
                                                                    description = "Fused multiple-subtract of packed single precision floating-point-values";
                                                                    LastDisassembleData.OpCode = "vfmsub132ps";
                                                                    LastDisassembleData.Parameters = Xmm(memory[3]) + ModRm(memory, _prefix2, 3, 4, ref last, ATmrPos.Right);
                                                                    offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                                }
                                                            }
                                                        }
                                                    }
                                                    break;

                                                case 0x9b:
                                                    {
                                                        if (_prefix2.Contains(0x66))
                                                        {
                                                            if (_hasVex)
                                                            {
                                                                if (RexW)
                                                                {
                                                                    description = "Fused multiple-subtract of scalar double precision floating-point-values";
                                                                    LastDisassembleData.OpCode = "vfmsub132sd";
                                                                    LastDisassembleData.Parameters = Xmm(memory[3]) + ModRm(memory, _prefix2, 3, 4, ref last, ATmrPos.Right);
                                                                    offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                                }
                                                                else
                                                                {
                                                                    description = "Fused multiple-subtract of scalar single precision floating-point-values";
                                                                    LastDisassembleData.OpCode = "vfmsub132ss";
                                                                    LastDisassembleData.Parameters = Xmm(memory[3]) + ModRm(memory, _prefix2, 3, 4, ref last, ATmrPos.Right);
                                                                    offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                                }
                                                            }
                                                        }
                                                    }
                                                    break;

                                                /*0f*//*38*/
                                                case 0x9c:
                                                    {
                                                        if (_prefix2.Contains(0x66))
                                                        {
                                                            if (_hasVex)
                                                            {
                                                                if (RexW)
                                                                {
                                                                    description = "Fused negative multiply-add of packed double precision floating-point-values";
                                                                    LastDisassembleData.OpCode = "vfnmadd132pd";
                                                                    LastDisassembleData.Parameters = Xmm(memory[3]) + ModRm(memory, _prefix2, 3, 4, ref last, ATmrPos.Right);
                                                                    offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                                }
                                                                else
                                                                {
                                                                    description = "Fused negative multiply-add of packed single-precision floating-point-values";
                                                                    LastDisassembleData.OpCode = "vfnmadd132ps";
                                                                    LastDisassembleData.Parameters = Xmm(memory[3]) + ModRm(memory, _prefix2, 3, 4, ref last, ATmrPos.Right);
                                                                    offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                                }
                                                            }
                                                        }
                                                    }
                                                    break;

                                                case 0x9d:
                                                    {
                                                        if (_prefix2.Contains(0x66))
                                                        {
                                                            if (_hasVex)
                                                            {
                                                                if (RexW)
                                                                {
                                                                    description = "Fused negative multiply-add of scalar double precision floating-point-values";
                                                                    LastDisassembleData.OpCode = "vfnmadd132sd";
                                                                    LastDisassembleData.Parameters = Xmm(memory[3]) + ModRm(memory, _prefix2, 3, 4, ref last, ATmrPos.Right);
                                                                    offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                                }
                                                                else
                                                                {
                                                                    description = "Fused negative multiply-add of scalar single precision floating-point-values";
                                                                    LastDisassembleData.OpCode = "vfnmadd132ss";
                                                                    LastDisassembleData.Parameters = Xmm(memory[3]) + ModRm(memory, _prefix2, 3, 4, ref last, ATmrPos.Right);
                                                                    offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                                }
                                                            }
                                                        }
                                                    }
                                                    break;

                                                case 0x9e:
                                                    {
                                                        if (_prefix2.Contains(0x66))
                                                        {
                                                            if (_hasVex)
                                                            {
                                                                if (RexW)
                                                                {
                                                                    description = "Fused negative multiply-subtract of packed double precision floating-point-values";
                                                                    LastDisassembleData.OpCode = "vfmsub132pd";
                                                                    LastDisassembleData.Parameters = Xmm(memory[3]) + ModRm(memory, _prefix2, 3, 4, ref last, ATmrPos.Right);
                                                                    offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                                }
                                                                else
                                                                {
                                                                    description = "Fused negative multiply-subtract of packed single precision floating-point-values";
                                                                    LastDisassembleData.OpCode = "vfmsub132ps";
                                                                    LastDisassembleData.Parameters = Xmm(memory[3]) + ModRm(memory, _prefix2, 3, 4, ref last, ATmrPos.Right);
                                                                    offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                                }
                                                            }
                                                        }
                                                    }
                                                    break;

                                                case 0x9f:
                                                    {
                                                        if (_prefix2.Contains(0x66))
                                                        {
                                                            if (_hasVex)
                                                            {
                                                                if (RexW)
                                                                {
                                                                    description = "Fused negative multiply-subtract of scalar double precision floating-point-values";
                                                                    LastDisassembleData.OpCode = "vfmsub132sd";
                                                                    LastDisassembleData.Parameters = Xmm(memory[3]) + ModRm(memory, _prefix2, 3, 4, ref last, ATmrPos.Right);
                                                                    offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                                }
                                                                else
                                                                {
                                                                    description = "Fused begative multiply-subtract of scalar single precision floating-point-values";
                                                                    LastDisassembleData.OpCode = "vfmsub132ss";
                                                                    LastDisassembleData.Parameters = Xmm(memory[3]) + ModRm(memory, _prefix2, 3, 4, ref last, ATmrPos.Right);
                                                                    offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                                }
                                                            }
                                                        }
                                                    }
                                                    break;

                                                case 0xa6:
                                                    {
                                                        if (_prefix2.Contains(0x66))
                                                        {
                                                            if (_hasVex)
                                                            {
                                                                if (RexW)
                                                                {
                                                                    description = "Fused multiply-alternating add/subtract of packed double precision floating-point-values";
                                                                    LastDisassembleData.OpCode = "vfmaddsub213pd";
                                                                    LastDisassembleData.Parameters = Xmm(memory[3]) + ModRm(memory, _prefix2, 3, 4, ref last, ATmrPos.Right);
                                                                    offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                                }
                                                                else
                                                                {
                                                                    description = "Fused multiply-alternating add/subtract of packed single precision floating-point-values";
                                                                    LastDisassembleData.OpCode = "vfmaddsub213ps";
                                                                    LastDisassembleData.Parameters = Xmm(memory[3]) + ModRm(memory, _prefix2, 3, 4, ref last, ATmrPos.Right);
                                                                    offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                                }
                                                            }
                                                        }
                                                    }
                                                    break;

                                                case 0xa7:
                                                    {
                                                        if (_prefix2.Contains(0x66))
                                                        {
                                                            if (_hasVex)
                                                            {
                                                                if (RexW)
                                                                {
                                                                    description = "Fused multiply-alternating subtract/add of packed double precision floating-point-values";
                                                                    LastDisassembleData.OpCode = "vfmsubadd213pd";
                                                                    LastDisassembleData.Parameters = Xmm(memory[3]) + ModRm(memory, _prefix2, 3, 4, ref last, ATmrPos.Right);
                                                                    offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                                }
                                                                else
                                                                {
                                                                    description = "Fused multiply-alternating subtract/add of packed single precision floating-point-values";
                                                                    LastDisassembleData.OpCode = "vfmsubadd213ps";
                                                                    LastDisassembleData.Parameters = Xmm(memory[3]) + ModRm(memory, _prefix2, 3, 4, ref last, ATmrPos.Right);
                                                                    offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                                }
                                                            }
                                                        }
                                                    }
                                                    break;

                                                case 0xa8:
                                                    {
                                                        if (_prefix2.Contains(0x66))
                                                        {
                                                            if (_hasVex)
                                                            {
                                                                if (RexW)
                                                                {
                                                                    description = "Fused multiple-add of packed double precision floating-point-values";
                                                                    LastDisassembleData.OpCode = "vfmadd213pd";
                                                                    LastDisassembleData.Parameters = Xmm(memory[3]) + ModRm(memory, _prefix2, 3, 4, ref last, ATmrPos.Right);
                                                                    offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                                }
                                                                else
                                                                {
                                                                    description = "Fused multiple-add of packed single precision floating-point-values";
                                                                    LastDisassembleData.OpCode = "vfmadd213ps";
                                                                    LastDisassembleData.Parameters = Xmm(memory[3]) + ModRm(memory, _prefix2, 3, 4, ref last, ATmrPos.Right);
                                                                    offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                                }
                                                            }
                                                        }
                                                    }
                                                    break;

                                                /*0f*//*38*/
                                                case 0xa9:
                                                    {
                                                        if (_prefix2.Contains(0x66))
                                                        {
                                                            if (_hasVex)
                                                            {
                                                                if (RexW)
                                                                {
                                                                    description = "Fused multiple-add of scalar double precision floating-point-values";
                                                                    LastDisassembleData.OpCode = "vfmadd213sd";
                                                                    LastDisassembleData.Parameters = Xmm(memory[3]) + ModRm(memory, _prefix2, 3, 4, ref last, ATmrPos.Right);
                                                                    offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                                }
                                                                else
                                                                {
                                                                    description = "Fused multiple-add of scalar single precision floating-point-values";
                                                                    LastDisassembleData.OpCode = "vfmadd213ss";
                                                                    LastDisassembleData.Parameters = Xmm(memory[3]) + ModRm(memory, _prefix2, 3, 4, ref last, ATmrPos.Right);
                                                                    offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                                }
                                                            }
                                                        }
                                                    }
                                                    break;

                                                case 0xaa:
                                                    {
                                                        if (_prefix2.Contains(0x66))
                                                        {
                                                            if (_hasVex)
                                                            {
                                                                if (RexW)
                                                                {
                                                                    description = "Fused multiple-subtract of packed double precision floating-point-values";
                                                                    LastDisassembleData.OpCode = "vfmsub213pd";
                                                                    LastDisassembleData.Parameters = Xmm(memory[3]) + ModRm(memory, _prefix2, 3, 4, ref last, ATmrPos.Right);
                                                                    offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                                }
                                                                else
                                                                {
                                                                    description = "Fused multiple-subtract of packed single precision floating-point-values";
                                                                    LastDisassembleData.OpCode = "vfmsub213ps";
                                                                    LastDisassembleData.Parameters = Xmm(memory[3]) + ModRm(memory, _prefix2, 3, 4, ref last, ATmrPos.Right);
                                                                    offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                                }
                                                            }
                                                        }
                                                    }
                                                    break;


                                                case 0xab:
                                                    {
                                                        if (_prefix2.Contains(0x66))
                                                        {
                                                            if (_hasVex)
                                                            {
                                                                if (RexW)
                                                                {
                                                                    description = "Fused multiple-subtract of scalar double precision floating-point-values";
                                                                    LastDisassembleData.OpCode = "vfmsub213sd";
                                                                    LastDisassembleData.Parameters = Xmm(memory[3]) + ModRm(memory, _prefix2, 3, 4, ref last, ATmrPos.Right);
                                                                    offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                                }
                                                                else
                                                                {
                                                                    description = "Fused multiple-subtract of scalar single precision floating-point-values";
                                                                    LastDisassembleData.OpCode = "vfmsub213ss";
                                                                    LastDisassembleData.Parameters = Xmm(memory[3]) + ModRm(memory, _prefix2, 3, 4, ref last, ATmrPos.Right);
                                                                    offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                                }
                                                            }
                                                        }
                                                    }
                                                    break;

                                                case 0xac:
                                                    {
                                                        if (_prefix2.Contains(0x66))
                                                        {
                                                            if (_hasVex)
                                                            {
                                                                if (RexW)
                                                                {
                                                                    description = "Fused negative multiply-add of packed double precision floating-point-values";
                                                                    LastDisassembleData.OpCode = "vfnmadd213pd";
                                                                    LastDisassembleData.Parameters = Xmm(memory[3]) + ModRm(memory, _prefix2, 3, 4, ref last, ATmrPos.Right);
                                                                    offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                                }
                                                                else
                                                                {
                                                                    description = "Fused negative multiply-add of packed single-precision floating-point-values";
                                                                    LastDisassembleData.OpCode = "vfnmadd213ps";
                                                                    LastDisassembleData.Parameters = Xmm(memory[3]) + ModRm(memory, _prefix2, 3, 4, ref last, ATmrPos.Right);
                                                                    offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                                }
                                                            }
                                                        }
                                                    }
                                                    break;

                                                case 0xad:
                                                    {
                                                        if (_prefix2.Contains(0x66))
                                                        {
                                                            if (_hasVex)
                                                            {
                                                                if (RexW)
                                                                {
                                                                    description = "Fused negative multiply-add of scalar double precision floating-point-values";
                                                                    LastDisassembleData.OpCode = "vfnmadd213sd";
                                                                    LastDisassembleData.Parameters = Xmm(memory[3]) + ModRm(memory, _prefix2, 3, 4, ref last, ATmrPos.Right);
                                                                    offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                                }
                                                                else
                                                                {
                                                                    description = "Fused negative multiply-add of scalar single precision floating-point-values";
                                                                    LastDisassembleData.OpCode = "vfnmadd213ss";
                                                                    LastDisassembleData.Parameters = Xmm(memory[3]) + ModRm(memory, _prefix2, 3, 4, ref last, ATmrPos.Right);
                                                                    offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                                }
                                                            }
                                                        }
                                                    }
                                                    break;

                                                /*0f*//*38*/
                                                case 0xae:
                                                    {
                                                        if (_prefix2.Contains(0x66))
                                                        {
                                                            if (_hasVex)
                                                            {
                                                                if (RexW)
                                                                {
                                                                    description = "Fused negative multiply-subtract of packed double precision floating-point-values";
                                                                    LastDisassembleData.OpCode = "vfmsub213pd";
                                                                    LastDisassembleData.Parameters = Xmm(memory[3]) + ModRm(memory, _prefix2, 3, 4, ref last, ATmrPos.Right);
                                                                    offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                                }
                                                                else
                                                                {
                                                                    description = "Fused negative multiply-subtract of packed single precision floating-point-values";
                                                                    LastDisassembleData.OpCode = "vfmsub213ps";
                                                                    LastDisassembleData.Parameters = Xmm(memory[3]) + ModRm(memory, _prefix2, 3, 4, ref last, ATmrPos.Right);
                                                                    offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                                }
                                                            }
                                                        }
                                                    }
                                                    break;

                                                case 0xaf:
                                                    {
                                                        if (_prefix2.Contains(0x66))
                                                        {
                                                            if (_hasVex)
                                                            {
                                                                if (RexW)
                                                                {
                                                                    description = "Fused negative multiply-subtract of scalar double precision floating-point-values";
                                                                    LastDisassembleData.OpCode = "vfnmsub213sd";
                                                                    LastDisassembleData.Parameters = Xmm(memory[3]) + ModRm(memory, _prefix2, 3, 4, ref last, ATmrPos.Right);
                                                                    offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                                }
                                                                else
                                                                {
                                                                    description = "Fused begative multiply-subtract of scalar single precision floating-point-values";
                                                                    LastDisassembleData.OpCode = "vfnmsub213ss";
                                                                    LastDisassembleData.Parameters = Xmm(memory[3]) + ModRm(memory, _prefix2, 3, 4, ref last, ATmrPos.Right);
                                                                    offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                                }
                                                            }
                                                        }
                                                    }
                                                    break;

                                                case 0xb6:
                                                    {
                                                        if (_prefix2.Contains(0x66))
                                                        {
                                                            if (_hasVex)
                                                            {
                                                                if (RexW)
                                                                {
                                                                    description = "Fused multiply-alternating add/subtract of packed double precision floating-point-values";
                                                                    LastDisassembleData.OpCode = "vfmaddsub231pd";
                                                                    LastDisassembleData.Parameters = Xmm(memory[3]) + ModRm(memory, _prefix2, 3, 4, ref last, ATmrPos.Right);
                                                                    offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                                }
                                                                else
                                                                {
                                                                    description = "Fused multiply-alternating add/subtract of packed single precision floating-point-values";
                                                                    LastDisassembleData.OpCode = "vfmaddsub231ps";
                                                                    LastDisassembleData.Parameters = Xmm(memory[3]) + ModRm(memory, _prefix2, 3, 4, ref last, ATmrPos.Right);
                                                                    offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                                }
                                                            }
                                                        }
                                                    }
                                                    break;

                                                case 0xb7:
                                                    {
                                                        if (_prefix2.Contains(0x66))
                                                        {
                                                            if (_hasVex)
                                                            {
                                                                if (RexW)
                                                                {
                                                                    description = "Fused multiply-alternating subtract/add of packed double precision floating-point-values";
                                                                    LastDisassembleData.OpCode = "vfmsubadd231pd";
                                                                    LastDisassembleData.Parameters = Xmm(memory[3]) + ModRm(memory, _prefix2, 3, 4, ref last, ATmrPos.Right);
                                                                    offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                                }
                                                                else
                                                                {
                                                                    description = "Fused multiply-alternating add/subtract of packed single precision floating-point-values";
                                                                    LastDisassembleData.OpCode = "vfmsubadd231ps";
                                                                    LastDisassembleData.Parameters = Xmm(memory[3]) + ModRm(memory, _prefix2, 3, 4, ref last, ATmrPos.Right);
                                                                    offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                                }
                                                            }
                                                        }
                                                    }
                                                    break;

                                                case 0xb8:
                                                    {
                                                        if (_prefix2.Contains(0x66))
                                                        {
                                                            if (_hasVex)
                                                            {
                                                                if (RexW)
                                                                {
                                                                    description = "Fused multiple-add of packed double precision floating-point-values";
                                                                    LastDisassembleData.OpCode = "vfmadd231pd";
                                                                    LastDisassembleData.Parameters = Xmm(memory[3]) + ModRm(memory, _prefix2, 3, 4, ref last, ATmrPos.Right);
                                                                    offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                                }
                                                                else
                                                                {
                                                                    description = "Fused multiple-add of packed single precision floating-point-values";
                                                                    LastDisassembleData.OpCode = "vfmadd231ps";
                                                                    LastDisassembleData.Parameters = Xmm(memory[3]) + ModRm(memory, _prefix2, 3, 4, ref last, ATmrPos.Right);
                                                                    offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                                }
                                                            }
                                                        }
                                                    }
                                                    break;

                                                case 0xb9:
                                                    {
                                                        if (_prefix2.Contains(0x66))
                                                        {
                                                            if (_hasVex)
                                                            {
                                                                if (RexW)
                                                                {
                                                                    description = "Fused multiple-add of scalar double precision floating-point-values";
                                                                    LastDisassembleData.OpCode = "vfmadd231sd";
                                                                    LastDisassembleData.Parameters = Xmm(memory[3]) + ModRm(memory, _prefix2, 3, 4, ref last, ATmrPos.Right);
                                                                    offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                                }
                                                                else
                                                                {
                                                                    description = "Fused multiple-add of scalar single precision floating-point-values";
                                                                    LastDisassembleData.OpCode = "vfmadd231ss";
                                                                    LastDisassembleData.Parameters = Xmm(memory[3]) + ModRm(memory, _prefix2, 3, 4, ref last, ATmrPos.Right);
                                                                    offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                                }
                                                            }
                                                        }
                                                    }
                                                    break;

                                                case 0xba:
                                                    {
                                                        if (_prefix2.Contains(0x66))
                                                        {
                                                            if (_hasVex)
                                                            {
                                                                if (RexW)
                                                                {
                                                                    description = "Fused multiple-subtract of packed double precision floating-point-values";
                                                                    LastDisassembleData.OpCode = "vfmsub231pd";
                                                                    LastDisassembleData.Parameters = Xmm(memory[3]) + ModRm(memory, _prefix2, 3, 4, ref last, ATmrPos.Right);
                                                                    offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                                }
                                                                else
                                                                {
                                                                    description = "Fused multiple-subtract of packed single precision floating-point-values";
                                                                    LastDisassembleData.OpCode = "vfmsub231ps";
                                                                    LastDisassembleData.Parameters = Xmm(memory[3]) + ModRm(memory, _prefix2, 3, 4, ref last, ATmrPos.Right);
                                                                    offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                                }
                                                            }
                                                        }
                                                    }
                                                    break;

                                                case 0xbb:
                                                    {
                                                        if (_prefix2.Contains(0x66))
                                                        {
                                                            if (_hasVex)
                                                            {
                                                                if (RexW)
                                                                {
                                                                    description = "Fused multiple-subtract of scalar double precision floating-point-values";
                                                                    LastDisassembleData.OpCode = "vfmsub231sd";
                                                                    LastDisassembleData.Parameters = Xmm(memory[3]) + ModRm(memory, _prefix2, 3, 4, ref last, ATmrPos.Right);
                                                                    offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                                }
                                                                else
                                                                {
                                                                    description = "Fused multiple-subtract of scalar single precision floating-point-values";
                                                                    LastDisassembleData.OpCode = "vfmsub231ss";
                                                                    LastDisassembleData.Parameters = Xmm(memory[3]) + ModRm(memory, _prefix2, 3, 4, ref last, ATmrPos.Right);
                                                                    offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                                }
                                                            }
                                                        }
                                                    }
                                                    break;

                                                /*0f*//*38*/
                                                case 0xbc:
                                                    {
                                                        if (_prefix2.Contains(0x66))
                                                        {
                                                            if (_hasVex)
                                                            {
                                                                if (RexW)
                                                                {
                                                                    description = "Fused negative multiply-add of packed double precision floating-point-values";
                                                                    LastDisassembleData.OpCode = "vfnmadd231pd";
                                                                    LastDisassembleData.Parameters = Xmm(memory[3]) + ModRm(memory, _prefix2, 3, 4, ref last, ATmrPos.Right);
                                                                    offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                                }
                                                                else
                                                                {
                                                                    description = "Fused negative multiply-add of packed single-precision floating-point-values";
                                                                    LastDisassembleData.OpCode = "vfnmadd231ps";
                                                                    LastDisassembleData.Parameters = Xmm(memory[3]) + ModRm(memory, _prefix2, 3, 4, ref last, ATmrPos.Right);
                                                                    offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                                }
                                                            }
                                                        }
                                                    }
                                                    break;

                                                case 0xbd:
                                                    {
                                                        if (_prefix2.Contains(0x66))
                                                        {
                                                            if (_hasVex)
                                                            {
                                                                if (RexW)
                                                                {
                                                                    description = "Fused negative multiply-add of scalar double precision floating-point-values";
                                                                    LastDisassembleData.OpCode = "vfnmadd231sd";
                                                                    LastDisassembleData.Parameters = Xmm(memory[3]) + ModRm(memory, _prefix2, 3, 4, ref last, ATmrPos.Right);
                                                                    offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                                }
                                                                else
                                                                {
                                                                    description = "Fused negative multiply-add of scalar single precision floating-point-values";
                                                                    LastDisassembleData.OpCode = "vfnmadd231ss";
                                                                    LastDisassembleData.Parameters = Xmm(memory[3]) + ModRm(memory, _prefix2, 3, 4, ref last, ATmrPos.Right);
                                                                    offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                                }
                                                            }
                                                        }
                                                    }
                                                    break;


                                                case 0xbe:
                                                    {
                                                        if (_prefix2.Contains(0x66))
                                                        {
                                                            if (_hasVex)
                                                            {
                                                                if (RexW)
                                                                {
                                                                    description = "Fused negative multiply-subtract of packed double precision floating-point-values";
                                                                    LastDisassembleData.OpCode = "vfmsub231pd";
                                                                    LastDisassembleData.Parameters = Xmm(memory[3]) + ModRm(memory, _prefix2, 3, 4, ref last, ATmrPos.Right);
                                                                    offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                                }
                                                                else
                                                                {
                                                                    description = "Fused negative multiply-subtract of packed single precision floating-point-values";
                                                                    LastDisassembleData.OpCode = "vfmsub231ps";
                                                                    LastDisassembleData.Parameters = Xmm(memory[3]) + ModRm(memory, _prefix2, 3, 4, ref last, ATmrPos.Right);
                                                                    offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                                }
                                                            }
                                                        }
                                                    }
                                                    break;

                                                case 0xbf:
                                                    {
                                                        if (_prefix2.Contains(0x66))
                                                        {
                                                            if (_hasVex)
                                                            {
                                                                if (RexW)
                                                                {
                                                                    description = "Fused negative multiply-subtract of scalar double precision floating-point-values";
                                                                    LastDisassembleData.OpCode = "vfmsub231sd";
                                                                    LastDisassembleData.Parameters = Xmm(memory[3]) + ModRm(memory, _prefix2, 3, 4, ref last, ATmrPos.Right);
                                                                    offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                                }
                                                                else
                                                                {
                                                                    description = "Fused begative multiply-subtract of scalar single precision floating-point-values";
                                                                    LastDisassembleData.OpCode = "vfmsub231ss";
                                                                    LastDisassembleData.Parameters = Xmm(memory[3]) + ModRm(memory, _prefix2, 3, 4, ref last, ATmrPos.Right);
                                                                    offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                                }
                                                            }
                                                        }
                                                    }
                                                    break;


                                                case 0xdb:
                                                    {
                                                        if (_prefix2.Contains(0x66))
                                                        {
                                                            description = "Perform the AES InvMixColumn transformation";
                                                            if (_hasVex)
                                                                LastDisassembleData.OpCode = "vaesimc";
                                                            else
                                                                LastDisassembleData.OpCode = "aesimc";

                                                            LastDisassembleData.Parameters = Xmm(memory[3]) + ModRm(memory, _prefix2, 3, 4, ref last, ATmrPos.Right);
                                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                        }
                                                    }
                                                    break;

                                                case 0xdc:
                                                    {
                                                        if (_prefix2.Contains(0x66))
                                                        {
                                                            description = "Perform one round of an AES encryption flow";
                                                            if (_hasVex)
                                                                LastDisassembleData.OpCode = "vaesenc";
                                                            else
                                                                LastDisassembleData.OpCode = "aesenc";

                                                            LastDisassembleData.Parameters = Xmm(memory[3]) + ModRm(memory, _prefix2, 3, 4, ref last, ATmrPos.Right);
                                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                        }
                                                    }
                                                    break;

                                                case 0xdd:
                                                    {
                                                        if (_prefix2.Contains(0x66))
                                                        {
                                                            description = "Perform last round of an AES encryption flow";
                                                            if (_hasVex)
                                                                LastDisassembleData.OpCode = "caesenclast";
                                                            else
                                                                LastDisassembleData.OpCode = "aesenclast";

                                                            LastDisassembleData.Parameters = Xmm(memory[3]) + ModRm(memory, _prefix2, 3, 4, ref last, ATmrPos.Right);
                                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                        }
                                                    }
                                                    break;

                                                /*0f*//*38*/
                                                case 0xde:
                                                    {
                                                        if (_prefix2.Contains(0x66))
                                                        {
                                                            description = "Perform one round of an AES decryption flow";
                                                            if (_hasVex)
                                                                LastDisassembleData.OpCode = "vaesdec";
                                                            else
                                                                LastDisassembleData.OpCode = "aesdec";

                                                            LastDisassembleData.Parameters = Xmm(memory[3]) + ModRm(memory, _prefix2, 3, 4, ref last, ATmrPos.Right);
                                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                        }
                                                    }
                                                    break;

                                                case 0xdf:
                                                    {
                                                        if (_prefix2.Contains(0x66))
                                                        {
                                                            description = "Perform last round of an AES decryption flow";
                                                            if (_hasVex)
                                                                LastDisassembleData.OpCode = "caesdeclast";
                                                            else
                                                                LastDisassembleData.OpCode = "aesdeclast";

                                                            LastDisassembleData.Parameters = Xmm(memory[3]) + ModRm(memory, _prefix2, 3, 4, ref last, ATmrPos.Right);
                                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                        }
                                                    }
                                                    break;

                                                /*0f*//*38*/
                                                case 0xf0:
                                                    {
                                                        if (_prefix2.Contains(0xf2))
                                                        {
                                                            description = "Accumulate CRC32 value";
                                                            LastDisassembleData.OpCode = "crc32";
                                                            LastDisassembleData.Parameters = R32(memory[3]) + ModRm(memory, _prefix2, 3, 2, ref last, ATmrPos.Right);
                                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                        }
                                                        else
                                                        {
                                                            description = "Move data after swapping bytes";
                                                            LastDisassembleData.OpCode = "movbe";
                                                            if (_prefix2.Contains(0x66))
                                                                LastDisassembleData.Parameters = R16(memory[3]) + ModRm(memory, _prefix2, 3, 2, ref last, ATmrPos.Right);
                                                            else
                                                                LastDisassembleData.Parameters = R32(memory[3]) + ModRm(memory, _prefix2, 3, 0, ref last, ATmrPos.Right);
                                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                        }
                                                    }
                                                    break;

                                                case 0xf1:
                                                    {
                                                        if (_prefix2.Contains(0xf2))
                                                        {
                                                            description = "Accumulate CRC32 value";
                                                            LastDisassembleData.OpCode = "crc32";
                                                            LastDisassembleData.Parameters = R32(memory[3]) + ModRm(memory, _prefix2, 3, 0, ref last, ATmrPos.Right);
                                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                        }
                                                        else
                                                        {
                                                            description = "Move data after swapping bytes";
                                                            LastDisassembleData.OpCode = "movbe";
                                                            LastDisassembleData.Parameters = ModRm(memory, _prefix2, 3, 0, ref last, ATmrPos.Left) + R32(memory[3]);
                                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                        }
                                                    }
                                                    break;

                                                case 0xf2:
                                                    {
                                                        if (_hasVex)
                                                        {
                                                            description = "Logical AND NOT";
                                                            LastDisassembleData.OpCode = "andn";
                                                            LastDisassembleData.Parameters = R32(memory[3]) + ModRm(memory, _prefix2, 3, 0, ref last, ATmrPos.Right);
                                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                        }
                                                    }
                                                    break;

                                                /*0f*//*38*/
                                                case 0xf3:
                                                    {
                                                        switch (GetReg(memory[3]))
                                                        {
                                                            case 1:
                                                                {
                                                                    description = "Reset lowerst set bit";
                                                                    LastDisassembleData.OpCode = "blsr";
                                                                    LastDisassembleData.Parameters = ModRm(memory, _prefix2, 3, 0, ref last, ATmrPos.Right);
                                                                    offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                                }
                                                                break;

                                                            case 2:
                                                                {
                                                                    description = "Get mask up to lowest set bit";
                                                                    LastDisassembleData.OpCode = "blsmsk";
                                                                    LastDisassembleData.Parameters = ModRm(memory, _prefix2, 3, 0, ref last, ATmrPos.Right);
                                                                    offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                                }
                                                                break;

                                                            case 3:
                                                                {
                                                                    description = "Extract lowest set isolated bit";
                                                                    LastDisassembleData.OpCode = "blsi";
                                                                    LastDisassembleData.Parameters = ModRm(memory, _prefix2, 3, 0, ref last, ATmrPos.Right);
                                                                    offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                                }
                                                                break;
                                                        }
                                                    }
                                                    break;

                                                case 0xf5:
                                                    {
                                                        if (_prefix2.Contains(0xf2))
                                                        {
                                                            description = "Parallel bits deposit";
                                                            LastDisassembleData.OpCode = "pdep";
                                                            LastDisassembleData.Parameters = R32(memory[3]) + ModRm(memory, _prefix2, 3, 0, ref last, ATmrPos.Left);
                                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                        }
                                                        else
                                                        {
                                                            description = "Zero high bits starting with specified bit position";
                                                            LastDisassembleData.OpCode = "bzhi";
                                                            LastDisassembleData.Parameters = R32(memory[3]) + ModRm(memory, _prefix2, 3, 0, ref last, ATmrPos.Left);
                                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                        }
                                                    }
                                                    break;


                                                case 0xf6:
                                                    {
                                                        if (_prefix2.Contains(0x66))
                                                        {
                                                            description = "ADX: Unsigned Integer Addition of Two Operands with Carry Flag";
                                                            LastDisassembleData.OpCode = "adcx";
                                                            LastDisassembleData.Parameters = R32(memory[3]) + ModRm(memory, _prefix2, 3, 0, ref last, ATmrPos.Right);
                                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                        }
                                                        else
                                                        if (_prefix2.Contains(0xf3))
                                                        {
                                                            description = "ADX: Unsigned Integer Addition of Two Operands with Overflow Flag";
                                                            LastDisassembleData.OpCode = "adox";
                                                            LastDisassembleData.Parameters = R32(memory[3]) + ModRm(memory, _prefix2, 3, 0, ref last, ATmrPos.Right);
                                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                        }
                                                        else
                                                        {
                                                            if (_hasVex)
                                                            {
                                                                description = "Unsigned multiple without affecting flags";
                                                                LastDisassembleData.OpCode = "mulx";
                                                                LastDisassembleData.Parameters = R32(memory[3]) + ModRm(memory, _prefix2, 3, 0, ref last, ATmrPos.Right);
                                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                            }
                                                        }
                                                    }
                                                    break;

                                                /*0f*//*38*/
                                                case 0xf7:
                                                    {
                                                        if (_hasVex)
                                                        {
                                                            if (_prefix2.Contains(0xf3))
                                                            {
                                                                description = "Shift arithmetically right without affecting flags";
                                                                LastDisassembleData.OpCode = "SARX";
                                                                LastDisassembleData.Parameters = R32(memory[3]) + ModRm(memory, _prefix2, 3, 0, ref last, ATmrPos.Right);
                                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                            }
                                                            else
                                                            if (_prefix2.Contains(0xf2))
                                                            {
                                                                description = "Shift logically right without affecting flags";
                                                                LastDisassembleData.OpCode = "SHRX";
                                                                LastDisassembleData.Parameters = R32(memory[3]) + ModRm(memory, _prefix2, 3, 0, ref last, ATmrPos.Right);
                                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                            }
                                                            else
                                                            if (_prefix2.Contains(0x66))
                                                            {
                                                                description = "Shift logically left without affecting flags";
                                                                LastDisassembleData.OpCode = "SHLX";
                                                                LastDisassembleData.Parameters = R32(memory[3]) + ModRm(memory, _prefix2, 3, 0, ref last, ATmrPos.Right);
                                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                            }
                                                        }
                                                        else
                                                        {
                                                            description = "Bit field extract";
                                                            LastDisassembleData.OpCode = "BEXTR";
                                                            LastDisassembleData.Parameters = R32(memory[3]) + ModRm(memory, _prefix2, 3, 0, ref last, ATmrPos.Right);
                                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                        }
                                                    }
                                                    break;

                                                default:
                                                    {
                                                        if (_hasVex)
                                                        {
                                                            LastDisassembleData.OpCode = "unknown avx 0F38 " + AStringUtils.IntToHex(memory[2], 2);
                                                            LastDisassembleData.Parameters = Xmm(memory[3]) + ModRm(memory, _prefix2, 3, 4, ref last, ATmrPos.Right);

                                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                        }
                                                    }
                                                    break;
                                            }
                                        }
                                        break;

                                    case 0x3a:
                                        {
                                            switch (memory[2])
                                            {
                                                case 0:
                                                    {
                                                        if (_prefix2.Contains(0x66))
                                                        {
                                                            if (_hasVex)
                                                            {
                                                                description = "Qwords element permutation";
                                                                LastDisassembleData.OpCode = "vpermq";

                                                                LastDisassembleData.Parameters = Xmm(memory[3]) + ModRm(memory, _prefix2, 3, 4, ref last, ATmrPos.Right) + ',';
                                                                LastDisassembleData.Parameters = LastDisassembleData.Parameters + AStringUtils.IntToHex(memory[(int)last], 2);
                                                                last += 1;
                                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                            }
                                                        }
                                                    }
                                                    break;

                                                case 0x1:
                                                    {
                                                        if (_prefix2.Contains(0x66))
                                                        {
                                                            if (_hasVex)
                                                            {
                                                                description = "Permute double-precision floating-point elements";
                                                                LastDisassembleData.OpCode = "vpermpd";

                                                                LastDisassembleData.Parameters = Xmm(memory[3]) + ModRm(memory, _prefix2, 3, 4, ref last, ATmrPos.Right) + ',';
                                                                LastDisassembleData.Parameters = LastDisassembleData.Parameters + AStringUtils.IntToHex(memory[(int)last], 2);
                                                                last += 1;
                                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                            }
                                                        }
                                                    }
                                                    break;

                                                case 0x2:
                                                    {
                                                        if (_prefix2.Contains(0x66))
                                                        {
                                                            if (_hasVex)
                                                            {
                                                                description = "Blend packed dwords";
                                                                LastDisassembleData.OpCode = "vblenddd";

                                                                LastDisassembleData.Parameters = Xmm(memory[3]) + ModRm(memory, _prefix2, 3, 4, ref last, ATmrPos.Right) + ',';
                                                                LastDisassembleData.Parameters = LastDisassembleData.Parameters + AStringUtils.IntToHex(memory[(int)last], 2);
                                                                last += 1;
                                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                            }
                                                        }
                                                    }
                                                    break;

                                                case 0x4:
                                                    {
                                                        if (_prefix2.Contains(0x66))
                                                        {
                                                            if (_hasVex)
                                                            {
                                                                description = "Permute single-prevision floating-point values";
                                                                LastDisassembleData.OpCode = "vpermilps";

                                                                _opCodeFlags.SkipExtraReg = true;
                                                                LastDisassembleData.Parameters = Xmm(memory[3]) + ModRm(memory, _prefix2, 3, 4, ref last, ATmrPos.Right) + ',';
                                                                LastDisassembleData.Parameters = LastDisassembleData.Parameters + AStringUtils.IntToHex(memory[(int)last], 2);
                                                                last += 1;
                                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                            }
                                                        }
                                                    }
                                                    break;


                                                case 0x5:
                                                    {
                                                        if (_prefix2.Contains(0x66))
                                                        {
                                                            if (_hasVex)
                                                            {
                                                                description = "Permute double-prevision floating-point values";
                                                                LastDisassembleData.OpCode = "vpermilpd";

                                                                _opCodeFlags.SkipExtraReg = true;
                                                                LastDisassembleData.Parameters = Xmm(memory[3]) + ModRm(memory, _prefix2, 3, 4, ref last, ATmrPos.Right) + ',';
                                                                LastDisassembleData.Parameters = LastDisassembleData.Parameters + AStringUtils.IntToHex(memory[(int)last], 2);
                                                                last += 1;
                                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                            }
                                                        }
                                                    }
                                                    break;

                                                /*0f*//*3a*/
                                                case 0x6:
                                                    {
                                                        if (_prefix2.Contains(0x66))
                                                        {
                                                            if (_hasVex)
                                                            {
                                                                description = "Permute floating-point values";
                                                                LastDisassembleData.OpCode = "vperm2f128";

                                                                LastDisassembleData.Parameters = Xmm(memory[3]) + ModRm(memory, _prefix2, 3, 4, ref last, ATmrPos.Right) + ',';
                                                                LastDisassembleData.Parameters = LastDisassembleData.Parameters + AStringUtils.IntToHex(memory[(int)last], 2);
                                                                last += 1;
                                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                            }
                                                        }
                                                    }
                                                    break;


                                                /*0f*//*3a*/
                                                case 0x8:
                                                    {
                                                        if (_prefix2.Contains(0x66))
                                                        {
                                                            description = "Round scalar single precision floating-point values";
                                                            if (_hasVex)
                                                                LastDisassembleData.OpCode = "vroundps";
                                                            else
                                                                LastDisassembleData.OpCode = "roundps";

                                                            _opCodeFlags.SkipExtraReg = true;
                                                            LastDisassembleData.Parameters = Xmm(memory[3]) + ModRm(memory, _prefix2, 3, 4, ref last, ATmrPos.Right) + ',';
                                                            LastDisassembleData.Parameters = LastDisassembleData.Parameters + AStringUtils.IntToHex(memory[(int)last], 2);
                                                            last += 1;
                                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                        }
                                                    }
                                                    break;

                                                case 0x9:
                                                    {
                                                        if (_prefix2.Contains(0x66))
                                                        {
                                                            description = "Round packed double precision floating-point values";
                                                            if (_hasVex)
                                                                LastDisassembleData.OpCode = "vroundpd";
                                                            else
                                                                LastDisassembleData.OpCode = "roundpd";

                                                            _opCodeFlags.SkipExtraReg = true;

                                                            LastDisassembleData.Parameters = Xmm(memory[3]) + ModRm(memory, _prefix2, 3, 4, ref last, ATmrPos.Right) + ',';
                                                            LastDisassembleData.Parameters = LastDisassembleData.Parameters + AStringUtils.IntToHex(memory[(int)last], 2);
                                                            last += 1;
                                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                        }
                                                    }
                                                    break;

                                                case 0xa:
                                                    {
                                                        if (_prefix2.Contains(0x66))
                                                        {
                                                            description = "Round scalar single precision floating-point values";
                                                            if (_hasVex)
                                                                LastDisassembleData.OpCode = "vroundss";
                                                            else
                                                                LastDisassembleData.OpCode = "roundss";

                                                            LastDisassembleData.Parameters = Xmm(memory[3]) + ModRm(memory, _prefix2, 3, 4, ref last, ATmrPos.Right) + ',';
                                                            LastDisassembleData.Parameters = LastDisassembleData.Parameters + AStringUtils.IntToHex(memory[(int)last], 2);
                                                            last += 1;
                                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                        }
                                                    }
                                                    break;

                                                case 0xb:
                                                    {
                                                        if (_prefix2.Contains(0x66))
                                                        {
                                                            description = "Round packed single precision floating-point values";
                                                            if (_hasVex)
                                                                LastDisassembleData.OpCode = "vroundsd";
                                                            else
                                                                LastDisassembleData.OpCode = "roundsd";



                                                            LastDisassembleData.Parameters = Xmm(memory[3]) + ModRm(memory, _prefix2, 3, 4, ref last, ATmrPos.Right) + ',';
                                                            LastDisassembleData.Parameters = LastDisassembleData.Parameters + AStringUtils.IntToHex(memory[(int)last], 2);
                                                            last += 1;
                                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                        }
                                                    }
                                                    break;

                                                /*0f*//*3a*/
                                                case 0xc:
                                                    {
                                                        if (_prefix2.Contains(0x66))
                                                        {
                                                            description = "Blend packed single precision floating-point values";
                                                            if (_hasVex)
                                                                LastDisassembleData.OpCode = "vblendps";
                                                            else
                                                                LastDisassembleData.OpCode = "blendps";

                                                            LastDisassembleData.Parameters = Xmm(memory[3]) + ModRm(memory, _prefix2, 3, 4, ref last, ATmrPos.Right) + ',';
                                                            LastDisassembleData.Parameters = LastDisassembleData.Parameters + AStringUtils.IntToHex(memory[(int)last], 2);
                                                            last += 1;
                                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                        }
                                                    }
                                                    break;

                                                /*0f*//*3a*/
                                                case 0xd:
                                                    {
                                                        if (_prefix2.Contains(0x66))
                                                        {
                                                            description = "Blend packed double precision floating-point values";
                                                            if (_hasVex)
                                                                LastDisassembleData.OpCode = "vblendpd";
                                                            else
                                                                LastDisassembleData.OpCode = "blendpd";

                                                            LastDisassembleData.Parameters = Xmm(memory[3]) + ModRm(memory, _prefix2, 3, 4, ref last, ATmrPos.Right) + ',';
                                                            LastDisassembleData.Parameters = LastDisassembleData.Parameters + AStringUtils.IntToHex(memory[(int)last], 2);
                                                            last += 1;
                                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                        }
                                                    }
                                                    break;

                                                /*0f*//*3a*/
                                                case 0xe:
                                                    {
                                                        if (_prefix2.Contains(0x66))
                                                        {
                                                            description = "Blend packed words";
                                                            if (_hasVex)
                                                                LastDisassembleData.OpCode = "vpblendw";
                                                            else
                                                                LastDisassembleData.OpCode = "pblendw";

                                                            LastDisassembleData.Parameters = Xmm(memory[3]) + ModRm(memory, _prefix2, 3, 4, ref last, ATmrPos.Right) + ',';
                                                            LastDisassembleData.Parameters = LastDisassembleData.Parameters + AStringUtils.IntToHex(memory[(int)last], 2);
                                                            last += 1;
                                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                        }
                                                    }
                                                    break;

                                                /*0f*//*3a*/
                                                case 0xf:
                                                    {
                                                        if (_prefix2.Contains(0x66))
                                                        {
                                                            description = "Packed align right";
                                                            if (_hasVex)
                                                                LastDisassembleData.OpCode = "vpalignr";
                                                            else
                                                                LastDisassembleData.OpCode = "palignr";

                                                            LastDisassembleData.Parameters = Xmm(memory[3]) + ModRm(memory, _prefix2, 3, 4, ref last, ATmrPos.Right) + ',';
                                                            LastDisassembleData.Parameters = LastDisassembleData.Parameters + AStringUtils.IntToHex(memory[(int)last], 2);
                                                            last += 1;
                                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                        }
                                                        else
                                                        {
                                                            LastDisassembleData.OpCode = "palignr";
                                                            LastDisassembleData.Parameters = Mm(memory[3]) + ModRm(memory, _prefix2, 3, 3, ref last, ATmrPos.Right) + ',';
                                                            LastDisassembleData.Parameters = LastDisassembleData.Parameters + AStringUtils.IntToHex(memory[(int)last], 2);
                                                            last += 1;
                                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                        }
                                                    }
                                                    break;

                                                /*0f*//*3a*/
                                                case 0x14:
                                                    {
                                                        if (_prefix2.Contains(0x66))
                                                        {
                                                            description = "Extract byte";
                                                            if (_hasVex)
                                                                LastDisassembleData.OpCode = "vpextrb";
                                                            else
                                                                LastDisassembleData.OpCode = "pextrb";

                                                            LastDisassembleData.Parameters = ModRm(memory, _prefix2, 3, 2, ref last, ATmrPos.Left) + Xmm(memory[3]) + ',';
                                                            LastDisassembleData.Parameters = LastDisassembleData.Parameters + AStringUtils.IntToHex(memory[(int)last], 2);
                                                            last += 1;
                                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                        }
                                                    }
                                                    break;

                                                /*0f*//*3a*/
                                                case 0x15:
                                                    {
                                                        if (_prefix2.Contains(0x66))
                                                        {
                                                            description = "Extract word";
                                                            if (_hasVex)
                                                                LastDisassembleData.OpCode = "vpextrw";
                                                            else
                                                                LastDisassembleData.OpCode = "pextrw";

                                                            LastDisassembleData.Parameters = ModRm(memory, _prefix2, 3, 1, ref last, ATmrPos.Left) + Xmm(memory[3]) + ',';
                                                            LastDisassembleData.Parameters = LastDisassembleData.Parameters + AStringUtils.IntToHex(memory[(int)last], 2);
                                                            last += 1;
                                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                        }
                                                    }
                                                    break;

                                                /*0f*//*3a*/
                                                case 0x16:
                                                    {
                                                        if (_prefix2.Contains(0x66))
                                                        {
                                                            if (RexW)
                                                            {
                                                                description = "Extract qword";
                                                                LastDisassembleData.OpCode = "pextrq";
                                                            }
                                                            else
                                                            {
                                                                description = "Extract dword";
                                                                LastDisassembleData.OpCode = "pextrd";
                                                            }

                                                            if (_hasVex) LastDisassembleData.OpCode = 'v' + LastDisassembleData.OpCode;

                                                            _opCodeFlags.SkipExtraReg = true;
                                                            LastDisassembleData.Parameters = ModRm(memory, _prefix2, 3, 2, ref last, ATmrPos.Left) + Xmm(memory[3]) + ',';
                                                            LastDisassembleData.Parameters = LastDisassembleData.Parameters + AStringUtils.IntToHex(memory[(int)last], 2);
                                                            last += 1;
                                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                        }
                                                    }
                                                    break;

                                                case 0x17:
                                                    {
                                                        if (_prefix2.Contains(0x66))
                                                        {
                                                            description = "Extract packed single precision floating-point value";
                                                            if (_hasVex)
                                                                LastDisassembleData.OpCode = "vextractps";
                                                            else
                                                                LastDisassembleData.OpCode = "extractps";

                                                            LastDisassembleData.Parameters = ModRm(memory, _prefix2, 3, 4, ref last, ATmrPos.Left) + Xmm(memory[3]) + ',';
                                                            LastDisassembleData.Parameters = LastDisassembleData.Parameters + AStringUtils.IntToHex(memory[(int)last], 2);
                                                            last += 1;
                                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                        }
                                                    }
                                                    break;


                                                case 0x18:
                                                    {
                                                        if (_prefix2.Contains(0x66))
                                                        {
                                                            if (_hasVex)
                                                            {
                                                                description = "Insert packed floating-point values";
                                                                LastDisassembleData.OpCode = "vinsertf128";
                                                                LastDisassembleData.Parameters = Xmm(memory[3]) + ModRm(memory, _prefix2, 3, 4, ref last, ATmrPos.Right) + ',';
                                                                LastDisassembleData.Parameters = LastDisassembleData.Parameters + AStringUtils.IntToHex(memory[(int)last], 2);
                                                                last += 1;
                                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                            }
                                                        }
                                                    }
                                                    break;

                                                case 0x19:
                                                    {
                                                        if (_prefix2.Contains(0x66))
                                                        {
                                                            if (_hasVex)
                                                            {
                                                                description = "Extract packed floating-point values";
                                                                LastDisassembleData.OpCode = "vextractf128";
                                                                LastDisassembleData.Parameters = Xmm(memory[3]) + ModRm(memory, _prefix2, 3, 4, ref last, ATmrPos.Right) + ',';
                                                                LastDisassembleData.Parameters = LastDisassembleData.Parameters + AStringUtils.IntToHex(memory[(int)last], 2);
                                                                last += 1;
                                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                            }
                                                        }
                                                    }
                                                    break;


                                                /*0f*//*3a*/
                                                case 0x1d:
                                                    {
                                                        if (_prefix2.Contains(0x66))
                                                        {
                                                            if (_hasVex)
                                                            {
                                                                description = "Convert single-precision FP value to 16-bit FP value";
                                                                LastDisassembleData.OpCode = "vcvtps2ph";
                                                                LastDisassembleData.Parameters = Xmm(memory[3]) + ModRm(memory, _prefix2, 3, 4, ref last, ATmrPos.Right) + ',';
                                                                LastDisassembleData.Parameters = LastDisassembleData.Parameters + AStringUtils.IntToHex(memory[(int)last], 2);
                                                                last += 1;
                                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                            }
                                                        }
                                                    }
                                                    break;

                                                /*0f*//*3a*/
                                                case 0x20:
                                                    {
                                                        if (_prefix2.Contains(0x66))
                                                        {
                                                            description = "Insert Byte";
                                                            if (_hasVex)
                                                                LastDisassembleData.OpCode = "vpinsrb";
                                                            else
                                                                LastDisassembleData.OpCode = "pinsrb";

                                                            LastDisassembleData.Parameters = Xmm(memory[3]) + ModRm(memory, _prefix2, 3, 0, ref last, ATmrPos.Right) + ',';
                                                            LastDisassembleData.Parameters = LastDisassembleData.Parameters + AStringUtils.IntToHex(memory[(int)last], 2);
                                                            last += 1;
                                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                        }
                                                    }
                                                    break;

                                                /*0f*//*3a*/
                                                case 0x21:
                                                    {    //C4 E3 79 21 80 B8 00 00 00 20
                                                        if (_prefix2.Contains(0x66))
                                                        {
                                                            description = "Insert Scalar Single-Precision Floating-Point Value";
                                                            if (_hasVex)
                                                                LastDisassembleData.OpCode = "vinsertps";
                                                            else
                                                                LastDisassembleData.OpCode = "insertps";

                                                            LastDisassembleData.Parameters = Xmm(memory[3]) + ModRm(memory, _prefix2, 3, 4, ref last, ATmrPos.Right) + ',';
                                                            LastDisassembleData.Parameters = LastDisassembleData.Parameters + AStringUtils.IntToHex(memory[(int)last], 2);
                                                            last += 1;
                                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                        }
                                                    }
                                                    break;

                                                case 0x22:
                                                    {
                                                        if (_prefix2.Contains(0x66))
                                                        {
                                                            if (RexW)
                                                            {
                                                                description = "Insert qword";
                                                                LastDisassembleData.OpCode = "pinsrq";
                                                            }
                                                            else
                                                            {
                                                                description = "Insert dword";
                                                                LastDisassembleData.OpCode = "pinsrd";
                                                            }

                                                            if (_hasVex)
                                                                LastDisassembleData.OpCode = 'v' + LastDisassembleData.OpCode;

                                                            LastDisassembleData.Parameters = Xmm(memory[3]) + ModRm(memory, _prefix2, 3, 0, ref last, ATmrPos.Right) + ',';
                                                            LastDisassembleData.Parameters = LastDisassembleData.Parameters + AStringUtils.IntToHex(memory[(int)last], 2);
                                                            last += 1;
                                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                        }
                                                    }
                                                    break;

                                                case 0x38:
                                                    {
                                                        if (_prefix2.Contains(0x66))
                                                        {
                                                            if (_hasVex)
                                                            {
                                                                description = "Insert packed integer values";
                                                                LastDisassembleData.OpCode = "vinserti128";
                                                                LastDisassembleData.Parameters = Xmm(memory[3]) + ModRm(memory, _prefix2, 3, 4, ref last, ATmrPos.Right) + ',';
                                                                LastDisassembleData.Parameters = LastDisassembleData.Parameters + AStringUtils.IntToHex(memory[(int)last], 2);
                                                                last += 1;
                                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                            }
                                                        }
                                                    }
                                                    break;

                                                case 0x39:
                                                    {
                                                        if (_prefix2.Contains(0x66))
                                                        {
                                                            if (_hasVex)
                                                            {
                                                                description = "Extract packed integer values";
                                                                LastDisassembleData.OpCode = "vextracti128";
                                                                LastDisassembleData.Parameters = Xmm(memory[3]) + ModRm(memory, _prefix2, 3, 4, ref last, ATmrPos.Right) + ',';
                                                                LastDisassembleData.Parameters = LastDisassembleData.Parameters + AStringUtils.IntToHex(memory[(int)last], 2);
                                                                last += 1;
                                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                            }
                                                        }
                                                    }
                                                    break;

                                                case 0x40:
                                                    {
                                                        if (_prefix2.Contains(0x66))
                                                        {
                                                            description = "Dot product of packed single precision floating-point values";
                                                            if (_hasVex)
                                                                LastDisassembleData.OpCode = "vdpps";
                                                            else
                                                                LastDisassembleData.OpCode = "dpps";

                                                            LastDisassembleData.Parameters = Xmm(memory[3]) + ModRm(memory, _prefix2, 3, 4, ref last, ATmrPos.Right) + ',';
                                                            LastDisassembleData.Parameters = LastDisassembleData.Parameters + AStringUtils.IntToHex(memory[(int)last], 2);
                                                            last += 1;
                                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                        }
                                                    }
                                                    break;

                                                case 0x41:
                                                    {
                                                        if (_prefix2.Contains(0x66))
                                                        {
                                                            description = "Dot product of packed double precision floating-point values";
                                                            if (_hasVex)
                                                                LastDisassembleData.OpCode = "vdppd";
                                                            else
                                                                LastDisassembleData.OpCode = "dppd";

                                                            LastDisassembleData.Parameters = Xmm(memory[3]) + ModRm(memory, _prefix2, 3, 4, ref last, ATmrPos.Right) + ',';
                                                            LastDisassembleData.Parameters = LastDisassembleData.Parameters + AStringUtils.IntToHex(memory[(int)last], 2);
                                                            last += 1;
                                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                        }
                                                    }
                                                    break;

                                                /*0f*//*3a*/
                                                case 0x42:
                                                    {
                                                        if (_prefix2.Contains(0x66))
                                                        {
                                                            description = "Compute multiple packed sums of absolute difference";
                                                            if (_hasVex)
                                                                LastDisassembleData.OpCode = "vmpsadbw";
                                                            else
                                                                LastDisassembleData.OpCode = "mpsadbw";

                                                            LastDisassembleData.Parameters = Xmm(memory[3]) + ModRm(memory, _prefix2, 3, 4, ref last, ATmrPos.Right) + ',';
                                                            LastDisassembleData.Parameters = LastDisassembleData.Parameters + AStringUtils.IntToHex(memory[(int)last], 2);
                                                            last += 1;
                                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                        }
                                                    }
                                                    break;

                                                /*0f*//*3a*/
                                                case 0x44:
                                                    {
                                                        if (_prefix2.Contains(0x66))
                                                        {
                                                            description = "Carry-less multiplication quadword";
                                                            if (_hasVex)
                                                                LastDisassembleData.OpCode = "vpclmulqdq";
                                                            else
                                                                LastDisassembleData.OpCode = "pclmulqdq";

                                                            LastDisassembleData.Parameters = Xmm(memory[3]) + ModRm(memory, _prefix2, 3, 4, ref last, ATmrPos.Right) + ',';
                                                            LastDisassembleData.Parameters = LastDisassembleData.Parameters + AStringUtils.IntToHex(memory[(int)last], 2);
                                                            last += 1;
                                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                        }
                                                    }
                                                    break;

                                                /*0f*//*3a*/
                                                case 0x46:
                                                    {
                                                        if (_prefix2.Contains(0x66))
                                                        {
                                                            if (_hasVex)
                                                            {
                                                                description = "Permute integer values";
                                                                LastDisassembleData.OpCode = "vperm2i128";

                                                                LastDisassembleData.Parameters = Xmm(memory[3]) + ModRm(memory, _prefix2, 3, 4, ref last, ATmrPos.Right) + ',';
                                                                LastDisassembleData.Parameters = LastDisassembleData.Parameters + AStringUtils.IntToHex(memory[(int)last], 2);
                                                                last += 1;
                                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                            }
                                                        }
                                                    }
                                                    break;

                                                /*0f*//*3a*/
                                                case 0x4a:
                                                    {
                                                        if (_prefix2.Contains(0x66))
                                                        {
                                                            if (_hasVex)
                                                            {
                                                                description = "Variable Blend Packed Single Precision Floating-Point Values";
                                                                LastDisassembleData.OpCode = "vblendvps";

                                                                LastDisassembleData.Parameters = Xmm(memory[3]) + ModRm(memory, _prefix2, 3, 4, ref last, ATmrPos.Right) + ',';
                                                                if (_opCodeFlags.L)
                                                                    LastDisassembleData.Parameters = LastDisassembleData.Parameters + _colorReg + RegNrToStr(ARegisterType.RtYmm, ((int)memory[(int)last] >> 4) & 0xf) + _endColor;
                                                                else
                                                                    LastDisassembleData.Parameters = LastDisassembleData.Parameters + _colorReg + RegNrToStr(ARegisterType.RtXmm, ((int)memory[(int)last] >> 4) & 0xf) + _endColor;

                                                                last += 1;
                                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                            }
                                                        }
                                                    }
                                                    break;

                                                /*0f*//*3a*/
                                                case 0x4b:
                                                    {
                                                        if (_prefix2.Contains(0x66))
                                                        {
                                                            if (_hasVex)
                                                            {
                                                                description = "Variable Blend Packed Double Precision Floating-Point Values";
                                                                LastDisassembleData.OpCode = "vblendvpd";

                                                                LastDisassembleData.Parameters = Xmm(memory[3]) + ModRm(memory, _prefix2, 3, 4, ref last, ATmrPos.Right) + ',';
                                                                if (_opCodeFlags.L)
                                                                    LastDisassembleData.Parameters = LastDisassembleData.Parameters + _colorReg + RegNrToStr(ARegisterType.RtYmm, ((int)memory[(int)last] >> 4) & 0xf) + _endColor;
                                                                else
                                                                    LastDisassembleData.Parameters = LastDisassembleData.Parameters + _colorReg + RegNrToStr(ARegisterType.RtXmm, ((int)memory[(int)last] >> 4) & 0xf) + _endColor;

                                                                last += 1;
                                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                            }
                                                        }
                                                    }
                                                    break;


                                                /*0f*//*3a*/
                                                case 0x60:
                                                    {
                                                        if (_prefix2.Contains(0x66))
                                                        {
                                                            description = "Packed compare explicit length string, return mask";
                                                            if (_hasVex)
                                                                LastDisassembleData.OpCode = "vpcmpestrm";
                                                            else
                                                                LastDisassembleData.OpCode = "pcmpestrm";

                                                            _opCodeFlags.SkipExtraReg = true;
                                                            LastDisassembleData.Parameters = Xmm(memory[3]) + ModRm(memory, _prefix2, 3, 4, ref last, ATmrPos.Right) + ',';
                                                            LastDisassembleData.Parameters = LastDisassembleData.Parameters + AStringUtils.IntToHex(memory[(int)last], 2);
                                                            last += 1;
                                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                        }
                                                    }
                                                    break;

                                                /*0f*//*3a*/
                                                case 0x61:
                                                    {
                                                        if (_prefix2.Contains(0x66))
                                                        {
                                                            description = "Packed compare explicit length string, return index";
                                                            if (_hasVex)
                                                                LastDisassembleData.OpCode = "vpcmpestri";
                                                            else
                                                                LastDisassembleData.OpCode = "pcmpestri";

                                                            _opCodeFlags.SkipExtraReg = true;
                                                            LastDisassembleData.Parameters = Xmm(memory[3]) + ModRm(memory, _prefix2, 3, 4, ref last, ATmrPos.Right) + ',';
                                                            LastDisassembleData.Parameters = LastDisassembleData.Parameters + AStringUtils.IntToHex(memory[(int)last], 2);
                                                            last += 1;
                                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                        }
                                                    }
                                                    break;

                                                /*0f*//*3a*/
                                                case 0x62:
                                                    {
                                                        if (_prefix2.Contains(0x66))
                                                        {
                                                            description = "Packed compare implicit length string, return mask";
                                                            if (_hasVex)
                                                                LastDisassembleData.OpCode = "vpcmpistrm";
                                                            else
                                                                LastDisassembleData.OpCode = "pcmpistrm";

                                                            _opCodeFlags.SkipExtraReg = true;
                                                            LastDisassembleData.Parameters = Xmm(memory[3]) + ModRm(memory, _prefix2, 3, 4, ref last, ATmrPos.Right) + ',';
                                                            LastDisassembleData.Parameters = LastDisassembleData.Parameters + AStringUtils.IntToHex(memory[(int)last], 2);
                                                            last += 1;
                                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                        }
                                                    }
                                                    break;

                                                /*0f*//*3a*/
                                                case 0x63:
                                                    {
                                                        if (_prefix2.Contains(0x66))
                                                        {
                                                            description = "Packed compare implicit length string, return index";
                                                            if (_hasVex)
                                                                LastDisassembleData.OpCode = "vpcmpistri";
                                                            else
                                                                LastDisassembleData.OpCode = "pcmpistri";

                                                            _opCodeFlags.SkipExtraReg = true;
                                                            LastDisassembleData.Parameters = Xmm(memory[3]) + ModRm(memory, _prefix2, 3, 4, ref last, ATmrPos.Right) + ',';
                                                            LastDisassembleData.Parameters = LastDisassembleData.Parameters + AStringUtils.IntToHex(memory[(int)last], 2);
                                                            last += 1;
                                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                        }
                                                    }
                                                    break;

                                                case 0xdf:
                                                    {
                                                        if (_prefix2.Contains(0x66))
                                                        {
                                                            description = "AES round key generation assist";
                                                            if (_hasVex)
                                                                LastDisassembleData.OpCode = "vaeskeygenassist";
                                                            else
                                                                LastDisassembleData.OpCode = "aeskeygenassist";

                                                            LastDisassembleData.Parameters = Xmm(memory[3]) + ModRm(memory, _prefix2, 3, 4, ref last, ATmrPos.Right) + ',';
                                                            LastDisassembleData.Parameters = LastDisassembleData.Parameters + AStringUtils.IntToHex(memory[(int)last], 2);
                                                            last += 1;
                                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                        }
                                                    }
                                                    break;

                                                case 0xf0:
                                                    {
                                                        if (_prefix2.Contains(0xf2))
                                                        {
                                                            if (_hasVex)
                                                            {
                                                                description = "Rotate right logical without affecting flags";
                                                                LastDisassembleData.OpCode = "rorx";
                                                                _opCodeFlags.SkipExtraReg = true;
                                                                LastDisassembleData.Parameters = R32(memory[3]) + ModRm(memory, _prefix2, 3, 0, ref last, ATmrPos.Right) + ',';
                                                                LastDisassembleData.Parameters = LastDisassembleData.Parameters + ',' + AStringUtils.IntToHex(memory[(int)last], 2);
                                                                last += 1;
                                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                            }
                                                        }
                                                    }
                                                    break;



                                                default:
                                                    {
                                                        if (_hasVex)
                                                        {
                                                            LastDisassembleData.OpCode = "unknown avx 0F3A " + AStringUtils.IntToHex(memory[2], 2);
                                                            LastDisassembleData.Parameters = Xmm(memory[3]) + ModRm(memory, _prefix2, 3, 4, ref last, ATmrPos.Right);
                                                            LastDisassembleData.Parameters = LastDisassembleData.Parameters + ',' + AStringUtils.IntToHex(memory[(int)last], 2);
                                                            last += 1;
                                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                        }
                                                    }
                                                    break;
                                            }
                                        }
                                        break;


                                    case 0x40:
                                        {
                                            description = "move if overflow";
                                            LastDisassembleData.OpCode = "cmovo";
                                            if (_prefix2.Contains(0x66)) LastDisassembleData.Parameters = R16(memory[2]) + ModRm(memory, _prefix2, 2, 1, ref last, ATmrPos.Right);
                                            else
                                                LastDisassembleData.Parameters = R32(memory[2]) + ModRm(memory, _prefix2, 2, 0, ref last, ATmrPos.Right);
                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                        }
                                        break;

                                    case 0x41:
                                        {
                                            description = "move if not overflow";
                                            LastDisassembleData.OpCode = "cmovno";
                                            if (_prefix2.Contains(0x66))
                                                LastDisassembleData.Parameters = R16(memory[2]) + ModRm(memory, _prefix2, 2, 1, ref last, ATmrPos.Right);
                                            else
                                                LastDisassembleData.Parameters = R32(memory[2]) + ModRm(memory, _prefix2, 2, 0, ref last, ATmrPos.Right);

                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                        }
                                        break;

                                    case 0x42:
                                        {
                                            description = "move if below/ move if carry";
                                            LastDisassembleData.OpCode = "cmovb";
                                            if (_prefix2.Contains(0x66))
                                                LastDisassembleData.Parameters = R16(memory[2]) + ModRm(memory, _prefix2, 2, 1, ref last, ATmrPos.Right);
                                            else
                                                LastDisassembleData.Parameters = R32(memory[2]) + ModRm(memory, _prefix2, 2, 0, ref last, ATmrPos.Right);

                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                        }
                                        break;

                                    case 0x43:
                                        {
                                            description = "move if above or equal/ move if not carry";
                                            LastDisassembleData.OpCode = "cmovae";
                                            if (_prefix2.Contains(0x66))
                                                LastDisassembleData.Parameters = R16(memory[2]) + ModRm(memory, _prefix2, 2, 1, ref last, ATmrPos.Right);
                                            else
                                                LastDisassembleData.Parameters = R32(memory[2]) + ModRm(memory, _prefix2, 2, 0, ref last, ATmrPos.Right);

                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                        }
                                        break;

                                    case 0x44:
                                        {
                                            description = "move if equal/move if zero";
                                            LastDisassembleData.OpCode = "cmove";
                                            if (_prefix2.Contains(0x66))
                                                LastDisassembleData.Parameters = R16(memory[2]) + ModRm(memory, _prefix2, 2, 1, ref last, ATmrPos.Right);
                                            else
                                                LastDisassembleData.Parameters = R32(memory[2]) + ModRm(memory, _prefix2, 2, 0, ref last, ATmrPos.Right);

                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                        }
                                        break;

                                    case 0x45:
                                        {
                                            description = "move if not equal/move if not zero";
                                            LastDisassembleData.OpCode = "cmovne";
                                            if (_prefix2.Contains(0x66))
                                                LastDisassembleData.Parameters = R16(memory[2]) + ModRm(memory, _prefix2, 2, 1, ref last, ATmrPos.Right);
                                            else
                                                LastDisassembleData.Parameters = R32(memory[2]) + ModRm(memory, _prefix2, 2, 0, ref last, ATmrPos.Right);

                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                        }
                                        break;

                                    case 0x46:
                                        {
                                            description = "move if below or equal";
                                            LastDisassembleData.OpCode = "cmovbe";
                                            if (_prefix2.Contains(0x66))
                                                LastDisassembleData.Parameters = R16(memory[2]) + ModRm(memory, _prefix2, 2, 1, ref last, ATmrPos.Right);
                                            else
                                                LastDisassembleData.Parameters = R32(memory[2]) + ModRm(memory, _prefix2, 2, 0, ref last, ATmrPos.Right);

                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                        }
                                        break;


                                    case 0x47:
                                        {
                                            description = "move if above";
                                            LastDisassembleData.OpCode = "cmova";
                                            if (_prefix2.Contains(0x66))
                                                LastDisassembleData.Parameters = R16(memory[2]) + ModRm(memory, _prefix2, 2, 1, ref last, ATmrPos.Right);
                                            else
                                                LastDisassembleData.Parameters = R32(memory[2]) + ModRm(memory, _prefix2, 2, 0, ref last, ATmrPos.Right);

                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                        }
                                        break;

                                    case 0x48:
                                        {
                                            description = "move if sign";
                                            LastDisassembleData.OpCode = "cmovs";
                                            if (_prefix2.Contains(0x66))
                                                LastDisassembleData.Parameters = R16(memory[2]) + ModRm(memory, _prefix2, 2, 1, ref last, ATmrPos.Right);
                                            else
                                                LastDisassembleData.Parameters = R32(memory[2]) + ModRm(memory, _prefix2, 2, 0, ref last, ATmrPos.Right);

                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                        }
                                        break;

                                    case 0x49:
                                        {
                                            description = "move if not sign";
                                            LastDisassembleData.OpCode = "cmovns";
                                            if (_prefix2.Contains(0x66))
                                                LastDisassembleData.Parameters = R16(memory[2]) + ModRm(memory, _prefix2, 2, 1, ref last, ATmrPos.Right);
                                            else
                                                LastDisassembleData.Parameters = R32(memory[2]) + ModRm(memory, _prefix2, 2, 0, ref last, ATmrPos.Right);

                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                        }
                                        break;

                                    case 0x4a:
                                        {
                                            description = "move if parity even";
                                            LastDisassembleData.OpCode = "cmovpe";
                                            if (_prefix2.Contains(0x66))
                                                LastDisassembleData.Parameters = R16(memory[2]) + ModRm(memory, _prefix2, 2, 1, ref last, ATmrPos.Right);
                                            else
                                                LastDisassembleData.Parameters = R32(memory[2]) + ModRm(memory, _prefix2, 2, 0, ref last, ATmrPos.Right);

                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                        }
                                        break;

                                    case 0x4b:
                                        {
                                            description = "move if not parity/move if parity odd";
                                            LastDisassembleData.OpCode = "cmovnp";
                                            if (_prefix2.Contains(0x66))
                                                LastDisassembleData.Parameters = R16(memory[2]) + ModRm(memory, _prefix2, 2, 1, ref last, ATmrPos.Right);
                                            else
                                                LastDisassembleData.Parameters = R32(memory[2]) + ModRm(memory, _prefix2, 2, 0, ref last, ATmrPos.Right);

                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                        }
                                        break;

                                    case 0x4c:
                                        {
                                            description = "move if less";
                                            LastDisassembleData.OpCode = "cmovl";
                                            if (_prefix2.Contains(0x66))
                                                LastDisassembleData.Parameters = R16(memory[2]) + ModRm(memory, _prefix2, 2, 1, ref last, ATmrPos.Right);
                                            else
                                                LastDisassembleData.Parameters = R32(memory[2]) + ModRm(memory, _prefix2, 2, 0, ref last, ATmrPos.Right);

                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                        }
                                        break;

                                    case 0x4d:
                                        {
                                            description = "move if greater or equal";
                                            LastDisassembleData.OpCode = "cmovge";
                                            if (_prefix2.Contains(0x66))
                                                LastDisassembleData.Parameters = R16(memory[2]) + ModRm(memory, _prefix2, 2, 1, ref last, ATmrPos.Right);
                                            else
                                                LastDisassembleData.Parameters = R32(memory[2]) + ModRm(memory, _prefix2, 2, 0, ref last, ATmrPos.Right);

                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                        }
                                        break;

                                    case 0x4e:
                                        {
                                            description = "move if less or equal";
                                            LastDisassembleData.OpCode = "cmovle";
                                            if (_prefix2.Contains(0x66))
                                                LastDisassembleData.Parameters = R16(memory[2]) + ModRm(memory, _prefix2, 2, 1, ref last, ATmrPos.Right);
                                            else
                                                LastDisassembleData.Parameters = R32(memory[2]) + ModRm(memory, _prefix2, 2, 0, ref last, ATmrPos.Right);


                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                        }
                                        break;

                                    case 0x4f:
                                        {
                                            description = "move if greater";
                                            LastDisassembleData.OpCode = "cmovg";
                                            if (_prefix2.Contains(0x66))
                                                LastDisassembleData.Parameters = R16(memory[2]) + ModRm(memory, _prefix2, 2, 1, ref last, ATmrPos.Right);
                                            else
                                                LastDisassembleData.Parameters = R32(memory[2]) + ModRm(memory, _prefix2, 2, 0, ref last, ATmrPos.Right);

                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                        }
                                        break;

                                    case 0x50:
                                        {
                                            LastDisassembleData.IsFloat = true;
                                            if (_prefix2.Contains(0x66))
                                            {
                                                if (_hasVex)
                                                    LastDisassembleData.OpCode = "vmovmskpd";
                                                else
                                                    LastDisassembleData.OpCode = "movmskpd";

                                                LastDisassembleData.Parameters = R32(memory[2]) + ModRm(memory, _prefix2, 2, 4, ref last, ATmrPos.Right);
                                                description = "extract packed double-precision floating-point sign mask";
                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                            else
                                            {
                                                if (_hasVex)
                                                    LastDisassembleData.OpCode = "vmovmskps";
                                                else
                                                    LastDisassembleData.OpCode = "movmskps";

                                                LastDisassembleData.Parameters = R32(memory[2]) + ModRm(memory, _prefix2, 2, 4, ref last, ATmrPos.Right);
                                                LastDisassembleData.DataSize = 4;

                                                description = "move mask to integer";
                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                        }
                                        break;

                                    case 0x51:
                                        {
                                            LastDisassembleData.IsFloat = true;
                                            if (_prefix2.Contains(0xf2))
                                            {
                                                if (_hasVex)
                                                    LastDisassembleData.OpCode = "vsqrtsd";
                                                else
                                                    LastDisassembleData.OpCode = "sqrtsd";

                                                LastDisassembleData.Parameters = Xmm(memory[2]) + ModRm(memory, _prefix2, 2, 4, ref last, ATmrPos.Right);
                                                description = "scalar double-fp square root";
                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                            else
                                            if (_prefix2.Contains(0xf3))
                                            {
                                                if (_hasVex)
                                                    LastDisassembleData.OpCode = "vsqrtss";
                                                else
                                                    LastDisassembleData.OpCode = "sqrtss";

                                                LastDisassembleData.Parameters = Xmm(memory[2]) + ModRm(memory, _prefix2, 2, 4, ref last, ATmrPos.Right);
                                                description = "scalar single-fp square root";
                                                LastDisassembleData.DataSize = 4;
                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                            else
                                            if (_prefix2.Contains(0x66))
                                            {
                                                if (_hasVex)
                                                    LastDisassembleData.OpCode = "vsqrtpd";
                                                else
                                                    LastDisassembleData.OpCode = "sqrtpd";

                                                _opCodeFlags.SkipExtraReg = true;
                                                LastDisassembleData.Parameters = Xmm(memory[2]) + ModRm(memory, _prefix2, 2, 4, ref last, ATmrPos.Right);
                                                description = "packed double-fp square root";

                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                            else
                                            {
                                                if (_hasVex)
                                                    LastDisassembleData.OpCode = "vsqrtps";
                                                else
                                                    LastDisassembleData.OpCode = "sqrtps";

                                                _opCodeFlags.SkipExtraReg = true;
                                                LastDisassembleData.Parameters = Xmm(memory[2]) + ModRm(memory, _prefix2, 2, 4, ref last, ATmrPos.Right);
                                                description = "packed single-fp square root";

                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                        }
                                        break;

                                    case 0x52:
                                        {
                                            LastDisassembleData.IsFloat = true;
                                            if (_prefix2.Contains(0xf3))
                                            {
                                                if (_hasVex)
                                                    LastDisassembleData.OpCode = "vrsqrtss";
                                                else
                                                    LastDisassembleData.OpCode = "rsqrtss";

                                                LastDisassembleData.Parameters = Xmm(memory[2]) + ModRm(memory, _prefix2, 2, 4, ref last, ATmrPos.Right);

                                                description = "packed single-fp square root reciprocal";
                                                LastDisassembleData.DataSize = 4;
                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                            else
                                            {
                                                if (_hasVex)
                                                    LastDisassembleData.OpCode = "vrsqrtps";
                                                else
                                                    LastDisassembleData.OpCode = "rsqrtps";
                                                LastDisassembleData.Parameters = Xmm(memory[2]) + ModRm(memory, _prefix2, 2, 4, ref last, ATmrPos.Right);

                                                description = "scalar single-fp square root reciprocal";
                                                LastDisassembleData.DataSize = 4;
                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                        }
                                        break;

                                    case 0x53:
                                        {
                                            LastDisassembleData.IsFloat = true;
                                            if (_prefix2.Contains(0xf3))
                                            {
                                                if (_hasVex)
                                                    LastDisassembleData.OpCode = "vrcpss";
                                                else
                                                    LastDisassembleData.OpCode = "rcpss";

                                                LastDisassembleData.Parameters = Xmm(memory[2]) + ModRm(memory, _prefix2, 2, 4, ref last, ATmrPos.Right);

                                                description = "Compute Reciprocal of Scalar Single-Precision Floating-Point Values";
                                                LastDisassembleData.DataSize = 4;
                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                            else
                                            {
                                                if (_hasVex)
                                                    LastDisassembleData.OpCode = "vrcpps";
                                                else
                                                    LastDisassembleData.OpCode = "rcpps";
                                                LastDisassembleData.Parameters = Xmm(memory[2]) + ModRm(memory, _prefix2, 2, 4, ref last, ATmrPos.Right);

                                                description = "Compute Reciprocals of Packed Single-Precision Floating-Point Values";
                                                LastDisassembleData.DataSize = 4;
                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                        }
                                        break;

                                    case 0x54:
                                        {
                                            if (_prefix2.Contains(0x66))
                                            {
                                                if (_hasVex)
                                                    LastDisassembleData.OpCode = "vandpd";
                                                else
                                                    LastDisassembleData.OpCode = "andpd";

                                                LastDisassembleData.Parameters = Xmm(memory[2]) + ModRm(memory, _prefix2, 2, 4, ref last, ATmrPos.Right);

                                                description = "bit-wise logical and of xmm2/m128 and xmm1";
                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                            else
                                            {
                                                if (_hasVex)
                                                    LastDisassembleData.OpCode = "vandps";
                                                else
                                                    LastDisassembleData.OpCode = "andps";
                                                LastDisassembleData.Parameters = Xmm(memory[2]) + ModRm(memory, _prefix2, 2, 4, ref last, ATmrPos.Right);
                                                LastDisassembleData.DataSize = 4;

                                                description = "bit-wise logical and for single fp";
                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                        }
                                        break;

                                    case 0x55:
                                        {
                                            if (_prefix2.Contains(0x66))
                                            {
                                                description = "bit-wise logical and not of packed double-precision fp values";
                                                if (_hasVex)
                                                    LastDisassembleData.OpCode = "vandnpd";
                                                else
                                                    LastDisassembleData.OpCode = "andnpd";

                                                LastDisassembleData.Parameters = Xmm(memory[2]) + ModRm(memory, _prefix2, 2, 4, ref last, ATmrPos.Right);
                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                            else
                                            {
                                                description = "bit-wise logical and not for single-fp";
                                                if (_hasVex)
                                                    LastDisassembleData.OpCode = "vandnps";
                                                else
                                                    LastDisassembleData.OpCode = "andnps";
                                                LastDisassembleData.Parameters = Xmm(memory[2]) + ModRm(memory, _prefix2, 2, 4, ref last, ATmrPos.Right);
                                                LastDisassembleData.DataSize = 4;

                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                        }
                                        break;

                                    case 0x56:
                                        {
                                            if (_prefix2.Contains(0x66))
                                            {
                                                description = "bit-wise logical or of double-fp";
                                                if (_hasVex)
                                                    LastDisassembleData.OpCode = "vorpd";
                                                else
                                                    LastDisassembleData.OpCode = "orpd";

                                                LastDisassembleData.Parameters = Xmm(memory[2]) + ModRm(memory, _prefix2, 2, 4, ref last, ATmrPos.Right);


                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                            else
                                            {
                                                description = "bit-wise logical or for single-fp";
                                                if (_hasVex)
                                                    LastDisassembleData.OpCode = "vorps";
                                                else
                                                    LastDisassembleData.OpCode = "orps";

                                                LastDisassembleData.Parameters = Xmm(memory[2]) + ModRm(memory, _prefix2, 2, 4, ref last, ATmrPos.Right);
                                                LastDisassembleData.DataSize = 4;

                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                        }
                                        break;

                                    case 0x57:
                                        {
                                            if (_prefix2.Contains(0x66))
                                            {
                                                description = "bit-wise logical xor for double-fp data";
                                                if (_hasVex)
                                                    LastDisassembleData.OpCode = "vxorpd";
                                                else
                                                    LastDisassembleData.OpCode = "xorpd";
                                                LastDisassembleData.Parameters = Xmm(memory[2]) + ModRm(memory, _prefix2, 2, 4, ref last, ATmrPos.Right);


                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                            else
                                            {
                                                description = "bit-wise logical xor for single-fp data";
                                                if (_hasVex)
                                                    LastDisassembleData.OpCode = "vxorps";
                                                else
                                                    LastDisassembleData.OpCode = "xorps";

                                                LastDisassembleData.Parameters = Xmm(memory[2]) + ModRm(memory, _prefix2, 2, 4, ref last, ATmrPos.Right);
                                                LastDisassembleData.DataSize = 4;

                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                        }
                                        break;

                                    case 0x58:
                                        {
                                            LastDisassembleData.IsFloat = true;
                                            if (_prefix2.Contains(0xf2))
                                            {
                                                //delete the repne from the tempresult
                                                if (_hasVex)
                                                    LastDisassembleData.OpCode = "vaddsd";
                                                else
                                                    LastDisassembleData.OpCode = "addsd";
                                                LastDisassembleData.Parameters = Xmm(memory[2]) + ModRm(memory, _prefix2, 2, 4, ref last, ATmrPos.Right);

                                                description = "add the lower sp fp number from xmm2/mem to xmm1.";
                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                            else
                                            if (_prefix2.Contains(0xf3))
                                            {
                                                //delete the repe from the tempresult

                                                if (_hasVex)
                                                    LastDisassembleData.OpCode = "vaddss";
                                                else
                                                    LastDisassembleData.OpCode = "addss";
                                                LastDisassembleData.Parameters = Xmm(memory[2]) + ModRm(memory, _prefix2, 2, 4, ref last, ATmrPos.Right);
                                                LastDisassembleData.DataSize = 4;

                                                description = "add the lower sp fp number from xmm2/mem to xmm1.";
                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                            else
                                            {
                                                if (_prefix2.Contains(0x66))
                                                {
                                                    if (_hasVex)
                                                        LastDisassembleData.OpCode = "vaddpd";
                                                    else
                                                        LastDisassembleData.OpCode = "addpd";

                                                    LastDisassembleData.Parameters = Xmm(memory[2]) + ModRm(memory, _prefix2, 2, 4, ref last, ATmrPos.Right);

                                                    description = "add packed double-precision floating-point values from xmm2/mem to xmm1";
                                                    offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                }
                                                else
                                                {
                                                    if (_hasVex)
                                                        LastDisassembleData.OpCode = "vaddps";
                                                    else
                                                        LastDisassembleData.OpCode = "addps";

                                                    LastDisassembleData.Parameters = Xmm(memory[2]) + ModRm(memory, _prefix2, 2, 4, ref last, ATmrPos.Right);
                                                    LastDisassembleData.DataSize = 4;

                                                    description = "add packed sp fp numbers from xmm2/mem to xmm1";
                                                    offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                }
                                            }
                                        }
                                        break;

                                    case 0x59:
                                        {
                                            LastDisassembleData.IsFloat = true;
                                            if (_prefix2.Contains(0xf2))
                                            {

                                                if (_hasVex)
                                                    LastDisassembleData.OpCode = "vmulsd";
                                                else
                                                    LastDisassembleData.OpCode = "mulsd";
                                                LastDisassembleData.Parameters = Xmm(memory[2]) + ModRm(memory, _prefix2, 2, 4, ref last, ATmrPos.Right);

                                                description = "scalar double-fp multiply";
                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                            else
                                            if (_prefix2.Contains(0xf3))
                                            {

                                                if (_hasVex)
                                                    LastDisassembleData.OpCode = "vmulss";
                                                else
                                                    LastDisassembleData.OpCode = "mulss";
                                                LastDisassembleData.Parameters = Xmm(memory[2]) + ModRm(memory, _prefix2, 2, 4, ref last, ATmrPos.Right);
                                                LastDisassembleData.DataSize = 4;

                                                description = "scalar single-fp multiply";
                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                            else
                                            if (_prefix2.Contains(0x66))
                                            {
                                                if (_hasVex)
                                                    LastDisassembleData.OpCode = "vmulpd";
                                                else
                                                    LastDisassembleData.OpCode = "mulpd";

                                                LastDisassembleData.Parameters = Xmm(memory[2]) + ModRm(memory, _prefix2, 2, 4, ref last, ATmrPos.Right);

                                                description = "packed double-fp multiply";
                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                            else
                                            {
                                                if (_hasVex)
                                                    LastDisassembleData.OpCode = "vmulps";
                                                else
                                                    LastDisassembleData.OpCode = "mulps";
                                                LastDisassembleData.Parameters = Xmm(memory[2]) + ModRm(memory, _prefix2, 2, 4, ref last, ATmrPos.Right);
                                                LastDisassembleData.DataSize = 4;

                                                description = "packed single-fp multiply";
                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                        }
                                        break;

                                    case 0x5a:
                                        {
                                            LastDisassembleData.IsFloat = true;
                                            if (_prefix2.Contains(0xf2))
                                            {

                                                if (_hasVex)
                                                    LastDisassembleData.OpCode = "vcvtsd2ss";
                                                else
                                                    LastDisassembleData.OpCode = "cvtsd2ss";
                                                LastDisassembleData.Parameters = Xmm(memory[2]) + ModRm(memory, _prefix2, 2, 4, ref last, ATmrPos.Right);

                                                description = "convert scalar double-precision floating-point value to scalar single-precision floating-point value";
                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                            else
                                            if (_prefix2.Contains(0xf3))
                                            {

                                                if (_hasVex)
                                                    LastDisassembleData.OpCode = "vcvtss2sd";
                                                else
                                                    LastDisassembleData.OpCode = "cvtss2sd";

                                                LastDisassembleData.Parameters = Xmm(memory[2]) + ModRm(memory, _prefix2, 2, 4, ref last, ATmrPos.Right);
                                                LastDisassembleData.DataSize = 4;

                                                description = "convert scalar single-precision floating-point value to scalar double-precision floating-point value";
                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                            else
                                            {
                                                if (_prefix2.Contains(0x66))
                                                {
                                                    if (_hasVex)
                                                        LastDisassembleData.OpCode = "vcvtpd2ps";
                                                    else
                                                        LastDisassembleData.OpCode = "cvtpd2ps";
                                                    _opCodeFlags.SkipExtraReg = true;

                                                    LastDisassembleData.Parameters = Xmm(memory[2]) + ModRm(memory, _prefix2, 2, 4, ref last, ATmrPos.Right);

                                                    description = "convert packed double precision fp values to packed single precision fp values";
                                                    offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                }
                                                else
                                                {
                                                    if (_hasVex)
                                                        LastDisassembleData.OpCode = "vcvtps2pd";
                                                    else
                                                        LastDisassembleData.OpCode = "cvtps2pd";

                                                    _opCodeFlags.SkipExtraReg = true;
                                                    LastDisassembleData.Parameters = Xmm(memory[2]) + ModRm(memory, _prefix2, 2, 4, ref last, ATmrPos.Right);
                                                    LastDisassembleData.DataSize = 4;

                                                    description = "convert packed single precision fp values to packed double precision fp values";
                                                    offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                }
                                            }
                                        }
                                        break;

                                    case 0x5b:
                                        {

                                            if (_prefix2.Contains(0x66))
                                            {
                                                LastDisassembleData.IsFloat = true;
                                                if (_hasVex)
                                                    LastDisassembleData.OpCode = "vcvtps2dq";
                                                else
                                                    LastDisassembleData.OpCode = "cvtps2dq";

                                                _opCodeFlags.SkipExtraReg = true;
                                                LastDisassembleData.Parameters = Xmm(memory[2]) + ModRm(memory, _prefix2, 2, 4, ref last, ATmrPos.Right);
                                                LastDisassembleData.DataSize = 4;

                                                description = "convert ps-precision fpoint values to packed dword's ";
                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                            else
                                            if (_prefix2.Contains(0xf3))
                                            {
                                                if (_hasVex)
                                                    LastDisassembleData.OpCode = "vcvttps2dq";
                                                else
                                                    LastDisassembleData.OpCode = "cvttps2dq";

                                                _opCodeFlags.SkipExtraReg = true;
                                                LastDisassembleData.Parameters = Xmm(memory[2]) + ModRm(memory, _prefix2, 2, 4, ref last, ATmrPos.Right);

                                                description = "Convert with Truncation Packed Single-Precision FP Values to Packed Dword Integers";
                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                            else
                                            {
                                                if (_hasVex)
                                                    LastDisassembleData.OpCode = "vcvtdq2ps";
                                                else
                                                    LastDisassembleData.OpCode = "cvtdq2ps";

                                                _opCodeFlags.SkipExtraReg = true;
                                                LastDisassembleData.Parameters = Xmm(memory[2]) + ModRm(memory, _prefix2, 2, 4, ref last, ATmrPos.Right);

                                                description = "convert packed dword's to ps-precision fpoint values";
                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                        }
                                        break;

                                    case 0x5c:
                                        {
                                            LastDisassembleData.IsFloat = true;
                                            if (_prefix2.Contains(0xf2))
                                            {
                                                if (_hasVex)
                                                    LastDisassembleData.OpCode = "vsubsd";
                                                else
                                                    LastDisassembleData.OpCode = "subsd";
                                                LastDisassembleData.Parameters = Xmm(memory[2]) + ModRm(memory, _prefix2, 2, 4, ref last, ATmrPos.Right);

                                                description = "scalar double-fp subtract";
                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                            else
                                            if (_prefix2.Contains(0xf3))
                                            {
                                                if (_hasVex)
                                                    LastDisassembleData.OpCode = "vsubss";
                                                else
                                                    LastDisassembleData.OpCode = "subss";
                                                LastDisassembleData.Parameters = Xmm(memory[2]) + ModRm(memory, _prefix2, 2, 4, ref last, ATmrPos.Right);
                                                LastDisassembleData.DataSize = 4;

                                                description = "scalar single-fp subtract";
                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                            else
                                            if (_prefix2.Contains(0x66))
                                            {
                                                if (_hasVex)
                                                    LastDisassembleData.OpCode = "vsubpd";
                                                else
                                                    LastDisassembleData.OpCode = "subpd";
                                                LastDisassembleData.Parameters = Xmm(memory[2]) + ModRm(memory, _prefix2, 2, 4, ref last, ATmrPos.Right);

                                                description = "packed double-fp subtract";
                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                            else
                                            {
                                                if (_hasVex)
                                                    LastDisassembleData.OpCode = "vsubps";
                                                else
                                                    LastDisassembleData.OpCode = "subps";
                                                LastDisassembleData.Parameters = Xmm(memory[2]) + ModRm(memory, _prefix2, 2, 4, ref last, ATmrPos.Right);
                                                LastDisassembleData.DataSize = 4; //4*4 actually

                                                description = "packed single-fp subtract";
                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                        }
                                        break;


                                    case 0x5d:
                                        {
                                            LastDisassembleData.IsFloat = true;
                                            if (_prefix2.Contains(0xf2))
                                            {
                                                if (_hasVex)
                                                    LastDisassembleData.OpCode = "vminsd";
                                                else
                                                    LastDisassembleData.OpCode = "minsd";

                                                LastDisassembleData.Parameters = Xmm(memory[2]) + ModRm(memory, _prefix2, 2, 4, ref last, ATmrPos.Right);

                                                description = "scalar single-fp minimum";
                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                            else
                                            if (_prefix2.Contains(0xf3))
                                            {
                                                if (_hasVex)
                                                    LastDisassembleData.OpCode = "vminss";
                                                else
                                                    LastDisassembleData.OpCode = "minss";

                                                LastDisassembleData.Parameters = Xmm(memory[2]) + ModRm(memory, _prefix2, 2, 4, ref last, ATmrPos.Right);
                                                LastDisassembleData.DataSize = 4;

                                                description = "scalar single-fp minimum";
                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                            else
                                            {
                                                if (_prefix2.Contains(0x66))
                                                {
                                                    if (_hasVex)
                                                        LastDisassembleData.OpCode = "vminpd";
                                                    else
                                                        LastDisassembleData.OpCode = "minpd";

                                                    LastDisassembleData.Parameters = Xmm(memory[2]) + ModRm(memory, _prefix2, 2, 4, ref last, ATmrPos.Right);

                                                    description = "packed double-fp minimum";
                                                    offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                }
                                                else
                                                {
                                                    if (_hasVex)
                                                        LastDisassembleData.OpCode = "vminps";
                                                    else
                                                        LastDisassembleData.OpCode = "minps";

                                                    LastDisassembleData.Parameters = Xmm(memory[2]) + ModRm(memory, _prefix2, 2, 4, ref last, ATmrPos.Right);

                                                    description = "packed single-fp minimum";
                                                    offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                }
                                            }
                                        }
                                        break;

                                    case 0x5e:
                                        {
                                            LastDisassembleData.IsFloat = true;
                                            if (_prefix2.Contains(0xf2))
                                            {
                                                if (_hasVex)
                                                    LastDisassembleData.OpCode = "divsd";
                                                else
                                                    LastDisassembleData.OpCode = "divsd";
                                                LastDisassembleData.Parameters = Xmm(memory[2]) + ModRm(memory, _prefix2, 2, 4, ref last, ATmrPos.Right);

                                                description = "scalar double-precision-fp divide";
                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                            else
                                            if (_prefix2.Contains(0xf3))
                                            {

                                                if (_hasVex)
                                                    LastDisassembleData.OpCode = "vdivss";
                                                else
                                                    LastDisassembleData.OpCode = "divss";
                                                LastDisassembleData.Parameters = Xmm(memory[2]) + ModRm(memory, _prefix2, 2, 4, ref last, ATmrPos.Right);
                                                LastDisassembleData.DataSize = 4;

                                                description = "scalar single-fp divide";
                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                            else
                                            {
                                                if (_prefix2.Contains(0x66))
                                                {
                                                    if (_hasVex)
                                                        LastDisassembleData.OpCode = "vdivpd";
                                                    else
                                                        LastDisassembleData.OpCode = "divpd";

                                                    LastDisassembleData.Parameters = Xmm(memory[2]) + ModRm(memory, _prefix2, 2, 4, ref last, ATmrPos.Right);

                                                    description = "packed double-precision fp divide";
                                                    offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                }
                                                else
                                                {
                                                    if (_hasVex)
                                                        LastDisassembleData.OpCode = "vdivps";
                                                    else
                                                        LastDisassembleData.OpCode = "divps";
                                                    LastDisassembleData.Parameters = Xmm(memory[2]) + ModRm(memory, _prefix2, 2, 4, ref last, ATmrPos.Right);
                                                    LastDisassembleData.DataSize = 4;

                                                    description = "packed single-fp divide";
                                                    offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                }
                                            }
                                        }
                                        break;

                                    case 0x5f:
                                        {
                                            LastDisassembleData.IsFloat = true;
                                            if (_prefix2.Contains(0xf2))
                                            {

                                                description = "scalar double-fp maximum";
                                                if (_hasVex)
                                                    LastDisassembleData.OpCode = "vmaxsd";
                                                else
                                                    LastDisassembleData.OpCode = "maxsd";
                                                LastDisassembleData.Parameters = Xmm(memory[2]) + ModRm(memory, _prefix2, 2, 4, ref last, ATmrPos.Right);

                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                            else
                                            if (_prefix2.Contains(0xf3))
                                            {

                                                description = "scalar single-fp maximum";
                                                if (_hasVex)
                                                    LastDisassembleData.OpCode = "vmaxss";
                                                else
                                                    LastDisassembleData.OpCode = "maxss";
                                                LastDisassembleData.Parameters = Xmm(memory[2]) + ModRm(memory, _prefix2, 2, 4, ref last, ATmrPos.Right);
                                                LastDisassembleData.DataSize = 4;

                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                            else
                                            {
                                                if (_prefix2.Contains(0x66))
                                                {
                                                    description = "packed double-fp maximum";
                                                    if (_hasVex)
                                                        LastDisassembleData.OpCode = "vmaxpd";
                                                    else
                                                        LastDisassembleData.OpCode = "maxpd";
                                                    LastDisassembleData.Parameters = Xmm(memory[2]) + ModRm(memory, _prefix2, 2, 4, ref last, ATmrPos.Right);

                                                    offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                }
                                                else
                                                {
                                                    description = "packed single-fp maximum";
                                                    if (_hasVex)
                                                        LastDisassembleData.OpCode = "vmaxps";
                                                    else
                                                        LastDisassembleData.OpCode = "maxps";

                                                    LastDisassembleData.Parameters = Xmm(memory[2]) + ModRm(memory, _prefix2, 2, 4, ref last, ATmrPos.Right);
                                                    LastDisassembleData.DataSize = 4;

                                                    offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                }
                                            }
                                        }
                                        break;

                                    case 0x60:
                                        {
                                            if (_prefix2.Contains(0x66))
                                            {
                                                description = "unpack low packed data";
                                                if (_hasVex)
                                                    LastDisassembleData.OpCode = "vpunpcklbw";
                                                else
                                                    LastDisassembleData.OpCode = "punpcklbw";
                                                LastDisassembleData.Parameters = Xmm(memory[2]) + ModRm(memory, _prefix2, 2, 4, ref last, ATmrPos.Right);

                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                            else
                                            {
                                                description = "unpack low packed data";
                                                LastDisassembleData.OpCode = "punpcklbw";
                                                LastDisassembleData.Parameters = Mm(memory[2]) + ModRm(memory, _prefix2, 2, 3, ref last, ATmrPos.Right);

                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                        }
                                        break;

                                    case 0x61:
                                        {
                                            if (_prefix2.Contains(0x66))
                                            {
                                                description = "unpack low packed data";
                                                if (_hasVex)
                                                    LastDisassembleData.OpCode = "punpcklwd";
                                                else
                                                    LastDisassembleData.OpCode = "punpcklwd";
                                                LastDisassembleData.Parameters = Xmm(memory[2]) + ModRm(memory, _prefix2, 2, 4, ref last, ATmrPos.Right);

                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                            else
                                            {
                                                description = "unpack low packed data";
                                                LastDisassembleData.OpCode = "punpcklwd";
                                                LastDisassembleData.Parameters = Mm(memory[2]) + ModRm(memory, _prefix2, 2, 3, ref last, ATmrPos.Right);

                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                        }
                                        break;

                                    case 0x62:
                                        {
                                            if (_prefix2.Contains(0x66))
                                            {
                                                description = "unpack low packed data";
                                                if (_hasVex)
                                                    LastDisassembleData.OpCode = "vpunpckldq";
                                                else
                                                    LastDisassembleData.OpCode = "punpckldq";

                                                LastDisassembleData.Parameters = Xmm(memory[2]) + ModRm(memory, _prefix2, 2, 4, ref last, ATmrPos.Right);

                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                            else
                                            {
                                                description = "unpack low packed data";
                                                LastDisassembleData.OpCode = "punpckldq";
                                                LastDisassembleData.Parameters = Mm(memory[2]) + ModRm(memory, _prefix2, 2, 3, ref last, ATmrPos.Right);

                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                        }
                                        break;

                                    case 0x63:
                                        {
                                            if (_prefix2.Contains(0x66))
                                            {
                                                description = "pack with signed saturation";
                                                if (_hasVex)
                                                    LastDisassembleData.OpCode = "packsswb";
                                                else
                                                    LastDisassembleData.OpCode = "vpacksswb";

                                                _opCodeFlags.SkipExtraReg = true;
                                                LastDisassembleData.Parameters = Xmm(memory[2]) + ModRm(memory, _prefix2, 2, 4, ref last, ATmrPos.Right);

                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                            else
                                            {
                                                description = "pack with signed saturation";
                                                LastDisassembleData.OpCode = "packsswb";
                                                LastDisassembleData.Parameters = Mm(memory[2]) + ModRm(memory, _prefix2, 2, 3, ref last, ATmrPos.Right);

                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                        }
                                        break;

                                    case 0x64:
                                        {
                                            if (_prefix2.Contains(0x66))
                                            {
                                                description = "packed compare for greater than";
                                                if (_hasVex)
                                                    LastDisassembleData.OpCode = "vpcmpgtb";
                                                else
                                                    LastDisassembleData.OpCode = "pcmpgtb";
                                                LastDisassembleData.Parameters = Xmm(memory[2]) + ModRm(memory, _prefix2, 2, 4, ref last, ATmrPos.Right);

                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                            else
                                            {
                                                description = "packed compare for greater than";
                                                LastDisassembleData.OpCode = "pcmpgtb";
                                                LastDisassembleData.Parameters = Mm(memory[2]) + ModRm(memory, _prefix2, 2, 3, ref last, ATmrPos.Right);

                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                        }
                                        break;

                                    case 0x65:
                                        {
                                            if (_prefix2.Contains(0x66))
                                            {
                                                description = "packed compare for greater than";
                                                if (_hasVex)
                                                    LastDisassembleData.OpCode = "vpcmpgtw";
                                                else
                                                    LastDisassembleData.OpCode = "pcmpgtw";
                                                LastDisassembleData.Parameters = Xmm(memory[2]) + ModRm(memory, _prefix2, 2, 4, ref last, ATmrPos.Right);

                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                            else
                                            {
                                                description = "packed compare for greater than";
                                                LastDisassembleData.OpCode = "pcmpgtw";
                                                LastDisassembleData.Parameters = Mm(memory[2]) + ModRm(memory, _prefix2, 2, 3, ref last, ATmrPos.Right);

                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                        }
                                        break;

                                    case 0x66:
                                        {
                                            if (_prefix2.Contains(0x66))
                                            {
                                                description = "packed compare for greater than";
                                                if (_hasVex)
                                                    LastDisassembleData.OpCode = "vpcmpgtd";
                                                else
                                                    LastDisassembleData.OpCode = "pcmpgtd";
                                                LastDisassembleData.Parameters = Xmm(memory[2]) + ModRm(memory, _prefix2, 2, 4, ref last, ATmrPos.Right);

                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                            else
                                            {
                                                description = "packed compare for greater than";
                                                LastDisassembleData.OpCode = "pcmpgtd";
                                                LastDisassembleData.Parameters = Mm(memory[2]) + ModRm(memory, _prefix2, 2, 3, ref last, ATmrPos.Right);

                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                        }
                                        break;


                                    case 0x67:
                                        {
                                            if (_prefix2.Contains(0x66))
                                            {
                                                description = "pack with unsigned saturation";
                                                if (_hasVex)
                                                    LastDisassembleData.OpCode = "vpackuswb";
                                                else
                                                    LastDisassembleData.OpCode = "packuswb";

                                                LastDisassembleData.Parameters = Xmm(memory[2]) + ModRm(memory, _prefix2, 2, 4, ref last, ATmrPos.Right);

                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                            else
                                            {
                                                description = "pack with unsigned saturation";
                                                LastDisassembleData.OpCode = "packuswb";
                                                LastDisassembleData.Parameters = Mm(memory[2]) + ModRm(memory, _prefix2, 2, 3, ref last, ATmrPos.Right);

                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                        }
                                        break;

                                    case 0x68:
                                        {
                                            if (_prefix2.Contains(0x66))
                                            {
                                                description = "unpack high packed data";
                                                if (_hasVex)
                                                    LastDisassembleData.OpCode = "vpunpckhbw";
                                                else
                                                    LastDisassembleData.OpCode = "punpckhbw";
                                                LastDisassembleData.Parameters = Xmm(memory[2]) + ModRm(memory, _prefix2, 2, 4, ref last, ATmrPos.Right);
                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                            else
                                            {
                                                description = "unpack high packed data";
                                                LastDisassembleData.OpCode = "punpckhbw";
                                                LastDisassembleData.Parameters = Mm(memory[2]) + ModRm(memory, _prefix2, 2, 3, ref last, ATmrPos.Right);
                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                        }
                                        break;

                                    case 0x69:
                                        {
                                            if (_prefix2.Contains(0x66))
                                            {
                                                description = "unpack high packed data";
                                                if (_hasVex)
                                                    LastDisassembleData.OpCode = "vpunpckhwd";
                                                else
                                                    LastDisassembleData.OpCode = "punpckhwd";

                                                LastDisassembleData.Parameters = Xmm(memory[2]) + ModRm(memory, _prefix2, 2, 4, ref last, ATmrPos.Right);
                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                            else
                                            {
                                                description = "unpack high packed data";
                                                LastDisassembleData.OpCode = "punpckhwd";
                                                LastDisassembleData.Parameters = Mm(memory[2]) + ModRm(memory, _prefix2, 2, 3, ref last, ATmrPos.Right);
                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                        }
                                        break;

                                    case 0x6a:
                                        {
                                            if (_prefix2.Contains(0x66))
                                            {
                                                description = "unpack high packed data";
                                                if (_hasVex)
                                                    LastDisassembleData.OpCode = "vpunpckhdq";
                                                else
                                                    LastDisassembleData.OpCode = "punpckhdq";
                                                LastDisassembleData.Parameters = Xmm(memory[2]) + ModRm(memory, _prefix2, 2, 4, ref last, ATmrPos.Right);
                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                            else
                                            {
                                                description = "unpack high packed data";
                                                LastDisassembleData.OpCode = "punpckhdq";
                                                LastDisassembleData.Parameters = Mm(memory[2]) + ModRm(memory, _prefix2, 2, 3, ref last, ATmrPos.Right);
                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                        }
                                        break;

                                    case 0x6b:
                                        {
                                            if (_prefix2.Contains(0x66))
                                            {
                                                description = "pack with signed saturation";
                                                if (_hasVex)
                                                    LastDisassembleData.OpCode = "packssdw";
                                                else
                                                    LastDisassembleData.OpCode = "packssdw";

                                                _opCodeFlags.SkipExtraReg = true;
                                                LastDisassembleData.Parameters = Xmm(memory[2]) + ModRm(memory, _prefix2, 2, 4, ref last, ATmrPos.Right);

                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                            else
                                            {
                                                description = "pack with signed saturation";
                                                LastDisassembleData.OpCode = "packssdw";
                                                LastDisassembleData.Parameters = Mm(memory[2]) + ModRm(memory, _prefix2, 2, 3, ref last, ATmrPos.Right);

                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                        }
                                        break;

                                    case 0x6c:
                                        {
                                            if (_prefix2.Contains(0x66))
                                            {
                                                description = "unpack low packed data";
                                                LastDisassembleData.OpCode = "punpcklqdq";
                                                LastDisassembleData.Parameters = Xmm(memory[2]) + ModRm(memory, _prefix2, 2, 4, ref last, ATmrPos.Right);
                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                        }
                                        break;

                                    case 0x6d:
                                        {
                                            if (_prefix2.Contains(0x66))
                                            {
                                                description = "unpack high packed data";
                                                LastDisassembleData.OpCode = "punpckhqdq";
                                                LastDisassembleData.Parameters = Xmm(memory[2]) + ModRm(memory, _prefix2, 2, 4, ref last, ATmrPos.Right);
                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                        }
                                        break;


                                    case 0x6e:
                                        {
                                            //lastdisassembledata.isfloat:=true; //not sure
                                            if (RexW)
                                            {
                                                description = "move quadword";
                                                LastDisassembleData.OpCode = "movq";
                                            }
                                            else
                                            {
                                                description = "move doubleword";
                                                LastDisassembleData.OpCode = "movd";
                                            }

                                            if (_hasVex)
                                                LastDisassembleData.OpCode = 'v' + LastDisassembleData.OpCode;

                                            _opCodeFlags.SkipExtraReg = true;
                                            if (_prefix2.Contains(0x66))
                                                LastDisassembleData.Parameters = Xmm(memory[2]) + ModRm(memory, _prefix2, 2, 0, ref last, ATmrPos.Right);
                                            else
                                                LastDisassembleData.Parameters = Mm(memory[2]) + ModRm(memory, _prefix2, 2, 0, ref last, ATmrPos.Right);

                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                        }
                                        break;

                                    case 0x6f:
                                        {
                                            if (_prefix2.Contains(0xf3))
                                            {

                                                description = "move unaligned double quadword";
                                                if (_hasVex)
                                                    LastDisassembleData.OpCode = "vmovdqu";
                                                else
                                                    LastDisassembleData.OpCode = "movdqu";

                                                LastDisassembleData.Parameters = Xmm(memory[2]) + ModRm(memory, _prefix2, 2, 4, ref last, ATmrPos.Right);

                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                            else
                                            if (_prefix2.Contains(0x66))
                                            {
                                                description = "move aligned double quadword";
                                                if (_hasVex)
                                                    LastDisassembleData.OpCode = "vmovdqa";
                                                else
                                                    LastDisassembleData.OpCode = "movdqa";

                                                _opCodeFlags.SkipExtraReg = true;
                                                LastDisassembleData.Parameters = Xmm(memory[2]) + ModRm(memory, _prefix2, 2, 4, ref last, ATmrPos.Right);

                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                            else
                                            {
                                                description = "move 64 bits";
                                                LastDisassembleData.OpCode = "movq";
                                                LastDisassembleData.Parameters = Mm(memory[2]) + ModRm(memory, _prefix2, 2, 4, ref last);

                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                        }
                                        break;

                                    case 0x70:
                                        {
                                            if (_prefix2.Contains(0xf2))
                                            {

                                                description = "shuffle packed low words";
                                                if (_hasVex)
                                                    LastDisassembleData.OpCode = "vpshuflw";
                                                else
                                                    LastDisassembleData.OpCode = "pshuflw";

                                                _opCodeFlags.SkipExtraReg = true;
                                                LastDisassembleData.Parameters = Xmm(memory[2]) + ModRm(memory, _prefix2, 2, 4, ref last, ATmrPos.Right);

                                                LastDisassembleData.ParameterValueType = ADisassemblerValueType.Value;
                                                LastDisassembleData.ParameterValue = (UIntPtr)memory[(int)last];
                                                LastDisassembleData.Parameters = LastDisassembleData.Parameters + IntToHexSigned(LastDisassembleData.ParameterValue, 2);
                                                offset = (UIntPtr)(offset.ToUInt64() + last);
                                            }
                                            else
                                            if (_prefix2.Contains(0xf3))
                                            {

                                                description = "shuffle packed high words";
                                                if (_hasVex)
                                                    LastDisassembleData.OpCode = "vpshufhw";
                                                else
                                                    LastDisassembleData.OpCode = "pshufhw";

                                                _opCodeFlags.SkipExtraReg = true;
                                                LastDisassembleData.Parameters = Xmm(memory[2]) + ModRm(memory, _prefix2, 2, 4, ref last, ATmrPos.Right);
                                                LastDisassembleData.ParameterValueType = ADisassemblerValueType.Value;
                                                LastDisassembleData.ParameterValue = (UIntPtr)memory[(int)last];
                                                LastDisassembleData.Parameters = LastDisassembleData.Parameters + IntToHexSigned(LastDisassembleData.ParameterValue, 2);
                                                offset = (UIntPtr)(offset.ToUInt64() + last);
                                            }
                                            else
                                            if (_prefix2.Contains(0x66))
                                            {
                                                description = "packed shuffle doubleword";
                                                LastDisassembleData.OpCode = "pshufd";

                                                LastDisassembleData.Parameters = Xmm(memory[2]) + ModRm(memory, _prefix2, 2, 4, ref last, ATmrPos.Right);
                                                LastDisassembleData.ParameterValueType = ADisassemblerValueType.Value;
                                                LastDisassembleData.ParameterValue = (UIntPtr)memory[(int)last];
                                                LastDisassembleData.Parameters = LastDisassembleData.Parameters + IntToHexSigned(LastDisassembleData.ParameterValue, 2);
                                                offset = (UIntPtr)(offset.ToUInt64() + last);
                                            }
                                            else
                                            {
                                                description = "packed shuffle word";
                                                if (_hasVex)
                                                    LastDisassembleData.OpCode = "vpshufw";
                                                else
                                                    LastDisassembleData.OpCode = "pshufw";

                                                _opCodeFlags.SkipExtraReg = true;
                                                LastDisassembleData.Parameters = Mm(memory[2]) + ModRm(memory, _prefix2, 2, 3, ref last, ATmrPos.Right);
                                                LastDisassembleData.ParameterValueType = ADisassemblerValueType.Value;
                                                LastDisassembleData.ParameterValue = (UIntPtr)memory[(int)last];
                                                LastDisassembleData.Parameters = LastDisassembleData.Parameters + IntToHexSigned(LastDisassembleData.ParameterValue, 2);
                                                offset = (UIntPtr)(offset.ToUInt64() + last);
                                            }
                                        }
                                        break;

                                    case 0x71:
                                        {
                                            LastDisassembleData.ParameterValueType = ADisassemblerValueType.Value;
                                            LastDisassembleData.ParameterValue = (UIntPtr)memory[3];
                                            LastDisassembleData.Separators[LastDisassembleData.SeparatorCount] = 3;
                                            LastDisassembleData.SeparatorCount += 1;


                                            switch (GetReg(memory[2]))
                                            {
                                                case 2:
                                                    {
                                                        if (_prefix2.Contains(0x66))
                                                        {
                                                            description = "packed shift right logical";
                                                            if (_hasVex)
                                                                LastDisassembleData.OpCode = "vpsrlw";
                                                            else
                                                                LastDisassembleData.OpCode = "psrlw";

                                                            LastDisassembleData.Parameters = Xmm(memory[2]) + ',' + IntToHexSigned((UIntPtr)memory[3], 2);
                                                            offset += 3;
                                                        }
                                                        else
                                                        {
                                                            description = "packed shift right logical";
                                                            LastDisassembleData.OpCode = "psrlw";
                                                            LastDisassembleData.Parameters = Mm(memory[2]) + ',' + IntToHexSigned((UIntPtr)memory[3], 2);
                                                            offset += 3;
                                                        }
                                                    }
                                                    break;

                                                case 4:
                                                    {
                                                        if (_prefix2.Contains(0x66))
                                                        {
                                                            description = "shift packed data right arithmetic";
                                                            if (_hasVex)
                                                                LastDisassembleData.OpCode = "vpsraw";
                                                            else
                                                                LastDisassembleData.OpCode = "psraw";

                                                            LastDisassembleData.Parameters = ModRm(memory, _prefix2, 2, 4, ref last);
                                                            LastDisassembleData.Parameters = LastDisassembleData.Parameters + IntToHexSigned((UIntPtr)memory[(int)last], 2);

                                                            offset = (UIntPtr)(offset.ToUInt64() + last - 1 + 1);
                                                        }
                                                        else
                                                        {
                                                            description = "packed shift left logical";
                                                            LastDisassembleData.OpCode = "psraw";
                                                            LastDisassembleData.Parameters = ModRm(memory, _prefix2, 2, 3, ref last);
                                                            LastDisassembleData.Parameters = LastDisassembleData.Parameters + IntToHexSigned((UIntPtr)memory[(int)last], 2);

                                                            offset = (UIntPtr)(offset.ToUInt64() + last - 1 + 1);
                                                        }
                                                    }
                                                    break;

                                                case 6:
                                                    {
                                                        if (_prefix2.Contains(0x66))
                                                        {
                                                            description = "packed shift left logical";
                                                            if (_hasVex)
                                                                LastDisassembleData.OpCode = "vpsllw";
                                                            else
                                                                LastDisassembleData.OpCode = "psllw";

                                                            LastDisassembleData.Parameters = ModRm(memory, _prefix2, 2, 4, ref last);
                                                            LastDisassembleData.Parameters = LastDisassembleData.Parameters + IntToHexSigned((UIntPtr)memory[(int)last], 2);

                                                            offset = (UIntPtr)(offset.ToUInt64() + last - 1 + 1);
                                                        }
                                                        else
                                                        {
                                                            description = "packed shift left logical";
                                                            LastDisassembleData.OpCode = "psllw";
                                                            LastDisassembleData.Parameters = ModRm(memory, _prefix2, 2, 3, ref last);
                                                            LastDisassembleData.Parameters = LastDisassembleData.Parameters + IntToHexSigned((UIntPtr)memory[(int)last], 2);

                                                            offset = (UIntPtr)(offset.ToUInt64() + last - 1 + 1);
                                                        }
                                                    }
                                                    break;
                                            }
                                        }
                                        break;

                                    case 0x72:
                                        {
                                            LastDisassembleData.ParameterValueType = ADisassemblerValueType.Value;
                                            LastDisassembleData.ParameterValue = (UIntPtr)memory[3];
                                            LastDisassembleData.Separators[LastDisassembleData.SeparatorCount] = 3;
                                            LastDisassembleData.SeparatorCount += 1;

                                            switch (GetReg(memory[2]))
                                            {
                                                case 2:
                                                    {
                                                        if (_prefix2.Contains(0x66))
                                                        {
                                                            description = "packed shift right logical";
                                                            if (_hasVex)
                                                                LastDisassembleData.OpCode = "vpsrld";
                                                            else
                                                                LastDisassembleData.OpCode = "psrld";
                                                            LastDisassembleData.Parameters = ModRm(memory, _prefix2, 2, 4, ref last);
                                                            LastDisassembleData.Parameters = LastDisassembleData.Parameters + IntToHexSigned((UIntPtr)memory[(int)last], 2);
                                                            offset += 3;
                                                        }
                                                        else
                                                        {
                                                            description = "packed shift right logical";
                                                            LastDisassembleData.OpCode = "psrld";
                                                            LastDisassembleData.Parameters = ModRm(memory, _prefix2, 2, 3, ref last);
                                                            LastDisassembleData.Parameters = LastDisassembleData.Parameters + IntToHexSigned((UIntPtr)memory[(int)last], 2);
                                                            offset += 3;
                                                        }
                                                    }
                                                    break;

                                                case 4:
                                                    {
                                                        if (_prefix2.Contains(0x66))
                                                        {
                                                            description = "packed shift right arithmetic";
                                                            if (_hasVex)
                                                                LastDisassembleData.OpCode = "vpsrad";
                                                            else
                                                                LastDisassembleData.OpCode = "psrad";
                                                            LastDisassembleData.Parameters = ModRm(memory, _prefix2, 2, 4, ref last);
                                                            LastDisassembleData.Parameters = LastDisassembleData.Parameters + IntToHexSigned((UIntPtr)memory[(int)last], 2);

                                                            offset += 3;
                                                        }
                                                        else
                                                        {
                                                            description = "packed shift right arithmetic";
                                                            LastDisassembleData.OpCode = "psrad";
                                                            LastDisassembleData.Parameters = ModRm(memory, _prefix2, 2, 3, ref last);
                                                            LastDisassembleData.Parameters = LastDisassembleData.Parameters + IntToHexSigned((UIntPtr)memory[(int)last], 2);

                                                            offset += 3;
                                                        }
                                                    }
                                                    break;

                                                case 6:
                                                    {
                                                        if (_prefix2.Contains(0x66))
                                                        {
                                                            description = "packed shift left logical";
                                                            if (_hasVex)
                                                                LastDisassembleData.OpCode = "pslld";
                                                            else
                                                                LastDisassembleData.OpCode = "pslld";

                                                            LastDisassembleData.Parameters = ModRm(memory, _prefix2, 2, 4, ref last);
                                                            LastDisassembleData.Parameters = LastDisassembleData.Parameters + ',' + IntToHexSigned((UIntPtr)memory[(int)last], 2);
                                                            offset += 3;
                                                        }
                                                        else
                                                        {
                                                            description = "packed shift left logical";
                                                            LastDisassembleData.OpCode = "pslld";
                                                            LastDisassembleData.Parameters = ModRm(memory, _prefix2, 2, 3, ref last);
                                                            LastDisassembleData.Parameters = LastDisassembleData.Parameters + IntToHexSigned((UIntPtr)memory[(int)last], 2);
                                                            offset += 3;
                                                        }
                                                    }
                                                    break;
                                            }
                                        }
                                        break;

                                    case 0x73:
                                        {
                                            LastDisassembleData.ParameterValueType = ADisassemblerValueType.Value;
                                            LastDisassembleData.ParameterValue = (UIntPtr)memory[3];
                                            LastDisassembleData.Separators[LastDisassembleData.SeparatorCount] = 3;
                                            LastDisassembleData.SeparatorCount += 1;

                                            switch (GetReg(memory[2]))
                                            {
                                                case 2:
                                                    {
                                                        if (_prefix2.Contains(0x66))
                                                        {
                                                            description = "packed shift right logical";
                                                            if (_hasVex)
                                                                LastDisassembleData.OpCode = "vpsrlq";
                                                            else
                                                                LastDisassembleData.OpCode = "psrlq";
                                                            LastDisassembleData.Parameters = ModRm(memory, _prefix2, 2, 4, ref last, ATmrPos.Right);
                                                            LastDisassembleData.Parameters = LastDisassembleData.Parameters + ',' + IntToHexSigned((UIntPtr)memory[(int)last], 2);
                                                            offset += 3;
                                                        }
                                                        else
                                                        {
                                                            description = "packed shift right logical";
                                                            LastDisassembleData.OpCode = "psrlq";
                                                            LastDisassembleData.Parameters = ModRm(memory, _prefix2, 2, 3, ref last, ATmrPos.Right);
                                                            LastDisassembleData.Parameters = LastDisassembleData.Parameters + ',' + IntToHexSigned((UIntPtr)memory[(int)last], 2);
                                                            offset += 3;
                                                        }
                                                        LastDisassembleData.Parameters = LastDisassembleData.Parameters.Substring(1);
                                                    }
                                                    break;

                                                case 3:
                                                    {
                                                        if (_prefix2.Contains(0x66))
                                                        {
                                                            description = "shift double quadword right logical";
                                                            if (_hasVex)
                                                                LastDisassembleData.OpCode = "vpsrldq";
                                                            else
                                                                LastDisassembleData.OpCode = "psrldq";

                                                            LastDisassembleData.Parameters = ModRm(memory, _prefix2, 2, 4, ref last, ATmrPos.Right);
                                                            LastDisassembleData.Parameters = LastDisassembleData.Parameters + ',' + IntToHexSigned((UIntPtr)memory[(int)last], 2);
                                                            offset += 3;
                                                        }
                                                        LastDisassembleData.Parameters = LastDisassembleData.Parameters.Substring(1);
                                                    }
                                                    break;

                                                case 6:
                                                    {
                                                        if (_prefix2.Contains(0x66))
                                                        {
                                                            description = "packed shift left logical";
                                                            if (_hasVex)
                                                                LastDisassembleData.OpCode = "vpsllq";
                                                            else
                                                                LastDisassembleData.OpCode = "psllq";
                                                            LastDisassembleData.Parameters = ModRm(memory, _prefix2, 2, 4, ref last, ATmrPos.Right);
                                                            LastDisassembleData.Parameters = LastDisassembleData.Parameters + ',' + IntToHexSigned((UIntPtr)memory[(int)last], 2);
                                                            offset += 3;
                                                        }
                                                        else
                                                        {
                                                            description = "packed shift left logical";
                                                            LastDisassembleData.OpCode = "psllq";
                                                            LastDisassembleData.Parameters = ModRm(memory, _prefix2, 2, 3, ref last, ATmrPos.Right);
                                                            LastDisassembleData.Parameters = LastDisassembleData.Parameters + ',' + IntToHexSigned((UIntPtr)memory[(int)last], 2);
                                                            offset += 3;
                                                        }
                                                        LastDisassembleData.Parameters = LastDisassembleData.Parameters.Substring(1);
                                                    }
                                                    break;

                                                case 7:
                                                    {
                                                        if (_prefix2.Contains(0x66))
                                                        {
                                                            description = "shift double quadword left logical";
                                                            if (_hasVex)
                                                                LastDisassembleData.OpCode = "vpslldq";
                                                            else
                                                                LastDisassembleData.OpCode = "pslldq";
                                                            LastDisassembleData.Parameters = ModRm(memory, _prefix2, 2, 4, ref last, ATmrPos.Right);
                                                            LastDisassembleData.Parameters = LastDisassembleData.Parameters + ',' + IntToHexSigned((UIntPtr)memory[(int)last], 2);

                                                            LastDisassembleData.Parameters = LastDisassembleData.Parameters.Substring(1);
                                                            offset += 3;
                                                        }
                                                    }
                                                    break;
                                            }
                                        }
                                        break;



                                    case 0x74:
                                        {
                                            if (_prefix2.Contains(0x66))
                                            {
                                                description = "packed compare for equal";
                                                if (_hasVex)
                                                    LastDisassembleData.OpCode = "vpcmpeqb";
                                                else
                                                    LastDisassembleData.OpCode = "pcmpeqb";

                                                LastDisassembleData.Parameters = Xmm(memory[2]) + ModRm(memory, _prefix2, 2, 4, ref last, ATmrPos.Right);
                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                            else
                                            {
                                                description = "packed compare for equal";
                                                LastDisassembleData.OpCode = "pcmpeqb";
                                                LastDisassembleData.Parameters = Mm(memory[2]) + ModRm(memory, _prefix2, 2, 3, ref last, ATmrPos.Right);

                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                        }
                                        break;

                                    case 0x75:
                                        {
                                            if (_prefix2.Contains(0x66))
                                            {
                                                description = "packed compare for equal";
                                                if (_hasVex)
                                                    LastDisassembleData.OpCode = "vpcmpeqw";
                                                else
                                                    LastDisassembleData.OpCode = "pcmpeqw";
                                                LastDisassembleData.Parameters = Xmm(memory[2]) + ModRm(memory, _prefix2, 2, 4, ref last, ATmrPos.Right);

                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                            else
                                            {
                                                description = "packed compare for equal";
                                                LastDisassembleData.OpCode = "pcmpeqw";
                                                LastDisassembleData.Parameters = Mm(memory[2]) + ModRm(memory, _prefix2, 2, 3, ref last, ATmrPos.Right);

                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                        }
                                        break;

                                    case 0x76:
                                        {
                                            if (_prefix2.Contains(0x66))
                                            {
                                                description = "packed compare for equal";
                                                if (_hasVex)
                                                    LastDisassembleData.OpCode = "vpcmpeqd";
                                                else
                                                    LastDisassembleData.OpCode = "pcmpeqd";
                                                LastDisassembleData.Parameters = Xmm(memory[2]) + ModRm(memory, _prefix2, 2, 4, ref last, ATmrPos.Right);

                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                            else
                                            {
                                                description = "packed compare for equal";
                                                LastDisassembleData.OpCode = "pcmpeqd";
                                                LastDisassembleData.Parameters = Mm(memory[2]) + ModRm(memory, _prefix2, 2, 3, ref last, ATmrPos.Right);

                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                        }
                                        break;


                                    case 0x77:
                                        {
                                            if (_hasVex)
                                            {
                                                if (_opCodeFlags.L)
                                                {
                                                    description = "Zero all YMM registers";
                                                    LastDisassembleData.OpCode = "vzeroall";
                                                    offset += 1;
                                                }
                                                else
                                                {
                                                    description = "Zero upper bits of YMM registers";
                                                    LastDisassembleData.OpCode = "vzeroupper";
                                                    offset += 1;
                                                }
                                            }
                                            else
                                            {
                                                description = "empty mmx™ state";
                                                LastDisassembleData.OpCode = "emms";
                                                offset += 1;
                                            }
                                        }
                                        break;

                                    case 0x78:
                                        {
                                            description = "reads a specified vmcs field (32 bits)";
                                            LastDisassembleData.OpCode = "vmread";
                                            LastDisassembleData.Parameters = ModRm(memory, _prefix2, 2, 0, ref last) + R32(memory[2]);
                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                        }
                                        break;

                                    case 0x79:
                                        {
                                            description = "writes a specified vmcs field (32 bits)";
                                            LastDisassembleData.OpCode = "vmwrite";
                                            LastDisassembleData.Parameters = R32(memory[2]) + ModRm(memory, _prefix2, 2, 0, ref last, ATmrPos.Right);

                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                        }
                                        break;

                                    case 0x7c:
                                        {
                                            if (_prefix2.Contains(0x66))
                                            {
                                                if (_hasVex)
                                                    LastDisassembleData.OpCode = "vhaddpd";
                                                else
                                                    LastDisassembleData.OpCode = "haddpd";

                                                LastDisassembleData.Parameters = Xmm(memory[2]) + ModRm(memory, _prefix2, 2, 4, ref last, ATmrPos.Right);

                                                description = "packed double-fp horizontal add";
                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                            else
                                            if (_prefix2.Contains(0xf2))
                                            {
                                                if (_hasVex)
                                                    LastDisassembleData.OpCode = "vhaddps";
                                                else
                                                    LastDisassembleData.OpCode = "haddps";

                                                LastDisassembleData.Parameters = Xmm(memory[2]) + ModRm(memory, _prefix2, 2, 4, ref last, ATmrPos.Right);

                                                description = "packed single-fp horizontal add";
                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                        }
                                        break;

                                    case 0x7d:
                                        {
                                            if (_prefix2.Contains(0x66))
                                            {
                                                if (_hasVex)
                                                    LastDisassembleData.OpCode = "vhsubpd";
                                                else
                                                    LastDisassembleData.OpCode = "hsubpd";

                                                LastDisassembleData.Parameters = Xmm(memory[2]) + ModRm(memory, _prefix2, 2, 4, ref last, ATmrPos.Right);

                                                description = "packed double-fp horizontal subtract";
                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                            else
                                            if (_prefix2.Contains(0xf2))
                                            {
                                                if (_hasVex)
                                                    LastDisassembleData.OpCode = "vhsubps";
                                                else
                                                    LastDisassembleData.OpCode = "hsubps";

                                                LastDisassembleData.Parameters = Xmm(memory[2]) + ModRm(memory, _prefix2, 2, 4, ref last, ATmrPos.Right);

                                                description = "packed single-fp horizontal subtract";
                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                        }
                                        break;

                                    case 0x7e:
                                        {

                                            if (_prefix2.Contains(0xf3))
                                            {

                                                description = "move quadword";
                                                if (_hasVex)
                                                    LastDisassembleData.OpCode = "vmovq";
                                                else
                                                    LastDisassembleData.OpCode = "movq";

                                                _opCodeFlags.SkipExtraReg = true;
                                                LastDisassembleData.Parameters = Xmm(memory[2]) + ModRm(memory, _prefix2, 2, 4, ref last, ATmrPos.Right);

                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                            else
                                            if (_prefix2.Contains(0x66))
                                            {
                                                if (RexW)
                                                {
                                                    description = "move 64 bits";
                                                    LastDisassembleData.OpCode = "movq";
                                                }
                                                else
                                                {
                                                    description = "move 32 bits";
                                                    LastDisassembleData.OpCode = "movd";
                                                }

                                                if (_hasVex)
                                                    LastDisassembleData.OpCode = 'v' + LastDisassembleData.OpCode;

                                                _opCodeFlags.SkipExtraReg = true;

                                                LastDisassembleData.Parameters = ModRm(memory, _prefix2, 2, 0, ref last) + Xmm(memory[2]);  //r32/rm32,xmm
                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                            else
                                            {
                                                if (RexW)
                                                {
                                                    description = "move 64 bits";
                                                    LastDisassembleData.OpCode = "movq";
                                                }
                                                else
                                                {
                                                    description = "move 32 bits";
                                                    LastDisassembleData.OpCode = "movd";
                                                }


                                                LastDisassembleData.Parameters = ModRm(memory, _prefix2, 2, 0, ref last) + Mm(memory[2]); //r32/rm32,mm
                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                        }
                                        break;

                                    case 0x7f:
                                        {
                                            if (_prefix2.Contains(0xf3))
                                            {

                                                description = "move unaligned double quadword";
                                                if (_hasVex)
                                                    LastDisassembleData.OpCode = "vmovdqu";
                                                else
                                                    LastDisassembleData.OpCode = "movdqu";

                                                _opCodeFlags.SkipExtraReg = true;
                                                LastDisassembleData.Parameters = ModRm(memory, _prefix2, 2, 4, ref last) + Xmm(memory[2]);
                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                            else
                                            if (_prefix2.Contains(0x66))
                                            {
                                                description = "move aligned double quadword";
                                                if (_hasVex)
                                                    LastDisassembleData.OpCode = "vmovdqa";
                                                else
                                                    LastDisassembleData.OpCode = "movdqa";

                                                _opCodeFlags.SkipExtraReg = true;
                                                LastDisassembleData.Parameters = ModRm(memory, _prefix2, 2, 4, ref last) + Xmm(memory[2]);
                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                            else
                                            {
                                                description = "move 64 bits";
                                                LastDisassembleData.OpCode = "movq";
                                                LastDisassembleData.Parameters = ModRm(memory, _prefix2, 2, 3, ref last) + Mm(memory[2]);
                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                        }
                                        break;

                                    case 0x80:
                                        {
                                            description = "jump near if overflow (OF=1)";
                                            LastDisassembleData.OpCode = "jo";
                                            LastDisassembleData.IsJump = true;
                                            LastDisassembleData.IsConditionalJump = true;
                                            //if (context != nil)
                                            //lastdisassembledata.willjumpaccordingtocontext = (context->eflags & eflags_of) != 0;

                                            offset += 1 + 4;
                                            if (MarkIpRelativeInstructions)
                                            {
                                                LastDisassembleData.RipRelative = 2;
                                                _ripRelative = true;
                                            }

                                            LastDisassembleData.ParameterValueType = ADisassemblerValueType.Address;
                                            if (Is64Bit)
                                                LastDisassembleData.ParameterValue = (UIntPtr)(offset.ToUInt64() + (UInt64)memory.ReadInt32(2));
                                            else
                                                LastDisassembleData.ParameterValue = (UIntPtr)(UInt32)(offset.ToUInt64() + (UInt64)memory.ReadInt32(2));

                                            LastDisassembleData.Separators[LastDisassembleData.SeparatorCount] = 2;
                                            LastDisassembleData.SeparatorCount += 1;



                                            LastDisassembleData.Parameters = IntToHexSigned(LastDisassembleData.ParameterValue, 8);
                                        }
                                        break;

                                    case 0x81:
                                        {
                                            description = "jump near if not overflow (OF=0)";
                                            LastDisassembleData.OpCode = "jno";
                                            LastDisassembleData.IsJump = true;
                                            LastDisassembleData.IsConditionalJump = true;
                                            //if (context != nil)
                                            //lastdisassembledata.willjumpaccordingtocontext = (context->eflags & eflags_of) == 0;

                                            offset += 1 + 4;
                                            if (MarkIpRelativeInstructions)
                                            {
                                                LastDisassembleData.RipRelative = 2;
                                                _ripRelative = true;
                                            }

                                            LastDisassembleData.ParameterValueType = ADisassemblerValueType.Address;
                                            if (Is64Bit)
                                                LastDisassembleData.ParameterValue = (UIntPtr)(offset.ToUInt64() + (UInt64)memory.ReadInt32(2));
                                            else
                                                LastDisassembleData.ParameterValue = (UIntPtr)(UInt32)(offset.ToUInt64() + (UInt64)memory.ReadInt32(2));

                                            LastDisassembleData.Separators[LastDisassembleData.SeparatorCount] = 2;
                                            LastDisassembleData.SeparatorCount += 1;



                                            LastDisassembleData.Parameters = IntToHexSigned(LastDisassembleData.ParameterValue, 8);

                                        }
                                        break;

                                    case 0x82:
                                        {
                                            description = "jump near if below/carry (CF=1)";

                                            LastDisassembleData.OpCode = "jb";
                                            LastDisassembleData.IsJump = true;
                                            LastDisassembleData.IsConditionalJump = true;

                                            //if (context != nil)
                                            //lastdisassembledata.willjumpaccordingtocontext = (context->eflags & eflags_cf) != 0;

                                            offset += 1 + 4;
                                            if (MarkIpRelativeInstructions)
                                            {
                                                LastDisassembleData.RipRelative = 2;
                                                _ripRelative = true;
                                            }

                                            LastDisassembleData.ParameterValueType = ADisassemblerValueType.Address;
                                            if (Is64Bit)
                                                LastDisassembleData.ParameterValue = (UIntPtr)(offset.ToUInt64() + (UInt64)memory.ReadInt32(2));
                                            else
                                                LastDisassembleData.ParameterValue = (UIntPtr)(UInt32)(offset.ToUInt64() + (UInt64)memory.ReadInt32(2));

                                            LastDisassembleData.Separators[LastDisassembleData.SeparatorCount] = 2;
                                            LastDisassembleData.SeparatorCount += 1;



                                            LastDisassembleData.Parameters = IntToHexSigned(LastDisassembleData.ParameterValue, 8);

                                        }
                                        break;

                                    case 0x83:
                                        {
                                            description = "jump near if above or equal (CF=0)";
                                            LastDisassembleData.OpCode = "jae";
                                            LastDisassembleData.IsJump = true;
                                            LastDisassembleData.IsConditionalJump = true;
                                            //if (context != nil)
                                            //lastdisassembledata.willjumpaccordingtocontext = (context->eflags & eflags_cf) == 0;

                                            offset += 1 + 4;
                                            if (MarkIpRelativeInstructions)
                                            {
                                                LastDisassembleData.RipRelative = 2;
                                                _ripRelative = true;
                                            }

                                            LastDisassembleData.ParameterValueType = ADisassemblerValueType.Address;
                                            if (Is64Bit)
                                                LastDisassembleData.ParameterValue = (UIntPtr)(offset.ToUInt64() + (UInt64)memory.ReadInt32(2));
                                            else
                                                LastDisassembleData.ParameterValue = (UIntPtr)(UInt32)(offset.ToUInt64() + (UInt64)memory.ReadInt32(2));

                                            LastDisassembleData.Separators[LastDisassembleData.SeparatorCount] = 2;
                                            LastDisassembleData.SeparatorCount += 1;



                                            LastDisassembleData.Parameters = IntToHexSigned(LastDisassembleData.ParameterValue, 8);
                                        }
                                        break;

                                    case 0x84:
                                        {
                                            description = "jump near if equal (ZF=1)";

                                            LastDisassembleData.OpCode = "je";
                                            LastDisassembleData.IsJump = true;
                                            LastDisassembleData.IsConditionalJump = true;
                                            //if (context != nil)
                                            //lastdisassembledata.willjumpaccordingtocontext = (context->eflags & eflags_zf) != 0;

                                            offset += 1 + 4;
                                            if (MarkIpRelativeInstructions)
                                            {
                                                LastDisassembleData.RipRelative = 2;
                                                _ripRelative = true;
                                            }

                                            LastDisassembleData.ParameterValueType = ADisassemblerValueType.Address;
                                            if (Is64Bit)
                                                LastDisassembleData.ParameterValue = (UIntPtr)(offset.ToUInt64() + (UInt64)memory.ReadInt32(2));
                                            else
                                                LastDisassembleData.ParameterValue = (UIntPtr)(UInt32)(offset.ToUInt64() + (UInt64)memory.ReadInt32(2));

                                            LastDisassembleData.Separators[LastDisassembleData.SeparatorCount] = 2;
                                            LastDisassembleData.SeparatorCount += 1;



                                            LastDisassembleData.Parameters = IntToHexSigned(LastDisassembleData.ParameterValue, 8);
                                        }
                                        break;


                                    case 0x85:
                                        {
                                            description = "jump near if not equal (ZF=0)";
                                            LastDisassembleData.OpCode = "jne";
                                            LastDisassembleData.IsJump = true;
                                            LastDisassembleData.IsConditionalJump = true;
                                            //if (context != nil)
                                            //lastdisassembledata.willjumpaccordingtocontext = (context->eflags & eflags_zf) == 0;

                                            offset += 1 + 4;
                                            if (MarkIpRelativeInstructions)
                                            {
                                                LastDisassembleData.RipRelative = 2;
                                                _ripRelative = true;
                                            }

                                            LastDisassembleData.ParameterValueType = ADisassemblerValueType.Address;
                                            if (Is64Bit)
                                                LastDisassembleData.ParameterValue = (UIntPtr)(offset.ToUInt64() + (UInt64)memory.ReadInt32(2));
                                            else
                                                LastDisassembleData.ParameterValue = (UIntPtr)(UInt32)(offset.ToUInt64() + (UInt64)memory.ReadInt32(2));

                                            LastDisassembleData.Separators[LastDisassembleData.SeparatorCount] = 2;
                                            LastDisassembleData.SeparatorCount += 1;



                                            LastDisassembleData.Parameters = IntToHexSigned(LastDisassembleData.ParameterValue, 8);

                                        }
                                        break;

                                    case 0x86:
                                        {
                                            description = "jump near if below or equal (CF=1 or ZF=1)";
                                            LastDisassembleData.OpCode = "jbe";
                                            LastDisassembleData.IsJump = true;
                                            LastDisassembleData.IsConditionalJump = true;
                                            //if (context != nil)
                                            //lastdisassembledata.willjumpaccordingtocontext = (context->eflags & (eflags_cf | eflags_zf)) != 0;

                                            offset += 1 + 4;
                                            if (MarkIpRelativeInstructions)
                                            {
                                                LastDisassembleData.RipRelative = 2;
                                                _ripRelative = true;
                                            }


                                            LastDisassembleData.ParameterValueType = ADisassemblerValueType.Address;
                                            if (Is64Bit)
                                                LastDisassembleData.ParameterValue = (UIntPtr)(offset.ToUInt64() + (UInt64)memory.ReadInt32(2));
                                            else
                                                LastDisassembleData.ParameterValue = (UIntPtr)(UInt32)(offset.ToUInt64() + (UInt64)memory.ReadInt32(2));

                                            LastDisassembleData.Separators[LastDisassembleData.SeparatorCount] = 2;
                                            LastDisassembleData.SeparatorCount += 1;



                                            LastDisassembleData.Parameters = IntToHexSigned(LastDisassembleData.ParameterValue, 8);
                                        }
                                        break;

                                    case 0x87:
                                        {
                                            description = "jump near if above (CF=0 and ZF=0)";
                                            LastDisassembleData.OpCode = "ja";
                                            LastDisassembleData.IsJump = true;
                                            LastDisassembleData.IsConditionalJump = true;
                                            //if (context != nil)
                                            //lastdisassembledata.willjumpaccordingtocontext = (context->eflags & (eflags_cf | eflags_zf)) == 0;
                                            offset += 1 + 4;
                                            if (MarkIpRelativeInstructions)
                                            {
                                                LastDisassembleData.RipRelative = 2;
                                                _ripRelative = true;
                                            }

                                            LastDisassembleData.ParameterValueType = ADisassemblerValueType.Address;
                                            if (Is64Bit)
                                                LastDisassembleData.ParameterValue = (UIntPtr)(offset.ToUInt64() + (UInt64)memory.ReadInt32(2));
                                            else
                                                LastDisassembleData.ParameterValue = (UIntPtr)(UInt32)(offset.ToUInt64() + (UInt64)memory.ReadInt32(2));

                                            LastDisassembleData.Separators[LastDisassembleData.SeparatorCount] = 2;
                                            LastDisassembleData.SeparatorCount += 1;



                                            LastDisassembleData.Parameters = IntToHexSigned(LastDisassembleData.ParameterValue, 8);
                                        }
                                        break;

                                    case 0x88:
                                        {
                                            description = "jump near if sign (SF=1)";
                                            LastDisassembleData.OpCode = "js";
                                            LastDisassembleData.IsJump = true;
                                            LastDisassembleData.IsConditionalJump = true;
                                            //if (context != nil)
                                            //lastdisassembledata.willjumpaccordingtocontext = (context->eflags & eflags_sf) != 0;

                                            offset += 1 + 4;
                                            if (MarkIpRelativeInstructions)
                                            {
                                                LastDisassembleData.RipRelative = 2;
                                                _ripRelative = true;
                                            }

                                            LastDisassembleData.ParameterValueType = ADisassemblerValueType.Address;
                                            if (Is64Bit)
                                                LastDisassembleData.ParameterValue = (UIntPtr)(offset.ToUInt64() + (UInt64)memory.ReadInt32(2));
                                            else
                                                LastDisassembleData.ParameterValue = (UIntPtr)(UInt32)(offset.ToUInt64() + (UInt64)memory.ReadInt32(2));

                                            LastDisassembleData.Separators[LastDisassembleData.SeparatorCount] = 2;
                                            LastDisassembleData.SeparatorCount += 1;



                                            LastDisassembleData.Parameters = IntToHexSigned(LastDisassembleData.ParameterValue, 8);
                                        }
                                        break;

                                    case 0x89:
                                        {
                                            description = "jump near if not sign (SF=0)";
                                            LastDisassembleData.OpCode = "jns";
                                            LastDisassembleData.IsJump = true;
                                            LastDisassembleData.IsConditionalJump = true;
                                            //if (context != nil)
                                            //lastdisassembledata.willjumpaccordingtocontext = (context->eflags & eflags_sf) == 0;

                                            offset += 1 + 4;
                                            if (MarkIpRelativeInstructions)
                                            {
                                                LastDisassembleData.RipRelative = 2;
                                                _ripRelative = true;
                                            }

                                            LastDisassembleData.ParameterValueType = ADisassemblerValueType.Address;
                                            if (Is64Bit)
                                                LastDisassembleData.ParameterValue = (UIntPtr)(offset.ToUInt64() + (UInt64)memory.ReadInt32(2));
                                            else
                                                LastDisassembleData.ParameterValue = (UIntPtr)(UInt32)(offset.ToUInt64() + (UInt64)memory.ReadInt32(2));

                                            LastDisassembleData.Separators[LastDisassembleData.SeparatorCount] = 2;
                                            LastDisassembleData.SeparatorCount += 1;



                                            LastDisassembleData.Parameters = IntToHexSigned(LastDisassembleData.ParameterValue, 8);
                                        }
                                        break;

                                    case 0x8a:
                                        {
                                            description = "jump near if parity (PF=1)";
                                            LastDisassembleData.OpCode = "jp";
                                            LastDisassembleData.IsJump = true;
                                            LastDisassembleData.IsConditionalJump = true;
                                            //if (context != nil)
                                            //lastdisassembledata.willjumpaccordingtocontext = (context->eflags & eflags_pf) != 0;

                                            offset += 1 + 4;
                                            if (MarkIpRelativeInstructions)
                                            {
                                                LastDisassembleData.RipRelative = 2;
                                                _ripRelative = true;
                                            }

                                            LastDisassembleData.ParameterValueType = ADisassemblerValueType.Address;
                                            if (Is64Bit)
                                                LastDisassembleData.ParameterValue = (UIntPtr)(offset.ToUInt64() + (UInt64)memory.ReadInt32(2));
                                            else
                                                LastDisassembleData.ParameterValue = (UIntPtr)(UInt32)(offset.ToUInt64() + (UInt64)memory.ReadInt32(2));

                                            LastDisassembleData.Separators[LastDisassembleData.SeparatorCount] = 2;
                                            LastDisassembleData.SeparatorCount += 1;



                                            LastDisassembleData.Parameters = IntToHexSigned(LastDisassembleData.ParameterValue, 8);
                                        }
                                        break;

                                    case 0x8b:
                                        {
                                            description = "jump near if not parity (PF=0)";
                                            LastDisassembleData.OpCode = "jnp";
                                            LastDisassembleData.IsJump = true;
                                            LastDisassembleData.IsConditionalJump = true;
                                            //if (context != nil)
                                            //lastdisassembledata.willjumpaccordingtocontext = (context->eflags & eflags_pf) == 0;

                                            offset += 1 + 4;
                                            if (MarkIpRelativeInstructions)
                                            {
                                                LastDisassembleData.RipRelative = 2;
                                                _ripRelative = true;
                                            }

                                            LastDisassembleData.ParameterValueType = ADisassemblerValueType.Address;
                                            if (Is64Bit)
                                                LastDisassembleData.ParameterValue = (UIntPtr)(offset.ToUInt64() + (UInt64)memory.ReadInt32(2));
                                            else
                                                LastDisassembleData.ParameterValue = (UIntPtr)(UInt32)(offset.ToUInt64() + (UInt64)memory.ReadInt32(2));

                                            LastDisassembleData.Separators[LastDisassembleData.SeparatorCount] = 2;
                                            LastDisassembleData.SeparatorCount += 1;



                                            LastDisassembleData.Parameters = IntToHexSigned(LastDisassembleData.ParameterValue, 8);
                                        }
                                        break;

                                    case 0x8c:
                                        {
                                            description = "jump near if less (SF~=OF)";
                                            LastDisassembleData.OpCode = "jl";
                                            LastDisassembleData.IsJump = true;
                                            LastDisassembleData.IsConditionalJump = true;
                                            //if (context != nil)
                                            //lastdisassembledata.willjumpaccordingtocontext = (context->eflags & eflags_sf) != (context->eflags & eflags_of);

                                            offset += 1 + 4;
                                            if (MarkIpRelativeInstructions)
                                            {
                                                LastDisassembleData.RipRelative = 2;
                                                _ripRelative = true;
                                            }

                                            LastDisassembleData.ParameterValueType = ADisassemblerValueType.Address;
                                            if (Is64Bit)
                                                LastDisassembleData.ParameterValue = (UIntPtr)(offset.ToUInt64() + (UInt64)memory.ReadInt32(2));
                                            else
                                                LastDisassembleData.ParameterValue = (UIntPtr)(UInt32)(offset.ToUInt64() + (UInt64)memory.ReadInt32(2));

                                            LastDisassembleData.Separators[LastDisassembleData.SeparatorCount] = 2;
                                            LastDisassembleData.SeparatorCount += 1;



                                            LastDisassembleData.Parameters = IntToHexSigned(LastDisassembleData.ParameterValue, 8);
                                        }
                                        break;

                                    case 0x8d:
                                        {
                                            description = "jump near if not less (SF=OF)";
                                            LastDisassembleData.OpCode = "jnl";
                                            LastDisassembleData.IsJump = true;
                                            LastDisassembleData.IsConditionalJump = true;
                                            //if (context != nil)
                                            //lastdisassembledata.willjumpaccordingtocontext = (context->eflags & eflags_sf) == (context->eflags & eflags_of);

                                            offset += 1 + 4;
                                            if (MarkIpRelativeInstructions)
                                            {
                                                LastDisassembleData.RipRelative = 2;
                                                _ripRelative = true;
                                            }

                                            LastDisassembleData.ParameterValueType = ADisassemblerValueType.Address;
                                            if (Is64Bit)
                                                LastDisassembleData.ParameterValue = (UIntPtr)(offset.ToUInt64() + (UInt64)memory.ReadInt32(2));
                                            else
                                                LastDisassembleData.ParameterValue = (UIntPtr)(UInt32)(offset.ToUInt64() + (UInt64)memory.ReadInt32(2));

                                            LastDisassembleData.Separators[LastDisassembleData.SeparatorCount] = 2;
                                            LastDisassembleData.SeparatorCount += 1;



                                            LastDisassembleData.Parameters = IntToHexSigned(LastDisassembleData.ParameterValue, 8);
                                        }
                                        break;

                                    case 0x8e:
                                        {
                                            description = "jump near if not greater (ZF=1 or SF~=OF)";
                                            LastDisassembleData.OpCode = "jng";
                                            LastDisassembleData.IsJump = true;
                                            LastDisassembleData.IsConditionalJump = true;
                                            //if (context != nil)
                                            //lastdisassembledata.willjumpaccordingtocontext = ((context->eflags & eflags_sf) != (context->eflags & eflags_of)) || ((context->eflags & eflags_zf) != 0);


                                            offset += 1 + 4;
                                            if (MarkIpRelativeInstructions)
                                            {
                                                LastDisassembleData.RipRelative = 2;
                                                _ripRelative = true;
                                            }

                                            LastDisassembleData.ParameterValueType = ADisassemblerValueType.Address;
                                            if (Is64Bit)
                                                LastDisassembleData.ParameterValue = (UIntPtr)(offset.ToUInt64() + (UInt64)memory.ReadInt32(2));
                                            else
                                                LastDisassembleData.ParameterValue = (UIntPtr)(UInt32)(offset.ToUInt64() + (UInt64)memory.ReadInt32(2));

                                            LastDisassembleData.Separators[LastDisassembleData.SeparatorCount] = 2;
                                            LastDisassembleData.SeparatorCount += 1;



                                            LastDisassembleData.Parameters = IntToHexSigned(LastDisassembleData.ParameterValue, 8);
                                        }
                                        break;

                                    case 0x8f:
                                        {
                                            description = "jump near if greater (ZF=0 and SF=OF)";
                                            LastDisassembleData.OpCode = "jg";
                                            LastDisassembleData.IsJump = true;
                                            LastDisassembleData.IsConditionalJump = true;
                                            //if (context != nil)
                                            //lastdisassembledata.willjumpaccordingtocontext = ((context->eflags & eflags_sf) == (context->eflags & eflags_of)) && ((context->eflags & eflags_zf) == 0);


                                            offset += 1 + 4;
                                            if (MarkIpRelativeInstructions)
                                            {
                                                LastDisassembleData.RipRelative = 2;
                                                _ripRelative = true;
                                            }

                                            LastDisassembleData.ParameterValueType = ADisassemblerValueType.Address;
                                            if (Is64Bit)
                                                LastDisassembleData.ParameterValue = (UIntPtr)(offset.ToUInt64() + (UInt64)memory.ReadInt32(2));
                                            else
                                                LastDisassembleData.ParameterValue = (UIntPtr)(UInt32)(offset.ToUInt64() + (UInt64)memory.ReadInt32(2));

                                            LastDisassembleData.Separators[LastDisassembleData.SeparatorCount] = 2;
                                            LastDisassembleData.SeparatorCount += 1;



                                            LastDisassembleData.Parameters = IntToHexSigned(LastDisassembleData.ParameterValue, 8);
                                        }
                                        break;

                                    case 0x90:
                                        {
                                            description = "set byte if overflow";
                                            LastDisassembleData.OpCode = "seto";
                                            LastDisassembleData.Parameters = ModRm(memory, _prefix2, 2, 2, ref last, 8);

                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                        }
                                        break;

                                    case 0x91:
                                        {
                                            description = "set byte if not overfloww";
                                            LastDisassembleData.OpCode = "setno";
                                            LastDisassembleData.Parameters = ModRm(memory, _prefix2, 2, 2, ref last, 8);

                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                        }
                                        break;

                                    case 0x92:
                                        {
                                            description = "set byte if below/carry";
                                            LastDisassembleData.OpCode = "setb";
                                            LastDisassembleData.Parameters = ModRm(memory, _prefix2, 2, 2, ref last, 8);

                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                        }
                                        break;

                                    case 0x93:
                                        {
                                            description = "set byte if above or equal";
                                            LastDisassembleData.OpCode = "setae";
                                            LastDisassembleData.Parameters = ModRm(memory, _prefix2, 2, 2, ref last, 8);

                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                        }
                                        break;

                                    case 0x94:
                                        {
                                            description = "set byte if equal";
                                            LastDisassembleData.OpCode = "sete";
                                            LastDisassembleData.Parameters = ModRm(memory, _prefix2, 2, 2, ref last, 8);

                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                        }
                                        break;

                                    case 0x95:
                                        {
                                            description = "set byte if not equal";
                                            LastDisassembleData.OpCode = "setne";
                                            LastDisassembleData.Parameters = ModRm(memory, _prefix2, 2, 2, ref last, 8);

                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                        }
                                        break;

                                    case 0x96:
                                        {
                                            description = "set byte if below or equal";
                                            LastDisassembleData.OpCode = "setbe";
                                            LastDisassembleData.Parameters = ModRm(memory, _prefix2, 2, 2, ref last, 8);

                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                        }
                                        break;

                                    case 0x97:
                                        {
                                            description = "set byte if above";
                                            LastDisassembleData.OpCode = "seta";
                                            LastDisassembleData.Parameters = ModRm(memory, _prefix2, 2, 2, ref last, 8);

                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                        }
                                        break;

                                    case 0x98:
                                        {
                                            description = "set byte if sign";
                                            LastDisassembleData.OpCode = "sets";
                                            LastDisassembleData.Parameters = ModRm(memory, _prefix2, 2, 2, ref last, 8);

                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                        }
                                        break;

                                    case 0x99:
                                        {
                                            description = "set byte if not sign";
                                            LastDisassembleData.OpCode = "setns";
                                            LastDisassembleData.Parameters = ModRm(memory, _prefix2, 2, 2, ref last, 8);

                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                        }
                                        break;

                                    case 0x9a:
                                        {
                                            description = "set byte if parity";
                                            LastDisassembleData.OpCode = "setp";
                                            LastDisassembleData.Parameters = ModRm(memory, _prefix2, 2, 2, ref last, 8);

                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                        }
                                        break;

                                    case 0x9b:
                                        {
                                            description = "set byte if not parity";
                                            LastDisassembleData.OpCode = "setnp";
                                            LastDisassembleData.Parameters = ModRm(memory, _prefix2, 2, 2, ref last, 8);

                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                        }
                                        break;

                                    case 0x9c:
                                        {
                                            description = "set byte if less";
                                            LastDisassembleData.OpCode = "setl";
                                            LastDisassembleData.Parameters = ModRm(memory, _prefix2, 2, 2, ref last, 8);

                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                        }
                                        break;

                                    case 0x9d:
                                        {
                                            description = "set byte if greater or equal";
                                            LastDisassembleData.OpCode = "setge";
                                            LastDisassembleData.Parameters = ModRm(memory, _prefix2, 2, 2, ref last, 8);
                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());

                                        }
                                        break;

                                    case 0x9e:
                                        {
                                            description = "set byte if less or equal";
                                            LastDisassembleData.OpCode = "setle";
                                            LastDisassembleData.Parameters = ModRm(memory, _prefix2, 2, 2, ref last, 8);
                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());

                                        }
                                        break;

                                    case 0x9f:
                                        {
                                            description = "set byte if greater";
                                            LastDisassembleData.OpCode = "setg";
                                            LastDisassembleData.Parameters = ModRm(memory, _prefix2, 2, 2, ref last, 8);
                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());


                                        }
                                        break;

                                    case 0xa0:
                                        {
                                            description = "push word or doubleword onto the stack";
                                            LastDisassembleData.OpCode = "push";
                                            LastDisassembleData.Parameters = "fs";
                                            offset += 1;
                                        }
                                        break;

                                    case 0xa1:
                                        {
                                            description = "pop a value from the stack";
                                            LastDisassembleData.OpCode = "pop";
                                            LastDisassembleData.Parameters = "fs";
                                            offset += 1;
                                        }
                                        break;


                                    case 0xa2:
                                        {
                                            description = "cpu identification";
                                            LastDisassembleData.OpCode = "cpuid";
                                            offset += 1;
                                        }
                                        break;

                                    case 0xa3:
                                        {
                                            description = "bit test";
                                            LastDisassembleData.OpCode = "bt";
                                            if (_prefix2.Contains(0x66))
                                                LastDisassembleData.Parameters = ModRm(memory, _prefix2, 2, 1, ref last) + R16(memory[2]);
                                            else
                                                LastDisassembleData.Parameters = ModRm(memory, _prefix2, 2, 0, ref last) + R32(memory[2]);

                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                        }
                                        break;

                                    case 0xa4:
                                        {
                                            description = "double precision shift left";
                                            LastDisassembleData.OpCode = "shld";
                                            if (_prefix2.Contains(0x66))
                                                LastDisassembleData.Parameters = ModRm(memory, _prefix2, 2, 1, ref last) + R16(memory[2]);
                                            else
                                                LastDisassembleData.Parameters = ModRm(memory, _prefix2, 2, 0, ref last) + R32(memory[2]);

                                            LastDisassembleData.Parameters = LastDisassembleData.Parameters + ',' + AStringUtils.IntToHex(memory[(int)last], 2);
                                            last += 1;
                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());

                                        }
                                        break;

                                    case 0xa5:
                                        {
                                            description = "double precision shift left";
                                            LastDisassembleData.OpCode = "shld";
                                            if (_prefix2.Contains(0x66))
                                                LastDisassembleData.Parameters = ModRm(memory, _prefix2, 2, 1, ref last) + R16(memory[2]) + ',' + _colorReg + "cl" + _endColor;
                                            else
                                                LastDisassembleData.Parameters = ModRm(memory, _prefix2, 2, 0, ref last) + R32(memory[2]) + ',' + _colorReg + "cl" + _endColor;
                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());

                                        }
                                        break;

                                    case 0xa8:
                                        {
                                            description = "push word or doubleword onto the stack";
                                            LastDisassembleData.OpCode = "push";
                                            LastDisassembleData.Parameters = "gs";
                                            offset += 1;
                                        }
                                        break;

                                    case 0xa9:
                                        {
                                            description = "pop a value from the stack";
                                            LastDisassembleData.OpCode = "pop";
                                            LastDisassembleData.Parameters = "gs";
                                            offset += 1;
                                        }
                                        break;

                                    case 0xaa:
                                        {
                                            description = "resume from system management mode";
                                            LastDisassembleData.OpCode = "rsm";
                                            offset += 1;
                                        }
                                        break;

                                    case 0xab:
                                        {
                                            description = "bit test and set";
                                            LastDisassembleData.OpCode = "bts";
                                            if (_prefix2.Contains(0x66))
                                                LastDisassembleData.Parameters = ModRm(memory, _prefix2, 2, 1, ref last) + R16(memory[2]);
                                            else
                                                LastDisassembleData.Parameters = ModRm(memory, _prefix2, 2, 0, ref last) + R32(memory[2]);
                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());

                                        }
                                        break;

                                    case 0xac:
                                        {
                                            description = "double precision shift right";
                                            LastDisassembleData.OpCode = "shrd";
                                            if (_prefix2.Contains(0x66))
                                                LastDisassembleData.Parameters = ModRm(memory, _prefix2, 2, 1, ref last) + R16(memory[2]);
                                            else
                                                LastDisassembleData.Parameters = ModRm(memory, _prefix2, 2, 0, ref last) + R32(memory[2]);

                                            LastDisassembleData.Parameters = LastDisassembleData.Parameters + ',' + AStringUtils.IntToHex(memory[(int)last], 2);
                                            last += 1;
                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                        }
                                        break;

                                    case 0xad:
                                        {
                                            description = "double precision shift right";
                                            LastDisassembleData.OpCode = "shrd";
                                            if (_prefix2.Contains(0x66))
                                                LastDisassembleData.Parameters = ModRm(memory, _prefix2, 2, 1, ref last) + R16(memory[2]) + ',' + _colorReg + "cl" + _endColor;
                                            else
                                                LastDisassembleData.Parameters = ModRm(memory, _prefix2, 2, 0, ref last) + R32(memory[2]) + ',' + _colorReg + "cl" + _endColor;
                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());

                                        }
                                        break;

                                    case 0xae:
                                        {
                                            switch (memory[2])
                                            {
                                                case 0xf0:
                                                    {
                                                        description = "memory fence";
                                                        LastDisassembleData.OpCode = "mfence";
                                                        offset += 1;
                                                    }
                                                    break;

                                                case 0xf8:
                                                    {
                                                        description = "store fence";
                                                        LastDisassembleData.OpCode = "sfence";
                                                        offset += 1;
                                                    }
                                                    break;

                                                default:
                                                    switch (GetReg(memory[2]))
                                                    {
                                                        case 0:
                                                            {
                                                                if (_prefix2.Contains(0xf3))
                                                                {
                                                                    description = "read fs base address";
                                                                    LastDisassembleData.OpCode = "rdfsbase";
                                                                    LastDisassembleData.Parameters = ModRm(memory, _prefix2, 2, 0, ref last);
                                                                    offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                                }
                                                                else
                                                                {
                                                                    description = "store fp and mmx state and streaming simd extension state";
                                                                    LastDisassembleData.OpCode = "fxsave";
                                                                    LastDisassembleData.Parameters = ModRm(memory, _prefix2, 2, 0, ref last);
                                                                    offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                                }
                                                            }
                                                            break;

                                                        case 1:
                                                            {
                                                                if (_prefix2.Contains(0xf3))
                                                                {
                                                                    description = "read gs base address";
                                                                    LastDisassembleData.OpCode = "rdgsbase";
                                                                    LastDisassembleData.Parameters = ModRm(memory, _prefix2, 2, 0, ref last);
                                                                    offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                                }
                                                                else
                                                                {
                                                                    description = "restore fp and mmx state and streaming simd extension state";
                                                                    LastDisassembleData.OpCode = "fxrstor";
                                                                    LastDisassembleData.Parameters = ModRm(memory, _prefix2, 2, 0, ref last);
                                                                    offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                                }
                                                            }
                                                            break;

                                                        case 2:
                                                            {
                                                                if (_prefix2.Contains(0xf3))
                                                                {
                                                                    description = "write fs base address";
                                                                    LastDisassembleData.OpCode = "wrfsbase";
                                                                    LastDisassembleData.Parameters = ModRm(memory, _prefix2, 2, 0, ref last);
                                                                    offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                                }
                                                                else
                                                                {
                                                                    description = "load streaming simd extension control/status";
                                                                    if (_hasVex)
                                                                        LastDisassembleData.OpCode = "vldmxcsr";
                                                                    else
                                                                        LastDisassembleData.OpCode = "ldmxcsr";
                                                                    LastDisassembleData.Parameters = ModRm(memory, _prefix2, 2, 0, ref last);
                                                                    offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                                }
                                                            }
                                                            break;

                                                        case 3:
                                                            {
                                                                if (_prefix2.Contains(0xf3))
                                                                {
                                                                    description = "write gs base address";
                                                                    LastDisassembleData.OpCode = "wrgsbase";
                                                                    LastDisassembleData.Parameters = ModRm(memory, _prefix2, 2, 0, ref last);
                                                                    offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                                }
                                                                else
                                                                {
                                                                    description = "store streaming simd extension control/status";
                                                                    if (_hasVex)
                                                                        LastDisassembleData.OpCode = "stmxcsr";
                                                                    else
                                                                        LastDisassembleData.OpCode = "stmxcsr";

                                                                    _opCodeFlags.SkipExtraReg = true;
                                                                    LastDisassembleData.Parameters = ModRm(memory, _prefix2, 2, 0, ref last);
                                                                    offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                                }
                                                            }
                                                            break;

                                                        case 4:
                                                            {
                                                                description = "save processor extended state";
                                                                if (RexW)
                                                                    LastDisassembleData.OpCode = "xsave64";
                                                                else
                                                                    LastDisassembleData.OpCode = "xsave";
                                                                LastDisassembleData.Parameters = ModRm(memory, _prefix2, 2, 0, ref last);
                                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                            }
                                                            break;

                                                        case 5:
                                                            {
                                                                if (GetMod(memory[2]) == 3)
                                                                {
                                                                    description = "Load Fence";
                                                                    LastDisassembleData.OpCode = "lfence";
                                                                    offset += 2;
                                                                }
                                                                else
                                                                {
                                                                    description = "restore processor extended state";
                                                                    if (RexW)
                                                                        LastDisassembleData.OpCode = "xrstor64";
                                                                    else
                                                                        LastDisassembleData.OpCode = "xrstor";
                                                                    LastDisassembleData.Parameters = ModRm(memory, _prefix2, 2, 0, ref last);
                                                                    offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                                }
                                                            }
                                                            break;

                                                        case 6:
                                                            {
                                                                description = "save processor extended status optimized";
                                                                if (RexW)
                                                                    LastDisassembleData.OpCode = "xsaveopt64";
                                                                else
                                                                    LastDisassembleData.OpCode = "xsaveopt";
                                                                LastDisassembleData.Parameters = ModRm(memory, _prefix2, 2, 0, ref last);
                                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                            }
                                                            break;

                                                        case 7:
                                                            {
                                                                ;

                                                            }
                                                            break;

                                                    }
                                                    break;

                                            }



                                        }
                                        break;

                                    case 0xaf:
                                        {
                                            description = "signed multiply";
                                            LastDisassembleData.OpCode = "imul";
                                            if (_prefix2.Contains(0x66))
                                                LastDisassembleData.Parameters = R16(memory[2]) + ModRm(memory, _prefix2, 2, 1, ref last, ATmrPos.Right);
                                            else
                                                LastDisassembleData.Parameters = R32(memory[2]) + ModRm(memory, _prefix2, 2, 0, ref last, ATmrPos.Right);

                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                        }
                                        break;

                                    case 0xb0:
                                        {
                                            description = "compare and exchange";
                                            LastDisassembleData.OpCode = "cmpxchg";
                                            LastDisassembleData.Parameters = ModRm(memory, _prefix2, 2, 2, ref last) + R8(memory[2]);
                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                        }
                                        break;

                                    case 0xb1:
                                        {
                                            description = "compare and exchange";
                                            LastDisassembleData.OpCode = "cmpxchg";
                                            if (_prefix2.Contains(0x66))
                                                LastDisassembleData.Parameters = ModRm(memory, _prefix2, 2, 1, ref last) + R16(memory[2]);
                                            else
                                                LastDisassembleData.Parameters = ModRm(memory, _prefix2, 2, 0, ref last) + R32(memory[2]);
                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                        }
                                        break;

                                    case 0xb2:
                                        {
                                            description = "load far pointer";
                                            LastDisassembleData.OpCode = "lss";
                                            if (_prefix2.Contains(0x66))
                                                LastDisassembleData.Parameters = R16(memory[2]) + ModRm(memory, _prefix2, 2, 1, ref last, ATmrPos.Right);
                                            else
                                                LastDisassembleData.Parameters = R32(memory[2]) + ModRm(memory, _prefix2, 2, 0, ref last, ATmrPos.Right);

                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                        }
                                        break;

                                    case 0xb3:
                                        {
                                            description = "bit test and reset";
                                            LastDisassembleData.OpCode = "btr";
                                            if (_prefix2.Contains(0x66))
                                                LastDisassembleData.Parameters = ModRm(memory, _prefix2, 2, 1, ref last) + R16(memory[2]);
                                            else
                                                LastDisassembleData.Parameters = ModRm(memory, _prefix2, 2, 0, ref last) + R32(memory[2]);
                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());

                                        }
                                        break;

                                    case 0xb4:
                                        {
                                            description = "load far pointer";
                                            LastDisassembleData.OpCode = "lfs";
                                            if (_prefix2.Contains(0x66))
                                                LastDisassembleData.Parameters = R16(memory[2]) + ModRm(memory, _prefix2, 2, 1, ref last, ATmrPos.Right);
                                            else
                                                LastDisassembleData.Parameters = R32(memory[2]) + ModRm(memory, _prefix2, 2, 0, ref last, ATmrPos.Right);

                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                        }
                                        break;

                                    case 0xb5:
                                        {
                                            description = "load far pointer";
                                            LastDisassembleData.OpCode = "lgs";
                                            if (_prefix2.Contains(0x66))
                                                LastDisassembleData.Parameters = R16(memory[2]) + ModRm(memory, _prefix2, 2, 1, ref last, ATmrPos.Right);
                                            else
                                                LastDisassembleData.Parameters = R32(memory[2]) + ModRm(memory, _prefix2, 2, 0, ref last, ATmrPos.Right);

                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                        }
                                        break;

                                    case 0xb6:
                                        {
                                            description = "Move with zero-extend";
                                            LastDisassembleData.OpCode = "movzx";
                                            if (_prefix2.Contains(0x66))
                                                LastDisassembleData.Parameters = R16(memory[2]) + ModRm(memory, _prefix2, 2, 2, ref last, 8, 0, ATmrPos.Right);
                                            else
                                                LastDisassembleData.Parameters = R32(memory[2]) + ModRm(memory, _prefix2, 2, 2, ref last, 8, 0, ATmrPos.Right);


                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                        }
                                        break;

                                    case 0xb7:
                                        {
                                            description = "Move with zero-extend";
                                            LastDisassembleData.OpCode = "movzx";
                                            if (_prefix2.Contains(0x66))
                                                LastDisassembleData.Parameters = R16(memory[2]) + ModRm(memory, _prefix2, 2, 1, ref last, 16, 0, ATmrPos.Right);
                                            else
                                                LastDisassembleData.Parameters = R32(memory[2]) + ModRm(memory, _prefix2, 2, 1, ref last, 16, 0, ATmrPos.Right);


                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                        }
                                        break;

                                    case 0xb8:
                                        {
                                            if (_prefix2.Contains(0xf3))
                                            {
                                                description = "Return the Count of Number of Bits Set to 1";
                                                LastDisassembleData.OpCode = "popcnt";
                                                if (_prefix2.Contains(0x66))
                                                    LastDisassembleData.Parameters = R16(memory[2]) + ModRm(memory, _prefix2, 2, 1, ref last, ATmrPos.Right);
                                                else
                                                    LastDisassembleData.Parameters = R32(memory[2]) + ModRm(memory, _prefix2, 2, 1, ref last, ATmrPos.Right);

                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                        }
                                        break;


                                    case 0xba:
                                        {
                                            LastDisassembleData.ParameterValueType = ADisassemblerValueType.Value;


                                            switch (GetReg(memory[2]))
                                            {
                                                case 4:
                                                    {
                                                        //bt
                                                        description = "bit test";
                                                        LastDisassembleData.OpCode = "bt";
                                                        if (_prefix2.Contains(0x66))
                                                            LastDisassembleData.Parameters = ModRm(memory, _prefix2, 2, 1, ref last);
                                                        else
                                                            LastDisassembleData.Parameters = ModRm(memory, _prefix2, 2, 0, ref last);     //notice the difference in the modrm 4th parameter

                                                        LastDisassembleData.ParameterValue = (UIntPtr)memory[(int)last];
                                                        LastDisassembleData.Parameters = LastDisassembleData.Parameters + IntToHexSigned((UIntPtr)memory[(int)last], 2);

                                                        offset = (UIntPtr)(offset.ToUInt64() + last - 1 + 1);
                                                    }
                                                    break;

                                                case 5:
                                                    {
                                                        //bts
                                                        description = "bit test and set";
                                                        LastDisassembleData.OpCode = "bts";
                                                        if (_prefix2.Contains(0x66))
                                                            LastDisassembleData.Parameters = ModRm(memory, _prefix2, 2, 1, ref last);
                                                        else
                                                            LastDisassembleData.Parameters = ModRm(memory, _prefix2, 2, 0, ref last);     //notice the difference in the modrm 4th parameter

                                                        LastDisassembleData.ParameterValue = (UIntPtr)memory[(int)last];
                                                        LastDisassembleData.Parameters = LastDisassembleData.Parameters + IntToHexSigned((UIntPtr)memory[(int)last], 2);
                                                        offset = (UIntPtr)(offset.ToUInt64() + last - 1 + 1);
                                                    }
                                                    break;

                                                case 6:
                                                    {
                                                        //btr
                                                        description = "bit test and reset";
                                                        LastDisassembleData.OpCode = "btr";
                                                        if (_prefix2.Contains(0x66))
                                                            LastDisassembleData.Parameters = ModRm(memory, _prefix2, 2, 1, ref last);
                                                        else
                                                            LastDisassembleData.Parameters = ModRm(memory, _prefix2, 2, 0, ref last);     //notice the difference in the modrm 4th parameter

                                                        LastDisassembleData.ParameterValue = (UIntPtr)memory[(int)last];
                                                        LastDisassembleData.Parameters = LastDisassembleData.Parameters + IntToHexSigned((UIntPtr)memory[(int)last], 2);

                                                        offset = (UIntPtr)(offset.ToUInt64() + last - 1 + 1);
                                                    }
                                                    break;

                                                case 7:
                                                    {
                                                        //btc
                                                        description = "bit test and complement";
                                                        LastDisassembleData.OpCode = "btc";
                                                        if (_prefix2.Contains(0x66))
                                                            LastDisassembleData.Parameters = ModRm(memory, _prefix2, 2, 1, ref last);
                                                        else
                                                            LastDisassembleData.Parameters = ModRm(memory, _prefix2, 2, 0, ref last);     //notice the difference in the modrm 4th parameter

                                                        LastDisassembleData.ParameterValue = (UIntPtr)memory[(int)last];
                                                        LastDisassembleData.Parameters = LastDisassembleData.Parameters + IntToHexSigned((UIntPtr)memory[(int)last], 2);

                                                        offset = (UIntPtr)(offset.ToUInt64() + last - 1 + 1);
                                                    }
                                                    break;

                                            }

                                        }
                                        break;

                                    case 0xbb:
                                        {
                                            description = "bit test and complement";
                                            LastDisassembleData.OpCode = "btc";
                                            if (_prefix2.Contains(0x66))
                                                LastDisassembleData.Parameters = ModRm(memory, _prefix2, 2, 1, ref last) + R16(memory[2]);
                                            else
                                                LastDisassembleData.Parameters = ModRm(memory, _prefix2, 2, 0, ref last) + R32(memory[2]);
                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());

                                        }
                                        break;


                                    case 0xbc:
                                        {
                                            if (_prefix2.Contains(0xf3))
                                            {
                                                description = "count the number of trailing zero bits";
                                                LastDisassembleData.OpCode = "tzcnt";
                                                if (_prefix2.Contains(0x66))
                                                    LastDisassembleData.Parameters = R16(memory[2]) + ModRm(memory, _prefix2, 2, 1, ref last, ATmrPos.Right);
                                                else
                                                    LastDisassembleData.Parameters = R32(memory[2]) + ModRm(memory, _prefix2, 2, 0, ref last, ATmrPos.Right);

                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                            else
                                            {
                                                //bsf
                                                description = "bit scan forward";
                                                LastDisassembleData.OpCode = "bsf";
                                                if (_prefix2.Contains(0x66))
                                                    LastDisassembleData.Parameters = R16(memory[2]) + ModRm(memory, _prefix2, 2, 1, ref last, ATmrPos.Right);
                                                else
                                                    LastDisassembleData.Parameters = R32(memory[2]) + ModRm(memory, _prefix2, 2, 0, ref last, ATmrPos.Right);


                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                        }
                                        break;

                                    case 0xbd:
                                        {
                                            if (_prefix2.Contains(0xf3))
                                            {
                                                description = "count the number of leading zero bits";
                                                LastDisassembleData.OpCode = "lzcnt";
                                                if (_prefix2.Contains(0x66))
                                                    LastDisassembleData.Parameters = R16(memory[2]) + ModRm(memory, _prefix2, 2, 1, ref last, ATmrPos.Right);
                                                else
                                                    LastDisassembleData.Parameters = R32(memory[2]) + ModRm(memory, _prefix2, 2, 0, ref last, ATmrPos.Right);

                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                            else
                                            {
                                                //bsf
                                                description = "bit scan reverse";
                                                LastDisassembleData.OpCode = "bsr";
                                                if (_prefix2.Contains(0x66))
                                                    LastDisassembleData.Parameters = R16(memory[2]) + ModRm(memory, _prefix2, 2, 1, ref last, ATmrPos.Right);
                                                else
                                                    LastDisassembleData.Parameters = R32(memory[2]) + ModRm(memory, _prefix2, 2, 0, ref last, ATmrPos.Right);


                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                        }
                                        break;

                                    case 0xbe:
                                        {
                                            description = "move with sign-extension";
                                            LastDisassembleData.OpCode = "movsx";
                                            if (_prefix2.Contains(0x66))
                                                LastDisassembleData.Parameters = R16(memory[2]) + ModRm(memory, _prefix2, 2, 2, ref last, 8, 0, ATmrPos.Right);
                                            else
                                                LastDisassembleData.Parameters = R32(memory[2]) + ModRm(memory, _prefix2, 2, 2, ref last, 8, 0, ATmrPos.Right);



                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                        }
                                        break;

                                    case 0xbf:
                                        {
                                            description = "move with sign-extension";
                                            LastDisassembleData.OpCode = "movsx";
                                            LastDisassembleData.Parameters = R32(memory[2]) + ModRm(memory, _prefix2, 2, 1, ref last, 16, 0, ATmrPos.Right);

                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                        }
                                        break;

                                    case 0xc0:
                                        {
                                            description = "exchange and add";
                                            LastDisassembleData.OpCode = "xadd";
                                            LastDisassembleData.Parameters = ModRm(memory, _prefix2, 2, 2, ref last) + R8(memory[2]);
                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                        }
                                        break;

                                    case 0xc1:
                                        {
                                            description = "exchange and add";
                                            LastDisassembleData.OpCode = "xadd";
                                            if (_prefix2.Contains(0x66))
                                                LastDisassembleData.Parameters = ModRm(memory, _prefix2, 2, 1, ref last) + R16(memory[2]);
                                            else

                                                LastDisassembleData.Parameters = ModRm(memory, _prefix2, 2, 0, ref last) + R32(memory[2]);
                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                        }
                                        break;

                                    case 0xc2:
                                        {
                                            LastDisassembleData.IsFloat = true;
                                            if (_prefix2.Contains(0xf2))
                                            {

                                                description = "compare scalar dpuble-precision floating-point values";
                                                if (_hasVex)
                                                    LastDisassembleData.OpCode = "vcmpsd";
                                                else
                                                    LastDisassembleData.OpCode = "cmpsd";
                                                LastDisassembleData.Parameters = Xmm(memory[2]) + ModRm(memory, _prefix2, 2, 4, ref last, 128, 0, ATmrPos.Right);

                                                LastDisassembleData.ParameterValueType = ADisassemblerValueType.Value;
                                                LastDisassembleData.ParameterValue = (UIntPtr)memory[(int)last];
                                                LastDisassembleData.Parameters = LastDisassembleData.Parameters + ',' + IntToHexSigned(LastDisassembleData.ParameterValue, 2);
                                                offset = (UIntPtr)(offset.ToUInt64() + last);
                                            }
                                            else
                                            if (_prefix2.Contains(0xf3))
                                            {
                                                description = "packed single-fp compare";
                                                if (_hasVex)
                                                    LastDisassembleData.OpCode = "vcmpss";
                                                else
                                                    LastDisassembleData.OpCode = "cmpss";
                                                LastDisassembleData.Parameters = Xmm(memory[2]) + ModRm(memory, _prefix2, 2, 4, ref last, 128, 0, ATmrPos.Right);
                                                LastDisassembleData.ParameterValueType = ADisassemblerValueType.Value;
                                                LastDisassembleData.ParameterValue = (UIntPtr)memory[(int)last];
                                                LastDisassembleData.Parameters = LastDisassembleData.Parameters + ',' + IntToHexSigned(LastDisassembleData.ParameterValue, 2);
                                                LastDisassembleData.DataSize = 4;
                                                offset = (UIntPtr)(offset.ToUInt64() + last);
                                            }
                                            else
                                            {
                                                if (_prefix2.Contains(0x66))
                                                {
                                                    description = "compare packed double-precision floating-point values";
                                                    if (_hasVex)
                                                        LastDisassembleData.OpCode = "vcmppd";
                                                    else
                                                        LastDisassembleData.OpCode = "cmppd";
                                                    LastDisassembleData.Parameters = Xmm(memory[2]) + ModRm(memory, _prefix2, 2, 4, ref last, 128, 0, ATmrPos.Right);
                                                    LastDisassembleData.ParameterValueType = ADisassemblerValueType.Value;
                                                    LastDisassembleData.ParameterValue = (UIntPtr)memory[(int)last];
                                                    LastDisassembleData.Parameters = LastDisassembleData.Parameters + ',' + IntToHexSigned(LastDisassembleData.ParameterValue, 2);
                                                    offset = (UIntPtr)(offset.ToUInt64() + last);
                                                }
                                                else
                                                {
                                                    description = "packed single-fp compare";
                                                    if (_hasVex)
                                                        LastDisassembleData.OpCode = "vcmpps";
                                                    else
                                                        LastDisassembleData.OpCode = "cmpps";
                                                    LastDisassembleData.Parameters = Xmm(memory[2]) + ModRm(memory, _prefix2, 2, 4, ref last, 128, 0, ATmrPos.Right);
                                                    LastDisassembleData.ParameterValueType = ADisassemblerValueType.Value;
                                                    LastDisassembleData.ParameterValue = (UIntPtr)memory[(int)last];
                                                    LastDisassembleData.Parameters = LastDisassembleData.Parameters + ',' + IntToHexSigned(LastDisassembleData.ParameterValue, 2);
                                                    LastDisassembleData.DataSize = 4;
                                                    offset = (UIntPtr)(offset.ToUInt64() + last);
                                                }
                                            }
                                        }
                                        break;

                                    case 0xc3:
                                        {
                                            description = "store doubleword using non-temporal hint";
                                            LastDisassembleData.OpCode = "movnti";
                                            LastDisassembleData.Parameters = ModRm(memory, _prefix2, 2, 0, ref last) + R32(memory[2]);
                                            offset = (UIntPtr)(offset.ToUInt64() + last);
                                        }
                                        break;

                                    case 0xc4:
                                        {
                                            if (_prefix2.Contains(0x66))
                                            {
                                                description = "insert word";
                                                if (_hasVex)
                                                    LastDisassembleData.OpCode = "vpinsrw";
                                                else
                                                    LastDisassembleData.OpCode = "pinsrw";

                                                LastDisassembleData.Parameters = Xmm(memory[2]) + ModRm(memory, _prefix2, 2, 0, ref last, ATmrPos.Right);
                                                LastDisassembleData.ParameterValueType = ADisassemblerValueType.Value;
                                                LastDisassembleData.ParameterValue = (UIntPtr)memory[(int)last];
                                                LastDisassembleData.Parameters = LastDisassembleData.Parameters + IntToHexSigned(LastDisassembleData.ParameterValue, 2);
                                                offset = (UIntPtr)(offset.ToUInt64() + last);
                                            }
                                            else
                                            {
                                                description = "insert word";
                                                LastDisassembleData.OpCode = "pinsrw";
                                                LastDisassembleData.Parameters = Mm(memory[2]) + ModRm(memory, _prefix2, 2, 0, ref last, ATmrPos.Right);
                                                LastDisassembleData.ParameterValueType = ADisassemblerValueType.Value;
                                                LastDisassembleData.ParameterValue = (UIntPtr)memory[(int)last];
                                                LastDisassembleData.Parameters = LastDisassembleData.Parameters + IntToHexSigned(LastDisassembleData.ParameterValue, 2);
                                                offset = (UIntPtr)(offset.ToUInt64() + last);
                                            }
                                        }
                                        break;

                                    case 0xc5:
                                        {
                                            if (_prefix2.Contains(0x66))
                                            {
                                                description = "extract word";
                                                LastDisassembleData.OpCode = "pextrw";
                                                LastDisassembleData.Parameters = R32(memory[2]) + ModRm(memory, _prefix2, 2, 4, ref last);
                                                LastDisassembleData.ParameterValueType = ADisassemblerValueType.Value;
                                                LastDisassembleData.ParameterValue = (UIntPtr)memory[(int)last];
                                                LastDisassembleData.Parameters = LastDisassembleData.Parameters + IntToHexSigned(LastDisassembleData.ParameterValue, 2);
                                                offset += 3;
                                            }
                                            else
                                            {
                                                description = "extract word";
                                                LastDisassembleData.OpCode = "pextrw";
                                                LastDisassembleData.Parameters = R32(memory[2]) + ModRm(memory, _prefix2, 2, 3, ref last, ATmrPos.Right);
                                                LastDisassembleData.ParameterValueType = ADisassemblerValueType.Value;
                                                LastDisassembleData.ParameterValue = (UIntPtr)memory[(int)last];
                                                LastDisassembleData.Parameters = LastDisassembleData.Parameters + IntToHexSigned(LastDisassembleData.ParameterValue, 2);
                                                offset += 3;
                                            }
                                        }
                                        break;

                                    case 0xc6:
                                        {
                                            LastDisassembleData.IsFloat = true;
                                            if (_prefix2.Contains(0x66))
                                            {
                                                description = "shuffle double-fp";
                                                if (_hasVex)
                                                    LastDisassembleData.OpCode = "vshufpd";
                                                else
                                                    LastDisassembleData.OpCode = "shufpd";
                                                LastDisassembleData.Parameters = Xmm(memory[2]) + ModRm(memory, _prefix2, 2, 4, ref last, ATmrPos.Right);
                                                LastDisassembleData.ParameterValueType = ADisassemblerValueType.Value;
                                                LastDisassembleData.ParameterValue = (UIntPtr)memory[(int)last];
                                                LastDisassembleData.Parameters = LastDisassembleData.Parameters + ',' + IntToHexSigned(LastDisassembleData.ParameterValue, 2);
                                                offset = (UIntPtr)(offset.ToUInt64() + last);
                                            }
                                            else
                                            {
                                                description = "shuffle single-fp";
                                                if (_hasVex)
                                                    LastDisassembleData.OpCode = "vshufps";
                                                else
                                                    LastDisassembleData.OpCode = "shufps";
                                                LastDisassembleData.Parameters = Xmm(memory[2]) + ModRm(memory, _prefix2, 2, 4, ref last, ATmrPos.Right);
                                                LastDisassembleData.ParameterValueType = ADisassemblerValueType.Value;
                                                LastDisassembleData.ParameterValue = (UIntPtr)memory[(int)last];
                                                LastDisassembleData.Parameters = LastDisassembleData.Parameters + ',' + IntToHexSigned(LastDisassembleData.ParameterValue, 2);
                                                LastDisassembleData.DataSize = 4;
                                                offset = (UIntPtr)(offset.ToUInt64() + last);
                                            }
                                        }
                                        break;

                                    case 0xc7:
                                        {
                                            switch (GetReg(memory[2]))
                                            {
                                                case 1:
                                                    {
                                                        description = "compare and exchange 8 bytes";
                                                        LastDisassembleData.OpCode = "cmpxchg8b";
                                                        LastDisassembleData.Parameters = ModRm(memory, _prefix2, 2, 0, ref last);
                                                        offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                    }
                                                    break;

                                                case 3:
                                                    {
                                                        description = "restore processor extended status supervisor";
                                                        if (RexW)
                                                            LastDisassembleData.OpCode = "xrstors64";
                                                        else
                                                            LastDisassembleData.OpCode = "xrstors";
                                                        LastDisassembleData.Parameters = ModRm(memory, _prefix2, 2, 0, ref last);
                                                        offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                    }
                                                    break;

                                                case 4:
                                                    {
                                                        description = "save processor extended state with compaction";
                                                        if (RexW)
                                                            LastDisassembleData.OpCode = "xsavec";
                                                        else
                                                            LastDisassembleData.OpCode = "xsavec64";
                                                        LastDisassembleData.Parameters = ModRm(memory, _prefix2, 2, 0, ref last);
                                                        offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                    }
                                                    break;

                                                case 5:
                                                    {
                                                        description = "save processor extended state supervisor";
                                                        if (RexW)
                                                            LastDisassembleData.OpCode = "xsaves";
                                                        else
                                                            LastDisassembleData.OpCode = "xsaves64";
                                                        LastDisassembleData.Parameters = ModRm(memory, _prefix2, 2, 0, ref last);
                                                        offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                    }
                                                    break;


                                                case 6:
                                                    {
                                                        if (_prefix2.Contains(0x66))
                                                        {
                                                            if (GetMod(memory[2]) == 3)  //reg
                                                            {
                                                                description = "read random numer";
                                                                LastDisassembleData.OpCode = "rdrand";
                                                                LastDisassembleData.Parameters = ModRm(memory, _prefix2, 2, 1, ref last);
                                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                            }
                                                            else
                                                            {
                                                                description = "copy vmcs data to vmcs region in memory";
                                                                LastDisassembleData.OpCode = "vmclear";
                                                                LastDisassembleData.Parameters = ModRm(memory, _prefix2, 2, 0, ref last);

                                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                            }
                                                        }
                                                        else
                                                        if (_prefix2.Contains(0xf3))
                                                        {
                                                            description = "enter vmx root operation";
                                                            LastDisassembleData.OpCode = "vmxon";
                                                            LastDisassembleData.Parameters = ModRm(memory, _prefix2, 2, 0, ref last);

                                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                        }
                                                        else
                                                        {
                                                            //check if it's a memory or register access
                                                            //if register it's rdrand else vmptrld
                                                            if (GetMod(memory[2]) == 3)  //reg
                                                            {
                                                                description = "read random numer";
                                                                LastDisassembleData.OpCode = "rdrand";
                                                                LastDisassembleData.Parameters = ModRm(memory, _prefix2, 2, 0, ref last);
                                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                            }
                                                            else
                                                            {
                                                                description = "loads the current vmcs pointer from memory";
                                                                LastDisassembleData.OpCode = "vmptrld";
                                                                LastDisassembleData.Parameters = ModRm(memory, _prefix2, 2, 0, ref last);

                                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                            }


                                                        }
                                                    }
                                                    break;

                                                case 7:
                                                    {
                                                        if (GetMod(memory[2]) == 3)  //reg
                                                        {
                                                            description = "read random SEED";
                                                            LastDisassembleData.OpCode = "rdseed";
                                                            if (_prefix2.Contains(0x66))
                                                                LastDisassembleData.Parameters = ModRm(memory, _prefix2, 2, 1, ref last);
                                                            else
                                                                LastDisassembleData.Parameters = ModRm(memory, _prefix2, 2, 0, ref last);

                                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                        }
                                                        else
                                                        {
                                                            description = "stores the current vmcs pointer into memory";
                                                            LastDisassembleData.OpCode = "vmptrst";
                                                            LastDisassembleData.Parameters = ModRm(memory, _prefix2, 2, 0, ref last);

                                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                        }
                                                    }
                                                    break;
                                            }

                                        }
                                        break;
                                    case 0xc8:
                                    case 0xc9:
                                    case 0xca:
                                    case 0xcb:
                                    case 0xcc:
                                    case 0xcd:
                                    case 0xce:
                                    case 0xcf:
                                        {
                                            //bswap
                                            description = "byte swap";
                                            LastDisassembleData.OpCode = "bswap";
                                            if (_prefix2.Contains(0x66))
                                                LastDisassembleData.Parameters = Rd16((Byte)(memory[1] - 0xc8));
                                            else
                                                LastDisassembleData.Parameters = Rd((Byte)(memory[1] - 0xc8));

                                            offset += 1;
                                        }
                                        break;

                                    case 0xd0:
                                        {
                                            if (_prefix2.Contains(0x66))
                                            {
                                                description = "Packed Double-FP Add/Subtract";
                                                if (_hasVex)
                                                    LastDisassembleData.OpCode = "vaddsubpd";
                                                else
                                                    LastDisassembleData.OpCode = "addsubpd";
                                                LastDisassembleData.Parameters = Xmm(memory[2]) + ModRm(memory, _prefix2, 2, 4, ref last, ATmrPos.Right);
                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                            else
                                            if (_prefix2.Contains(0xf2))
                                            {
                                                description = "Packed Single-FP Add/Subtract";
                                                if (_hasVex)
                                                    LastDisassembleData.OpCode = "vaddsubps";
                                                else
                                                    LastDisassembleData.OpCode = "addsubps";
                                                LastDisassembleData.Parameters = Xmm(memory[2]) + ModRm(memory, _prefix2, 2, 4, ref last, ATmrPos.Right);
                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                        }
                                        break;

                                    case 0xd1:
                                        {
                                            if (_prefix2.Contains(0x66))
                                            {
                                                description = "packed shift right logical";
                                                if (_hasVex)
                                                    LastDisassembleData.OpCode = "vpsrlw";
                                                else
                                                    LastDisassembleData.OpCode = "psrlw";
                                                LastDisassembleData.Parameters = Xmm(memory[2]) + ModRm(memory, _prefix2, 2, 4, ref last, ATmrPos.Right);
                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                            else
                                            {
                                                description = "packed shift right logical";
                                                LastDisassembleData.OpCode = "psrlw";
                                                LastDisassembleData.Parameters = Mm(memory[2]) + ModRm(memory, _prefix2, 2, 3, ref last, ATmrPos.Right);
                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                        }
                                        break;

                                    case 0xd2:
                                        {
                                            if (_prefix2.Contains(0x66))
                                            {
                                                description = "packed shift right logical";
                                                if (_hasVex)
                                                    LastDisassembleData.OpCode = "vpsrld";
                                                else
                                                    LastDisassembleData.OpCode = "psrld";
                                                LastDisassembleData.Parameters = Xmm(memory[2]) + ModRm(memory, _prefix2, 2, 4, ref last, ATmrPos.Right);
                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                            else
                                            {
                                                description = "packed shift right logical";
                                                LastDisassembleData.OpCode = "psrld";
                                                LastDisassembleData.Parameters = Mm(memory[2]) + ModRm(memory, _prefix2, 2, 3, ref last, ATmrPos.Right);
                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                        }
                                        break;

                                    case 0xd3:
                                        {
                                            if (_prefix2.Contains(0x66))
                                            {
                                                description = "packed shift right logical";
                                                if (_hasVex)
                                                    LastDisassembleData.OpCode = "vpsrlq";
                                                else
                                                    LastDisassembleData.OpCode = "psrlq";

                                                LastDisassembleData.Parameters = Xmm(memory[2]) + ModRm(memory, _prefix2, 2, 4, ref last, ATmrPos.Right);
                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                            else
                                            {
                                                description = "packed shift right logical";
                                                LastDisassembleData.OpCode = "psrlq";
                                                LastDisassembleData.Parameters = Mm(memory[2]) + ModRm(memory, _prefix2, 2, 3, ref last, ATmrPos.Right);
                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                        }
                                        break;

                                    case 0xd4:
                                        {
                                            if (_prefix2.Contains(0x66))
                                            {
                                                description = "add packed quadword integers";
                                                if (_hasVex)
                                                    LastDisassembleData.OpCode = "vpaddq";
                                                else
                                                    LastDisassembleData.OpCode = "paddq";

                                                LastDisassembleData.Parameters = Xmm(memory[2]) + ModRm(memory, _prefix2, 2, 4, ref last, ATmrPos.Right);
                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                            else
                                            {
                                                description = "add packed quadword integers";
                                                LastDisassembleData.OpCode = "paddq";
                                                LastDisassembleData.Parameters = Mm(memory[2]) + ModRm(memory, _prefix2, 2, 3, ref last, ATmrPos.Right);
                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                        }
                                        break;


                                    case 0xd5:
                                        {
                                            if (_prefix2.Contains(0x66))
                                            {
                                                description = "packed multiply low";
                                                if (_hasVex)
                                                    LastDisassembleData.OpCode = "vpmullw";
                                                else
                                                    LastDisassembleData.OpCode = "pmullw";
                                                LastDisassembleData.Parameters = Xmm(memory[2]) + ModRm(memory, _prefix2, 2, 4, ref last, ATmrPos.Right);

                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                            else
                                            {
                                                description = "packed multiply low";
                                                LastDisassembleData.OpCode = "pmullw";
                                                LastDisassembleData.Parameters = Mm(memory[2]) + ModRm(memory, _prefix2, 2, 3, ref last, ATmrPos.Right);

                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                        }
                                        break;

                                    case 0xd6:
                                        {
                                            if (_prefix2.Contains(0xf2))
                                            {

                                                description = "move low quadword from xmm to mmx technology register";
                                                LastDisassembleData.OpCode = "movdq2q";
                                                LastDisassembleData.Parameters = Mm(memory[2]) + ModRm(memory, _prefix2, 2, 3, ref last, ATmrPos.Right);

                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                            else
                                            if (_prefix2.Contains(0xf3))
                                            {

                                                description = "move low quadword from xmm to mmx technology register";
                                                LastDisassembleData.OpCode = "movq2dq";
                                                LastDisassembleData.Parameters = Xmm(memory[2]) + ModRm(memory, _prefix2, 2, 3, ref last, ATmrPos.Right);

                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                            else
                                            if (_prefix2.Contains(0x66))
                                            {
                                                description = "move low quadword from xmm to mmx technology register";
                                                if (_hasVex)
                                                    LastDisassembleData.OpCode = "vmovq";
                                                else
                                                    LastDisassembleData.OpCode = "movq";
                                                LastDisassembleData.Parameters = ModRm(memory, _prefix2, 2, 4, ref last) + Xmm(memory[2]);
                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                            else
                                            {
                                                description = "move quadword from mmx technology to xmm register";
                                                LastDisassembleData.OpCode = "movq2dq";
                                                LastDisassembleData.Parameters = ModRm(memory, _prefix2, 2, 4, ref last) + Mm(memory[2]);
                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }

                                        }
                                        break;


                                    case 0xd7:
                                        {
                                            if (_prefix2.Contains(0x66))
                                            {
                                                description = "move byte mask to integer";
                                                if (_hasVex)
                                                    LastDisassembleData.OpCode = "vpmovmskb";
                                                else
                                                    LastDisassembleData.OpCode = "pmovmskb";

                                                _opCodeFlags.SkipExtraReg = true;
                                                LastDisassembleData.Parameters = R32(memory[2]) + ModRm(memory, _prefix2, 2, 4, ref last, ATmrPos.Right);

                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                            else
                                            {
                                                description = "move byte mask to integer";
                                                LastDisassembleData.OpCode = "pmovmskb";
                                                LastDisassembleData.Parameters = R32(memory[2]) + ModRm(memory, _prefix2, 2, 3, ref last, ATmrPos.Right);

                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                        }
                                        break;

                                    case 0xd8:
                                        {
                                            if (_prefix2.Contains(0x66))
                                            {
                                                description = "packed subtract unsigned with saturation";
                                                if (_hasVex)
                                                    LastDisassembleData.OpCode = "vpsubusb";
                                                else
                                                    LastDisassembleData.OpCode = "psubusb";

                                                LastDisassembleData.Parameters = Xmm(memory[2]) + ModRm(memory, _prefix2, 2, 4, ref last, ATmrPos.Right);
                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                            else
                                            {
                                                description = "packed subtract unsigned with saturation";
                                                LastDisassembleData.OpCode = "psubusb";
                                                LastDisassembleData.Parameters = Mm(memory[2]) + ModRm(memory, _prefix2, 2, 3, ref last, ATmrPos.Right);
                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                        }
                                        break;

                                    case 0xd9:
                                        {
                                            if (_prefix2.Contains(0x66))
                                            {
                                                description = "packed subtract unsigned with saturation";
                                                if (_hasVex)
                                                    LastDisassembleData.OpCode = "vpsubusw";
                                                else
                                                    LastDisassembleData.OpCode = "psubusw";
                                                LastDisassembleData.Parameters = Xmm(memory[2]) + ModRm(memory, _prefix2, 2, 4, ref last, ATmrPos.Right);
                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                            else
                                            {
                                                description = "packed subtract unsigned with saturation";
                                                LastDisassembleData.OpCode = "psubusw";
                                                LastDisassembleData.Parameters = Mm(memory[2]) + ModRm(memory, _prefix2, 2, 3, ref last, ATmrPos.Right);
                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                        }
                                        break;

                                    case 0xda:
                                        {
                                            if (_prefix2.Contains(0x66))
                                            {
                                                description = "packed unsigned integer byte minimum";
                                                if (_hasVex)
                                                    LastDisassembleData.OpCode = "vpminub";
                                                else
                                                    LastDisassembleData.OpCode = "pminub";
                                                LastDisassembleData.Parameters = Xmm(memory[2]) + ModRm(memory, _prefix2, 2, 4, ref last, ATmrPos.Right);

                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                            else
                                            {
                                                description = "packed unsigned integer byte minimum";
                                                LastDisassembleData.OpCode = "pminub";
                                                LastDisassembleData.Parameters = Mm(memory[2]) + ModRm(memory, _prefix2, 2, 3, ref last, ATmrPos.Right);

                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                        }
                                        break;

                                    case 0xdb:
                                        {
                                            if (_prefix2.Contains(0x66))
                                            {
                                                description = "logical and";
                                                if (_hasVex)
                                                    LastDisassembleData.OpCode = "vpand";
                                                else
                                                    LastDisassembleData.OpCode = "pand";

                                                LastDisassembleData.Parameters = Xmm(memory[2]) + ModRm(memory, _prefix2, 2, 4, ref last, ATmrPos.Right);
                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                            else
                                            {
                                                description = "logical and";
                                                LastDisassembleData.OpCode = "pand";
                                                LastDisassembleData.Parameters = Mm(memory[2]) + ModRm(memory, _prefix2, 2, 3, ref last, ATmrPos.Right);

                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                        }
                                        break;

                                    case 0xdc:
                                        {
                                            if (_prefix2.Contains(0x66))
                                            {
                                                description = "packed add unsigned with saturation";
                                                if (_hasVex)
                                                    LastDisassembleData.OpCode = "vpaddusb";
                                                else
                                                    LastDisassembleData.OpCode = "paddusb";
                                                LastDisassembleData.Parameters = Xmm(memory[2]) + ModRm(memory, _prefix2, 2, 4, ref last, ATmrPos.Right);

                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                            else
                                            {
                                                description = "packed add unsigned with saturation";
                                                LastDisassembleData.OpCode = "paddusb";
                                                LastDisassembleData.Parameters = Mm(memory[2]) + ModRm(memory, _prefix2, 2, 3, ref last, ATmrPos.Right);

                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                        }
                                        break;

                                    case 0xdd:
                                        {
                                            if (_prefix2.Contains(0x66))
                                            {
                                                description = "packed add unsigned with saturation";
                                                if (_hasVex)
                                                    LastDisassembleData.OpCode = "vpaddusw";
                                                else
                                                    LastDisassembleData.OpCode = "paddusw";
                                                LastDisassembleData.Parameters = Xmm(memory[2]) + ModRm(memory, _prefix2, 2, 4, ref last, ATmrPos.Right);

                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                            else
                                            {
                                                description = "packed add unsigned with saturation";
                                                LastDisassembleData.OpCode = "paddusw";
                                                LastDisassembleData.Parameters = Mm(memory[2]) + ModRm(memory, _prefix2, 2, 3, ref last, ATmrPos.Right);

                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                        }
                                        break;

                                    case 0xde:
                                        {
                                            if (_prefix2.Contains(0x66))
                                            {
                                                description = "packed unsigned integer byte maximum";
                                                if (_hasVex)
                                                    LastDisassembleData.OpCode = "vpmaxub";
                                                else
                                                    LastDisassembleData.OpCode = "pmaxub";
                                                LastDisassembleData.Parameters = Xmm(memory[2]) + ModRm(memory, _prefix2, 2, 4, ref last, ATmrPos.Left);

                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                            else
                                            {
                                                description = "packed unsigned integer byte maximum";
                                                LastDisassembleData.OpCode = "pmaxub";
                                                LastDisassembleData.Parameters = Mm(memory[2]) + ModRm(memory, _prefix2, 2, 3, ref last, ATmrPos.Right);

                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                        }
                                        break;

                                    case 0xdf:
                                        {
                                            if (_prefix2.Contains(0x66))
                                            {
                                                description = "logical and not";
                                                if (_hasVex)
                                                    LastDisassembleData.OpCode = "vpandn";
                                                else
                                                    LastDisassembleData.OpCode = "pandn";

                                                LastDisassembleData.Parameters = Xmm(memory[2]) + ModRm(memory, _prefix2, 2, 4, ref last, ATmrPos.Right);

                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                            else
                                            {
                                                description = "logical and not";
                                                LastDisassembleData.OpCode = "pandn";
                                                LastDisassembleData.Parameters = Mm(memory[2]) + ModRm(memory, _prefix2, 2, 3, ref last, ATmrPos.Right);

                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                        }
                                        break;

                                    case 0xe0:
                                        {
                                            if (_prefix2.Contains(0x66))
                                            {
                                                description = "packed average";
                                                if (_hasVex)
                                                    LastDisassembleData.OpCode = "vpavgb";
                                                else
                                                    LastDisassembleData.OpCode = "pavgb";
                                                LastDisassembleData.Parameters = Xmm(memory[2]) + ModRm(memory, _prefix2, 2, 4, ref last, ATmrPos.Right);

                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                            else
                                            {
                                                description = "packed average";
                                                LastDisassembleData.OpCode = "pavgb";
                                                LastDisassembleData.Parameters = Mm(memory[2]) + ModRm(memory, _prefix2, 2, 3, ref last, ATmrPos.Right);

                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                        }
                                        break;

                                    case 0xe1:
                                        {
                                            if (_prefix2.Contains(0x66))
                                            {
                                                description = "packed shift right arithmetic";
                                                if (_hasVex)
                                                    LastDisassembleData.OpCode = "vpsraw";
                                                else
                                                    LastDisassembleData.OpCode = "psraw";
                                                LastDisassembleData.Parameters = Xmm(memory[2]) + ModRm(memory, _prefix2, 2, 4, ref last, ATmrPos.Right);
                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                            else
                                            {
                                                description = "packed shift right arithmetic";
                                                LastDisassembleData.OpCode = "psraw";
                                                LastDisassembleData.Parameters = Mm(memory[2]) + ModRm(memory, _prefix2, 2, 3, ref last, ATmrPos.Right);
                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                        }
                                        break;

                                    case 0xe2:
                                        {
                                            if (_prefix2.Contains(0x66))
                                            {
                                                description = "packed shift left logical";
                                                if (_hasVex)
                                                    LastDisassembleData.OpCode = "vpsrad";
                                                else
                                                    LastDisassembleData.OpCode = "psrad";
                                                LastDisassembleData.Parameters = Xmm(memory[2]) + ModRm(memory, _prefix2, 2, 4, ref last, ATmrPos.Right);
                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                            else
                                            {
                                                description = "packed shift left logical";
                                                LastDisassembleData.OpCode = "psrad";
                                                LastDisassembleData.Parameters = Mm(memory[2]) + ModRm(memory, _prefix2, 2, 3, ref last, ATmrPos.Right);
                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                        }
                                        break;

                                    case 0xe3:
                                        {
                                            if (_prefix2.Contains(0x66))
                                            {
                                                description = "packed average";
                                                if (_hasVex)
                                                    LastDisassembleData.OpCode = "vpavgw";
                                                else
                                                    LastDisassembleData.OpCode = "pavgw";
                                                LastDisassembleData.Parameters = Xmm(memory[2]) + ModRm(memory, _prefix2, 2, 4, ref last, ATmrPos.Right);

                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                            else
                                            {
                                                description = "packed average";
                                                LastDisassembleData.OpCode = "pavgw";
                                                LastDisassembleData.Parameters = Mm(memory[2]) + ModRm(memory, _prefix2, 2, 3, ref last, ATmrPos.Right);

                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                        }
                                        break;

                                    case 0xe4:
                                        {
                                            if (_prefix2.Contains(0x66))
                                            {
                                                description = "packed multiply high unsigned";
                                                if (_hasVex)
                                                    LastDisassembleData.OpCode = "vpmulhuw";
                                                else
                                                    LastDisassembleData.OpCode = "pmulhuw";
                                                LastDisassembleData.Parameters = Xmm(memory[2]) + ModRm(memory, _prefix2, 2, 4, ref last, ATmrPos.Right);

                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                            else
                                            {
                                                description = "packed multiply high unsigned";
                                                LastDisassembleData.OpCode = "pmulhuw";
                                                LastDisassembleData.Parameters = Mm(memory[2]) + ModRm(memory, _prefix2, 2, 3, ref last, ATmrPos.Right);

                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                        }
                                        break;

                                    case 0xe5:
                                        {
                                            if (_prefix2.Contains(0x66))
                                            {
                                                description = "packed multiply high";
                                                if (_hasVex)
                                                    LastDisassembleData.OpCode = "vpmulhw";
                                                else
                                                    LastDisassembleData.OpCode = "pmulhw";
                                                LastDisassembleData.Parameters = Xmm(memory[2]) + ModRm(memory, _prefix2, 2, 4, ref last, ATmrPos.Right);

                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                            else
                                            {
                                                description = "packed multiply high";
                                                LastDisassembleData.OpCode = "pmulhw";
                                                LastDisassembleData.Parameters = Mm(memory[2]) + ModRm(memory, _prefix2, 2, 3, ref last, ATmrPos.Right);

                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                        }
                                        break;

                                    case 0xe6:
                                        {
                                            if (_prefix2.Contains(0xf2))
                                            {

                                                description = "convert two packed signed dwords from param2 to two packed dp-floating point values in param1";
                                                if (_hasVex)
                                                    LastDisassembleData.OpCode = "vcvtpd2dq";
                                                else
                                                    LastDisassembleData.OpCode = "cvtpd2dq";

                                                _opCodeFlags.SkipExtraReg = true;
                                                LastDisassembleData.Parameters = Xmm(memory[2]) + ModRm(memory, _prefix2, 2, 4, ref last, ATmrPos.Right);

                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                            else
                                            if (_prefix2.Contains(0xf3))
                                            {

                                                description = "convert two packed signed dwords from param2 to two packed dp-floating point values in param1";
                                                if (_hasVex)
                                                    LastDisassembleData.OpCode = "vcvtdq2pd";
                                                else
                                                    LastDisassembleData.OpCode = "cvtdq2pd";
                                                LastDisassembleData.Parameters = Xmm(memory[2]) + ',';
                                                _opCodeFlags.L = false;
                                                LastDisassembleData.Parameters = LastDisassembleData.Parameters + Xmm(memory[2]) + ModRm(memory, _prefix2, 2, 4, ref last, ATmrPos.Right);

                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                            else
                                            {
                                                if (_prefix2.Contains(0x66))
                                                {
                                                    description = "convert with truncation packed double-precision floating-point values to packed doubleword integers";
                                                    if (_hasVex)
                                                        LastDisassembleData.OpCode = "vcvttpd2dq";
                                                    else
                                                        LastDisassembleData.OpCode = "cvttpd2dq";

                                                    _opCodeFlags.SkipExtraReg = true;
                                                    LastDisassembleData.Parameters = Xmm(memory[2]) + ModRm(memory, _prefix2, 2, 4, ref last, ATmrPos.Right);
                                                    offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                }
                                            }
                                        }
                                        break;

                                    case 0xe7:
                                        {
                                            if (_prefix2.Contains(0x66))
                                            {
                                                if (_hasVex)
                                                    LastDisassembleData.OpCode = "movntdq";
                                                else
                                                    LastDisassembleData.OpCode = "vmovntdq";

                                                LastDisassembleData.Parameters = ModRm(memory, _prefix2, 2, 4, ref last) + Xmm(memory[2]);
                                                description = "move double quadword using non-temporal hint";
                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                            else
                                            {
                                                LastDisassembleData.OpCode = "movntq";
                                                LastDisassembleData.Parameters = ModRm(memory, _prefix2, 2, 3, ref last) + Mm(memory[2]);
                                                description = "move 64 bits non temporal";
                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                        }
                                        break;

                                    case 0xe8:
                                        {
                                            if (_prefix2.Contains(0x66))
                                            {
                                                description = "packed subtract with saturation";
                                                if (_hasVex)
                                                    LastDisassembleData.OpCode = "vpsubsb";
                                                else
                                                    LastDisassembleData.OpCode = "psubsb";

                                                LastDisassembleData.Parameters = Xmm(memory[2]) + ModRm(memory, _prefix2, 2, 4, ref last, ATmrPos.Right);
                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                            else
                                            {
                                                description = "packed subtract with saturation";
                                                LastDisassembleData.OpCode = "psubsb";
                                                LastDisassembleData.Parameters = Mm(memory[2]) + ModRm(memory, _prefix2, 2, 3, ref last, ATmrPos.Right);
                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                        }
                                        break;

                                    case 0xe9:
                                        {
                                            if (_prefix2.Contains(0x66))
                                            {
                                                description = "packed subtract with saturation";
                                                if (_hasVex)
                                                    LastDisassembleData.OpCode = "vpsubsw";
                                                else
                                                    LastDisassembleData.OpCode = "psubsw";
                                                LastDisassembleData.Parameters = Xmm(memory[2]) + ModRm(memory, _prefix2, 2, 4, ref last, ATmrPos.Right);
                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                            else
                                            {
                                                description = "packed subtract with saturation";
                                                LastDisassembleData.OpCode = "psubsw";
                                                LastDisassembleData.Parameters = Mm(memory[2]) + ModRm(memory, _prefix2, 2, 3, ref last, ATmrPos.Right);
                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                        }
                                        break;

                                    case 0xea:
                                        {
                                            if (_prefix2.Contains(0x66))
                                            {
                                                description = "packed signed integer word minimum";
                                                if (_hasVex)
                                                    LastDisassembleData.OpCode = "vpminsw";
                                                else
                                                    LastDisassembleData.OpCode = "pminsw";

                                                LastDisassembleData.Parameters = Xmm(memory[2]) + ModRm(memory, _prefix2, 2, 4, ref last, ATmrPos.Right);

                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                            else
                                            {
                                                description = "packed signed integer word minimum";
                                                LastDisassembleData.OpCode = "pminsw";
                                                LastDisassembleData.Parameters = Mm(memory[2]) + ModRm(memory, _prefix2, 2, 3, ref last, ATmrPos.Right);

                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                        }
                                        break;

                                    case 0xeb:
                                        {
                                            if (_prefix2.Contains(0x66))
                                            {
                                                description = "bitwise logical or";
                                                if (_hasVex)
                                                    LastDisassembleData.OpCode = "vpor";
                                                else
                                                    LastDisassembleData.OpCode = "por";
                                                LastDisassembleData.Parameters = Xmm(memory[2]) + ModRm(memory, _prefix2, 2, 4, ref last, ATmrPos.Right);

                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                            else
                                            {
                                                description = "bitwise logical or";
                                                LastDisassembleData.OpCode = "por";
                                                LastDisassembleData.Parameters = Mm(memory[2]) + ModRm(memory, _prefix2, 2, 3, ref last, ATmrPos.Right);

                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                        }
                                        break;

                                    case 0xec:
                                        {
                                            if (_prefix2.Contains(0x66))
                                            {
                                                description = "packed add with saturation";
                                                if (_hasVex)
                                                    LastDisassembleData.OpCode = "vpaddsb";
                                                else
                                                    LastDisassembleData.OpCode = "paddsb";
                                                LastDisassembleData.Parameters = Xmm(memory[2]) + ModRm(memory, _prefix2, 2, 4, ref last, ATmrPos.Right);

                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                            else
                                            {
                                                description = "packed add with saturation";
                                                LastDisassembleData.OpCode = "paddsb";
                                                LastDisassembleData.Parameters = Mm(memory[2]) + ModRm(memory, _prefix2, 2, 3, ref last, ATmrPos.Right);

                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                        }
                                        break;

                                    case 0xed:
                                        {
                                            if (_prefix2.Contains(0x66))
                                            {
                                                description = "packed add with saturation";
                                                if (_hasVex)
                                                    LastDisassembleData.OpCode = "vpaddsw";
                                                else
                                                    LastDisassembleData.OpCode = "paddsw";

                                                LastDisassembleData.Parameters = Xmm(memory[2]) + ModRm(memory, _prefix2, 2, 4, ref last, ATmrPos.Right);

                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                            else
                                            {
                                                description = "packed add with saturation";
                                                LastDisassembleData.OpCode = "paddsw";
                                                LastDisassembleData.Parameters = Mm(memory[2]) + ModRm(memory, _prefix2, 2, 3, ref last, ATmrPos.Right);

                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                        }
                                        break;

                                    case 0xee:
                                        {
                                            if (_prefix2.Contains(0x66))
                                            {
                                                description = "packed signed integer word maximum";
                                                if (_hasVex)
                                                    LastDisassembleData.OpCode = "vpmaxsw";
                                                else
                                                    LastDisassembleData.OpCode = "pmaxsw";
                                                LastDisassembleData.Parameters = Xmm(memory[2]) + ModRm(memory, _prefix2, 2, 4, ref last, ATmrPos.Right);

                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                            else
                                            {
                                                description = "packed signed integer word maximum";
                                                LastDisassembleData.OpCode = "pmaxsw";
                                                LastDisassembleData.Parameters = Mm(memory[2]) + ModRm(memory, _prefix2, 2, 3, ref last, ATmrPos.Right);

                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                        }
                                        break;

                                    case 0xef:
                                        {
                                            if (_prefix2.Contains(0x66))
                                            {
                                                description = "logical exclusive or";
                                                if (_hasVex)
                                                    LastDisassembleData.OpCode = "vpxor";
                                                else
                                                    LastDisassembleData.OpCode = "pxor";

                                                LastDisassembleData.Parameters = Xmm(memory[2]) + ModRm(memory, _prefix2, 2, 4, ref last, ATmrPos.Right);

                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                            else
                                            {
                                                description = "logical exclusive or";
                                                LastDisassembleData.OpCode = "pxor";
                                                LastDisassembleData.Parameters = Mm(memory[2]) + ModRm(memory, _prefix2, 2, 3, ref last, ATmrPos.Right);

                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                        }
                                        break;

                                    case 0xf0:
                                        {
                                            if (_prefix2.Contains(0xf2))
                                            {
                                                description = "load unaligned integer 128 bits";
                                                if (_hasVex)
                                                    LastDisassembleData.OpCode = "vlddqu";
                                                else
                                                    LastDisassembleData.OpCode = "lddqu";

                                                _opCodeFlags.SkipExtraReg = true;
                                                LastDisassembleData.Parameters = Xmm(memory[2]) + ModRm(memory, _prefix2, 2, 4, ref last, ATmrPos.Right);
                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                            else
                                                offset += 1;
                                        }
                                        break;


                                    case 0xf1:
                                        {
                                            if (_prefix2.Contains(0x66))
                                            {
                                                description = "packed shift left logical";
                                                LastDisassembleData.OpCode = "psllw";
                                                LastDisassembleData.Parameters = Xmm(memory[2]) + ModRm(memory, _prefix2, 2, 4, ref last, ATmrPos.Right);
                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                            else
                                            {
                                                description = "packed shift left logical";
                                                LastDisassembleData.OpCode = "psllw";
                                                LastDisassembleData.Parameters = Mm(memory[2]) + ModRm(memory, _prefix2, 2, 3, ref last, ATmrPos.Right);
                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                        }
                                        break;

                                    case 0xf2:
                                        {
                                            if (_prefix2.Contains(0x66))
                                            {
                                                description = "packed shift left logical";
                                                if (_hasVex)
                                                    LastDisassembleData.OpCode = "vpslld";
                                                else
                                                    LastDisassembleData.OpCode = "pslld";

                                                LastDisassembleData.Parameters = Xmm(memory[2]) + ModRm(memory, _prefix2, 2, 4, ref last, ATmrPos.Right);
                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                            else
                                            {
                                                description = "packed shift left logical";
                                                LastDisassembleData.OpCode = "pslld";
                                                LastDisassembleData.Parameters = Mm(memory[2]) + ModRm(memory, _prefix2, 2, 3, ref last, ATmrPos.Right);
                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                        }
                                        break;

                                    case 0xf3:
                                        {
                                            if (_prefix2.Contains(0x66))
                                            {
                                                description = "packed shift left logical";
                                                if (_hasVex)
                                                    LastDisassembleData.OpCode = "vpsllq";
                                                else
                                                    LastDisassembleData.OpCode = "psllq";

                                                LastDisassembleData.Parameters = Xmm(memory[2]) + ModRm(memory, _prefix2, 2, 4, ref last, ATmrPos.Right);
                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                            else
                                            {
                                                description = "packed shift left logical";
                                                LastDisassembleData.OpCode = "psllq";
                                                LastDisassembleData.Parameters = Mm(memory[2]) + ModRm(memory, _prefix2, 2, 3, ref last, ATmrPos.Right);
                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                        }
                                        break;

                                    case 0xf4:
                                        {
                                            if (_prefix2.Contains(0x66))
                                            {
                                                description = "multiply packed unsigned doubleword integers";
                                                if (_hasVex)
                                                    LastDisassembleData.OpCode = "pmuludq";
                                                else
                                                    LastDisassembleData.OpCode = "vpmuludq";
                                                LastDisassembleData.Parameters = Xmm(memory[2]) + ModRm(memory, _prefix2, 2, 4, ref last, ATmrPos.Right);

                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                            else
                                            {
                                                description = "multiply packed unsigned doubleword integers";
                                                LastDisassembleData.OpCode = "pmuludq";
                                                LastDisassembleData.Parameters = Mm(memory[2]) + ModRm(memory, _prefix2, 2, 3, ref last, ATmrPos.Right);

                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                        }
                                        break;


                                    case 0xf5:
                                        {
                                            if (_prefix2.Contains(0x66))
                                            {
                                                description = "packed multiply and add";
                                                if (_hasVex)
                                                    LastDisassembleData.OpCode = "vpmaddwd";
                                                else
                                                    LastDisassembleData.OpCode = "pmaddwd";

                                                LastDisassembleData.Parameters = Xmm(memory[2]) + ModRm(memory, _prefix2, 2, 4, ref last, ATmrPos.Right);

                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                            else
                                            {
                                                description = "packed multiply and add";
                                                LastDisassembleData.OpCode = "pmaddwd";
                                                LastDisassembleData.Parameters = Mm(memory[2]) + ModRm(memory, _prefix2, 2, 3, ref last, ATmrPos.Right);

                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                        }
                                        break;

                                    case 0xf6:
                                        {
                                            if (_prefix2.Contains(0x66))
                                            {
                                                description = "packed sum of absolute differences";
                                                if (_hasVex)
                                                    LastDisassembleData.OpCode = "vpsadbw";
                                                else
                                                    LastDisassembleData.OpCode = "psadbw";

                                                LastDisassembleData.Parameters = Xmm(memory[2]) + ModRm(memory, _prefix2, 2, 4, ref last, ATmrPos.Right);

                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                            else
                                            {
                                                description = "packed sum of absolute differences";
                                                LastDisassembleData.OpCode = "psadbw";
                                                LastDisassembleData.Parameters = Mm(memory[2]) + ModRm(memory, _prefix2, 2, 3, ref last, ATmrPos.Right);

                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                        }
                                        break;

                                    case 0xf7:
                                        {
                                            if (_prefix2.Contains(0x66))
                                            {
                                                description = "store selected bytes of double quadword";
                                                if (_hasVex)
                                                    LastDisassembleData.OpCode = "vmaskmovdqu";
                                                else
                                                    LastDisassembleData.OpCode = "maskmovdqu";

                                                _opCodeFlags.SkipExtraReg = true;
                                                LastDisassembleData.Parameters = Xmm(memory[2]) + ModRm(memory, _prefix2, 2, 4, ref last, ATmrPos.Right);

                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                            else
                                            {
                                                description = "byte mask write";
                                                LastDisassembleData.OpCode = "maskmovq";
                                                LastDisassembleData.Parameters = Mm(memory[2]) + ModRm(memory, _prefix2, 2, 3, ref last, ATmrPos.Right);

                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                        }
                                        break;

                                    case 0xf8:
                                        {
                                            if (_prefix2.Contains(0x66))
                                            {
                                                description = "packed subtract";
                                                if (_hasVex)
                                                    LastDisassembleData.OpCode = "vpsubb";
                                                else
                                                    LastDisassembleData.OpCode = "psubb";
                                                LastDisassembleData.Parameters = Xmm(memory[2]) + ModRm(memory, _prefix2, 2, 4, ref last, ATmrPos.Right);

                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                            else
                                            {
                                                description = "packed subtract";
                                                LastDisassembleData.OpCode = "psubb";
                                                LastDisassembleData.Parameters = Mm(memory[2]) + ModRm(memory, _prefix2, 2, 3, ref last, ATmrPos.Right);

                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                        }
                                        break;

                                    case 0xf9:
                                        {
                                            if (_prefix2.Contains(0x66))
                                            {
                                                description = "packed subtract";
                                                if (_hasVex)
                                                    LastDisassembleData.OpCode = "vpsubw";
                                                else
                                                    LastDisassembleData.OpCode = "psubw";
                                                LastDisassembleData.Parameters = Xmm(memory[2]) + ModRm(memory, _prefix2, 2, 4, ref last, ATmrPos.Right);

                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                            else
                                            {
                                                description = "packed subtract";
                                                LastDisassembleData.OpCode = "psubw";
                                                LastDisassembleData.Parameters = Mm(memory[2]) + ModRm(memory, _prefix2, 2, 3, ref last, ATmrPos.Right);

                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                        }
                                        break;

                                    case 0xfa:
                                        {
                                            if (_prefix2.Contains(0x66))
                                            {
                                                description = "packed subtract";
                                                if (_hasVex)
                                                    LastDisassembleData.OpCode = "vpsubd";
                                                else
                                                    LastDisassembleData.OpCode = "psubd";

                                                LastDisassembleData.Parameters = Xmm(memory[2]) + ModRm(memory, _prefix2, 2, 4, ref last, ATmrPos.Right);

                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                            else
                                            {
                                                description = "packed subtract";
                                                LastDisassembleData.OpCode = "psubd";
                                                LastDisassembleData.Parameters = Mm(memory[2]) + ModRm(memory, _prefix2, 2, 3, ref last, ATmrPos.Right);

                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                        }
                                        break;

                                    case 0xfb:
                                        {
                                            if (_prefix2.Contains(0x66))
                                            {
                                                description = "packed subtract";
                                                LastDisassembleData.OpCode = "psubq";
                                                LastDisassembleData.Parameters = Xmm(memory[2]) + ModRm(memory, _prefix2, 2, 4, ref last, ATmrPos.Right);

                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                            else
                                            {
                                                description = "packed subtract";
                                                LastDisassembleData.OpCode = "psubq";
                                                LastDisassembleData.Parameters = Mm(memory[2]) + ModRm(memory, _prefix2, 2, 3, ref last, ATmrPos.Right);

                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                        }
                                        break;

                                    case 0xfc:
                                        {
                                            if (_prefix2.Contains(0x66))
                                            {
                                                description = "packed add";
                                                if (_hasVex)
                                                    LastDisassembleData.OpCode = "vpaddb";
                                                else
                                                    LastDisassembleData.OpCode = "paddb";
                                                LastDisassembleData.Parameters = Xmm(memory[2]) + ModRm(memory, _prefix2, 2, 4, ref last, ATmrPos.Right);

                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                            else
                                            {
                                                description = "packed add";
                                                LastDisassembleData.OpCode = "paddb";
                                                LastDisassembleData.Parameters = Mm(memory[2]) + ModRm(memory, _prefix2, 2, 3, ref last, ATmrPos.Right);

                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                        }
                                        break;

                                    case 0xfd:
                                        {
                                            if (_prefix2.Contains(0x66))
                                            {
                                                description = "packed add";
                                                if (_hasVex)
                                                    LastDisassembleData.OpCode = "vpaddw";
                                                else
                                                    LastDisassembleData.OpCode = "paddw";
                                                LastDisassembleData.Parameters = Xmm(memory[2]) + ModRm(memory, _prefix2, 2, 4, ref last, ATmrPos.Right);
                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                            else
                                            {
                                                description = "packed add";
                                                LastDisassembleData.OpCode = "paddw";
                                                LastDisassembleData.Parameters = Mm(memory[2]) + ModRm(memory, _prefix2, 2, 3, ref last, ATmrPos.Right);

                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                        }
                                        break;

                                    case 0xfe:
                                        {
                                            if (_prefix2.Contains(0x66))
                                            {
                                                description = "packed add";
                                                if (_hasVex)
                                                    LastDisassembleData.OpCode = "vpaddd";
                                                else
                                                    LastDisassembleData.OpCode = "paddd";
                                                LastDisassembleData.Parameters = Xmm(memory[2]) + ModRm(memory, _prefix2, 2, 4, ref last, ATmrPos.Right);

                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                            else
                                            {
                                                description = "packed add";
                                                LastDisassembleData.OpCode = "paddd";
                                                LastDisassembleData.Parameters = Mm(memory[2]) + ModRm(memory, _prefix2, 2, 3, ref last, ATmrPos.Right);

                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                        }
                                        break;


                                }



                            }
                            break;

                        //

                        //

                        case 0x10:
                            {
                                description = "add with carry";
                                LastDisassembleData.OpCode = "adc";
                                LastDisassembleData.Parameters = ModRm(memory, _prefix2, 1, 2, ref last) + R8(memory[1]);
                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                            }
                            break;

                        case 0x11:
                            {
                                description = "add with carry";
                                LastDisassembleData.OpCode = "adc";
                                if (_prefix2.Contains(0x66))
                                    LastDisassembleData.Parameters = ModRm(memory, _prefix2, 1, 1, ref last) + R16(memory[1]);
                                else
                                    LastDisassembleData.Parameters = ModRm(memory, _prefix2, 1, 0, ref last) + R32(memory[1]);
                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());

                            }
                            break;

                        case 0x12:
                            {
                                description = "add with carry";
                                LastDisassembleData.OpCode = "adc";
                                LastDisassembleData.Parameters = R8(memory[1]) + ModRm(memory, _prefix2, 1, 2, ref last, 8, 0, ATmrPos.Right);

                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                            }
                            break;

                        case 0x13:
                            {
                                description = "add with carry";
                                LastDisassembleData.OpCode = "adc";
                                if (_prefix2.Contains(0x66))
                                    LastDisassembleData.Parameters = R16(memory[1]) + ModRm(memory, _prefix2, 1, 1, ref last, ATmrPos.Right);
                                else
                                    LastDisassembleData.Parameters = R32(memory[1]) + ModRm(memory, _prefix2, 1, 0, ref last, ATmrPos.Right);

                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                            }
                            break;

                        case 0x14:
                            {
                                description = "add with carry";
                                LastDisassembleData.OpCode = "adc";
                                LastDisassembleData.ParameterValueType = ADisassemblerValueType.Value;
                                LastDisassembleData.ParameterValue = (UIntPtr)memory[1];
                                LastDisassembleData.Parameters = _colorReg + "al" + _endColor + ',' + IntToHexSigned(LastDisassembleData.ParameterValue, 2);

                                LastDisassembleData.Separators[LastDisassembleData.SeparatorCount] = 1;
                                LastDisassembleData.SeparatorCount += 1;

                                offset += 1;
                            }
                            break;

                        case 0x15:
                            {
                                description = "add with carry";
                                LastDisassembleData.OpCode = "adc";
                                if (_prefix2.Contains(0x66))
                                {
                                    var wordptr = memory.ToIntPtr(1).ReadUInt16();
                                    LastDisassembleData.ParameterValueType = ADisassemblerValueType.Value;
                                    LastDisassembleData.ParameterValue = (UIntPtr)wordptr;

                                    LastDisassembleData.Parameters = _colorReg + "ax" + _endColor + ',' + IntToHexSigned(LastDisassembleData.ParameterValue, 4);
                                    offset += 2;
                                }
                                else
                                {
                                    var dwordptr = memory.ToIntPtr(1).ReadUInt32();
                                    LastDisassembleData.ParameterValueType = ADisassemblerValueType.Value;
                                    LastDisassembleData.ParameterValue = (UIntPtr)dwordptr;

                                    if (RexW)
                                        LastDisassembleData.Parameters = _colorReg + "rax" + _endColor + ',' + IntToHexSigned((UIntPtr)(int)(LastDisassembleData.ParameterValue), 8);
                                    else
                                        LastDisassembleData.Parameters = _colorReg + "eax" + _endColor + ',' + IntToHexSigned(LastDisassembleData.ParameterValue, 8);
                                    offset += 4;
                                }

                                LastDisassembleData.Separators[LastDisassembleData.SeparatorCount] = 1;
                                LastDisassembleData.SeparatorCount += 1;

                            }
                            break;

                        case 0x16:
                            {
                                description = "place ss on the stack";
                                LastDisassembleData.OpCode = "push";
                                LastDisassembleData.Parameters = _colorReg + "ss" + _endColor;
                            }
                            break;

                        case 0x17:
                            {
                                description = "remove ss from the stack";
                                LastDisassembleData.OpCode = "pop";
                                LastDisassembleData.Parameters = _colorReg + "ss" + _endColor;
                            }
                            break;

                        case 0x18:
                            {
                                description = "integer subtraction with borrow";
                                LastDisassembleData.OpCode = "sbb";
                                LastDisassembleData.Parameters = ModRm(memory, _prefix2, 1, 2, ref last) + R8(memory[1]);
                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                            }
                            break;

                        case 0x19:
                            {
                                description = "integer subtraction with borrow";
                                LastDisassembleData.OpCode = "sbb";
                                if (_prefix2.Contains(0x66))
                                    LastDisassembleData.Parameters = ModRm(memory, _prefix2, 1, 1, ref last) + R16(memory[1]);
                                else
                                    LastDisassembleData.Parameters = ModRm(memory, _prefix2, 1, 0, ref last) + R32(memory[1]);
                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                            }
                            break;

                        case 0x1a:
                            {
                                description = "integer subtraction with borrow";
                                LastDisassembleData.OpCode = "sbb";
                                LastDisassembleData.Parameters = R8(memory[1]) + ModRm(memory, _prefix2, 1, 2, ref last, 8, 0, ATmrPos.Right);

                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                            }
                            break;

                        case 0x1b:
                            {
                                description = "integer subtraction with borrow";
                                LastDisassembleData.OpCode = "sbb";
                                if (_prefix2.Contains(0x66))
                                    LastDisassembleData.Parameters = R16(memory[1]) + ModRm(memory, _prefix2, 1, 1, ref last, ATmrPos.Right);
                                else
                                    LastDisassembleData.Parameters = R32(memory[1]) + ModRm(memory, _prefix2, 1, 0, ref last, ATmrPos.Right);


                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                            }
                            break;

                        case 0x1c:
                            {
                                description = "integer subtraction with borrow";
                                LastDisassembleData.OpCode = "sbb";
                                LastDisassembleData.ParameterValueType = ADisassemblerValueType.Value;
                                LastDisassembleData.ParameterValue = (UIntPtr)memory[1];
                                LastDisassembleData.Separators[LastDisassembleData.SeparatorCount] = 1;
                                LastDisassembleData.SeparatorCount += 1;

                                LastDisassembleData.Parameters = _colorReg + "al" + _endColor + ',' + IntToHexSigned((UIntPtr)memory[1], 2);


                                offset += 1;
                            }
                            break;

                        case 0x1d:
                            {
                                LastDisassembleData.OpCode = "sbb";
                                description = "integer subtraction with borrow";
                                if (_prefix2.Contains(0x66))
                                {
                                    var wordptr = memory.ToIntPtr(1).ReadUInt16();

                                    LastDisassembleData.ParameterValueType = ADisassemblerValueType.Value;
                                    LastDisassembleData.ParameterValue = (UIntPtr)wordptr;

                                    LastDisassembleData.Parameters = _colorReg + "ax" + _endColor + ',' + IntToHexSigned((UIntPtr)wordptr, 4);
                                    offset += 2;
                                }
                                else
                                {
                                    var dwordptr = memory.ToIntPtr(1).ReadUInt32();
                                    LastDisassembleData.ParameterValueType = ADisassemblerValueType.Value;
                                    LastDisassembleData.ParameterValue = (UIntPtr)dwordptr;

                                    if (RexW)
                                        LastDisassembleData.Parameters = _colorReg + "rax" + _endColor + ',' + IntToHexSigned((UIntPtr)(int)(LastDisassembleData.ParameterValue), 8);
                                    else
                                        LastDisassembleData.Parameters = _colorReg + "eax" + _endColor + ',' + IntToHexSigned(LastDisassembleData.ParameterValue, 8);

                                    offset += 4;
                                }

                                LastDisassembleData.Separators[LastDisassembleData.SeparatorCount] = 1;
                                LastDisassembleData.SeparatorCount += 1;

                            }
                            break;

                        case 0x1e:
                            {
                                description = "place ds on the stack";
                                LastDisassembleData.OpCode = "push";
                                LastDisassembleData.Parameters = _colorReg + "ds" + _endColor;
                            }
                            break;

                        case 0x1f:
                            {
                                description = "remove ds from the stack";
                                LastDisassembleData.OpCode = "pop";
                                LastDisassembleData.Parameters = _colorReg + "ds" + _endColor;
                            }
                            break;

                        case 0x20:
                            {
                                description = "logical and";
                                LastDisassembleData.OpCode = "and";
                                LastDisassembleData.Parameters = ModRm(memory, _prefix2, 1, 2, ref last) + R8(memory[1]);
                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                            }
                            break;

                        case 0x21:
                            {
                                description = "logical and";
                                LastDisassembleData.OpCode = "and";
                                if (_prefix2.Contains(0x66))
                                    LastDisassembleData.Parameters = ModRm(memory, _prefix2, 1, 1, ref last) + R16(memory[1]);
                                else
                                    LastDisassembleData.Parameters = ModRm(memory, _prefix2, 1, 0, ref last) + R32(memory[1]);
                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());

                            }
                            break;

                        case 0x22:
                            {
                                description = "logical and";
                                LastDisassembleData.OpCode = "and";
                                LastDisassembleData.Parameters = R8(memory[1]) + ModRm(memory, _prefix2, 1, 2, ref last, ATmrPos.Right);
                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                            }
                            break;

                        case 0x23:
                            {
                                description = "logical and";
                                LastDisassembleData.OpCode = "and";
                                if (_prefix2.Contains(0x66))
                                    LastDisassembleData.Parameters = R16(memory[1]) + ModRm(memory, _prefix2, 1, 1, ref last, ATmrPos.Right);
                                else
                                    LastDisassembleData.Parameters = R32(memory[1]) + ModRm(memory, _prefix2, 1, 0, ref last, ATmrPos.Right);

                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                            }
                            break;


                        case 0x24:
                            {
                                description = "logical and";
                                LastDisassembleData.OpCode = "and";
                                LastDisassembleData.ParameterValueType = ADisassemblerValueType.Value;
                                LastDisassembleData.ParameterValue = (UIntPtr)memory[1];
                                LastDisassembleData.Parameters = _colorReg + "al" + _endColor + ',' + IntToHexSigned((UIntPtr)memory[1], 2);

                                LastDisassembleData.Separators[LastDisassembleData.SeparatorCount] = 1;
                                LastDisassembleData.SeparatorCount += 1;


                                offset += 1;
                            }
                            break;

                        case 0x25:
                            {
                                description = "logical and";
                                LastDisassembleData.OpCode = "and";
                                LastDisassembleData.Separators[LastDisassembleData.SeparatorCount] = 1;
                                LastDisassembleData.SeparatorCount += 1;


                                if (_prefix2.Contains(0x66))
                                {
                                    var wordptr = memory.ToIntPtr(1).ReadUInt16();
                                    LastDisassembleData.ParameterValueType = ADisassemblerValueType.Value;
                                    LastDisassembleData.ParameterValue = (UIntPtr)wordptr;
                                    LastDisassembleData.Parameters = _colorReg + "ax" + _endColor + ',' + IntToHexSigned(LastDisassembleData.ParameterValue, 4);
                                    offset += 2;
                                }
                                else
                                {
                                    var dwordptr = memory.ToIntPtr(1).ReadUInt32();
                                    LastDisassembleData.ParameterValueType = ADisassemblerValueType.Value;
                                    LastDisassembleData.ParameterValue = (UIntPtr)dwordptr;

                                    if (RexW)
                                        LastDisassembleData.Parameters = _colorReg + "rax" + _endColor + ',' + IntToHexSigned((UIntPtr)(int)(LastDisassembleData.ParameterValue), 8);
                                    else
                                        LastDisassembleData.Parameters = _colorReg + "eax" + _endColor + ',' + IntToHexSigned(LastDisassembleData.ParameterValue, 8);
                                    offset += 4;
                                }
                            }
                            break;

                        case 0x27:
                            {
                                description = "decimal adjust al after addition";
                                LastDisassembleData.OpCode = "daa";
                            }
                            break;

                        case 0x28:
                            {
                                description = "subtract";
                                LastDisassembleData.OpCode = "sub";
                                LastDisassembleData.Parameters = ModRm(memory, _prefix2, 1, 2, ref last) + R8(memory[1]);
                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                            }
                            break;

                        case 0x29:
                            {
                                description = "subtract";
                                LastDisassembleData.OpCode = "sub";
                                if (_prefix2.Contains(0x66))
                                    LastDisassembleData.Parameters = ModRm(memory, _prefix2, 1, 1, ref last) + R16(memory[1]);
                                else
                                    LastDisassembleData.Parameters = ModRm(memory, _prefix2, 1, 0, ref last) + R32(memory[1]);
                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());

                            }
                            break;

                        case 0x2a:
                            {
                                description = "subtract";
                                LastDisassembleData.OpCode = "sub";
                                LastDisassembleData.Parameters = R8(memory[1]) + ModRm(memory, _prefix2, 1, 2, ref last, ATmrPos.Right);

                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                            }
                            break;

                        case 0x2b:
                            {
                                description = "subtract";
                                LastDisassembleData.OpCode = "sub";
                                if (_prefix2.Contains(0x66))
                                    LastDisassembleData.Parameters = R16(memory[1]) + ModRm(memory, _prefix2, 1, 1, ref last, ATmrPos.Right);
                                else
                                    LastDisassembleData.Parameters = R32(memory[1]) + ModRm(memory, _prefix2, 1, 0, ref last, ATmrPos.Right);

                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                            }
                            break;

                        case 0x2c:
                            {
                                description = "subtract";
                                LastDisassembleData.OpCode = "sub";

                                LastDisassembleData.ParameterValueType = ADisassemblerValueType.Value;
                                LastDisassembleData.ParameterValue = (UIntPtr)memory[1];
                                LastDisassembleData.Separators[LastDisassembleData.SeparatorCount] = 1;
                                LastDisassembleData.SeparatorCount += 1;

                                LastDisassembleData.Parameters = _colorReg + "al" + _endColor + ',' + IntToHexSigned((UIntPtr)memory[1], 2);



                                offset += 1;
                            }
                            break;

                        case 0x2d:
                            {
                                description = "subtract";
                                LastDisassembleData.OpCode = "sub";


                                LastDisassembleData.Separators[LastDisassembleData.SeparatorCount] = 1;
                                LastDisassembleData.SeparatorCount += 1;

                                if (_prefix2.Contains(0x66))
                                {
                                    var wordptr = memory.ToIntPtr(1).ReadUInt16();
                                    LastDisassembleData.ParameterValueType = ADisassemblerValueType.Value;
                                    LastDisassembleData.ParameterValue = (UIntPtr)wordptr;

                                    LastDisassembleData.Parameters = _colorReg + "ax" + _endColor + ',' + IntToHexSigned((UIntPtr)wordptr, 4);
                                    offset += 2;
                                }
                                else
                                {
                                    var dwordptr = memory.ToIntPtr(1).ReadUInt32();
                                    LastDisassembleData.ParameterValueType = ADisassemblerValueType.Value;
                                    LastDisassembleData.ParameterValue = (UIntPtr)dwordptr;


                                    if (RexW)
                                        LastDisassembleData.Parameters = _colorReg + "rax" + _endColor + ',' + IntToHexSigned((UIntPtr)(Int32)dwordptr, 8);
                                    else
                                        LastDisassembleData.Parameters = _colorReg + "eax" + _endColor + ',' + IntToHexSigned((UIntPtr)dwordptr, 8);
                                    offset += 4;
                                }
                            }
                            break;


                        case 0x2f:
                            {
                                description = "decimal adjust al after subtraction";
                                LastDisassembleData.OpCode = "das";
                            }
                            break;

                        case 0x30:
                            {
                                description = "logical exclusive or";
                                LastDisassembleData.OpCode = "xor";
                                LastDisassembleData.Parameters = ModRm(memory, _prefix2, 1, 2, ref last) + R8(memory[1]);
                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                            }
                            break;

                        case 0x31:
                            {
                                description = "logical exclusive or";
                                LastDisassembleData.OpCode = "xor";
                                if (_prefix2.Contains(0x66))
                                    LastDisassembleData.Parameters = ModRm(memory, _prefix2, 1, 1, ref last) + R16(memory[1]);
                                else
                                    LastDisassembleData.Parameters = ModRm(memory, _prefix2, 1, 0, ref last) + R32(memory[1]);
                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());

                            }
                            break;

                        case 0x32:
                            {
                                description = "logical exclusive or";
                                LastDisassembleData.OpCode = "xor";
                                LastDisassembleData.Parameters = R8(memory[1]) + ModRm(memory, _prefix2, 1, 2, ref last, ATmrPos.Right);

                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                            }
                            break;

                        case 0x33:
                            {
                                description = "logical exclusive or";
                                LastDisassembleData.OpCode = "xor";
                                if (_prefix2.Contains(0x66))
                                    LastDisassembleData.Parameters = R16(memory[1]) + ModRm(memory, _prefix2, 1, 1, ref last, ATmrPos.Right);
                                else
                                    LastDisassembleData.Parameters = R32(memory[1]) + ModRm(memory, _prefix2, 1, 0, ref last, ATmrPos.Right);

                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                            }
                            break;

                        case 0x34:
                            {
                                description = "logical exclusive or";
                                LastDisassembleData.OpCode = "xor";
                                LastDisassembleData.ParameterValueType = ADisassemblerValueType.Value;
                                LastDisassembleData.ParameterValue = (UIntPtr)memory[1];
                                LastDisassembleData.Separators[LastDisassembleData.SeparatorCount] = 1;
                                LastDisassembleData.SeparatorCount += 1;

                                LastDisassembleData.Parameters = _colorReg + "al" + _endColor + ',' + IntToHexSigned((UIntPtr)memory[1], 2);
                                offset += 1;
                            }
                            break;

                        case 0x35:
                            {
                                description = "logical exclusive or";
                                LastDisassembleData.OpCode = "xor";


                                LastDisassembleData.Separators[LastDisassembleData.SeparatorCount] = 1;
                                LastDisassembleData.SeparatorCount += 1;

                                if (_prefix2.Contains(0x66))
                                {
                                    var wordptr = memory.ToIntPtr(1).ReadUInt16();
                                    LastDisassembleData.ParameterValueType = ADisassemblerValueType.Value;
                                    LastDisassembleData.ParameterValue = (UIntPtr)wordptr;

                                    LastDisassembleData.Parameters = _colorReg + "ax" + _endColor + ',' + IntToHexSigned((UIntPtr)wordptr, 4);
                                    offset += 2;
                                }
                                else
                                {
                                    var dwordptr = memory.ToIntPtr(1).ReadUInt32();
                                    LastDisassembleData.ParameterValueType = ADisassemblerValueType.Value;
                                    LastDisassembleData.ParameterValue = (UIntPtr)dwordptr;

                                    if (RexW)
                                        LastDisassembleData.Parameters = _colorReg + "rax" + _endColor + ',' + IntToHexSigned((UIntPtr)(Int32)dwordptr, 8);
                                    else
                                        LastDisassembleData.Parameters = _colorReg + "eax" + _endColor + ',' + IntToHexSigned((UIntPtr)dwordptr, 8);
                                    offset += 4;
                                }
                            }
                            break;


                        case 0x37:
                            {  //aaa
                                LastDisassembleData.OpCode = "aaa";
                                description = "ascii adjust al after addition";
                            }
                            break;

                        //---------
                        case 0x38:
                            {//cmp
                                description = "compare two operands";
                                LastDisassembleData.OpCode = "cmp";
                                LastDisassembleData.Parameters = ModRm(memory, _prefix2, 1, 2, ref last) + R8(memory[1]);
                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                            }
                            break;

                        case 0x39:
                            {
                                description = "compare two operands";
                                LastDisassembleData.OpCode = "cmp";
                                if (_prefix2.Contains(0x66))
                                    LastDisassembleData.Parameters = ModRm(memory, _prefix2, 1, 1, ref last) + R16(memory[1]);
                                else
                                    LastDisassembleData.Parameters = ModRm(memory, _prefix2, 1, 0, ref last) + R32(memory[1]);

                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());

                            }
                            break;

                        case 0x3a:
                            {
                                description = "compare two operands";
                                LastDisassembleData.OpCode = "cmp";
                                LastDisassembleData.Parameters = R8(memory[1]) + ModRm(memory, _prefix2, 1, 2, ref last, ATmrPos.Right);

                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                            }
                            break;

                        case 0x3b:
                            {
                                description = "compare two operands";
                                LastDisassembleData.OpCode = "cmp";
                                if (_prefix2.Contains(0x66))
                                    LastDisassembleData.Parameters = R16(memory[1]) + ModRm(memory, _prefix2, 1, 1, ref last, ATmrPos.Right);
                                else
                                    LastDisassembleData.Parameters = R32(memory[1]) + ModRm(memory, _prefix2, 1, 0, ref last, ATmrPos.Right);

                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                            }
                            break;

                        //---------

                        case 0x3c:
                            {
                                description = "compare two operands";
                                LastDisassembleData.OpCode = "cmp";

                                LastDisassembleData.ParameterValueType = ADisassemblerValueType.Value;
                                LastDisassembleData.ParameterValue = (UIntPtr)memory[1];
                                LastDisassembleData.Separators[LastDisassembleData.SeparatorCount] = 1;
                                LastDisassembleData.SeparatorCount += 1;

                                LastDisassembleData.Parameters = _colorReg + "al" + _endColor + ',' + IntToHexSigned((UIntPtr)memory[1], 2);
                                offset += 1;
                            }
                            break;

                        case 0x3d:
                            {
                                description = "compare two operands";
                                LastDisassembleData.OpCode = "cmp";
                                LastDisassembleData.Separators[LastDisassembleData.SeparatorCount] = 1;
                                LastDisassembleData.SeparatorCount += 1;


                                if (_prefix2.Contains(0x66))
                                {
                                    var wordptr = memory.ToIntPtr(1).ReadUInt16();
                                    LastDisassembleData.ParameterValueType = ADisassemblerValueType.Value;
                                    LastDisassembleData.ParameterValue = (UIntPtr)wordptr;

                                    LastDisassembleData.Parameters = _colorReg + "ax" + _endColor + ',' + IntToHexSigned((UIntPtr)wordptr, 4);
                                    offset += 2;
                                }
                                else
                                {
                                    var dwordptr = memory.ToIntPtr(1).ReadUInt32();
                                    LastDisassembleData.ParameterValueType = ADisassemblerValueType.Value;
                                    LastDisassembleData.ParameterValue = (UIntPtr)dwordptr;


                                    if (RexW)
                                        LastDisassembleData.Parameters = _colorReg + "rax" + _endColor + ',' + IntToHexSigned((UIntPtr)(Int32)dwordptr, 8);
                                    else
                                        LastDisassembleData.Parameters = _colorReg + "eax" + _endColor + ',' + IntToHexSigned((UIntPtr)dwordptr, 8);
                                    offset += 4;
                                }
                            }
                            break;

                        //prefix bytes need fixing
                        case 0x3f:
                            {  //aas
                                if (SymbolHandler.Process.IsX86)
                                {
                                    LastDisassembleData.OpCode = "db";
                                    LastDisassembleData.Parameters = IntToHexSigned((UIntPtr)0x3f, 1);
                                }
                                else
                                {
                                    LastDisassembleData.OpCode = "aas";
                                    description = "ascii adjust al after subtraction";
                                }
                            }
                            break;
                        case 0x40:
                        case 0x41:
                        case 0x42:
                        case 0x43:
                        case 0x44:
                        case 0x45:
                        case 0x46:
                        case 0x47:
                            {
                                description = "increment by 1";
                                LastDisassembleData.OpCode = "inc";
                                if (_prefix2.Contains(0x66))
                                    LastDisassembleData.Parameters = Rd16((Byte)(memory[0] - 0x40));
                                else
                                    LastDisassembleData.Parameters = Rd((Byte)(memory[0] - 0x40));
                            }
                            break;

                        case 0x48:
                        case 0x49:
                        case 0x4a:
                        case 0x4b:
                        case 0x4c:
                        case 0x4d:
                        case 0x4e:
                        case 0x4f:
                            {
                                description = "decrement by 1";
                                LastDisassembleData.OpCode = "dec";
                                if (_prefix2.Contains(0x66))
                                    LastDisassembleData.Parameters = Rd16((Byte)(memory[0] - 0x48));
                                else
                                    LastDisassembleData.Parameters = Rd((Byte)(memory[0] - 0x48));
                            }
                            break;

                        case 0x50:
                        case 0x51:
                        case 0x52:
                        case 0x53:
                        case 0x54:
                        case 0x55:
                        case 0x56:
                        case 0x57:
                            {
                                description = "push word or doubleword onto the stack";

                                if (Is64Bit) _opCodeFlags.W = true;

                                LastDisassembleData.OpCode = "push";
                                if (_prefix2.Contains(0x66))
                                    LastDisassembleData.Parameters = Rd16((Byte)(memory[0] - 0x50));
                                else
                                    LastDisassembleData.Parameters = Rd((Byte)(memory[0] - 0x50));
                            }
                            break;

                        case 0x58:
                        case 0x59:
                        case 0x5a:
                        case 0x5b:
                        case 0x5c:
                        case 0x5d:
                        case 0x5e:
                        case 0x5f:
                            {
                                description = "pop a value from the stack";
                                if (Is64Bit) _opCodeFlags.W = true; //so rd will pick the 64-bit version
                                LastDisassembleData.OpCode = "pop";
                                if (_prefix2.Contains(0x66))
                                    LastDisassembleData.Parameters = Rd16((Byte)(memory[0] - 0x58));
                                else
                                    LastDisassembleData.Parameters = Rd((Byte)(memory[0] - 0x58));
                            }
                            break;

                        case 0x60:
                            {
                                description = "push all general-purpose registers";
                                if (Is64Bit) description = description + " (invalid)";
                                if (_prefix2.Contains(0x66)) LastDisassembleData.OpCode = "pusha";
                                else
                                    LastDisassembleData.OpCode = "pushad";

                                if (Is64Bit)
                                {
                                    description = description + " (invalid)";
                                    LastDisassembleData.OpCode = "pushad (invalid)";
                                }
                            }
                            break;

                        case 0x61:
                            {
                                description = "pop all general-purpose registers";
                                if (_prefix2.Contains(0x66)) LastDisassembleData.OpCode = "popa";
                                else
                                    LastDisassembleData.OpCode = "popad";

                                if (Is64Bit)
                                {
                                    description = description + " (invalid)";
                                    LastDisassembleData.OpCode = "popad (invalid)";
                                }

                            }
                            break;

                        case 0x62:
                            {
                                //bound
                                description = "check array index against bounds";
                                LastDisassembleData.OpCode = "bound";
                                if (_prefix2.Contains(0x66))
                                    LastDisassembleData.Parameters = R16(memory[1]) + ModRm(memory, _prefix2, 1, 1, ref last, ATmrPos.Right);
                                else
                                    LastDisassembleData.Parameters = R32(memory[1]) + ModRm(memory, _prefix2, 1, 0, ref last, ATmrPos.Right);

                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());

                            }
                            break;

                        case 0x63:
                            {
                                //arpl or movsxd
                                if (Is64Bit)
                                {
                                    LastDisassembleData.OpCode = "movsxd";
                                    _opCodeFlags.W = false;

                                    LastDisassembleData.Parameters = ' ' + R64(memory[1]) + ModRm(memory, _prefix2, 1, 0, ref last, 32, 0, ATmrPos.Right);
                                    offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                    description = "Move doubleword to quadword with signextension";
                                }
                                else
                                {
                                    LastDisassembleData.OpCode = "arpl";
                                    LastDisassembleData.Parameters = ModRm(memory, _prefix2, 1, 1, ref last) + R16(memory[1]);
                                    offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                    description = "adjust rpl field of segment selector";
                                }
                            }
                            break;

                        case 0x68:
                            {
                                LastDisassembleData.Separators[LastDisassembleData.SeparatorCount] = 1;
                                LastDisassembleData.SeparatorCount += 1;

                                if (_prefix2.Contains(0x66))
                                {
                                    var wordptr = memory.ToIntPtr(1).ReadUInt16();
                                    LastDisassembleData.ParameterValueType = ADisassemblerValueType.Value;
                                    LastDisassembleData.ParameterValue = (UIntPtr)wordptr;

                                    LastDisassembleData.OpCode = "push";
                                    LastDisassembleData.Parameters = IntToHexSigned((UIntPtr)wordptr, 4);
                                    offset += 2;
                                }
                                else
                                {
                                    var dwordptr = memory.ToIntPtr(1).ReadUInt32();
                                    LastDisassembleData.ParameterValueType = ADisassemblerValueType.Value;
                                    LastDisassembleData.ParameterValue = (UIntPtr)dwordptr;

                                    LastDisassembleData.OpCode = "push";
                                    if (SymbolHandler.Process.IsX64)
                                    {
                                        var intptr = memory.ToIntPtr(1).ReadInt32();
                                        LastDisassembleData.ParameterValue = (UIntPtr)intptr;
                                        LastDisassembleData.Parameters = IntToHexSigned((UIntPtr)intptr, 8);
                                    }
                                    else
                                        LastDisassembleData.Parameters = IntToHexSigned((UIntPtr)dwordptr, 8);
                                    offset += 4;
                                }
                                description = "push word or doubleword onto the stack (sign extended)";
                            }
                            break;

                        case 0x69:
                            {
                                description = "signed multiply";
                                if (_prefix2.Contains(0x66))
                                {
                                    LastDisassembleData.OpCode = "imul";
                                    LastDisassembleData.Parameters = R16(memory[1]) + ModRm(memory, _prefix2, 1, 1, ref last, ATmrPos.Right);
                                    var wordptr = memory.ReadUInt16((int)last);

                                    LastDisassembleData.ParameterValueType = ADisassemblerValueType.Value;
                                    LastDisassembleData.ParameterValue = (UIntPtr)wordptr;

                                    offset = (UIntPtr)(offset.ToUInt64() + last - 1 + 2);
                                }
                                else
                                {
                                    LastDisassembleData.OpCode = "imul";
                                    LastDisassembleData.Parameters = R32(memory[1]) + ModRm(memory, _prefix2, 1, 0, ref last, ATmrPos.Right);
                                    var dwordptr = memory.ReadUInt32((int)last);
                                    if (RexW)
                                        LastDisassembleData.Parameters = LastDisassembleData.Parameters + ',' + IntToHexSigned((UIntPtr)(Int32)dwordptr, 8);
                                    else
                                        LastDisassembleData.Parameters = LastDisassembleData.Parameters + ',' + IntToHexSigned((UIntPtr)dwordptr, 8);

                                    LastDisassembleData.ParameterValueType = ADisassemblerValueType.Value;
                                    LastDisassembleData.ParameterValue = (UIntPtr)dwordptr;

                                    offset = (UIntPtr)(offset.ToUInt64() + last - 1 + 4);
                                }
                            }
                            break;

                        case 0x6a:
                            {
                                LastDisassembleData.OpCode = "push";

                                LastDisassembleData.Separators[LastDisassembleData.SeparatorCount] = 1;
                                LastDisassembleData.SeparatorCount += 1;

                                LastDisassembleData.ParameterValueType = ADisassemblerValueType.Value;
                                LastDisassembleData.ParameterValue = (UIntPtr)memory[1];

                                LastDisassembleData.Parameters = IntToHexSigned((UIntPtr)memory[1], 2, true, 1);
                                offset += 1;
                                description = "push byte onto the stack";
                            }
                            break;

                        case 0x6b:
                            {

                                description = "signed multiply";
                                LastDisassembleData.OpCode = "imul";
                                if (_prefix2.Contains(0x66))
                                    LastDisassembleData.Parameters = R16(memory[1]) + ModRm(memory, _prefix2, 1, 1, ref last, ATmrPos.Right);
                                else
                                    LastDisassembleData.Parameters = R32(memory[1]) + ModRm(memory, _prefix2, 1, 0, ref last, ATmrPos.Right);

                                LastDisassembleData.ParameterValue = (UIntPtr)memory[(int)last];
                                LastDisassembleData.Parameters = LastDisassembleData.Parameters + ',' + IntToHexSigned((UIntPtr)memory[(int)last], 2);
                                offset = (UIntPtr)(offset.ToUInt64() + last - 1 + 1);
                            }
                            break;

                        case 0x6c:
                            {
                                //m8, dx
                                description = "input from port to string";
                                LastDisassembleData.OpCode = "insb";
                            }
                            break;

                        case 0x6d:
                            {
                                //m8, dx
                                description = "input from port to string";
                                if (_prefix2.Contains(0x66)) LastDisassembleData.OpCode = "insw";
                                else
                                    LastDisassembleData.OpCode = "insd";
                            }
                            break;

                        case 0x6e:
                            {
                                //m8, dx
                                description = "output string to port";
                                LastDisassembleData.OpCode = "outsb";
                            }
                            break;

                        case 0x6f:
                            {
                                //m8, dx
                                description = "output string to port";
                                if (_prefix2.Contains(0x66)) LastDisassembleData.OpCode = "outsw";
                                else
                                    LastDisassembleData.OpCode = "outsd";
                            }
                            break;


                        case 0x70:
                            {
                                description = "jump short if overflow (OF=1)";
                                LastDisassembleData.OpCode = "jo";
                                LastDisassembleData.IsJump = true;
                                LastDisassembleData.IsConditionalJump = true;
                                //if (context != nil)
                                //lastdisassembledata.willjumpaccordingtocontext = (context->eflags & eflags_of) != 0;

                                offset += 1;

                                LastDisassembleData.Separators[LastDisassembleData.SeparatorCount] = 1;
                                LastDisassembleData.SeparatorCount += 1;

                                LastDisassembleData.ParameterValueType = ADisassemblerValueType.Address;

                                if (Is64Bit)
                                    LastDisassembleData.ParameterValue = (UIntPtr)(offset.ToUInt64() + (UInt64)(SByte)memory[1]);
                                else
                                    LastDisassembleData.ParameterValue = (UIntPtr)(UInt32)(offset.ToUInt64() + (UInt64)(SByte)memory[1]);

                                LastDisassembleData.Parameters = IntToHexSigned(LastDisassembleData.ParameterValue, 8);



                            }
                            break;

                        case 0x71:
                            {
                                description = "jump short if not overflow (OF=0)";
                                LastDisassembleData.OpCode = "jno";
                                LastDisassembleData.IsJump = true;
                                LastDisassembleData.IsConditionalJump = true;
                                //if (context != nil)
                                //lastdisassembledata.willjumpaccordingtocontext = (context->eflags & eflags_of) == 0;

                                offset += 1;

                                LastDisassembleData.Separators[LastDisassembleData.SeparatorCount] = 1;
                                LastDisassembleData.SeparatorCount += 1;

                                LastDisassembleData.ParameterValueType = ADisassemblerValueType.Address;

                                if (Is64Bit)
                                    LastDisassembleData.ParameterValue = (UIntPtr)(offset.ToUInt64() + (UInt64)(SByte)memory[1]);
                                else
                                    LastDisassembleData.ParameterValue = (UIntPtr)(UInt32)(offset.ToUInt64() + (UInt64)(SByte)memory[1]);

                                LastDisassembleData.Parameters = IntToHexSigned(LastDisassembleData.ParameterValue, 8);

                            }
                            break;

                        case 0x72:
                            {
                                description = "jump short if below/carry (CF=1)";
                                LastDisassembleData.OpCode = "jb";
                                LastDisassembleData.IsJump = true;
                                LastDisassembleData.IsConditionalJump = true;
                                //if (context != nil)
                                //lastdisassembledata.willjumpaccordingtocontext = (context->eflags & eflags_cf) != 0;
                                offset += 1;

                                LastDisassembleData.Separators[LastDisassembleData.SeparatorCount] = 1;
                                LastDisassembleData.SeparatorCount += 1;

                                LastDisassembleData.ParameterValueType = ADisassemblerValueType.Address;

                                if (Is64Bit)
                                    LastDisassembleData.ParameterValue = (UIntPtr)(offset.ToUInt64() + (UInt64)(SByte)memory[1]);
                                else
                                    LastDisassembleData.ParameterValue = (UIntPtr)(UInt32)(offset.ToUInt64() + (UInt64)(SByte)memory[1]);

                                LastDisassembleData.Parameters = IntToHexSigned(LastDisassembleData.ParameterValue, 8);

                            }
                            break;

                        case 0x73:
                            {
                                description = "jump short if above or equal (CF=0)";
                                LastDisassembleData.OpCode = "jae";
                                LastDisassembleData.IsJump = true;
                                LastDisassembleData.IsConditionalJump = true;
                                //if (context != nil)
                                //lastdisassembledata.willjumpaccordingtocontext = (context->eflags & eflags_cf) == 0;

                                offset += 1;

                                LastDisassembleData.Separators[LastDisassembleData.SeparatorCount] = 1;
                                LastDisassembleData.SeparatorCount += 1;

                                LastDisassembleData.ParameterValueType = ADisassemblerValueType.Address;

                                if (Is64Bit)
                                    LastDisassembleData.ParameterValue = (UIntPtr)(offset.ToUInt64() + (UInt64)(SByte)memory[1]);
                                else
                                    LastDisassembleData.ParameterValue = (UIntPtr)(UInt32)(offset.ToUInt64() + (UInt64)(SByte)memory[1]);

                                LastDisassembleData.Parameters = IntToHexSigned(LastDisassembleData.ParameterValue, 8);

                            }
                            break;

                        case 0x74:
                            {
                                description = "jump short if equal (ZF=1)";
                                LastDisassembleData.OpCode = "je";
                                LastDisassembleData.IsJump = true;
                                LastDisassembleData.IsConditionalJump = true;
                                //if (context != nil)
                                //lastdisassembledata.willjumpaccordingtocontext = (context->eflags & eflags_zf) != 0;

                                offset += 1;

                                LastDisassembleData.Separators[LastDisassembleData.SeparatorCount] = 1;
                                LastDisassembleData.SeparatorCount += 1;

                                LastDisassembleData.ParameterValueType = ADisassemblerValueType.Address;

                                if (Is64Bit)
                                    LastDisassembleData.ParameterValue = (UIntPtr)(offset.ToUInt64() + (UInt64)(SByte)memory[1]);
                                else
                                    LastDisassembleData.ParameterValue = (UIntPtr)(UInt32)(offset.ToUInt64() + (UInt64)(SByte)memory[1]);



                                LastDisassembleData.Parameters = IntToHexSigned(LastDisassembleData.ParameterValue, 8);

                            }
                            break;

                        case 0x75:
                            {
                                description = "jump short if not equal (ZF=0)";
                                LastDisassembleData.OpCode = "jne";
                                LastDisassembleData.IsJump = true;
                                LastDisassembleData.IsConditionalJump = true;
                                //if (context != nil)
                                //lastdisassembledata.willjumpaccordingtocontext = (context->eflags & eflags_zf) == 0;
                                offset += 1;

                                LastDisassembleData.Separators[LastDisassembleData.SeparatorCount] = 1;
                                LastDisassembleData.SeparatorCount += 1;

                                LastDisassembleData.ParameterValueType = ADisassemblerValueType.Address;

                                if (Is64Bit)
                                    LastDisassembleData.ParameterValue = (UIntPtr)(offset.ToUInt64() + (UInt64)(SByte)memory[1]);
                                else
                                    LastDisassembleData.ParameterValue = (UIntPtr)(UInt32)(offset.ToUInt64() + (UInt64)(SByte)memory[1]);

                                LastDisassembleData.Parameters = IntToHexSigned(LastDisassembleData.ParameterValue, 8);

                            }
                            break;

                        case 0x76:
                            {
                                description = "jump short if not above (ZF=1 or CF=1)";
                                LastDisassembleData.OpCode = "jna";
                                LastDisassembleData.IsJump = true;
                                LastDisassembleData.IsConditionalJump = true;
                                //if (context != nil)
                                //lastdisassembledata.willjumpaccordingtocontext = (context->eflags & (eflags_cf | eflags_zf)) != 0;


                                offset += 1;

                                LastDisassembleData.Separators[LastDisassembleData.SeparatorCount] = 1;
                                LastDisassembleData.SeparatorCount += 1;

                                LastDisassembleData.ParameterValueType = ADisassemblerValueType.Address;

                                if (Is64Bit)
                                    LastDisassembleData.ParameterValue = (UIntPtr)(offset.ToUInt64() + (UInt64)(SByte)memory[1]);
                                else
                                    LastDisassembleData.ParameterValue = (UIntPtr)(UInt32)(offset.ToUInt64() + (UInt64)(SByte)memory[1]);

                                LastDisassembleData.Parameters = IntToHexSigned(LastDisassembleData.ParameterValue, 8);

                            }
                            break;

                        case 0x77:
                            {
                                description = "jump short if above (ZF=0 and CF=0)";
                                LastDisassembleData.OpCode = "ja";
                                LastDisassembleData.IsJump = true;
                                LastDisassembleData.IsConditionalJump = true;
                                //if (context != nil)
                                //lastdisassembledata.willjumpaccordingtocontext = (context->eflags & (eflags_cf | eflags_zf)) == 0;


                                offset += 1;

                                LastDisassembleData.Separators[LastDisassembleData.SeparatorCount] = 1;
                                LastDisassembleData.SeparatorCount += 1;

                                LastDisassembleData.ParameterValueType = ADisassemblerValueType.Address;

                                if (Is64Bit)
                                    LastDisassembleData.ParameterValue = (UIntPtr)(offset.ToUInt64() + (UInt64)(SByte)memory[1]);
                                else
                                    LastDisassembleData.ParameterValue = (UIntPtr)(UInt32)(offset.ToUInt64() + (UInt64)(SByte)memory[1]);

                                LastDisassembleData.Parameters = IntToHexSigned(LastDisassembleData.ParameterValue, 8);

                            }
                            break;

                        case 0x78:
                            {
                                description = "jump short if sign (SF=1)";
                                LastDisassembleData.OpCode = "js";
                                LastDisassembleData.IsJump = true;
                                LastDisassembleData.IsConditionalJump = true;
                                //if (context != nil)
                                //lastdisassembledata.willjumpaccordingtocontext = (context->eflags & eflags_sf) != 0;

                                offset += 1;

                                LastDisassembleData.Separators[LastDisassembleData.SeparatorCount] = 1;
                                LastDisassembleData.SeparatorCount += 1;

                                LastDisassembleData.ParameterValueType = ADisassemblerValueType.Address;

                                if (Is64Bit)
                                    LastDisassembleData.ParameterValue = (UIntPtr)(offset.ToUInt64() + (UInt64)(SByte)memory[1]);
                                else
                                    LastDisassembleData.ParameterValue = (UIntPtr)(UInt32)(offset.ToUInt64() + (UInt64)(SByte)memory[1]);

                                LastDisassembleData.Parameters = IntToHexSigned(LastDisassembleData.ParameterValue, 8);

                            }
                            break;

                        case 0x79:
                            {
                                description = "jump short if not sign (SF=0)";
                                LastDisassembleData.OpCode = "jns";
                                LastDisassembleData.IsJump = true;
                                LastDisassembleData.IsConditionalJump = true;
                                //if (context != nil)
                                //lastdisassembledata.willjumpaccordingtocontext = (context->eflags & eflags_sf) == 0;

                                offset += 1;

                                LastDisassembleData.Separators[LastDisassembleData.SeparatorCount] = 1;
                                LastDisassembleData.SeparatorCount += 1;

                                LastDisassembleData.ParameterValueType = ADisassemblerValueType.Address;

                                if (Is64Bit)
                                    LastDisassembleData.ParameterValue = (UIntPtr)(offset.ToUInt64() + (UInt64)(SByte)memory[1]);
                                else
                                    LastDisassembleData.ParameterValue = (UIntPtr)(UInt32)(offset.ToUInt64() + (UInt64)(SByte)memory[1]);

                                LastDisassembleData.Parameters = IntToHexSigned(LastDisassembleData.ParameterValue, 8);

                            }
                            break;

                        case 0x7a:
                            {
                                description = "jump short if parity (PF=1)";
                                LastDisassembleData.OpCode = "jp";
                                LastDisassembleData.IsJump = true;
                                LastDisassembleData.IsConditionalJump = true;
                                //if (context != nil)
                                //lastdisassembledata.willjumpaccordingtocontext = (context->eflags & eflags_pf) != 0;

                                offset += 1;

                                LastDisassembleData.Separators[LastDisassembleData.SeparatorCount] = 1;
                                LastDisassembleData.SeparatorCount += 1;

                                LastDisassembleData.ParameterValueType = ADisassemblerValueType.Address;

                                if (Is64Bit)
                                    LastDisassembleData.ParameterValue = (UIntPtr)(offset.ToUInt64() + (UInt64)(SByte)memory[1]);
                                else
                                    LastDisassembleData.ParameterValue = (UIntPtr)(UInt32)(offset.ToUInt64() + (UInt64)(SByte)memory[1]);

                                LastDisassembleData.Parameters = IntToHexSigned(LastDisassembleData.ParameterValue, 8);

                            }
                            break;

                        case 0x7b:
                            {
                                description = "jump short if not parity (PF=0)";
                                LastDisassembleData.OpCode = "jnp";
                                LastDisassembleData.IsJump = true;
                                LastDisassembleData.IsConditionalJump = true;
                                //if (context != nil)
                                //lastdisassembledata.willjumpaccordingtocontext = (context->eflags & eflags_pf) == 0;

                                offset += 1;

                                LastDisassembleData.Separators[LastDisassembleData.SeparatorCount] = 1;
                                LastDisassembleData.SeparatorCount += 1;

                                LastDisassembleData.ParameterValueType = ADisassemblerValueType.Address;

                                if (Is64Bit)
                                    LastDisassembleData.ParameterValue = (UIntPtr)(offset.ToUInt64() + (UInt64)(SByte)memory[1]);
                                else
                                    LastDisassembleData.ParameterValue = (UIntPtr)(UInt32)(offset.ToUInt64() + (UInt64)(SByte)memory[1]);

                                LastDisassembleData.Parameters = IntToHexSigned(LastDisassembleData.ParameterValue, 8);

                            }
                            break;

                        case 0x7c:
                            {
                                description = "jump short if not greater or equal (SF~=OF)";
                                LastDisassembleData.OpCode = "jl"; //jnge
                                LastDisassembleData.IsJump = true;
                                LastDisassembleData.IsConditionalJump = true;
                                //if (context != nil)
                                //lastdisassembledata.willjumpaccordingtocontext = (context->eflags & eflags_sf) != (context->eflags & eflags_of);


                                offset += 1;

                                LastDisassembleData.Separators[LastDisassembleData.SeparatorCount] = 1;
                                LastDisassembleData.SeparatorCount += 1;

                                LastDisassembleData.ParameterValueType = ADisassemblerValueType.Address;

                                if (Is64Bit)
                                    LastDisassembleData.ParameterValue = (UIntPtr)(offset.ToUInt64() + (UInt64)(SByte)memory[1]);
                                else
                                    LastDisassembleData.ParameterValue = (UIntPtr)(UInt32)(offset.ToUInt64() + (UInt64)(SByte)memory[1]);

                                LastDisassembleData.Parameters = IntToHexSigned(LastDisassembleData.ParameterValue, 8);

                            }
                            break;

                        case 0x7d:
                            {
                                description = "jump short if not less (greater or equal) (SF=OF)";
                                LastDisassembleData.OpCode = "jnl";
                                LastDisassembleData.IsJump = true;
                                LastDisassembleData.IsConditionalJump = true;
                                //if (context != nil)
                                //lastdisassembledata.willjumpaccordingtocontext = (context->eflags & eflags_sf) == (context->eflags & eflags_of);


                                offset += 1;

                                LastDisassembleData.Separators[LastDisassembleData.SeparatorCount] = 1;
                                LastDisassembleData.SeparatorCount += 1;

                                LastDisassembleData.ParameterValueType = ADisassemblerValueType.Address;

                                if (Is64Bit)
                                    LastDisassembleData.ParameterValue = (UIntPtr)(offset.ToUInt64() + (UInt64)(SByte)memory[1]);
                                else
                                    LastDisassembleData.ParameterValue = (UIntPtr)(UInt32)(offset.ToUInt64() + (UInt64)(SByte)memory[1]);

                                LastDisassembleData.Parameters = IntToHexSigned(LastDisassembleData.ParameterValue, 8);

                            }
                            break;

                        case 0x7e:
                            {
                                description = "jump short if less or equal (ZF=1 or SF~=OF)";
                                LastDisassembleData.OpCode = "jle";
                                LastDisassembleData.IsJump = true;
                                LastDisassembleData.IsConditionalJump = true;
                                //if (context != nil)
                                //lastdisassembledata.willjumpaccordingtocontext = ((context->eflags & eflags_sf) != (context->eflags & eflags_of)) || ((context->eflags & eflags_zf) != 0);


                                offset += 1;

                                LastDisassembleData.Separators[LastDisassembleData.SeparatorCount] = 1;
                                LastDisassembleData.SeparatorCount += 1;

                                if (Is64Bit)
                                    LastDisassembleData.ParameterValue = (UIntPtr)(offset.ToUInt64() + (UInt64)(SByte)memory[1]);
                                else
                                    LastDisassembleData.ParameterValue = (UIntPtr)(UInt32)(offset.ToUInt64() + (UInt64)(SByte)memory[1]);

                                LastDisassembleData.Parameters = IntToHexSigned(LastDisassembleData.ParameterValue, 8);
                                LastDisassembleData.ParameterValueType = ADisassemblerValueType.Address;
                            }
                            break;

                        case 0x7f:
                            {
                                description = "jump short if greater (ZF=0 or SF=OF)";
                                LastDisassembleData.OpCode = "jg";
                                LastDisassembleData.IsJump = true;
                                LastDisassembleData.IsConditionalJump = true;
                                //if (context != nil)
                                //lastdisassembledata.willjumpaccordingtocontext = ((context->eflags & eflags_sf) == (context->eflags & eflags_of)) && ((context->eflags & eflags_zf) == 0);


                                offset += 1;

                                LastDisassembleData.Separators[LastDisassembleData.SeparatorCount] = 1;
                                LastDisassembleData.SeparatorCount += 1;

                                if (Is64Bit)
                                    LastDisassembleData.ParameterValue = (UIntPtr)(offset.ToUInt64() + (UInt64)(SByte)memory[1]);
                                else
                                    LastDisassembleData.ParameterValue = (UIntPtr)(UInt32)(offset.ToUInt64() + (UInt64)(SByte)memory[1]);

                                LastDisassembleData.Parameters = IntToHexSigned(LastDisassembleData.ParameterValue, 8);
                                LastDisassembleData.ParameterValueType = ADisassemblerValueType.Address;
                            }
                            break;

                        case 0x80:
                        case 0x82:
                            {
                                switch (GetReg(memory[1]))
                                {
                                    case 0:
                                        {
                                            //add
                                            LastDisassembleData.OpCode = "add";
                                            LastDisassembleData.Parameters = ModRm(memory, _prefix2, 1, 2, ref last, 8);
                                            LastDisassembleData.ParameterValueType = ADisassemblerValueType.Value;
                                            LastDisassembleData.ParameterValue = (UIntPtr)memory[(int)last];
                                            LastDisassembleData.Parameters = LastDisassembleData.Parameters + IntToHexSigned((UIntPtr)memory[(int)last], 2);
                                            offset = (UIntPtr)(offset.ToUInt64() + last);
                                            description = "add x to y";
                                        }
                                        break;

                                    case 1:
                                        {
                                            //adc
                                            LastDisassembleData.OpCode = "or";
                                            LastDisassembleData.Parameters = ModRm(memory, _prefix2, 1, 2, ref last, 8);
                                            LastDisassembleData.ParameterValueType = ADisassemblerValueType.Value;
                                            LastDisassembleData.ParameterValue = (UIntPtr)memory[(int)last];
                                            LastDisassembleData.Parameters = LastDisassembleData.Parameters + IntToHexSigned((UIntPtr)memory[(int)last], 2);
                                            offset = (UIntPtr)(offset.ToUInt64() + last);
                                            description = "logical inclusive or";
                                        }
                                        break;


                                    case 2:
                                        {
                                            //adc
                                            LastDisassembleData.OpCode = "adc";
                                            LastDisassembleData.Parameters = ModRm(memory, _prefix2, 1, 2, ref last, 8);
                                            LastDisassembleData.ParameterValueType = ADisassemblerValueType.Value;
                                            LastDisassembleData.ParameterValue = (UIntPtr)memory[(int)last];
                                            LastDisassembleData.Parameters = LastDisassembleData.Parameters + IntToHexSigned((UIntPtr)memory[(int)last], 2);
                                            offset = (UIntPtr)(offset.ToUInt64() + last);
                                            description = "add with carry";
                                        }
                                        break;

                                    case 3:
                                        {
                                            //sbb
                                            LastDisassembleData.OpCode = "sbb";
                                            LastDisassembleData.Parameters = ModRm(memory, _prefix2, 1, 2, ref last, 8);
                                            LastDisassembleData.ParameterValueType = ADisassemblerValueType.Value;
                                            LastDisassembleData.ParameterValue = (UIntPtr)memory[(int)last];
                                            LastDisassembleData.Parameters = LastDisassembleData.Parameters + IntToHexSigned((UIntPtr)memory[(int)last], 2);
                                            offset = (UIntPtr)(offset.ToUInt64() + last);
                                            description = "integer subtraction with borrow";
                                        }
                                        break;

                                    case 4:
                                        {
                                            //and
                                            LastDisassembleData.OpCode = "and";
                                            LastDisassembleData.Parameters = ModRm(memory, _prefix2, 1, 2, ref last, 8);
                                            LastDisassembleData.ParameterValueType = ADisassemblerValueType.Value;
                                            LastDisassembleData.ParameterValue = (UIntPtr)memory[(int)last];
                                            LastDisassembleData.Parameters = LastDisassembleData.Parameters + IntToHexSigned((UIntPtr)memory[(int)last], 2);
                                            offset = (UIntPtr)(offset.ToUInt64() + last);
                                            description = "logical and";
                                        }
                                        break;

                                    case 5:
                                        {
                                            LastDisassembleData.OpCode = "sub";
                                            LastDisassembleData.Parameters = ModRm(memory, _prefix2, 1, 2, ref last, 8);
                                            LastDisassembleData.ParameterValueType = ADisassemblerValueType.Value;
                                            LastDisassembleData.ParameterValue = (UIntPtr)memory[(int)last];
                                            LastDisassembleData.Parameters = LastDisassembleData.Parameters + IntToHexSigned((UIntPtr)memory[(int)last], 2);
                                            offset = (UIntPtr)(offset.ToUInt64() + last);
                                            description = "subtract";
                                        }
                                        break;

                                    case 6:
                                        {
                                            LastDisassembleData.OpCode = "xor";
                                            LastDisassembleData.Parameters = ModRm(memory, _prefix2, 1, 2, ref last, 8);
                                            LastDisassembleData.ParameterValueType = ADisassemblerValueType.Value;
                                            LastDisassembleData.ParameterValue = (UIntPtr)memory[(int)last];
                                            LastDisassembleData.Parameters = LastDisassembleData.Parameters + IntToHexSigned((UIntPtr)memory[(int)last], 2);
                                            offset = (UIntPtr)(offset.ToUInt64() + last);
                                            description = "logical exclusive or";
                                        }
                                        break;

                                    case 7:
                                        {
                                            LastDisassembleData.OpCode = "cmp";
                                            LastDisassembleData.Parameters = ModRm(memory, _prefix2, 1, 2, ref last, 8);
                                            LastDisassembleData.ParameterValueType = ADisassemblerValueType.Value;
                                            LastDisassembleData.ParameterValue = (UIntPtr)memory[(int)last];
                                            LastDisassembleData.Parameters = LastDisassembleData.Parameters + IntToHexSigned((UIntPtr)memory[(int)last], 2);
                                            offset = (UIntPtr)(offset.ToUInt64() + last);
                                            description = "compare two operands";
                                        }
                                        break;

                                }
                            }
                            break;

                        case 0x81:
                            {
                                switch (GetReg(memory[1]))
                                {
                                    case 0:
                                        {
                                            //add
                                            if (_prefix2.Contains(0x66))
                                            {
                                                LastDisassembleData.OpCode = "add";
                                                LastDisassembleData.Parameters = ModRm(memory, _prefix2, 1, 1, ref last, 16);
                                                var wordptr = memory.ReadUInt16((int)last);
                                                LastDisassembleData.ParameterValueType = ADisassemblerValueType.Value;
                                                LastDisassembleData.ParameterValue = (UIntPtr)wordptr;

                                                LastDisassembleData.Parameters = LastDisassembleData.Parameters + IntToHexSigned((UIntPtr)wordptr, 4);
                                                offset = (UIntPtr)(offset.ToUInt64() + last - 1 + 2);
                                            }
                                            else
                                            {
                                                LastDisassembleData.OpCode = "add";
                                                if (RexW)
                                                    LastDisassembleData.Parameters = ModRm(memory, _prefix2, 1, 0, ref last, 64);
                                                else
                                                    LastDisassembleData.Parameters = ModRm(memory, _prefix2, 1, 0, ref last);
                                                var dwordptr = memory.ReadUInt32((int)last);
                                                LastDisassembleData.ParameterValueType = ADisassemblerValueType.Value;
                                                LastDisassembleData.ParameterValue = (UIntPtr)dwordptr;

                                                if (RexW)
                                                    LastDisassembleData.Parameters = LastDisassembleData.Parameters + IntToHexSigned((UIntPtr)(Int32)dwordptr, 8);
                                                else
                                                    LastDisassembleData.Parameters = LastDisassembleData.Parameters + IntToHexSigned((UIntPtr)dwordptr, 8);
                                                offset = (UIntPtr)(offset.ToUInt64() + last - 1 + 4);
                                            }

                                            //                      offset:=offset+last;
                                            description = "add x to y";
                                        }
                                        break;

                                    case 1:
                                        {
                                            if (_prefix2.Contains(0x66))
                                            {
                                                LastDisassembleData.OpCode = "or";
                                                LastDisassembleData.Parameters = ModRm(memory, _prefix2, 1, 1, ref last, 16);
                                                var wordptr = memory.ReadUInt16((int)last);
                                                LastDisassembleData.ParameterValueType = ADisassemblerValueType.Value;
                                                LastDisassembleData.ParameterValue = (UIntPtr)wordptr;

                                                LastDisassembleData.Parameters = LastDisassembleData.Parameters + IntToHexSigned((UIntPtr)wordptr, 4);
                                                offset = (UIntPtr)(offset.ToUInt64() + last - 1 + 2);
                                            }
                                            else
                                            {
                                                LastDisassembleData.OpCode = "or";
                                                if (RexW)
                                                    LastDisassembleData.Parameters = ModRm(memory, _prefix2, 1, 0, ref last, 64);
                                                else
                                                    LastDisassembleData.Parameters = ModRm(memory, _prefix2, 1, 0, ref last);

                                                var dwordptr = memory.ReadUInt32((int)last);
                                                LastDisassembleData.ParameterValueType = ADisassemblerValueType.Value;
                                                LastDisassembleData.ParameterValue = (UIntPtr)dwordptr;

                                                if (RexW)
                                                    LastDisassembleData.Parameters = LastDisassembleData.Parameters + IntToHexSigned((UIntPtr)(Int32)dwordptr, 8);
                                                else
                                                    LastDisassembleData.Parameters = LastDisassembleData.Parameters + IntToHexSigned((UIntPtr)dwordptr, 8);
                                                offset = (UIntPtr)(offset.ToUInt64() + last - 1 + 4);
                                            }


                                            description = "logical inclusive or";
                                        }
                                        break;

                                    case 2:
                                        {
                                            //adc
                                            if (_prefix2.Contains(0x66))
                                            {
                                                LastDisassembleData.OpCode = "adc";
                                                LastDisassembleData.Parameters = ModRm(memory, _prefix2, 1, 1, ref last, 16);
                                                var wordptr = memory.ReadUInt16((int)last);
                                                LastDisassembleData.ParameterValueType = ADisassemblerValueType.Value;
                                                LastDisassembleData.ParameterValue = (UIntPtr)wordptr;

                                                LastDisassembleData.Parameters = LastDisassembleData.Parameters + IntToHexSigned((UIntPtr)wordptr, 4);
                                                offset = (UIntPtr)(offset.ToUInt64() + last - 1 + 2);
                                            }
                                            else
                                            {
                                                LastDisassembleData.OpCode = "adc";
                                                if (RexW)
                                                    LastDisassembleData.Parameters = ModRm(memory, _prefix2, 1, 0, ref last, 64);
                                                else
                                                    LastDisassembleData.Parameters = ModRm(memory, _prefix2, 1, 0, ref last);
                                                var dwordptr = memory.ReadUInt32((int)last);
                                                LastDisassembleData.ParameterValueType = ADisassemblerValueType.Value;
                                                LastDisassembleData.ParameterValue = (UIntPtr)dwordptr;

                                                if (RexW)
                                                    LastDisassembleData.Parameters = LastDisassembleData.Parameters + IntToHexSigned((UIntPtr)(Int32)dwordptr, 8);
                                                else
                                                    LastDisassembleData.Parameters = LastDisassembleData.Parameters + IntToHexSigned((UIntPtr)dwordptr, 8);
                                                offset = (UIntPtr)(offset.ToUInt64() + last - 1 + 4);
                                            }


                                            description = "add with carry";
                                        }
                                        break;

                                    case 3:
                                        {
                                            if (_prefix2.Contains(0x66))
                                            {
                                                LastDisassembleData.OpCode = "sbb";
                                                LastDisassembleData.Parameters = ModRm(memory, _prefix2, 1, 1, ref last, 16);
                                                var wordptr = memory.ReadUInt16((int)last);
                                                LastDisassembleData.ParameterValueType = ADisassemblerValueType.Value;
                                                LastDisassembleData.ParameterValue = (UIntPtr)wordptr;

                                                LastDisassembleData.Parameters = LastDisassembleData.Parameters + IntToHexSigned((UIntPtr)wordptr, 4);
                                                offset = (UIntPtr)(offset.ToUInt64() + last - 1 + 2);
                                            }
                                            else
                                            {
                                                LastDisassembleData.OpCode = "sbb";
                                                if (RexW)
                                                    LastDisassembleData.Parameters = ModRm(memory, _prefix2, 1, 0, ref last, 64);
                                                else
                                                    LastDisassembleData.Parameters = ModRm(memory, _prefix2, 1, 0, ref last);
                                                var dwordptr = memory.ReadUInt32((int)last);
                                                LastDisassembleData.ParameterValueType = ADisassemblerValueType.Value;
                                                LastDisassembleData.ParameterValue = (UIntPtr)dwordptr;

                                                if (RexW)
                                                    LastDisassembleData.Parameters = LastDisassembleData.Parameters + IntToHexSigned((UIntPtr)(Int32)dwordptr, 8);
                                                else
                                                    LastDisassembleData.Parameters = LastDisassembleData.Parameters + IntToHexSigned((UIntPtr)dwordptr, 8);
                                                offset = (UIntPtr)(offset.ToUInt64() + last - 1 + 4);
                                            }


                                            description = "integer subtraction with borrow";
                                        }
                                        break;


                                    case 4:
                                        {
                                            //and
                                            if (_prefix2.Contains(0x66))
                                            {
                                                LastDisassembleData.OpCode = "and";
                                                LastDisassembleData.Parameters = ModRm(memory, _prefix2, 1, 1, ref last, 16);
                                                var wordptr = memory.ReadUInt16((int)last);
                                                LastDisassembleData.ParameterValueType = ADisassemblerValueType.Value;
                                                LastDisassembleData.ParameterValue = (UIntPtr)wordptr;

                                                LastDisassembleData.Parameters = LastDisassembleData.Parameters + IntToHexSigned((UIntPtr)wordptr, 4);
                                                offset = (UIntPtr)(offset.ToUInt64() + last - 1 + 2);
                                            }
                                            else
                                            {
                                                LastDisassembleData.OpCode = "and";
                                                if (RexW)
                                                    LastDisassembleData.Parameters = ModRm(memory, _prefix2, 1, 0, ref last, 64);
                                                else
                                                    LastDisassembleData.Parameters = ModRm(memory, _prefix2, 1, 0, ref last);
                                                var dwordptr = memory.ReadUInt32((int)last);
                                                LastDisassembleData.ParameterValueType = ADisassemblerValueType.Value;
                                                LastDisassembleData.ParameterValue = (UIntPtr)dwordptr;

                                                if (RexW)
                                                    LastDisassembleData.Parameters = LastDisassembleData.Parameters + IntToHexSigned((UIntPtr)(Int32)dwordptr, 8);
                                                else
                                                    LastDisassembleData.Parameters = LastDisassembleData.Parameters + IntToHexSigned((UIntPtr)dwordptr, 8);
                                                offset = (UIntPtr)(offset.ToUInt64() + last - 1 + 4);
                                            }


                                            description = "logical and";
                                        }
                                        break;

                                    case 5:
                                        {
                                            if (_prefix2.Contains(0x66))
                                            {
                                                LastDisassembleData.OpCode = "sub";
                                                LastDisassembleData.Parameters = ModRm(memory, _prefix2, 1, 1, ref last);
                                                var wordptr = memory.ReadUInt16((int)last);
                                                LastDisassembleData.ParameterValueType = ADisassemblerValueType.Value;
                                                LastDisassembleData.ParameterValue = (UIntPtr)wordptr;

                                                LastDisassembleData.Parameters = LastDisassembleData.Parameters + IntToHexSigned((UIntPtr)wordptr, 4);
                                                offset = (UIntPtr)(offset.ToUInt64() + last - 1 + 2);
                                            }
                                            else
                                            {
                                                LastDisassembleData.OpCode = "sub";
                                                if (RexW)
                                                    LastDisassembleData.Parameters = ModRm(memory, _prefix2, 1, 0, ref last, 64);
                                                else
                                                    LastDisassembleData.Parameters = ModRm(memory, _prefix2, 1, 0, ref last);
                                                var dwordptr = memory.ReadUInt32((int)last);
                                                LastDisassembleData.ParameterValueType = ADisassemblerValueType.Value;
                                                LastDisassembleData.ParameterValue = (UIntPtr)dwordptr;

                                                if (RexW)
                                                    LastDisassembleData.Parameters = LastDisassembleData.Parameters + IntToHexSigned((UIntPtr)(Int32)dwordptr, 8);
                                                else
                                                    LastDisassembleData.Parameters = LastDisassembleData.Parameters + IntToHexSigned((UIntPtr)dwordptr, 8);
                                                offset = (UIntPtr)(offset.ToUInt64() + last - 1 + 4);
                                            }


                                            description = "subtract";
                                        }
                                        break;

                                    case 6:
                                        {
                                            if (_prefix2.Contains(0x66))
                                            {
                                                LastDisassembleData.OpCode = "xor";
                                                LastDisassembleData.Parameters = ModRm(memory, _prefix2, 1, 1, ref last, 16);
                                                var wordptr = memory.ReadUInt16((int)last);
                                                LastDisassembleData.ParameterValueType = ADisassemblerValueType.Value;
                                                LastDisassembleData.ParameterValue = (UIntPtr)wordptr;

                                                LastDisassembleData.Parameters = LastDisassembleData.Parameters + IntToHexSigned((UIntPtr)wordptr, 4);
                                                offset = (UIntPtr)(offset.ToUInt64() + last - 1 + 2);
                                            }
                                            else
                                            {
                                                LastDisassembleData.OpCode = "xor";
                                                if (RexW)
                                                    LastDisassembleData.Parameters = ModRm(memory, _prefix2, 1, 0, ref last, 64);
                                                else
                                                    LastDisassembleData.Parameters = ModRm(memory, _prefix2, 1, 0, ref last);
                                                var dwordptr = memory.ReadUInt32((int)last);
                                                LastDisassembleData.ParameterValueType = ADisassemblerValueType.Value;
                                                LastDisassembleData.ParameterValue = (UIntPtr)dwordptr;

                                                if (RexW)
                                                    LastDisassembleData.Parameters = LastDisassembleData.Parameters + IntToHexSigned((UIntPtr)(Int32)dwordptr, 8);
                                                else
                                                    LastDisassembleData.Parameters = LastDisassembleData.Parameters + IntToHexSigned((UIntPtr)dwordptr, 8);
                                                offset = (UIntPtr)(offset.ToUInt64() + last - 1 + 4);
                                            }
                                            description = "logical exclusive or";
                                        }
                                        break;

                                    case 7:
                                        {
                                            //cmp
                                            if (_prefix2.Contains(0x66))
                                            {
                                                LastDisassembleData.OpCode = "cmp";
                                                LastDisassembleData.Parameters = ModRm(memory, _prefix2, 1, 1, ref last, 16);
                                                var wordptr = memory.ReadUInt16((int)last);
                                                LastDisassembleData.ParameterValueType = ADisassemblerValueType.Value;
                                                LastDisassembleData.ParameterValue = (UIntPtr)wordptr;

                                                LastDisassembleData.Parameters = LastDisassembleData.Parameters + IntToHexSigned((UIntPtr)wordptr, 4);
                                                offset = (UIntPtr)(offset.ToUInt64() + last - 1 + 2);
                                            }
                                            else
                                            {
                                                LastDisassembleData.OpCode = "cmp";
                                                if (RexW)
                                                {
                                                    LastDisassembleData.Parameters = ModRm(memory, _prefix2, 1, 0, ref last, 64);
                                                    LastDisassembleData.DataSize = 8; ;
                                                }
                                                else
                                                    LastDisassembleData.Parameters = ModRm(memory, _prefix2, 1, 0, ref last);
                                                var dwordptr = memory.ReadUInt32((int)last);
                                                LastDisassembleData.ParameterValueType = ADisassemblerValueType.Value;
                                                LastDisassembleData.ParameterValue = (UIntPtr)dwordptr;

                                                if (RexW)
                                                    LastDisassembleData.Parameters = LastDisassembleData.Parameters + IntToHexSigned((UIntPtr)(Int32)dwordptr, 8);
                                                else
                                                    LastDisassembleData.Parameters = LastDisassembleData.Parameters + IntToHexSigned((UIntPtr)dwordptr, 8);
                                                offset = (UIntPtr)(offset.ToUInt64() + last - 1 + 4);
                                            }

                                            description = "compare two operands";
                                        }
                                        break;


                                }
                            }
                            break;

                        case 0x83:
                            {
                                switch (GetReg(memory[1]))
                                {
                                    case 0:
                                        {
                                            if (_prefix2.Contains(0x66))
                                            {
                                                LastDisassembleData.OpCode = "add";
                                                LastDisassembleData.Parameters = ModRm(memory, _prefix2, 1, 1, ref last, 16);
                                                LastDisassembleData.ParameterValueType = ADisassemblerValueType.Value;
                                                LastDisassembleData.ParameterValue = (UIntPtr)memory[(int)last];

                                                LastDisassembleData.Parameters = LastDisassembleData.Parameters + IntToHexSigned((UIntPtr)memory[(int)last], 2, true);
                                            }
                                            else
                                            {
                                                LastDisassembleData.OpCode = "add";

                                                if (RexW)
                                                {
                                                    LastDisassembleData.Parameters = ModRm(memory, _prefix2, 1, 0, ref last, 64);
                                                    LastDisassembleData.ParameterValueType = ADisassemblerValueType.Value;
                                                    LastDisassembleData.ParameterValue = (UIntPtr)memory[(int)last];
                                                    LastDisassembleData.Parameters = LastDisassembleData.Parameters + IntToHexSigned((UIntPtr)memory[(int)last], 2, true);
                                                }
                                                else
                                                {
                                                    LastDisassembleData.Parameters = ModRm(memory, _prefix2, 1, 0, ref last, 32);
                                                    LastDisassembleData.ParameterValueType = ADisassemblerValueType.Value;
                                                    LastDisassembleData.ParameterValue = (UIntPtr)memory[(int)last];

                                                    LastDisassembleData.Parameters = LastDisassembleData.Parameters + IntToHexSigned((UIntPtr)memory[(int)last], 2, true);
                                                }

                                            }

                                            offset = (UIntPtr)(offset.ToUInt64() + last);
                                            description = "add (sign extended)";
                                        }
                                        break;

                                    case 1:
                                        {
                                            if (_prefix2.Contains(0x66))
                                            {
                                                LastDisassembleData.OpCode = "or";
                                                LastDisassembleData.Parameters = ModRm(memory, _prefix2, 1, 1, ref last, 16);
                                                LastDisassembleData.ParameterValueType = ADisassemblerValueType.Value;
                                                LastDisassembleData.ParameterValue = (UIntPtr)memory[(int)last];

                                                LastDisassembleData.Parameters = LastDisassembleData.Parameters + IntToHexSigned((UIntPtr)memory[(int)last], 2);
                                            }
                                            else
                                            {
                                                LastDisassembleData.OpCode = "or";
                                                if (RexW)
                                                {
                                                    LastDisassembleData.Parameters = ModRm(memory, _prefix2, 1, 0, ref last, 64);
                                                    LastDisassembleData.ParameterValueType = ADisassemblerValueType.Value;
                                                    LastDisassembleData.ParameterValue = (UIntPtr)memory[(int)last];
                                                    LastDisassembleData.Parameters = LastDisassembleData.Parameters + IntToHexSigned((UIntPtr)memory[(int)last], 2);
                                                }
                                                else
                                                {
                                                    LastDisassembleData.Parameters = ModRm(memory, _prefix2, 1, 0, ref last, 32);
                                                    LastDisassembleData.ParameterValueType = ADisassemblerValueType.Value;
                                                    LastDisassembleData.ParameterValue = (UIntPtr)memory[(int)last];
                                                    LastDisassembleData.Parameters = LastDisassembleData.Parameters + IntToHexSigned((UIntPtr)memory[(int)last], 2);
                                                }
                                            }

                                            offset = (UIntPtr)(offset.ToUInt64() + last);
                                            description = "add (sign extended)";
                                        }
                                        break;


                                    case 2:
                                        {
                                            if (_prefix2.Contains(0x66))
                                            {
                                                LastDisassembleData.OpCode = "adc";
                                                LastDisassembleData.Parameters = ModRm(memory, _prefix2, 1, 1, ref last, 16);
                                                LastDisassembleData.ParameterValueType = ADisassemblerValueType.Value;
                                                LastDisassembleData.ParameterValue = (UIntPtr)memory[(int)last];
                                                LastDisassembleData.Parameters = LastDisassembleData.Parameters + IntToHexSigned((UIntPtr)memory[(int)last], 2);
                                            }
                                            else
                                            {
                                                LastDisassembleData.OpCode = "adc";
                                                if (RexW)
                                                {
                                                    LastDisassembleData.Parameters = ModRm(memory, _prefix2, 1, 0, ref last, 64);
                                                    LastDisassembleData.ParameterValueType = ADisassemblerValueType.Value;
                                                    LastDisassembleData.ParameterValue = (UIntPtr)memory[(int)last];
                                                    LastDisassembleData.Parameters = LastDisassembleData.Parameters + IntToHexSigned((UIntPtr)memory[(int)last], 2);
                                                }
                                                else
                                                {
                                                    LastDisassembleData.Parameters = ModRm(memory, _prefix2, 1, 0, ref last, 32);
                                                    LastDisassembleData.ParameterValueType = ADisassemblerValueType.Value;
                                                    LastDisassembleData.ParameterValue = (UIntPtr)memory[(int)last];
                                                    LastDisassembleData.Parameters = LastDisassembleData.Parameters + IntToHexSigned((UIntPtr)memory[(int)last], 2);
                                                }

                                            }

                                            offset = (UIntPtr)(offset.ToUInt64() + last);
                                            description = "add with carry (sign extended)";
                                        }
                                        break;

                                    case 3:
                                        {
                                            if (_prefix2.Contains(0x66))
                                            {
                                                LastDisassembleData.OpCode = "sbb";
                                                LastDisassembleData.Parameters = ModRm(memory, _prefix2, 1, 1, ref last, 16);
                                                LastDisassembleData.ParameterValueType = ADisassemblerValueType.Value;
                                                LastDisassembleData.ParameterValue = (UIntPtr)memory[(int)last];

                                                LastDisassembleData.Parameters = LastDisassembleData.Parameters + IntToHexSigned((UIntPtr)memory[(int)last], 2);
                                            }
                                            else
                                            {
                                                LastDisassembleData.OpCode = "sbb";
                                                if (RexW)
                                                {
                                                    LastDisassembleData.Parameters = ModRm(memory, _prefix2, 1, 0, ref last, 64);
                                                    LastDisassembleData.ParameterValueType = ADisassemblerValueType.Value;
                                                    LastDisassembleData.ParameterValue = (UIntPtr)memory[(int)last];
                                                    LastDisassembleData.Parameters = LastDisassembleData.Parameters + IntToHexSigned((UIntPtr)memory[(int)last], 2);
                                                }
                                                else
                                                {
                                                    LastDisassembleData.Parameters = ModRm(memory, _prefix2, 1, 0, ref last, 32);
                                                    LastDisassembleData.ParameterValueType = ADisassemblerValueType.Value;
                                                    LastDisassembleData.ParameterValue = (UIntPtr)memory[(int)last];
                                                    LastDisassembleData.Parameters = LastDisassembleData.Parameters + IntToHexSigned((UIntPtr)memory[(int)last], 2);
                                                }
                                            }

                                            offset = (UIntPtr)(offset.ToUInt64() + last);
                                            description = "integer subtraction with borrow (sign extended)";
                                        }
                                        break;

                                    case 4:
                                        {
                                            //and
                                            if (_prefix2.Contains(0x66))
                                            {
                                                LastDisassembleData.OpCode = "and";
                                                LastDisassembleData.Parameters = ModRm(memory, _prefix2, 1, 1, ref last, 16);
                                                LastDisassembleData.ParameterValueType = ADisassemblerValueType.Value;
                                                LastDisassembleData.ParameterValue = (UIntPtr)memory[(int)last];
                                                LastDisassembleData.Parameters = LastDisassembleData.Parameters + IntToHexSigned((UIntPtr)memory[(int)last], 2);
                                            }
                                            else
                                            {
                                                LastDisassembleData.OpCode = "and";
                                                if (RexW)
                                                {
                                                    LastDisassembleData.Parameters = ModRm(memory, _prefix2, 1, 0, ref last, 64);
                                                    LastDisassembleData.ParameterValueType = ADisassemblerValueType.Value;
                                                    LastDisassembleData.ParameterValue = (UIntPtr)memory[(int)last];
                                                    LastDisassembleData.Parameters = LastDisassembleData.Parameters + IntToHexSigned((UIntPtr)memory[(int)last], 2);
                                                }
                                                else
                                                {
                                                    LastDisassembleData.Parameters = ModRm(memory, _prefix2, 1, 0, ref last, 32);
                                                    LastDisassembleData.ParameterValueType = ADisassemblerValueType.Value;
                                                    LastDisassembleData.ParameterValue = (UIntPtr)memory[(int)last];
                                                    LastDisassembleData.Parameters = LastDisassembleData.Parameters + IntToHexSigned((UIntPtr)memory[(int)last], 2);
                                                }

                                            }

                                            offset = (UIntPtr)(offset.ToUInt64() + last);
                                            description = "logical and (sign extended)";
                                        }
                                        break;

                                    case 5:
                                        {
                                            if (_prefix2.Contains(0x66))
                                            {
                                                LastDisassembleData.OpCode = "sub";
                                                LastDisassembleData.Parameters = ModRm(memory, _prefix2, 1, 1, ref last, 16);
                                                LastDisassembleData.ParameterValueType = ADisassemblerValueType.Value;
                                                LastDisassembleData.ParameterValue = (UIntPtr)memory[(int)last];
                                                LastDisassembleData.Parameters = LastDisassembleData.Parameters + IntToHexSigned((UIntPtr)memory[(int)last], 2);
                                            }
                                            else
                                            {
                                                LastDisassembleData.OpCode = "sub";
                                                if (RexW)
                                                {
                                                    LastDisassembleData.Parameters = ModRm(memory, _prefix2, 1, 0, ref last, 64);
                                                    LastDisassembleData.ParameterValueType = ADisassemblerValueType.Value;
                                                    LastDisassembleData.ParameterValue = (UIntPtr)memory[(int)last];
                                                    LastDisassembleData.Parameters = LastDisassembleData.Parameters + IntToHexSigned((UIntPtr)memory[(int)last], 2);
                                                }
                                                else
                                                {
                                                    LastDisassembleData.Parameters = ModRm(memory, _prefix2, 1, 0, ref last, 32);
                                                    LastDisassembleData.ParameterValueType = ADisassemblerValueType.Value;
                                                    LastDisassembleData.ParameterValue = (UIntPtr)memory[(int)last];
                                                    LastDisassembleData.Parameters = LastDisassembleData.Parameters + IntToHexSigned((UIntPtr)memory[(int)last], 2);
                                                }
                                            }

                                            offset = (UIntPtr)(offset.ToUInt64() + last);
                                            description = "subtract";
                                        }
                                        break;

                                    case 6:
                                        {
                                            if (_prefix2.Contains(0x66))
                                            {
                                                LastDisassembleData.OpCode = "xor";
                                                LastDisassembleData.Parameters = ModRm(memory, _prefix2, 1, 1, ref last, 16);
                                                LastDisassembleData.ParameterValueType = ADisassemblerValueType.Value;
                                                LastDisassembleData.ParameterValue = (UIntPtr)memory[(int)last];
                                                LastDisassembleData.Parameters = LastDisassembleData.Parameters + IntToHexSigned((UIntPtr)memory[(int)last], 2);
                                            }
                                            else
                                            {
                                                LastDisassembleData.OpCode = "xor";
                                                if (RexW)
                                                {
                                                    LastDisassembleData.Parameters = ModRm(memory, _prefix2, 1, 0, ref last, 64);
                                                    LastDisassembleData.ParameterValueType = ADisassemblerValueType.Value;
                                                    LastDisassembleData.ParameterValue = (UIntPtr)memory[(int)last];
                                                    LastDisassembleData.Parameters = LastDisassembleData.Parameters + IntToHexSigned((UIntPtr)memory[(int)last], 2);
                                                }
                                                else
                                                {
                                                    LastDisassembleData.Parameters = ModRm(memory, _prefix2, 1, 0, ref last, 32);
                                                    LastDisassembleData.ParameterValueType = ADisassemblerValueType.Value;
                                                    LastDisassembleData.ParameterValue = (UIntPtr)memory[(int)last];
                                                    LastDisassembleData.Parameters = LastDisassembleData.Parameters + IntToHexSigned((UIntPtr)memory[(int)last], 2);
                                                }
                                            }

                                            offset = (UIntPtr)(offset.ToUInt64() + last);
                                            description = "logical exclusive or";
                                        }
                                        break;

                                    case 7:
                                        {
                                            //cmp
                                            if (_prefix2.Contains(0x66))
                                            {
                                                LastDisassembleData.OpCode = "cmp";
                                                LastDisassembleData.Parameters = ModRm(memory, _prefix2, 1, 1, ref last, 16);
                                                LastDisassembleData.ParameterValueType = ADisassemblerValueType.Value;
                                                LastDisassembleData.ParameterValue = (UIntPtr)memory[(int)last];
                                                LastDisassembleData.Parameters = LastDisassembleData.Parameters + IntToHexSigned((UIntPtr)memory[(int)last], 2);
                                            }
                                            else
                                            {
                                                LastDisassembleData.OpCode = "cmp";
                                                if (RexW)
                                                {
                                                    LastDisassembleData.Parameters = ModRm(memory, _prefix2, 1, 0, ref last, 64);
                                                    LastDisassembleData.ParameterValueType = ADisassemblerValueType.Value;
                                                    LastDisassembleData.ParameterValue = (UIntPtr)memory[(int)last];
                                                    LastDisassembleData.Parameters = LastDisassembleData.Parameters + IntToHexSigned((UIntPtr)memory[(int)last], 2);
                                                }
                                                else
                                                {
                                                    LastDisassembleData.Parameters = ModRm(memory, _prefix2, 1, 0, ref last, 32);
                                                    LastDisassembleData.ParameterValueType = ADisassemblerValueType.Value;
                                                    LastDisassembleData.ParameterValue = (UIntPtr)memory[(int)last];
                                                    LastDisassembleData.Parameters = LastDisassembleData.Parameters + IntToHexSigned((UIntPtr)memory[(int)last], 2);
                                                }
                                            }

                                            offset = (UIntPtr)(offset.ToUInt64() + last);
                                            description = "compare two operands";
                                        }
                                        break;


                                }
                            }
                            break;

                        case 0x84:
                            {
                                description = "logical compare";
                                LastDisassembleData.OpCode = "test";
                                LastDisassembleData.Parameters = ModRm(memory, _prefix2, 1, 2, ref last) + R8(memory[1]);
                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                            }
                            break;

                        case 0x85:
                            {
                                description = "logical compare";
                                LastDisassembleData.OpCode = "test";
                                if (_prefix2.Contains(0x66))
                                    LastDisassembleData.Parameters = ModRm(memory, _prefix2, 1, 1, ref last) + R16(memory[1]);
                                else
                                    LastDisassembleData.Parameters = ModRm(memory, _prefix2, 1, 0, ref last) + R32(memory[1]);
                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                            }
                            break;

                        case 0x86:
                            {
                                description = "exchange memory with register";
                                LastDisassembleData.OpCode = "xchg";
                                LastDisassembleData.Parameters = ModRm(memory, _prefix2, 1, 2, ref last) + R8(memory[1]);
                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                            }
                            break;

                        case 0x87:
                            {
                                description = "exchange memory with register";
                                LastDisassembleData.OpCode = "xchg";
                                if (_prefix2.Contains(0x66))
                                    LastDisassembleData.Parameters = ModRm(memory, _prefix2, 1, 1, ref last) + R16(memory[1]);
                                else
                                    LastDisassembleData.Parameters = ModRm(memory, _prefix2, 1, 0, ref last) + R32(memory[1]);
                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                            }
                            break;

                        case 0x88:
                            {
                                description = "copy memory";
                                LastDisassembleData.OpCode = "mov";
                                LastDisassembleData.Parameters = ModRm(memory, _prefix2, 1, 2, ref last) + R8(memory[1]);
                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                            }
                            break;

                        case 0x89:
                            {
                                description = "copy memory";
                                LastDisassembleData.OpCode = "mov";
                                if (_prefix2.Contains(0x66))
                                    LastDisassembleData.Parameters = ModRm(memory, _prefix2, 1, 1, ref last) + R16(memory[1]);
                                else
                                    LastDisassembleData.Parameters = ModRm(memory, _prefix2, 1, 0, ref last) + R32(memory[1]);
                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                            }
                            break;

                        case 0x8a:
                            {
                                description = "copy memory";
                                LastDisassembleData.OpCode = "mov";
                                LastDisassembleData.Parameters = R8(memory[1]) + ModRm(memory, _prefix2, 1, 2, ref last, ATmrPos.Right);

                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                            }
                            break;

                        case 0x8b:
                            {
                                description = "copy memory";
                                LastDisassembleData.OpCode = "mov";
                                if (_prefix2.Contains(0x66))
                                    LastDisassembleData.Parameters = R16(memory[1]) + ModRm(memory, _prefix2, 1, 1, ref last, ATmrPos.Right);
                                else
                                    LastDisassembleData.Parameters = R32(memory[1]) + ModRm(memory, _prefix2, 1, 0, ref last, ATmrPos.Right);

                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                            }
                            break;

                        case 0x8c:
                            {
                                description = "copy memory";
                                LastDisassembleData.OpCode = "mov";
                                LastDisassembleData.Parameters = ModRm(memory, _prefix2, 1, 1, ref last) + SReg(memory[1]);
                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                            }
                            break;

                        case 0x8d:
                            {
                                description = "load effective address";
                                LastDisassembleData.OpCode = "lea";
                                if (_prefix2.Contains(0x66))
                                {
                                    if (SymbolHandler.Process.IsX64 & (_prefix2.Contains(0x67)))
                                        LastDisassembleData.Parameters = R16(memory[1]) + ModRm(memory, _prefix2, 1, 1, ref last, 0, 32, ATmrPos.Right);
                                    else
                                        LastDisassembleData.Parameters = R16(memory[1]) + ModRm(memory, _prefix2, 1, 1, ref last, 0, 0, ATmrPos.Right);
                                }
                                else
                                {
                                    if (SymbolHandler.Process.IsX64 & (_prefix2.Contains(0x67)))
                                        LastDisassembleData.Parameters = R32(memory[1]) + ModRm(memory, _prefix2, 1, 0, ref last, 0, 32, ATmrPos.Right);
                                    else
                                        LastDisassembleData.Parameters = R32(memory[1]) + ModRm(memory, _prefix2, 1, 0, ref last, 0, 0, ATmrPos.Right);
                                }

                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                            }
                            break;

                        case 0x8e:
                            {
                                description = "copy memory";
                                LastDisassembleData.OpCode = "mov";
                                LastDisassembleData.Parameters = SReg(memory[1]) + ModRm(memory, _prefix2, 1, 1, ref last, ATmrPos.Right);

                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                            }
                            break;

                        case 0x8f:
                            {
                                switch (GetReg(memory[1]))
                                {
                                    case 0:
                                        {
                                            description = "pop a value from the stack";
                                            LastDisassembleData.OpCode = "pop";
                                            if (_prefix2.Contains(0x66))
                                                LastDisassembleData.Parameters = ModRm(memory, _prefix2, 1, 1, ref last, 16);
                                            else
                                                LastDisassembleData.Parameters = ModRm(memory, _prefix2, 1, 0, ref last);

                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                        }
                                        break;

                                    default:
                                        {
                                            LastDisassembleData.OpCode = "db";
                                            LastDisassembleData.Parameters = _colorHex + "8f" + _endColor;
                                            description = "undefined by the intel specification";
                                        }
                                        break;
                                }
                            }
                            break;


                        case 0x90:
                            {
                                description = "no operation";
                                LastDisassembleData.OpCode = "nop";
                                if (prefixsize > 0)
                                    LastDisassembleData.Parameters = IntToHexSigned((UIntPtr)(prefixsize + 1), 1);
                            }
                            break;

                        case 0x91:
                        case 0x92:
                        case 0x93:
                        case 0x94:
                        case 0x95:
                        case 0x96:
                        case 0x97:
                            {
                                description = "exchange register with register";
                                LastDisassembleData.OpCode = "xchg";

                                if (_prefix2.Contains(0x66))
                                    LastDisassembleData.Parameters = _colorReg + "ax" + _endColor + ',' + Rd16((Byte)(memory[0] - 0x90));
                                else
                                {
                                    if (RexW)
                                        LastDisassembleData.Parameters = _colorReg + "rax" + _endColor + ',' + Rd((Byte)(memory[0] - 0x90));
                                    else
                                        LastDisassembleData.Parameters = _colorReg + "eax" + _endColor + ',' + Rd((Byte)(memory[0] - 0x90));
                                }
                            }
                            break;


                        case 0x98:
                            {
                                //cbw/cwde
                                if (_prefix2.Contains(0x66))
                                {
                                    LastDisassembleData.OpCode = "cbw";
                                    description = "convert byte to word";
                                }
                                else
                                {
                                    if (RexW)
                                    {
                                        LastDisassembleData.OpCode = "cdqe";
                                        description = "convert doubleword to quadword";
                                    }
                                    else
                                    {
                                        LastDisassembleData.OpCode = "cwde";
                                        description = "convert word to doubleword";
                                    }
                                }
                            }
                            break;

                        case 0x99:
                            {
                                if (_prefix2.Contains(0x66))
                                {
                                    description = "convert word to doubleword";
                                    LastDisassembleData.OpCode = "cwd";
                                }
                                else
                                {

                                    if (RexW)
                                    {
                                        LastDisassembleData.OpCode = "cqo";
                                        description = "convert quadword to octword";
                                    }
                                    else
                                    {
                                        LastDisassembleData.OpCode = "cdq";
                                        description = "convert doubleword to quadword";
                                    }
                                }
                            }
                            break;

                        case 0x9a:
                            {
                                description = "call procedure";
                                var wordptr = memory.ReadUInt16(5);

                                LastDisassembleData.Separators[LastDisassembleData.SeparatorCount] = 1;
                                LastDisassembleData.SeparatorCount += 1;

                                LastDisassembleData.Separators[LastDisassembleData.SeparatorCount] = 5;
                                LastDisassembleData.SeparatorCount += 1;



                                if (Is64Bit)
                                    LastDisassembleData.OpCode = "call (invalid)";
                                else
                                    LastDisassembleData.OpCode = "call";


                                LastDisassembleData.Parameters = IntToHexSigned((UIntPtr)wordptr, 4) + ':';
                                var dwordptr = memory.ToIntPtr(1).ReadUInt32();

                                LastDisassembleData.ParameterValueType = ADisassemblerValueType.Address;
                                LastDisassembleData.ParameterValue = (UIntPtr)dwordptr;

                                offset += 6;
                            }
                            break;

                        case 0x9b:
                            {
                                switch (memory[1])
                                {

                                    case 0xd9:
                                        {
                                            switch (GetReg(memory[2]))
                                            {
                                                case 6:
                                                    {
                                                        description = "store fpu environment";
                                                        LastDisassembleData.OpCode = "wait:fstenv";
                                                        LastDisassembleData.Parameters = ModRm(memory, _prefix2, 2, 0, ref last);
                                                        offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                    }
                                                    break;


                                                case 7:
                                                    {
                                                        description = "store control word";
                                                        LastDisassembleData.OpCode = "wait:fstcw";
                                                        LastDisassembleData.Parameters = ModRm(memory, _prefix2, 2, 0, ref last);
                                                        offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                    }
                                                    break;

                                                default:
                                                    {
                                                        description = "wait";
                                                        LastDisassembleData.OpCode = "wait";
                                                    }
                                                    break;

                                            }
                                        }
                                        break;

                                    case 0xdb:
                                        {
                                            switch (memory[2])
                                            {
                                                case 0xe2:
                                                    {
                                                        description = "clear exceptions";
                                                        LastDisassembleData.OpCode = "wait:fclex";
                                                        offset += 2;
                                                    }
                                                    break;

                                                case 0xe3:
                                                    {
                                                        description = "initialize floaring-point unit";
                                                        LastDisassembleData.OpCode = "wait:finit";
                                                        offset += 2;
                                                    }
                                                    break;
                                                default:
                                                    {
                                                        description = "wait";
                                                        LastDisassembleData.OpCode = "wait";
                                                    }
                                                    break;
                                            }
                                        }
                                        break;

                                    case 0xdd:
                                        {
                                            switch (GetReg(memory[2]))
                                            {
                                                case 6:
                                                    {
                                                        description = "store fpu state";
                                                        LastDisassembleData.OpCode = "wait:fsave";
                                                        LastDisassembleData.Parameters = ModRm(memory, _prefix2, 2, 0, ref last);
                                                        offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                    }
                                                    break;

                                                case 7:
                                                    {
                                                        description = "store status word";
                                                        LastDisassembleData.OpCode = "wait:fstsw";
                                                        LastDisassembleData.Parameters = ModRm(memory, _prefix2, 2, 0, ref last);
                                                        offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                    }
                                                    break;

                                                default:
                                                    {
                                                        description = "wait";
                                                        LastDisassembleData.OpCode = "wait";
                                                    }
                                                    break;
                                            }
                                        }
                                        break;

                                    case 0xdf:
                                        {
                                            switch (memory[2])
                                            {
                                                case 0xe0:
                                                    {
                                                        description = "store status word";
                                                        LastDisassembleData.OpCode = "wait:fstsw ax";
                                                        offset += 2;
                                                    }
                                                    break;

                                                default:
                                                    {
                                                        description = "wait";
                                                        LastDisassembleData.OpCode = "wait";
                                                    }
                                                    break;
                                            }
                                        }
                                        break;

                                    default:
                                        {
                                            description = "wait";
                                            LastDisassembleData.OpCode = "wait";
                                        }
                                        break;

                                }

                            }
                            break;

                        case 0x9c:
                            {
                                description = "push eflags register onto the stack";
                                if (_prefix2.Contains(0x66)) LastDisassembleData.OpCode = "pushf";
                                else
                                {
                                    if (Is64Bit)
                                        LastDisassembleData.OpCode = "pushfq";
                                    else
                                        LastDisassembleData.OpCode = "pushfd";
                                }
                            }
                            break;

                        case 0x9d:
                            {
                                description = "pop stack into eflags register";
                                if (_prefix2.Contains(0x66)) LastDisassembleData.OpCode = "popf";
                                else
                                {
                                    if (Is64Bit)
                                        LastDisassembleData.OpCode = "popfq";
                                    else
                                        LastDisassembleData.OpCode = "popfd";
                                }
                            }
                            break;

                        case 0x9e:
                            {
                                description = "store ah into flags";
                                LastDisassembleData.OpCode = "sahf";
                            }
                            break;

                        case 0x9f:
                            {
                                description = "load status flag into ah register";
                                LastDisassembleData.OpCode = "lahf";
                            }
                            break;

                        case 0xa0:
                            {
                                description = "copy memory";
                                var dwordptr = memory.ToIntPtr(1).ReadUInt32();
                                LastDisassembleData.OpCode = "mov";
                                LastDisassembleData.ParameterValueType = ADisassemblerValueType.Address;
                                LastDisassembleData.ParameterValue = (UIntPtr)dwordptr;
                                LastDisassembleData.Separators[LastDisassembleData.SeparatorCount] = 1;
                                LastDisassembleData.SeparatorCount += 1;


                                if (SymbolHandler.Process.IsX64)
                                {
                                    var qwordptr = memory.ToIntPtr(1).ReadUInt64();
                                    LastDisassembleData.ParameterValue = (UIntPtr)qwordptr;
                                    LastDisassembleData.Parameters = _colorReg + "al" + _endColor + ',' + GetSegmentOverride(_prefix2) + '[' + IntToHexSigned((UIntPtr)qwordptr, 8) + ']';
                                    offset += 8;
                                }
                                else
                                {
                                    LastDisassembleData.Parameters = _colorReg + "al" + _endColor + ',' + GetSegmentOverride(_prefix2) + '[' + IntToHexSigned((UIntPtr)dwordptr, 8) + ']';
                                    offset += 4;
                                }


                            }
                            break;

                        case 0xa1:
                            {
                                description = "copy memory";
                                LastDisassembleData.OpCode = "mov";
                                var dwordptr = memory.ToIntPtr(1).ReadUInt32();


                                LastDisassembleData.ParameterValueType = ADisassemblerValueType.Address;
                                LastDisassembleData.ParameterValue = (UIntPtr)dwordptr;
                                LastDisassembleData.Separators[LastDisassembleData.SeparatorCount] = 1;
                                LastDisassembleData.SeparatorCount += 1;

                                if (_prefix2.Contains(0x66))
                                {
                                    LastDisassembleData.Parameters = _colorReg + "ax" + _endColor + ',' + GetSegmentOverride(_prefix2) + '[' + IntToHexSigned((UIntPtr)dwordptr, 8) + ']';
                                }
                                else
                                {
                                    if (RexW)
                                        LastDisassembleData.Parameters = _colorReg + "rax" + _endColor + ',';
                                    else
                                        LastDisassembleData.Parameters = _colorReg + "eax" + _endColor + ',';


                                    if (SymbolHandler.Process.IsX64)
                                    {
                                        var qwordptr = memory.ToIntPtr(1).ReadUInt64();
                                        LastDisassembleData.ParameterValue = (UIntPtr)qwordptr;
                                        LastDisassembleData.Parameters = LastDisassembleData.Parameters + GetSegmentOverride(_prefix2) + '[' + IntToHexSigned((UIntPtr)qwordptr, 8) + ']';
                                    }
                                    else
                                        LastDisassembleData.Parameters = LastDisassembleData.Parameters + GetSegmentOverride(_prefix2) + '[' + IntToHexSigned((UIntPtr)dwordptr, 8) + ']';

                                }

                                if (SymbolHandler.Process.IsX64)
                                    offset += 8;
                                else
                                    offset += 4;

                            }
                            break;

                        case 0xa2:
                            {
                                description = "copy memory";
                                var dwordptr = memory.ToIntPtr(1).ReadUInt32();
                                LastDisassembleData.OpCode = "mov";

                                LastDisassembleData.ParameterValueType = ADisassemblerValueType.Address;
                                LastDisassembleData.ParameterValue = (UIntPtr)dwordptr;
                                LastDisassembleData.Separators[LastDisassembleData.SeparatorCount] = 1;
                                LastDisassembleData.SeparatorCount += 1;

                                if (SymbolHandler.Process.IsX64)
                                {
                                    var qwordptr = memory.ToIntPtr(1).ReadUInt64();
                                    LastDisassembleData.ParameterValue = (UIntPtr)qwordptr;
                                    LastDisassembleData.Parameters = GetSegmentOverride(_prefix2) + '[' + IntToHexSigned((UIntPtr)qwordptr, 8) + "]," + _colorReg + "al" + _endColor;
                                }
                                else
                                    LastDisassembleData.Parameters = GetSegmentOverride(_prefix2) + '[' + IntToHexSigned((UIntPtr)dwordptr, 8) + "]," + _colorReg + "al" + _endColor;

                                if (SymbolHandler.Process.IsX64)
                                    offset += 8;
                                else
                                    offset += 4;
                            }
                            break;

                        case 0xa3:
                            {
                                description = "copy memory";
                                LastDisassembleData.OpCode = "mov";
                                var dwordptr = memory.ToIntPtr(1).ReadUInt32();

                                LastDisassembleData.ParameterValueType = ADisassemblerValueType.Address;
                                LastDisassembleData.ParameterValue = (UIntPtr)dwordptr;
                                LastDisassembleData.Separators[LastDisassembleData.SeparatorCount] = 1;
                                LastDisassembleData.SeparatorCount += 1;

                                if (SymbolHandler.Process.IsX64)
                                {
                                    var qwordptr = memory.ToIntPtr(1).ReadUInt64();
                                    LastDisassembleData.ParameterValue = (UIntPtr)qwordptr;
                                    LastDisassembleData.Parameters = GetSegmentOverride(_prefix2) + '[' + IntToHexSigned((UIntPtr)qwordptr, 8) + "],";
                                }
                                else
                                    LastDisassembleData.Parameters = GetSegmentOverride(_prefix2) + '[' + IntToHexSigned((UIntPtr)dwordptr, 8) + "],";

                                if (_prefix2.Contains(0x66))
                                    LastDisassembleData.Parameters = LastDisassembleData.Parameters + _colorReg + "ax" + _endColor;
                                else
                                {
                                    if (RexW)
                                        LastDisassembleData.Parameters = LastDisassembleData.Parameters + _colorReg + "rax" + _endColor;
                                    else
                                        LastDisassembleData.Parameters = LastDisassembleData.Parameters + _colorReg + "eax" + _endColor;
                                }

                                if (SymbolHandler.Process.IsX64)
                                    offset += 8;
                                else
                                    offset += 4;
                            }
                            break;

                        case 0xa4:
                            {
                                description = "move data from string to string";
                                LastDisassembleData.OpCode = "movsb";
                            }
                            break;

                        case 0xa5:
                            {
                                description = "move data from string to string";
                                if (_prefix2.Contains(0x66))
                                    LastDisassembleData.OpCode = "movsw";
                                else
                                {
                                    if (RexW)
                                        LastDisassembleData.OpCode = "movsq";
                                    else
                                        LastDisassembleData.OpCode = "movsd";
                                }
                            }
                            break;

                        case 0xa6:
                            {
                                description = "compare string operands";
                                LastDisassembleData.OpCode = "cmpsb";
                            }
                            break;

                        case 0xa7:
                            {
                                description = "compare string operands";
                                if (_prefix2.Contains(0x66))
                                    LastDisassembleData.OpCode = "cmpsw";
                                else
                                {
                                    if (RexW)
                                        LastDisassembleData.OpCode = "cmpsq";
                                    else
                                        LastDisassembleData.OpCode = "cmpsd";
                                }
                            }
                            break;

                        case 0xa8:
                            {
                                description = "logical compare";
                                LastDisassembleData.OpCode = "test";

                                LastDisassembleData.ParameterValueType = ADisassemblerValueType.Value;
                                LastDisassembleData.ParameterValue = (UIntPtr)memory[1];
                                LastDisassembleData.Separators[LastDisassembleData.SeparatorCount] = 1;
                                LastDisassembleData.SeparatorCount += 1;

                                LastDisassembleData.Parameters = _colorReg + "al" + _endColor + ',' + IntToHexSigned((UIntPtr)memory[1], 2);
                                offset += 1;
                            }
                            break;

                        case 0xa9:
                            {
                                description = "logical compare";
                                LastDisassembleData.OpCode = "test";

                                LastDisassembleData.Separators[LastDisassembleData.SeparatorCount] = 1;
                                LastDisassembleData.SeparatorCount += 1;

                                if (_prefix2.Contains(0x66))
                                {
                                    var wordptr = memory.ToIntPtr(1).ReadUInt16();
                                    LastDisassembleData.ParameterValueType = ADisassemblerValueType.Value;
                                    LastDisassembleData.ParameterValue = (UIntPtr)wordptr;

                                    LastDisassembleData.Parameters = _colorReg + "ax" + _endColor + ',' + IntToHexSigned((UIntPtr)wordptr, 4);
                                    offset += 2;
                                }
                                else
                                {
                                    var dwordptr = memory.ToIntPtr(1).ReadUInt32();
                                    LastDisassembleData.ParameterValueType = ADisassemblerValueType.Value;
                                    LastDisassembleData.ParameterValue = (UIntPtr)dwordptr;

                                    if (RexW)
                                        LastDisassembleData.Parameters = _colorReg + "rax" + _endColor + ',' + IntToHexSigned((UIntPtr)(Int32)dwordptr, 8);
                                    else
                                        LastDisassembleData.Parameters = _colorReg + "eax" + _endColor + ',' + IntToHexSigned((UIntPtr)dwordptr, 8);
                                    offset += 4;
                                }
                            }
                            break;

                        case 0xaa:
                            {
                                description = "store string";
                                LastDisassembleData.OpCode = "stosb";
                            }
                            break;

                        case 0xab:
                            {
                                description = "store string";
                                if (_prefix2.Contains(0x66)) LastDisassembleData.OpCode = "stosw";
                                else
                                {
                                    if (RexW)
                                        LastDisassembleData.OpCode = "stosq";
                                    else
                                        LastDisassembleData.OpCode = "stosd";
                                }
                            }
                            break;

                        case 0xac:
                            {
                                description = "load string";
                                LastDisassembleData.OpCode = "lodsb";
                            }
                            break;

                        case 0xad:
                            {
                                description = "load string";
                                if (_prefix2.Contains(0x66)) LastDisassembleData.OpCode = "lodsw";
                                else
                                {
                                    if (RexW)
                                        LastDisassembleData.OpCode = "lodsq";
                                    else
                                        LastDisassembleData.OpCode = "lodsd";
                                }
                            }
                            break;

                        case 0xae:
                            {
                                description = "compare al with byte at es:edi and set status flag";
                                LastDisassembleData.OpCode = "scasb";
                            }
                            break;

                        case 0xaf:
                            {
                                description = "scan string";
                                if (_prefix2.Contains(0x66)) LastDisassembleData.OpCode = "scasw";
                                else
                                {
                                    if (RexW)
                                        LastDisassembleData.OpCode = "scasq";
                                    else
                                        LastDisassembleData.OpCode = "scasd";
                                }
                            }
                            break;

                        case 0xb0:
                        case 0xb1:
                        case 0xb2:
                        case 0xb3:
                        case 0xb4:
                        case 0xb5:
                        case 0xb6:
                        case 0xb7:
                            {
                                description = "copy memory";
                                LastDisassembleData.OpCode = "mov";
                                LastDisassembleData.ParameterValueType = ADisassemblerValueType.Value;
                                LastDisassembleData.ParameterValue = (UIntPtr)memory[1];
                                LastDisassembleData.Separators[LastDisassembleData.SeparatorCount] = 1;
                                LastDisassembleData.SeparatorCount += 1;

                                //              if Rex_B

                                LastDisassembleData.Parameters = Rd8((Byte)(memory[0] - 0xb0)) + ',' + IntToHexSigned((UIntPtr)memory[1], 2);
                                offset += 1;
                            }
                            break;

                        case 0xb8:
                        case 0xb9:
                        case 0xba:
                        case 0xbb:
                        case 0xbc:
                        case 0xbd:
                        case 0xbe:
                        case 0xbf:
                            {
                                description = "copy memory";

                                LastDisassembleData.Separators[LastDisassembleData.SeparatorCount] = 1;
                                LastDisassembleData.SeparatorCount += 1;


                                if (_prefix2.Contains(0x66))
                                {
                                    var wordptr = memory.ToIntPtr(1).ReadUInt16();
                                    LastDisassembleData.ParameterValueType = ADisassemblerValueType.Value;
                                    LastDisassembleData.ParameterValue = (UIntPtr)wordptr;

                                    LastDisassembleData.OpCode = "mov";
                                    LastDisassembleData.Parameters = Rd16((Byte)(memory[0] - 0xb8)) + ',' + IntToHexSigned((UIntPtr)wordptr, 4);
                                    offset += 2;
                                }
                                else
                                {
                                    var dwordptr = memory.ToIntPtr(1).ReadUInt32();
                                    LastDisassembleData.ParameterValueType = ADisassemblerValueType.Value;


                                    if (RexW)
                                    {
                                        LastDisassembleData.OpCode = "mov";
                                        LastDisassembleData.ParameterValue = (UIntPtr)dwordptr;
                                        LastDisassembleData.Parameters = Rd((Byte)(memory[0] - 0xb8)) + ',' + IntToHexSigned((UIntPtr)dwordptr, 16);
                                        offset += 8;
                                    }
                                    else
                                    {
                                        LastDisassembleData.OpCode = "mov";
                                        LastDisassembleData.ParameterValue = (UIntPtr)dwordptr;

                                        LastDisassembleData.Parameters = Rd((Byte)(memory[0] - 0xb8)) + ',' + IntToHexSigned((UIntPtr)dwordptr, 8);
                                        offset += 4;
                                    }
                                }
                            }
                            break;

                        case 0xc0:
                            {
                                switch (GetReg(memory[1]))
                                {
                                    case 0:
                                        {
                                            LastDisassembleData.OpCode = "rol";
                                            LastDisassembleData.Parameters = ModRm(memory, _prefix2, 1, 2, ref last, 8);

                                            LastDisassembleData.ParameterValueType = ADisassemblerValueType.Value;
                                            LastDisassembleData.ParameterValue = (UIntPtr)memory[(int)last];

                                            LastDisassembleData.Parameters = LastDisassembleData.Parameters + IntToHexSigned((UIntPtr)memory[(int)last], 2);
                                            description = "rotate eight bits left " + (memory[(int)last]) + " times";
                                            offset = (UIntPtr)(offset.ToUInt64() + last);
                                        }
                                        break;

                                    case 1:
                                        {
                                            LastDisassembleData.OpCode = "ror";
                                            LastDisassembleData.Parameters = ModRm(memory, _prefix2, 1, 2, ref last, 8);
                                            LastDisassembleData.ParameterValueType = ADisassemblerValueType.Value;
                                            LastDisassembleData.ParameterValue = (UIntPtr)memory[(int)last];
                                            LastDisassembleData.Parameters = LastDisassembleData.Parameters + IntToHexSigned((UIntPtr)memory[(int)last], 2);
                                            description = "rotate eight bits right " + (memory[(int)last]) + " times";
                                            offset = (UIntPtr)(offset.ToUInt64() + last);
                                        }
                                        break;

                                    case 2:
                                        {
                                            LastDisassembleData.OpCode = "rcl";
                                            LastDisassembleData.Parameters = ModRm(memory, _prefix2, 1, 2, ref last, 8);
                                            LastDisassembleData.ParameterValueType = ADisassemblerValueType.Value;
                                            LastDisassembleData.ParameterValue = (UIntPtr)memory[(int)last];
                                            LastDisassembleData.Parameters = LastDisassembleData.Parameters + IntToHexSigned((UIntPtr)memory[(int)last], 2);
                                            description = "rotate nine bits left " + (memory[(int)last]) + " times";
                                            offset = (UIntPtr)(offset.ToUInt64() + last);
                                        }
                                        break;

                                    case 3:
                                        {
                                            LastDisassembleData.OpCode = "rcr";
                                            LastDisassembleData.Parameters = ModRm(memory, _prefix2, 1, 2, ref last, 8);
                                            LastDisassembleData.ParameterValueType = ADisassemblerValueType.Value;
                                            LastDisassembleData.ParameterValue = (UIntPtr)memory[(int)last];
                                            LastDisassembleData.Parameters = LastDisassembleData.Parameters + IntToHexSigned((UIntPtr)memory[(int)last], 2);
                                            description = "rotate nine bits right " + (memory[(int)last]) + " times";
                                            offset = (UIntPtr)(offset.ToUInt64() + last);
                                        }
                                        break;

                                    case 4:
                                        {
                                            LastDisassembleData.OpCode = "shl";
                                            LastDisassembleData.Parameters = ModRm(memory, _prefix2, 1, 2, ref last, 8);
                                            LastDisassembleData.ParameterValueType = ADisassemblerValueType.Value;
                                            LastDisassembleData.ParameterValue = (UIntPtr)memory[(int)last];
                                            LastDisassembleData.Parameters = LastDisassembleData.Parameters + IntToHexSigned((UIntPtr)memory[(int)last], 2);
                                            description = "multiply by 2, " + (memory[(int)last]) + " times";
                                            offset = (UIntPtr)(offset.ToUInt64() + last);
                                        }
                                        break;

                                    case 5:
                                        {
                                            LastDisassembleData.OpCode = "shr";
                                            LastDisassembleData.Parameters = ModRm(memory, _prefix2, 1, 2, ref last, 8);
                                            LastDisassembleData.ParameterValueType = ADisassemblerValueType.Value;
                                            LastDisassembleData.ParameterValue = (UIntPtr)memory[(int)last];
                                            LastDisassembleData.Parameters = LastDisassembleData.Parameters + IntToHexSigned((UIntPtr)memory[(int)last], 2);
                                            description = "unsigned divide by 2, " + (memory[(int)last]) + " times";
                                            offset = (UIntPtr)(offset.ToUInt64() + last);
                                        }
                                        break;

                                    /*not in intel spec*/
                                    case 6:
                                        {
                                            LastDisassembleData.OpCode = "rol";
                                            LastDisassembleData.Parameters = ModRm(memory, _prefix2, 1, 2, ref last, 8);
                                            LastDisassembleData.ParameterValueType = ADisassemblerValueType.Value;
                                            LastDisassembleData.ParameterValue = (UIntPtr)memory[(int)last];
                                            LastDisassembleData.Parameters = LastDisassembleData.Parameters + IntToHexSigned((UIntPtr)memory[(int)last], 2);
                                            description = "rotate eight bits left " + (memory[(int)last]) + " times";
                                            offset = (UIntPtr)(offset.ToUInt64() + last);
                                        }
                                        break;
                                    /*^^^^^^^^^^^^^^^^^^*/

                                    case 7:
                                        {
                                            LastDisassembleData.OpCode = "sar";
                                            LastDisassembleData.Parameters = ModRm(memory, _prefix2, 1, 2, ref last, 8);
                                            LastDisassembleData.ParameterValueType = ADisassemblerValueType.Value;
                                            LastDisassembleData.ParameterValue = (UIntPtr)memory[(int)last];
                                            LastDisassembleData.Parameters = LastDisassembleData.Parameters + IntToHexSigned((UIntPtr)memory[(int)last], 2);
                                            description = "signed divide by 2, " + (memory[(int)last]) + " times";
                                            offset = (UIntPtr)(offset.ToUInt64() + last);
                                        }
                                        break;

                                }
                            }
                            break;

                        case 0xc1:
                            {
                                switch (GetReg(memory[1]))
                                {
                                    case 0:
                                        {
                                            if (_prefix2.Contains(0x66))
                                            {
                                                LastDisassembleData.OpCode = "rol";
                                                LastDisassembleData.Parameters = ModRm(memory, _prefix2, 1, 1, ref last, 16);
                                                LastDisassembleData.ParameterValueType = ADisassemblerValueType.Value;
                                                LastDisassembleData.ParameterValue = (UIntPtr)memory[(int)last];
                                                LastDisassembleData.Parameters = LastDisassembleData.Parameters + IntToHexSigned((UIntPtr)memory[(int)last], 2);
                                                description = "rotate 16 bits left " + (memory[(int)last]) + " times";
                                                offset = (UIntPtr)(offset.ToUInt64() + last);
                                            }
                                            else
                                            {
                                                LastDisassembleData.OpCode = "rol";
                                                LastDisassembleData.Parameters = ModRm(memory, _prefix2, 1, 0, ref last);
                                                LastDisassembleData.ParameterValueType = ADisassemblerValueType.Value;
                                                LastDisassembleData.ParameterValue = (UIntPtr)memory[(int)last];

                                                LastDisassembleData.Parameters = LastDisassembleData.Parameters + IntToHexSigned((UIntPtr)memory[(int)last], 2);
                                                description = "rotate 32 bits left " + (memory[(int)last]) + " times";
                                                offset = (UIntPtr)(offset.ToUInt64() + last);
                                            }
                                        }
                                        break;

                                    case 1:
                                        {
                                            if (_prefix2.Contains(0x66))
                                            {
                                                LastDisassembleData.OpCode = "ror";
                                                LastDisassembleData.Parameters = ModRm(memory, _prefix2, 1, 1, ref last, 16);
                                                LastDisassembleData.ParameterValueType = ADisassemblerValueType.Value;
                                                LastDisassembleData.ParameterValue = (UIntPtr)memory[(int)last];
                                                LastDisassembleData.Parameters = LastDisassembleData.Parameters + IntToHexSigned((UIntPtr)memory[(int)last], 2);
                                                description = "rotate 16 bits right " + (memory[(int)last]) + " times";
                                                offset = (UIntPtr)(offset.ToUInt64() + last);
                                            }
                                            else
                                            {
                                                LastDisassembleData.OpCode = "ror";
                                                LastDisassembleData.Parameters = ModRm(memory, _prefix2, 1, 0, ref last);
                                                LastDisassembleData.ParameterValueType = ADisassemblerValueType.Value;
                                                LastDisassembleData.ParameterValue = (UIntPtr)memory[(int)last];
                                                LastDisassembleData.Parameters = LastDisassembleData.Parameters + IntToHexSigned((UIntPtr)memory[(int)last], 2);
                                                description = "rotate 32 bits right " + (memory[(int)last]) + " times";
                                                offset = (UIntPtr)(offset.ToUInt64() + last);
                                            }
                                        }
                                        break;

                                    case 2:
                                        {
                                            if (_prefix2.Contains(0x66))
                                            {
                                                LastDisassembleData.OpCode = "rcl";
                                                LastDisassembleData.Parameters = ModRm(memory, _prefix2, 1, 1, ref last, 16);
                                                LastDisassembleData.ParameterValueType = ADisassemblerValueType.Value;
                                                LastDisassembleData.ParameterValue = (UIntPtr)memory[(int)last];
                                                LastDisassembleData.Parameters = LastDisassembleData.Parameters + IntToHexSigned((UIntPtr)memory[(int)last], 2);
                                                description = "rotate 17 bits left " + (memory[(int)last]) + " times";
                                                offset = (UIntPtr)(offset.ToUInt64() + last);
                                            }
                                            else
                                            {
                                                LastDisassembleData.OpCode = "rcl";
                                                LastDisassembleData.Parameters = ModRm(memory, _prefix2, 1, 0, ref last);
                                                LastDisassembleData.ParameterValueType = ADisassemblerValueType.Value;
                                                LastDisassembleData.ParameterValue = (UIntPtr)memory[(int)last];
                                                LastDisassembleData.Parameters = LastDisassembleData.Parameters + IntToHexSigned((UIntPtr)memory[(int)last], 2);
                                                description = "rotate 33 bits left " + (memory[(int)last]) + " times";
                                                offset = (UIntPtr)(offset.ToUInt64() + last);
                                            }
                                        }
                                        break;

                                    case 3:
                                        {
                                            if (_prefix2.Contains(0x66))
                                            {
                                                LastDisassembleData.OpCode = "rcr";
                                                LastDisassembleData.Parameters = ModRm(memory, _prefix2, 1, 1, ref last, 16);
                                                LastDisassembleData.ParameterValueType = ADisassemblerValueType.Value;
                                                LastDisassembleData.ParameterValue = (UIntPtr)memory[(int)last];
                                                LastDisassembleData.Parameters = LastDisassembleData.Parameters + IntToHexSigned((UIntPtr)memory[(int)last], 2);
                                                description = "rotate 17 bits right " + (memory[(int)last]) + " times";
                                                offset = (UIntPtr)(offset.ToUInt64() + last);
                                            }
                                            else
                                            {
                                                LastDisassembleData.OpCode = "rcr";
                                                LastDisassembleData.Parameters = ModRm(memory, _prefix2, 1, 0, ref last);
                                                LastDisassembleData.ParameterValueType = ADisassemblerValueType.Value;
                                                LastDisassembleData.ParameterValue = (UIntPtr)memory[(int)last];
                                                LastDisassembleData.Parameters = LastDisassembleData.Parameters + IntToHexSigned((UIntPtr)memory[(int)last], 2);
                                                description = "rotate 33 bits right " + (memory[(int)last]) + " times";
                                                offset = (UIntPtr)(offset.ToUInt64() + last);
                                            }
                                        }
                                        break;

                                    case 4:
                                        {
                                            if (_prefix2.Contains(0x66))
                                            {
                                                LastDisassembleData.OpCode = "shl";
                                                LastDisassembleData.Parameters = ModRm(memory, _prefix2, 1, 1, ref last, 16);
                                                LastDisassembleData.ParameterValueType = ADisassemblerValueType.Value;
                                                LastDisassembleData.ParameterValue = (UIntPtr)memory[(int)last];
                                                LastDisassembleData.Parameters = LastDisassembleData.Parameters + IntToHexSigned((UIntPtr)memory[(int)last], 2);
                                                description = "multiply by 2 " + (memory[(int)last]) + " times";
                                                offset = (UIntPtr)(offset.ToUInt64() + last);
                                            }
                                            else
                                            {
                                                LastDisassembleData.OpCode = "shl";
                                                LastDisassembleData.Parameters = ModRm(memory, _prefix2, 1, 0, ref last);
                                                LastDisassembleData.ParameterValueType = ADisassemblerValueType.Value;
                                                LastDisassembleData.ParameterValue = (UIntPtr)memory[(int)last];
                                                LastDisassembleData.Parameters = LastDisassembleData.Parameters + IntToHexSigned((UIntPtr)memory[(int)last], 2);
                                                description = "multiply by 2 " + (memory[(int)last]) + " times";
                                                offset = (UIntPtr)(offset.ToUInt64() + last);
                                            }
                                        }
                                        break;

                                    case 5:
                                        {
                                            if (_prefix2.Contains(0x66))
                                            {
                                                LastDisassembleData.OpCode = "shr";
                                                LastDisassembleData.Parameters = ModRm(memory, _prefix2, 1, 1, ref last, 16);
                                                LastDisassembleData.ParameterValueType = ADisassemblerValueType.Value;
                                                LastDisassembleData.ParameterValue = (UIntPtr)memory[(int)last];
                                                LastDisassembleData.Parameters = LastDisassembleData.Parameters + IntToHexSigned((UIntPtr)memory[(int)last], 2);
                                                description = "unsigned divide by 2 " + (memory[(int)last]) + " times";
                                                offset = (UIntPtr)(offset.ToUInt64() + last);
                                            }
                                            else
                                            {
                                                LastDisassembleData.OpCode = "shr";
                                                LastDisassembleData.Parameters = ModRm(memory, _prefix2, 1, 0, ref last);
                                                LastDisassembleData.ParameterValueType = ADisassemblerValueType.Value;
                                                LastDisassembleData.ParameterValue = (UIntPtr)memory[(int)last];
                                                LastDisassembleData.Parameters = LastDisassembleData.Parameters + IntToHexSigned((UIntPtr)memory[(int)last], 2);
                                                description = "unsigned divide by 2 " + (memory[(int)last]) + " times";
                                                offset = (UIntPtr)(offset.ToUInt64() + last);
                                            }
                                        }
                                        break;

                                    case 7:
                                        {
                                            if (_prefix2.Contains(0x66))
                                            {
                                                LastDisassembleData.OpCode = "sar";
                                                LastDisassembleData.Parameters = ModRm(memory, _prefix2, 1, 1, ref last, 16);
                                                LastDisassembleData.ParameterValueType = ADisassemblerValueType.Value;
                                                LastDisassembleData.ParameterValue = (UIntPtr)memory[(int)last];
                                                LastDisassembleData.Parameters = LastDisassembleData.Parameters + IntToHexSigned((UIntPtr)memory[(int)last], 2);
                                                description = "signed divide by 2 " + (memory[(int)last]) + " times";
                                                offset = (UIntPtr)(offset.ToUInt64() + last);
                                            }
                                            else
                                            {
                                                LastDisassembleData.OpCode = "sar";
                                                LastDisassembleData.Parameters = ModRm(memory, _prefix2, 1, 0, ref last);
                                                LastDisassembleData.ParameterValueType = ADisassemblerValueType.Value;
                                                LastDisassembleData.ParameterValue = (UIntPtr)memory[(int)last];
                                                LastDisassembleData.Parameters = LastDisassembleData.Parameters + IntToHexSigned((UIntPtr)memory[(int)last], 2);
                                                description = "signed divide by 2 " + (memory[(int)last]) + " times";
                                                offset = (UIntPtr)(offset.ToUInt64() + last);
                                            }
                                        }
                                        break;

                                }
                            }
                            break;

                        case 0xc2:
                            {

                                var wordptr = memory.ToIntPtr(1).ReadUInt16();
                                LastDisassembleData.ParameterValueType = ADisassemblerValueType.Value;
                                LastDisassembleData.ParameterValue = (UIntPtr)wordptr;
                                LastDisassembleData.Separators[LastDisassembleData.SeparatorCount] = 1;
                                LastDisassembleData.SeparatorCount += 1;

                                LastDisassembleData.OpCode = "ret";
                                LastDisassembleData.IsRet = true;
                                LastDisassembleData.Parameters = IntToHexSigned((UIntPtr)wordptr, 4);
                                offset += 2;

                                description = "near return to calling procedure and pop " + (LastDisassembleData.ParameterValue) + " bytes from stack";


                            }
                            break;

                        case 0xc3:
                            {
                                description = "near return to calling procedure";
                                LastDisassembleData.OpCode = "ret";
                                LastDisassembleData.IsRet = true;
                            }
                            break;

                        case 0xc4:
                            {
                                if (SymbolHandler.Process.IsX64 == false)
                                {
                                    description = "load far pointer";
                                    LastDisassembleData.OpCode = "les";
                                    if (_prefix2.Contains(0x66))
                                        LastDisassembleData.Parameters = R16(memory[1]) + ModRm(memory, _prefix2, 1, 1, ref last, ATmrPos.Right);
                                    else
                                        LastDisassembleData.Parameters = R32(memory[1]) + ModRm(memory, _prefix2, 1, 0, ref last, ATmrPos.Right);

                                    offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                }
                            }
                            break;

                        case 0xc5:
                            {
                                if (SymbolHandler.Process.IsX64 == false)
                                {
                                    description = "load far pointer";
                                    LastDisassembleData.OpCode = "lds";
                                    if (_prefix2.Contains(0x66))
                                        LastDisassembleData.Parameters = R16(memory[1]) + ModRm(memory, _prefix2, 1, 1, ref last, ATmrPos.Right);
                                    else
                                        LastDisassembleData.Parameters = R32(memory[1]) + ModRm(memory, _prefix2, 1, 0, ref last, ATmrPos.Right);

                                    offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                }
                            }
                            break;

                        case 0xc6:
                            {
                                if (memory[1] == 0xf8)
                                {
                                    offset += 1;
                                    LastDisassembleData.OpCode = "xabort";
                                    description = "transactional abort";

                                    LastDisassembleData.ParameterValueType = ADisassemblerValueType.Value;
                                    LastDisassembleData.ParameterValue = (UIntPtr)memory[2];
                                    LastDisassembleData.Separators[LastDisassembleData.SeparatorCount] = 1;
                                    LastDisassembleData.SeparatorCount += 1;
                                    LastDisassembleData.Parameters = IntToHexSigned((UIntPtr)memory[2], 2);

                                }
                                else
                                    switch (GetReg(memory[1]))
                                    {
                                        case 0:
                                            {
                                                description = "copy memory";
                                                LastDisassembleData.OpCode = "mov";
                                                LastDisassembleData.Parameters = ModRm(memory, _prefix2, 1, 2, ref last, 8);
                                                LastDisassembleData.ParameterValueType = ADisassemblerValueType.Value;
                                                LastDisassembleData.ParameterValue = (UIntPtr)memory[(int)last];

                                                LastDisassembleData.Parameters = LastDisassembleData.Parameters + IntToHexSigned((UIntPtr)memory[(int)last], 2);
                                                offset = (UIntPtr)(offset.ToUInt64() + last);
                                            }
                                            break;

                                        default:
                                            {
                                                description = "not defined by the intel documentation";
                                                LastDisassembleData.OpCode = "db";
                                                LastDisassembleData.Parameters = IntToHexSigned((UIntPtr)memory[0], 2);
                                            }
                                            break;
                                    }
                            }
                            break;

                        case 0xc7:
                            {
                                if (memory[1] == 0xf8)
                                {
                                    description = "Transactional Begin";
                                    LastDisassembleData.OpCode = "xbegin";

                                    if (MarkIpRelativeInstructions)
                                    {
                                        LastDisassembleData.RipRelative = 1;
                                        _ripRelative = true;
                                    }
                                    offset += 4;
                                    LastDisassembleData.ParameterValueType = ADisassemblerValueType.Address;



                                    if (Is64Bit)
                                        LastDisassembleData.ParameterValue = (UIntPtr)(offset.ToUInt64() + (UInt64)memory.ReadInt32(2));
                                    else
                                        LastDisassembleData.ParameterValue = (UIntPtr)(UInt32)(offset.ToUInt64() + (UInt64)memory.ReadInt32(2));

                                    LastDisassembleData.Parameters = IntToHexSigned(LastDisassembleData.ParameterValue, 8);

                                    LastDisassembleData.Separators[LastDisassembleData.SeparatorCount] = 1;
                                    LastDisassembleData.SeparatorCount += 1;

                                }
                                else
                                    switch (GetReg(memory[1]))
                                    {
                                        case 0:
                                            {
                                                description = "copy memory";
                                                if (_prefix2.Contains(0x66))
                                                {
                                                    LastDisassembleData.OpCode = "mov";
                                                    LastDisassembleData.Parameters = ModRm(memory, _prefix2, 1, 1, ref last, 16);

                                                    var wordptr = memory.ReadUInt16((int)last);
                                                    LastDisassembleData.ParameterValueType = ADisassemblerValueType.Value;
                                                    LastDisassembleData.ParameterValue = (UIntPtr)wordptr;

                                                    LastDisassembleData.Parameters = LastDisassembleData.Parameters + IntToHexSigned((UIntPtr)wordptr, 4);
                                                    offset = (UIntPtr)(offset.ToUInt64() + last + 1);
                                                }
                                                else
                                                {
                                                    LastDisassembleData.OpCode = "mov";

                                                    if (RexW)
                                                        LastDisassembleData.Parameters = ModRm(memory, _prefix2, 1, 0, ref last, 64);
                                                    else
                                                        LastDisassembleData.Parameters = ModRm(memory, _prefix2, 1, 0, ref last);

                                                    var dwordptr = memory.ReadUInt32((int)last);
                                                    LastDisassembleData.ParameterValueType = ADisassemblerValueType.Value;
                                                    LastDisassembleData.ParameterValue = (UIntPtr)dwordptr;


                                                    if (RexW)
                                                        LastDisassembleData.Parameters = LastDisassembleData.Parameters + IntToHexSigned((UIntPtr)(Int32)dwordptr, 8);
                                                    else
                                                        LastDisassembleData.Parameters = LastDisassembleData.Parameters + IntToHexSigned((UIntPtr)dwordptr, 8);

                                                    offset = (UIntPtr)(offset.ToUInt64() + last + 3);
                                                }
                                            }
                                            break;

                                        default:
                                            {
                                                description = "not defined by the intel documentation";
                                                LastDisassembleData.OpCode = "db";
                                                LastDisassembleData.Parameters = IntToHexSigned((UIntPtr)memory[0], 2);
                                            }
                                            break;

                                    }
                            }
                            break;

                        case 0xc8:
                            {
                                description = "make stack frame for procedure parameters";
                                var wordptr = memory.ToIntPtr(1).ReadUInt16();
                                LastDisassembleData.ParameterValueType = ADisassemblerValueType.Value;
                                LastDisassembleData.ParameterValue = (UIntPtr)wordptr;
                                LastDisassembleData.Separators[LastDisassembleData.SeparatorCount] = 1;
                                LastDisassembleData.SeparatorCount += 1;
                                LastDisassembleData.Separators[LastDisassembleData.SeparatorCount] = 3;
                                LastDisassembleData.SeparatorCount += 1;


                                LastDisassembleData.OpCode = "enter";
                                LastDisassembleData.Parameters = IntToHexSigned((UIntPtr)wordptr, 4) + ',' + IntToHexSigned((UIntPtr)memory[3], 2);
                                offset += 3;
                            }
                            break;

                        case 0xc9:
                            {
                                description = "high level procedure exit";
                                LastDisassembleData.OpCode = "leave";
                            }
                            break;

                        case 0xca:
                            {
                                description = "far return to calling procedure and pop 2 bytes from stack";
                                var wordptr = memory.ToIntPtr(1).ReadUInt16();
                                LastDisassembleData.OpCode = "ret";
                                LastDisassembleData.IsRet = true;

                                LastDisassembleData.ParameterValueType = ADisassemblerValueType.Value;
                                LastDisassembleData.ParameterValue = (UIntPtr)wordptr;
                                LastDisassembleData.Separators[LastDisassembleData.SeparatorCount] = 1;
                                LastDisassembleData.SeparatorCount += 1;

                                LastDisassembleData.Parameters = IntToHexSigned((UIntPtr)wordptr, 4);
                                offset += 2;
                            }
                            break;

                        case 0xcb:
                            {
                                description = "far return to calling procedure";
                                LastDisassembleData.OpCode = "ret";
                                LastDisassembleData.IsRet = true;
                            }
                            break;

                        case 0xcc:
                            {
                                //should not be shown if its being debugged using int 3'
                                description = "call to interrupt procedure-3:trap to debugger";
                                LastDisassembleData.OpCode = "int 3";
                            }
                            break;

                        case 0xcd:
                            {
                                description = "call to interrupt procedure";
                                LastDisassembleData.OpCode = "int";
                                LastDisassembleData.ParameterValueType = ADisassemblerValueType.Value;
                                LastDisassembleData.ParameterValue = (UIntPtr)memory[1];
                                LastDisassembleData.Separators[LastDisassembleData.SeparatorCount] = 1;
                                LastDisassembleData.SeparatorCount += 1;

                                LastDisassembleData.Parameters = IntToHexSigned((UIntPtr)memory[1], 2);
                                offset += 1;
                            }
                            break;

                        case 0xce:
                            {
                                description = "call to interrupt procedure-4:if overflow flag=1";
                                LastDisassembleData.OpCode = "into";
                            }
                            break;

                        case 0xcf:
                            {
                                description = "interrupt return";
                                if (_prefix2.Contains(0x66)) LastDisassembleData.OpCode = "iret";
                                else
                                {
                                    if (RexW)
                                        LastDisassembleData.OpCode = "iretq";
                                    else
                                        LastDisassembleData.OpCode = "iretd";
                                }
                            }
                            break;

                        case 0xd0:
                            {
                                switch (GetReg(memory[1]))
                                {
                                    case 0:
                                        {
                                            description = "rotate eight bits left once";
                                            LastDisassembleData.OpCode = "rol";
                                            LastDisassembleData.Parameters = ModRm(memory, _prefix2, 1, 2, ref last, 8) + '1';
                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                        }
                                        break;

                                    case 1:
                                        {
                                            description = "rotate eight bits right once";
                                            LastDisassembleData.OpCode = "ror";
                                            LastDisassembleData.Parameters = ModRm(memory, _prefix2, 1, 2, ref last, 8) + '1';
                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                        }
                                        break;


                                    case 2:
                                        {
                                            description = "rotate nine bits left once";
                                            LastDisassembleData.OpCode = "rcl";
                                            LastDisassembleData.Parameters = ModRm(memory, _prefix2, 1, 2, ref last, 8) + '1';
                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                        }
                                        break;

                                    case 3:
                                        {
                                            description = "rotate nine bits right once";
                                            LastDisassembleData.OpCode = "rcr";
                                            LastDisassembleData.Parameters = ModRm(memory, _prefix2, 1, 2, ref last, 8) + '1';
                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                        }
                                        break;

                                    case 4:
                                        {
                                            description = "multiply by 2, once";
                                            LastDisassembleData.OpCode = "shl";
                                            LastDisassembleData.Parameters = ModRm(memory, _prefix2, 1, 2, ref last, 8) + '1';
                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                        }
                                        break;

                                    case 5:
                                        {
                                            description = "unsigned divide by 2, once";
                                            LastDisassembleData.OpCode = "shr";
                                            LastDisassembleData.Parameters = ModRm(memory, _prefix2, 1, 2, ref last, 8) + '1';
                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                        }
                                        break;

                                    case 6:
                                        {
                                            description = "not defined by the intel documentation";
                                            LastDisassembleData.OpCode = "db";
                                            LastDisassembleData.Parameters = IntToHexSigned((UIntPtr)memory[0], 2) + ' ' + IntToHexSigned((UIntPtr)memory[1], 2);
                                        }
                                        break;

                                    case 7:
                                        {
                                            description = "signed divide by 2, once";
                                            LastDisassembleData.OpCode = "sar";
                                            LastDisassembleData.Parameters = ModRm(memory, _prefix2, 1, 2, ref last, 8) + '1';
                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                        }
                                        break;

                                }
                            }
                            break;

                        case 0xd1:
                            {
                                switch (GetReg(memory[1]))
                                {
                                    case 0:
                                        {
                                            if (_prefix2.Contains(0x66))
                                            {
                                                description = "rotate 16 bits left once";
                                                LastDisassembleData.OpCode = "rol";
                                                LastDisassembleData.Parameters = ModRm(memory, _prefix2, 1, 1, ref last, 16) + '1';
                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                            else
                                            {
                                                description = "rotate 32 bits left once";
                                                LastDisassembleData.OpCode = "rol";
                                                LastDisassembleData.Parameters = ModRm(memory, _prefix2, 1, 0, ref last) + '1';
                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                        }
                                        break;

                                    case 1:
                                        {
                                            if (_prefix2.Contains(0x66))
                                            {
                                                description = "rotate 16 bits right once";
                                                LastDisassembleData.OpCode = "ror";
                                                LastDisassembleData.Parameters = ModRm(memory, _prefix2, 1, 1, ref last, 16) + '1';
                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                            else
                                            {
                                                description = "rotate 32 bits right once";
                                                LastDisassembleData.OpCode = "ror";
                                                LastDisassembleData.Parameters = ModRm(memory, _prefix2, 1, 0, ref last) + '1';
                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                        }
                                        break;

                                    case 2:
                                        {
                                            if (_prefix2.Contains(0x66))
                                            {
                                                description = "rotate 17 bits left once";
                                                LastDisassembleData.OpCode = "rcl";
                                                LastDisassembleData.Parameters = ModRm(memory, _prefix2, 1, 1, ref last, 16) + '1';
                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                            else
                                            {
                                                description = "rotate 33 bits left once";
                                                LastDisassembleData.OpCode = "rcl";
                                                LastDisassembleData.Parameters = ModRm(memory, _prefix2, 1, 0, ref last) + '1';
                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                        }
                                        break;

                                    case 3:
                                        {
                                            if (_prefix2.Contains(0x66))
                                            {
                                                description = "rotate 17 bits right once";
                                                LastDisassembleData.OpCode = "rcr";
                                                LastDisassembleData.Parameters = ModRm(memory, _prefix2, 1, 1, ref last, 16) + '1';
                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                            else
                                            {
                                                description = "rotate 33 bits right once";
                                                LastDisassembleData.OpCode = "rcr";
                                                LastDisassembleData.Parameters = ModRm(memory, _prefix2, 1, 0, ref last) + '1';
                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                        }
                                        break;

                                    case 4:
                                        {
                                            if (_prefix2.Contains(0x66))
                                            {
                                                description = "multiply by 2, once";
                                                LastDisassembleData.OpCode = "shl";
                                                LastDisassembleData.Parameters = ModRm(memory, _prefix2, 1, 1, ref last, 16) + '1';
                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                            else
                                            {
                                                description = "multiply by 2, once";
                                                LastDisassembleData.OpCode = "shl";
                                                LastDisassembleData.Parameters = ModRm(memory, _prefix2, 1, 0, ref last) + '1';
                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                        }
                                        break;

                                    case 5:
                                        {
                                            if (_prefix2.Contains(0x66))
                                            {
                                                description = "unsigned divide by 2, once";
                                                LastDisassembleData.OpCode = "shr";
                                                LastDisassembleData.Parameters = ModRm(memory, _prefix2, 1, 1, ref last, 16) + '1';
                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                            else
                                            {
                                                description = "unsigned divide by 2, once";
                                                LastDisassembleData.OpCode = "shr";
                                                LastDisassembleData.Parameters = ModRm(memory, _prefix2, 1, 0, ref last) + '1';
                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                        }
                                        break;

                                    case 6:
                                        {
                                            description = "undefined by the intel documentation";
                                            LastDisassembleData.OpCode = "db";
                                            LastDisassembleData.Parameters = IntToHexSigned((UIntPtr)memory[0], 2);
                                        }
                                        break;

                                    case 7:
                                        {
                                            if (_prefix2.Contains(0x66))
                                            {
                                                description = "signed divide by 2, once";
                                                LastDisassembleData.OpCode = "sar";
                                                LastDisassembleData.Parameters = ModRm(memory, _prefix2, 1, 1, ref last, 16) + '1';
                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                            else
                                            {
                                                description = "signed divide by 2, once";
                                                LastDisassembleData.OpCode = "sar";
                                                LastDisassembleData.Parameters = ModRm(memory, _prefix2, 1, 0, ref last) + '1';
                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                        }
                                        break;

                                }
                            }
                            break;


                        case 0xd2:
                            {
                                switch (GetReg(memory[1]))
                                {
                                    case 0:
                                        {
                                            description = "rotate eight bits left cl times";
                                            LastDisassembleData.OpCode = "rol";
                                            LastDisassembleData.Parameters = ModRm(memory, _prefix2, 1, 2, ref last, 8) + _colorReg + "cl" + _endColor;
                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                        }
                                        break;

                                    case 1:
                                        {
                                            description = "rotate eight bits right cl times";
                                            LastDisassembleData.OpCode = "ror";
                                            LastDisassembleData.Parameters = ModRm(memory, _prefix2, 1, 2, ref last, 8) + _colorReg + "cl" + _endColor;
                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                        }
                                        break;

                                    case 2:
                                        {
                                            description = "rotate nine bits left cl times";
                                            LastDisassembleData.OpCode = "rcl";
                                            LastDisassembleData.Parameters = ModRm(memory, _prefix2, 1, 2, ref last, 8) + _colorReg + "cl" + _endColor;
                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                        }
                                        break;

                                    case 3:
                                        {
                                            description = "rotate nine bits right cl times";
                                            LastDisassembleData.OpCode = "rcr";
                                            LastDisassembleData.Parameters = ModRm(memory, _prefix2, 1, 2, ref last, 8) + _colorReg + "cl" + _endColor;
                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                        }
                                        break;

                                    case 4:
                                        {
                                            description = "multiply by 2, cl times";
                                            LastDisassembleData.OpCode = "shl";
                                            LastDisassembleData.Parameters = ModRm(memory, _prefix2, 1, 2, ref last, 8) + _colorReg + "cl" + _endColor;
                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                        }
                                        break;

                                    case 5:
                                        {
                                            description = "unsigned divide by 2, cl times";
                                            LastDisassembleData.OpCode = "shr";
                                            LastDisassembleData.Parameters = ModRm(memory, _prefix2, 1, 2, ref last, 8) + _colorReg + "cl" + _endColor;
                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                        }
                                        break;

                                    case 6:
                                        {
                                            description = "multiply by 2, cl times";
                                            LastDisassembleData.OpCode = "shl";
                                            LastDisassembleData.Parameters = ModRm(memory, _prefix2, 1, 2, ref last, 8) + _colorReg + "cl" + _endColor;
                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                        }
                                        break;

                                    case 7:
                                        {
                                            description = "signed divide by 2, cl times";
                                            LastDisassembleData.OpCode = "sar";
                                            LastDisassembleData.Parameters = ModRm(memory, _prefix2, 1, 2, ref last, 8) + _colorReg + "cl" + _endColor;
                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                        }
                                        break;


                                }
                            }
                            break;

                        case 0xd3:
                            {
                                switch (GetReg(memory[1]))
                                {
                                    case 0:
                                        {
                                            if (_prefix2.Contains(0x66))
                                            {
                                                description = "rotate 16 bits left cl times";
                                                LastDisassembleData.OpCode = "rol";
                                                LastDisassembleData.Parameters = ModRm(memory, _prefix2, 1, 1, ref last, 16) + _colorReg + "cl" + _endColor;
                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                            else
                                            {
                                                description = "rotate 32 bits left cl times";
                                                LastDisassembleData.OpCode = "rol";
                                                LastDisassembleData.Parameters = ModRm(memory, _prefix2, 1, 0, ref last) + _colorReg + "cl" + _endColor;
                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                        }
                                        break;

                                    case 1:
                                        {
                                            if (_prefix2.Contains(0x66))
                                            {
                                                description = "rotate 16 bits right cl times";
                                                LastDisassembleData.OpCode = "ror";
                                                LastDisassembleData.Parameters = ModRm(memory, _prefix2, 1, 1, ref last, 16) + _colorReg + "cl" + _endColor;
                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                            else
                                            {
                                                description = "rotate 32 bits right cl times";
                                                LastDisassembleData.OpCode = "ror";
                                                LastDisassembleData.Parameters = ModRm(memory, _prefix2, 1, 0, ref last) + _colorReg + "cl" + _endColor;
                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                        }
                                        break;

                                    case 2:
                                        {
                                            if (_prefix2.Contains(0x66))
                                            {
                                                description = "rotate 17 bits left cl times";
                                                LastDisassembleData.OpCode = "rcl";
                                                LastDisassembleData.Parameters = ModRm(memory, _prefix2, 1, 1, ref last, 16) + _colorReg + "cl" + _endColor;
                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                            else
                                            {
                                                description = "rotate 33 bits left cl times";
                                                LastDisassembleData.OpCode = "rcl";
                                                LastDisassembleData.Parameters = ModRm(memory, _prefix2, 1, 0, ref last) + _colorReg + "cl" + _endColor;
                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                        }
                                        break;

                                    case 3:
                                        {
                                            if (_prefix2.Contains(0x66))
                                            {
                                                description = "rotate 17 bits right cl times";
                                                LastDisassembleData.OpCode = "rcr";
                                                LastDisassembleData.Parameters = ModRm(memory, _prefix2, 1, 1, ref last, 16) + _colorReg + "cl" + _endColor;
                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                            else
                                            {
                                                description = "rotate 33 bits right cl times";
                                                LastDisassembleData.OpCode = "rcr";
                                                LastDisassembleData.Parameters = ModRm(memory, _prefix2, 1, 0, ref last) + _colorReg + "cl" + _endColor;
                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                        }
                                        break;

                                    case 4:
                                        {
                                            if (_prefix2.Contains(0x66))
                                            {
                                                description = "multiply by 2, cl times";
                                                LastDisassembleData.OpCode = "shl";
                                                LastDisassembleData.Parameters = ModRm(memory, _prefix2, 1, 1, ref last, 16) + _colorReg + "cl" + _endColor;
                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                            else
                                            {
                                                description = "multiply by 2, cl times";
                                                LastDisassembleData.OpCode = "shl";
                                                LastDisassembleData.Parameters = ModRm(memory, _prefix2, 1, 0, ref last) + _colorReg + "cl" + _endColor;
                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                        }
                                        break;

                                    case 5:
                                        {
                                            if (_prefix2.Contains(0x66))
                                            {
                                                description = "unsigned divide by 2, cl times";
                                                LastDisassembleData.OpCode = "shr";
                                                LastDisassembleData.Parameters = ModRm(memory, _prefix2, 1, 1, ref last, 16) + _colorReg + "cl" + _endColor;
                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                            else
                                            {
                                                description = "unsigned divide by 2, cl times";
                                                LastDisassembleData.OpCode = "shr";
                                                LastDisassembleData.Parameters = ModRm(memory, _prefix2, 1, 0, ref last) + _colorReg + "cl" + _endColor;
                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                        }
                                        break;

                                    case 7:
                                        {
                                            if (_prefix2.Contains(0x66))
                                            {
                                                description = "signed divide by 2, cl times";
                                                LastDisassembleData.OpCode = "sar";
                                                LastDisassembleData.Parameters = ModRm(memory, _prefix2, 1, 1, ref last, 16) + _colorReg + "cl" + _endColor;
                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                            else
                                            {
                                                description = "signed divide by 2, cl times";
                                                LastDisassembleData.OpCode = "sar";
                                                LastDisassembleData.Parameters = ModRm(memory, _prefix2, 1, 0, ref last) + _colorReg + "cl" + _endColor;
                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                        }
                                        break;

                                }
                            }
                            break;


                        case 0xd4:
                            {  // aam
                                offset += 1;
                                LastDisassembleData.OpCode = "aam";
                                description = "ascii adjust ax after multiply";

                                LastDisassembleData.ParameterValueType = ADisassemblerValueType.Value;
                                LastDisassembleData.ParameterValue = (UIntPtr)memory[1];
                                LastDisassembleData.Separators[LastDisassembleData.SeparatorCount] = 1;
                                LastDisassembleData.SeparatorCount += 1;

                                if (memory[1] != 0xa)
                                    LastDisassembleData.Parameters = IntToHexSigned((UIntPtr)memory[1], 2);
                            }
                            break;

                        case 0xd5:
                            {  // aad
                                offset += 1;
                                LastDisassembleData.OpCode = "aad";
                                description = "ascii adjust ax before division";
                                LastDisassembleData.ParameterValueType = ADisassemblerValueType.Value;
                                LastDisassembleData.ParameterValue = (UIntPtr)memory[1];
                                LastDisassembleData.Separators[LastDisassembleData.SeparatorCount] = 1;
                                LastDisassembleData.SeparatorCount += 1;

                                if (memory[1] != 0xa) LastDisassembleData.Parameters = IntToHexSigned((UIntPtr)memory[1], 2);
                            }
                            break;

                        case 0xd7:
                            {
                                description = "table look-up translation";
                                LastDisassembleData.OpCode = "xlatb";
                            }
                            break;

                        case 0xd8:
                            {
                                switch (GetReg(memory[1]))
                                {
                                    case 0:
                                        {
                                            //fadd
                                            description = "add";
                                            LastDisassembleData.OpCode = "fadd";
                                            last = 2;
                                            if (memory[1] >= 0xc0)
                                                LastDisassembleData.Parameters = "st(0),st(" + (memory[1] - 0xc0) + ')';
                                            else
                                                LastDisassembleData.Parameters = ModRm(memory, _prefix2, 1, 0, ref last, 32);

                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                        }
                                        break;

                                    case 1:
                                        {
                                            description = "multiply";
                                            last = 2;
                                            if (memory[1] >= 0xc8)
                                            {
                                                LastDisassembleData.OpCode = "fmul";
                                                LastDisassembleData.Parameters = "st(0),st(" + (memory[1] - 0xc8) + ')';
                                            }
                                            else
                                            {
                                                LastDisassembleData.OpCode = "fmul";
                                                LastDisassembleData.Parameters = ModRm(memory, _prefix2, 1, 0, ref last, 32);

                                            }
                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                        }
                                        break;


                                    case 2:
                                        {
                                            description = "compare real";
                                            last = 2;
                                            if (memory[1] >= 0xd0)
                                            {
                                                LastDisassembleData.OpCode = "fcom";
                                                LastDisassembleData.Parameters = "st(0),st(" + (memory[1] - 0xd0) + ')';
                                            }
                                            else
                                            {
                                                LastDisassembleData.OpCode = "fcom";
                                                LastDisassembleData.Parameters = ModRm(memory, _prefix2, 1, 0, ref last, 32);

                                            }
                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                        }
                                        break;

                                    case 3:
                                        {
                                            description = "compare real and pop register stack";
                                            last = 2;
                                            if (memory[1] >= 0xd8)
                                            {
                                                LastDisassembleData.OpCode = "fcomp";
                                                LastDisassembleData.Parameters = "st(0),st(" + (memory[1] - 0xd8) + ')';
                                            }
                                            else
                                            {
                                                LastDisassembleData.OpCode = "fcomp";
                                                LastDisassembleData.Parameters = ModRm(memory, _prefix2, 1, 0, ref last, 32);

                                            }
                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                        }
                                        break;

                                    case 4:
                                        {
                                            description = "substract";
                                            last = 2;
                                            if (memory[1] >= 0xe0)
                                            {
                                                LastDisassembleData.OpCode = "fsub";
                                                LastDisassembleData.Parameters = "st(0),st(" + (memory[1] - 0xe0) + ')';
                                            }
                                            else
                                            {
                                                LastDisassembleData.OpCode = "fsub";
                                                LastDisassembleData.Parameters = ModRm(memory, _prefix2, 1, 0, ref last, 32);

                                            }
                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                        }
                                        break;

                                    case 5:
                                        {
                                            description = "reverse substract";
                                            last = 2;
                                            if (memory[1] >= 0xe8)
                                            {
                                                LastDisassembleData.OpCode = "fsubr";
                                                LastDisassembleData.Parameters = "st(0),st(" + (memory[1] - 0xe8) + ')';
                                            }
                                            else
                                            {
                                                LastDisassembleData.OpCode = "fsubr";
                                                LastDisassembleData.Parameters = ModRm(memory, _prefix2, 1, 0, ref last, 32);

                                            }
                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                        }
                                        break;

                                    case 6:
                                        {
                                            description = "divide";
                                            last = 2;
                                            if (memory[1] >= 0xf0)
                                            {
                                                LastDisassembleData.OpCode = "fdiv";
                                                LastDisassembleData.Parameters = "st(0),st(" + (memory[1] - 0xf0) + ')';
                                            }
                                            else
                                            {
                                                LastDisassembleData.OpCode = "fdiv";
                                                LastDisassembleData.Parameters = ModRm(memory, _prefix2, 1, 0, ref last, 32);

                                            }
                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                        }
                                        break;

                                    case 7:
                                        {
                                            description = "reverse divide";
                                            last = 2;
                                            if (memory[1] >= 0xf8)
                                            {
                                                LastDisassembleData.OpCode = "fdivr";
                                                LastDisassembleData.Parameters = "st(0),st(" + (memory[1] - 0xf8) + ')';
                                            }
                                            else
                                            {
                                                LastDisassembleData.OpCode = "fdivr";
                                                LastDisassembleData.Parameters = ModRm(memory, _prefix2, 1, 0, ref last, 32);

                                            }
                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                        }
                                        break;
                                }

                            }
                            break;

                        case 0xd9:
                            {
                                LastDisassembleData.IsFloat = true;
                                if (AMathUtils.InRangeX(memory[1], 0x00, 0xbf))
                                {
                                    switch (GetReg(memory[1]))
                                    {
                                        case 0:
                                            {
                                                description = "load floating point value";
                                                LastDisassembleData.OpCode = "fld";
                                                LastDisassembleData.Parameters = ModRm(memory, _prefix2, 1, 0, ref last, 32);

                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                            break;

                                        case 2:
                                            {
                                                description = "store single";
                                                LastDisassembleData.OpCode = "fst";
                                                LastDisassembleData.Parameters = ModRm(memory, _prefix2, 1, 0, ref last, 32);

                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                            break;

                                        case 3:
                                            {
                                                description = "store single";
                                                LastDisassembleData.OpCode = "fstp";
                                                LastDisassembleData.Parameters = ModRm(memory, _prefix2, 1, 0, ref last, 32);

                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                            break;

                                        case 4:
                                            {
                                                description = "load fpu environment";
                                                LastDisassembleData.OpCode = "fldenv";
                                                LastDisassembleData.Parameters = ModRm(memory, _prefix2, 1, 0, ref last);

                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                            break;

                                        case 5:
                                            {
                                                description = "load control word";
                                                LastDisassembleData.OpCode = "fldcw";
                                                LastDisassembleData.Parameters = ModRm(memory, _prefix2, 1, 0, ref last);

                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                            break;

                                        case 6:
                                            {
                                                description = "store fpu environment";
                                                LastDisassembleData.OpCode = "fnstenv";
                                                LastDisassembleData.Parameters = ModRm(memory, _prefix2, 1, 0, ref last);

                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                            break;

                                        case 7:
                                            {
                                                description = "store control word";
                                                LastDisassembleData.OpCode = "fnstcw";
                                                LastDisassembleData.Parameters = ModRm(memory, _prefix2, 1, 0, ref last);

                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                            break;
                                    }
                                }
                                else if (AMathUtils.InRangeX(memory[1], 0xc0, 0xc7))
                                {
                                    description = "push st(i) onto the fpu register stack";
                                    LastDisassembleData.OpCode = "fld";
                                    LastDisassembleData.Parameters = "st(" + (memory[1] - 0xc0) + ')';
                                    offset += 1;
                                }
                                else if (AMathUtils.InRangeX(memory[1], 0xc8, 0xcf))
                                {
                                    description = "exchange register contents";
                                    LastDisassembleData.OpCode = "fxch";
                                    LastDisassembleData.Parameters = "st(" + (memory[1] - 0xc8) + ')';
                                    offset += 1;
                                }
                                else if (AMathUtils.InRangeX(memory[1], 0xd9, 0xdf))
                                {
                                    description = "exchange register contents";
                                    LastDisassembleData.OpCode = "fxch";
                                    LastDisassembleData.Parameters = "st(" + (memory[1] - 0xd9) + ')';
                                    offset += 1;
                                }
                                else
                                {
                                    switch (memory[1])
                                    {
                                        case 0xd0:
                                            {
                                                description = "no operation";
                                                LastDisassembleData.OpCode = "fnop";
                                                offset += 1;
                                            }
                                            break;

                                        case 0xe0:
                                            {
                                                description = "change sign";
                                                LastDisassembleData.OpCode = "fchs";
                                                offset += 1;
                                            }
                                            break;

                                        case 0xe1:
                                            {
                                                description = "absolute value";
                                                LastDisassembleData.OpCode = "fabs";
                                                offset += 1;
                                            }
                                            break;

                                        case 0xe4:
                                            {
                                                description = "test";
                                                LastDisassembleData.OpCode = "ftst";
                                                offset += 1;
                                            }
                                            break;

                                        case 0xe5:
                                            {
                                                description = "examine";
                                                LastDisassembleData.OpCode = "fxam";
                                                offset += 1;
                                            }
                                            break;



                                        case 0xe8:
                                            {
                                                description = "Push +1.0 onto the FPU register stack";
                                                LastDisassembleData.OpCode = "fld1";
                                                offset += 1;
                                            }
                                            break;

                                        case 0xe9:
                                            {
                                                description = "Push log2(10) onto the FPU register stack";
                                                LastDisassembleData.OpCode = "fldl2t";
                                                offset += 1;
                                            }
                                            break;

                                        case 0xea:
                                            {
                                                description = "Push log2(e) onto the FPU register stack";
                                                LastDisassembleData.OpCode = "fldl2e";
                                                offset += 1;
                                            }
                                            break;

                                        case 0xeb:
                                            {
                                                description = "Push \"pi\" onto the FPU register stackload constant";
                                                LastDisassembleData.OpCode = "fldpi";
                                                offset += 1;
                                            }
                                            break;

                                        case 0xec:
                                            {
                                                description = "Push log10(2) onto the FPU register stack";
                                                LastDisassembleData.OpCode = "fldlg2";
                                                offset += 1;
                                            }
                                            break;

                                        case 0xed:
                                            {
                                                description = "Push log e(2) onto the FPU register stack";
                                                LastDisassembleData.OpCode = "fldln2";
                                                offset += 1;
                                            }
                                            break;

                                        case 0xee:
                                            {
                                                description = "Push +0.0 onto the FPU register stack";
                                                LastDisassembleData.OpCode = "fldz";
                                                offset += 1;
                                            }
                                            break;


                                        case 0xf0:
                                            {
                                                description = "compute 2^x-1";
                                                LastDisassembleData.OpCode = "f2xm1";
                                                offset += 1;
                                            }
                                            break;

                                        case 0xf1:
                                            {
                                                description = "compute y*log(2)x";
                                                LastDisassembleData.OpCode = "fyl2x";
                                                offset += 1;
                                            }
                                            break;

                                        case 0xf2:
                                            {
                                                description = "partial tangent";
                                                LastDisassembleData.OpCode = "fptan";
                                                offset += 1;
                                            }
                                            break;

                                        case 0xf3:
                                            {
                                                description = "partial arctangent";
                                                LastDisassembleData.OpCode = "fpatan";
                                                offset += 1;
                                            }
                                            break;

                                        case 0xf4:
                                            {
                                                description = "extract exponent and significand";
                                                LastDisassembleData.OpCode = "fxtract";
                                                offset += 1;
                                            }
                                            break;

                                        case 0xf5:
                                            {
                                                description = "partial remainder";
                                                LastDisassembleData.OpCode = "fprem1";
                                                offset += 1;
                                            }
                                            break;

                                        case 0xf6:
                                            {
                                                description = "decrement stack-top pointer";
                                                LastDisassembleData.OpCode = "fdecstp";
                                                offset += 1;
                                            }
                                            break;

                                        case 0xf7:
                                            {
                                                description = "increment stack-top pointer";
                                                LastDisassembleData.OpCode = "fincstp";
                                                offset += 1;
                                            }
                                            break;

                                        case 0xf8:
                                            {
                                                description = "partial remainder";
                                                LastDisassembleData.OpCode = "fprem";
                                                offset += 1;
                                            }
                                            break;

                                        case 0xf9:
                                            {
                                                description = "compute y*log(2)(x+1)";
                                                LastDisassembleData.OpCode = "fyl2xp1";
                                                offset += 1;
                                            }
                                            break;

                                        case 0xfa:
                                            {
                                                description = "square root";
                                                LastDisassembleData.OpCode = "fsqrt";
                                                offset += 1;
                                            }
                                            break;

                                        case 0xfb:
                                            {
                                                description = "sine and cosine";
                                                LastDisassembleData.OpCode = "fsincos";
                                                offset += 1;
                                            }
                                            break;


                                        case 0xfc:
                                            {
                                                description = "round to integer";
                                                LastDisassembleData.OpCode = "frndint";
                                                offset += 1;
                                            }
                                            break;

                                        case 0xfd:
                                            {
                                                description = "scale";
                                                LastDisassembleData.OpCode = "fscale";
                                                offset += 1;
                                            }
                                            break;

                                        case 0xfe:
                                            {
                                                description = "sine";
                                                LastDisassembleData.OpCode = "fsin";
                                                offset += 1;
                                            }
                                            break;

                                        case 0xff:
                                            {
                                                description = "cosine";
                                                LastDisassembleData.OpCode = "fcos";
                                                offset += 1;
                                            }
                                            break;
                                    }
                                }
                            }
                            break;

                        case 0xda:
                            {
                                if (memory[1] < 0xbf)
                                {
                                    switch (GetReg(memory[1]))
                                    {
                                        case 0:
                                            {
                                                description = "add";
                                                LastDisassembleData.OpCode = "fiadd";
                                                LastDisassembleData.Parameters = ModRm(memory, _prefix2, 1, 0, ref last);

                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                            break;

                                        case 1:
                                            {
                                                description = "multiply";
                                                LastDisassembleData.OpCode = "fimul";
                                                LastDisassembleData.Parameters = ModRm(memory, _prefix2, 1, 0, ref last);

                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                            break;

                                        case 2:
                                            {
                                                description = "compare integer";
                                                LastDisassembleData.OpCode = "ficom";
                                                LastDisassembleData.Parameters = ModRm(memory, _prefix2, 1, 0, ref last);

                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                            break;

                                        case 3:
                                            {
                                                description = "compare integer";
                                                LastDisassembleData.OpCode = "ficomp";
                                                LastDisassembleData.Parameters = ModRm(memory, _prefix2, 1, 0, ref last);

                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                            break;

                                        case 4:
                                            {
                                                description = "subtract";
                                                LastDisassembleData.OpCode = "fisub";
                                                LastDisassembleData.Parameters = ModRm(memory, _prefix2, 1, 0, ref last);

                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                            break;

                                        case 5:
                                            {
                                                description = "reverse subtract";
                                                LastDisassembleData.OpCode = "fisubr";
                                                LastDisassembleData.Parameters = ModRm(memory, _prefix2, 1, 0, ref last);

                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                            break;


                                        case 6:
                                            {
                                                description = "divide";
                                                LastDisassembleData.OpCode = "fidiv";
                                                LastDisassembleData.Parameters = ModRm(memory, _prefix2, 1, 0, ref last, 32);

                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                            break;

                                        case 7:
                                            {
                                                description = "reverse divide";
                                                LastDisassembleData.OpCode = "fidivr";
                                                LastDisassembleData.Parameters = ModRm(memory, _prefix2, 1, 0, ref last);

                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                            break;
                                    }
                                }
                                else
                                {
                                    switch (GetReg(memory[1]))
                                    {
                                        case 0:
                                            {
                                                description = "floating-point: move if below";
                                                LastDisassembleData.OpCode = "fcmovb";
                                                LastDisassembleData.Parameters = "st(0),st(" + (memory[1] - 0xc0) + ')';
                                                offset += 1;
                                            }
                                            break;

                                        case 1:
                                            {
                                                description = "floating-point: move if equal";
                                                LastDisassembleData.OpCode = "fcmove";
                                                LastDisassembleData.Parameters = "st(0),st(" + (memory[1] - 0xc8) + ')';
                                                offset += 1;
                                            }
                                            break;

                                        case 2:
                                            {
                                                description = "floating-point: move if below or equal";
                                                LastDisassembleData.OpCode = "fcmovbe";
                                                LastDisassembleData.Parameters = "st(0),st(" + (memory[1] - 0xd0) + ')';
                                                offset += 1;
                                            }
                                            break;

                                        case 3:
                                            {
                                                description = "floating-point: move if unordered";
                                                LastDisassembleData.OpCode = "fcmovu";
                                                LastDisassembleData.Parameters = "st(0),st(" + (memory[1] - 0xd8) + ')';
                                                offset += 1;
                                            }
                                            break;

                                        case 5:
                                            {
                                                switch (memory[1])
                                                {
                                                    case 0xe9:
                                                        {
                                                            description = "unordered compare real";
                                                            LastDisassembleData.OpCode = "fucompp";
                                                            offset += 1;
                                                        }
                                                        break;
                                                }
                                            }
                                            break;
                                    }
                                }
                            }
                            break;

                        case 0xdb:
                            {
                                if (AMathUtils.InRangeX(memory[1], 0x00, 0xbf))
                                {
                                    switch (GetReg(memory[1]))
                                    {
                                        case 0:
                                            {
                                                description = "load integer";
                                                LastDisassembleData.OpCode = "fild";
                                                LastDisassembleData.Parameters = ModRm(memory, _prefix2, 1, 0, ref last, 32);

                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                            break;

                                        case 1:
                                            {
                                                description = "store integer with truncation";
                                                LastDisassembleData.OpCode = "fisttp";
                                                LastDisassembleData.Parameters = ModRm(memory, _prefix2, 1, 0, ref last, 32);

                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                            break;

                                        case 2:
                                            {
                                                description = "store integer";
                                                LastDisassembleData.OpCode = "fist";
                                                LastDisassembleData.Parameters = ModRm(memory, _prefix2, 1, 0, ref last, 32);

                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                            break;

                                        case 3:
                                            {
                                                description = "store integer";
                                                LastDisassembleData.OpCode = "fistp";
                                                LastDisassembleData.Parameters = ModRm(memory, _prefix2, 1, 0, ref last, 32);

                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                            break;

                                        case 5:
                                            {
                                                LastDisassembleData.IsFloat = true;
                                                description = "load floating point value";
                                                LastDisassembleData.OpCode = "fld";
                                                LastDisassembleData.Parameters = ModRm(memory, _prefix2, 1, 0, ref last, 80);

                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                            break;

                                        case 7:
                                            {
                                                LastDisassembleData.IsFloat = true;
                                                description = "store extended";
                                                LastDisassembleData.OpCode = "fstp";
                                                LastDisassembleData.Parameters = ModRm(memory, _prefix2, 1, 0, ref last, 80);

                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                            break;

                                    }
                                }
                                else if (AMathUtils.InRangeX(memory[1], 0xc0, 0xc7))
                                {
                                    description = "floating-point: move if not below";
                                    LastDisassembleData.OpCode = "fcmovnb";
                                    LastDisassembleData.Parameters = "st(0),st(" + (memory[1] - 0xc0) + ')';
                                    offset += 1;
                                }
                                else if (AMathUtils.InRangeX(memory[1], 0xc8, 0xcf))
                                {
                                    description = "floating-point: move if not equal";
                                    LastDisassembleData.OpCode = "fcmovne";
                                    LastDisassembleData.Parameters = "st(0),st(" + (memory[1] - 0xc8) + ')';
                                    offset += 1;
                                }
                                else if (AMathUtils.InRangeX(memory[1], 0xd0, 0xd7))
                                {
                                    description = "floating-point: move if not below or equal";
                                    LastDisassembleData.OpCode = "fcmovnbe";
                                    LastDisassembleData.Parameters = "st(0),st(" + (memory[1] - 0xd0) + ')';
                                    offset += 1;
                                }
                                else if (AMathUtils.InRangeX(memory[1], 0xd8, 0xdf))
                                {
                                    description = "floating-point: move if not unordered";
                                    LastDisassembleData.OpCode = "fcmovnu";
                                    LastDisassembleData.Parameters = "st(0),st(" + (memory[1] - 0xd8) + ')';
                                    offset += 1;
                                }
                                else
                                {
                                    switch (memory[1])
                                    {
                                        case 0xe2:
                                            {
                                                description = "clear exceptions";
                                                LastDisassembleData.OpCode = "fnclex";
                                                offset += 1;
                                            }
                                            break;

                                        case 0xe3:
                                            {
                                                description = "initialize floating-point unit";
                                                LastDisassembleData.OpCode = "fninit";
                                                offset += 1;
                                            }
                                            break;

                                        case 0xe8:
                                        case 0xe9:
                                        case 0xea:
                                        case 0xeb:
                                        case 0xec:
                                        case 0xed:
                                        case 0xee:
                                        case 0xef:
                                            {
                                                description = "floating-point: compare real and set eflags";
                                                LastDisassembleData.OpCode = "fucomi";
                                                LastDisassembleData.Parameters = "st(0),st(" + (memory[1] - 0xe8) + ')';
                                                offset += 1;
                                            }
                                            break;

                                        case 0xf0:
                                        case 0xf1:
                                        case 0xf2:
                                        case 0xf3:
                                        case 0xf4:
                                        case 0xf5:
                                        case 0xf6:
                                        case 0xf7:
                                            {
                                                description = "floating-point: compare real and set eflags";
                                                LastDisassembleData.OpCode = "fcomi";
                                                LastDisassembleData.Parameters = "st(0),st(" + (memory[1] - 0xf0) + ')';
                                                offset += 1;
                                            }
                                            break;
                                    }
                                }
                            }
                            break;

                        case 0xdc:
                            {
                                LastDisassembleData.IsFloat = true;
                                switch (GetReg(memory[1]))
                                {
                                    case 0:
                                        {
                                            //fadd
                                            description = "add";
                                            last = 2;
                                            if (memory[1] >= 0xc0)
                                            {
                                                LastDisassembleData.OpCode = "fadd";
                                                LastDisassembleData.Parameters = "st(" + (memory[1] - 0xc0) + "),st(0)";
                                            }
                                            else
                                            {
                                                LastDisassembleData.OpCode = "fadd";
                                                LastDisassembleData.Parameters = ModRm(memory, _prefix2, 1, 0, ref last, 64);

                                            }
                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                        }
                                        break;

                                    case 1:
                                        {
                                            description = "multiply";
                                            last = 2;
                                            if (memory[1] >= 0xc8)
                                            {
                                                LastDisassembleData.OpCode = "fmul";
                                                LastDisassembleData.Parameters = "st(" + (memory[1] - 0xc8) + "),st(0)";
                                            }
                                            else
                                            {
                                                LastDisassembleData.OpCode = "fmul";
                                                LastDisassembleData.Parameters = ModRm(memory, _prefix2, 1, 0, ref last, 64);

                                            }
                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                        }
                                        break;

                                    case 2:
                                        {
                                            description = "compare real";
                                            last = 2;
                                            LastDisassembleData.OpCode = "fcom";
                                            LastDisassembleData.Parameters = ModRm(memory, _prefix2, 1, 0, ref last, 64);

                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                        }
                                        break;

                                    case 3:
                                        {
                                            description = "compare real";
                                            last = 2;
                                            LastDisassembleData.OpCode = "fcomp";
                                            LastDisassembleData.Parameters = ModRm(memory, _prefix2, 1, 0, ref last, 64);

                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                        }
                                        break;

                                    case 4:
                                        {
                                            description = "subtract";
                                            last = 2;
                                            if (memory[1] >= 0xe0)
                                            {
                                                LastDisassembleData.OpCode = "fsubr";
                                                LastDisassembleData.Parameters = "st(" + (memory[1] - 0xe0) + "),st(0)";
                                            }
                                            else
                                            {
                                                LastDisassembleData.OpCode = "fsub";
                                                LastDisassembleData.Parameters = ModRm(memory, _prefix2, 1, 0, ref last, 64);

                                            }
                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                        }
                                        break;

                                    case 5:
                                        {
                                            description = "reverse subtract";
                                            last = 2;
                                            if (memory[1] >= 0xe8)
                                            {
                                                LastDisassembleData.OpCode = "fsub";
                                                LastDisassembleData.Parameters = "st(" + (memory[1] - 0xe8) + "),st(0)";
                                            }
                                            else
                                            {
                                                LastDisassembleData.OpCode = "fsubr";
                                                LastDisassembleData.Parameters = ModRm(memory, _prefix2, 1, 0, ref last, 64);

                                            }


                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                        }
                                        break;


                                    case 6:
                                        {
                                            description = "divide";
                                            last = 2;
                                            if (memory[1] >= 0xf0)
                                            {
                                                LastDisassembleData.OpCode = "fdivr";
                                                LastDisassembleData.Parameters = "st(" + (memory[1] - 0xf0) + "),st(0)";
                                            }
                                            else
                                            {
                                                LastDisassembleData.OpCode = "fdiv";
                                                LastDisassembleData.Parameters = ModRm(memory, _prefix2, 1, 0, ref last, 64);

                                            }
                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                        }
                                        break;

                                    case 7:
                                        {
                                            description = "reverse divide";
                                            last = 2;
                                            if (memory[1] >= 0xf8)
                                            {
                                                LastDisassembleData.OpCode = "fdiv";
                                                LastDisassembleData.Parameters = "st(" + (memory[1] - 0xf8) + "),st(0)";
                                            }
                                            else
                                            {
                                                LastDisassembleData.OpCode = "fdivr";
                                                LastDisassembleData.Parameters = ModRm(memory, _prefix2, 1, 0, ref last, 64);

                                            }
                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                        }
                                        break;
                                }
                            }
                            break;

                        case 0xdd:
                            {
                                if (AMathUtils.InRangeX(memory[1], 0x00, 0xbf))
                                {
                                    switch (GetReg(memory[1]))
                                    {
                                        case 0:
                                            {
                                                LastDisassembleData.IsFloat = true;
                                                description = "load floating point value";
                                                LastDisassembleData.OpCode = "fld";
                                                LastDisassembleData.Parameters = ModRm(memory, _prefix2, 1, 0, ref last, 64);

                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                            break;

                                        case 1:
                                            {
                                                description = "store integer with truncation";
                                                LastDisassembleData.OpCode = "fisttp";
                                                LastDisassembleData.Parameters = ModRm(memory, _prefix2, 1, 0, ref last, 64);

                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                            break;

                                        case 2:
                                            {
                                                LastDisassembleData.IsFloat = true;
                                                description = "store double";
                                                LastDisassembleData.OpCode = "fst";
                                                LastDisassembleData.Parameters = ModRm(memory, _prefix2, 1, 0, ref last, 64);

                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                            break;

                                        case 3:
                                            {
                                                LastDisassembleData.IsFloat = true;
                                                description = "store double";
                                                LastDisassembleData.OpCode = "fstp";
                                                LastDisassembleData.Parameters = ModRm(memory, _prefix2, 1, 0, ref last, 64);

                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                            break;

                                        case 4:
                                            {
                                                description = "restore fpu state";
                                                LastDisassembleData.OpCode = "frstor";
                                                LastDisassembleData.Parameters = ModRm(memory, _prefix2, 1, 0, ref last);

                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                            break;

                                        case 6:
                                            {
                                                description = "store fpu state";
                                                LastDisassembleData.OpCode = "fnsave";
                                                LastDisassembleData.Parameters = ModRm(memory, _prefix2, 1, 0, ref last);

                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                            break;

                                        case 7:
                                            {
                                                description = "store status word";
                                                LastDisassembleData.OpCode = "fnstsw";
                                                LastDisassembleData.Parameters = ModRm(memory, _prefix2, 1, 0, ref last);

                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                            break;

                                    }
                                }
                                else if (AMathUtils.InRangeX(memory[1], 0xc0, 0xc7))
                                {
                                    description = "free floating-point register";
                                    LastDisassembleData.OpCode = "ffree";
                                    LastDisassembleData.Parameters = "st(" + (memory[1] - 0xc0) + ')';
                                    offset += 1;
                                }
                                else if (AMathUtils.InRangeX(memory[1], 0xd0, 0xd7))
                                {
                                    description = "store real";
                                    LastDisassembleData.OpCode = "fst";
                                    LastDisassembleData.Parameters = "st(" + (memory[1] - 0xd0) + ')';
                                    offset += 1;
                                }
                                else if (AMathUtils.InRangeX(memory[1], 0xd8, 0xdf))
                                {
                                    description = "store real";
                                    LastDisassembleData.OpCode = "fstp";
                                    LastDisassembleData.Parameters = "st(" + (memory[1] - 0xd8) + ')';
                                    offset += 1;
                                }
                                else if (AMathUtils.InRangeX(memory[1], 0xe0, 0xe7))
                                {
                                    description = "unordered compare real";
                                    LastDisassembleData.OpCode = "fucom";
                                    LastDisassembleData.Parameters = "st(" + (memory[1] - 0xe0) + ')';
                                    offset += 1;
                                }
                                else if (AMathUtils.InRangeX(memory[1], 0xe8, 0xef))
                                {
                                    description = "unordered compare real";
                                    LastDisassembleData.OpCode = "fucomp";
                                    LastDisassembleData.Parameters = "st(" + (memory[1] - 0xe8) + ')';
                                    offset += 1;
                                }
                                else
                                {
                                    LastDisassembleData.OpCode = "db";
                                    LastDisassembleData.Parameters = IntToHexSigned((UIntPtr)memory[0], 2);
                                }
                            }
                            break;

                        case 0xde:
                            {
                                switch (GetReg(memory[1]))
                                {
                                    case 0:
                                        {
                                            //faddp
                                            description = "add and pop";
                                            last = 2;
                                            if (memory[1] == 0xc1) LastDisassembleData.OpCode = "faddp";
                                            else
                                            if (memory[1] >= 0xc0)
                                            {
                                                LastDisassembleData.OpCode = "faddp";
                                                LastDisassembleData.Parameters = "st(" + (memory[1] - 0xc0) + "),st(0)";
                                            }
                                            else
                                            {
                                                description = "add";
                                                LastDisassembleData.OpCode = "fiadd";
                                                LastDisassembleData.Parameters = ModRm(memory, _prefix2, 1, 0, ref last);

                                            }
                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                        }
                                        break;

                                    case 1:
                                        {
                                            description = "multiply";
                                            last = 2;
                                            if (memory[1] >= 0xc8)
                                            {
                                                LastDisassembleData.OpCode = "fmulp";
                                                LastDisassembleData.Parameters = "st(" + (memory[1] - 0xc8) + "),st(0)";
                                            }
                                            else
                                            {
                                                LastDisassembleData.OpCode = "fimul";
                                                LastDisassembleData.Parameters = ModRm(memory, _prefix2, 1, 0, ref last);

                                            }

                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                        }
                                        break;

                                    case 2:
                                        {
                                            description = "compare integer";
                                            last = 2;
                                            LastDisassembleData.OpCode = "ficom";
                                            LastDisassembleData.Parameters = ModRm(memory, _prefix2, 1, 0, ref last);
                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                        }
                                        break;


                                    case 3:
                                        {
                                            if (memory[1] < 0xc0)
                                            {
                                                description = "compare integer";
                                                LastDisassembleData.OpCode = "ficomp";
                                                LastDisassembleData.Parameters = ModRm(memory, _prefix2, 1, 0, ref last);

                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }

                                            if (memory[1] == 0xd9)
                                            {
                                                description = "compare real and pop register stack twice";
                                                LastDisassembleData.OpCode = "fcompp";
                                                offset += 1;
                                            }
                                        }
                                        break;

                                    case 4:
                                        {
                                            description = "subtract";
                                            last = 2;
                                            if (memory[1] >= 0xe0)
                                            {
                                                LastDisassembleData.OpCode = "fsubrp";
                                                LastDisassembleData.Parameters = "st(" + (memory[1] - 0xe0) + "),st(0)";
                                            }
                                            else
                                            {
                                                LastDisassembleData.OpCode = "fisub";
                                                LastDisassembleData.Parameters = ModRm(memory, _prefix2, 1, 0, ref last);

                                            }
                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                        }
                                        break;


                                    case 5:
                                        {
                                            description = "reverse divide";
                                            last = 2;
                                            if (memory[1] >= 0xe8)
                                            {
                                                description = "subtract and pop from stack";
                                                LastDisassembleData.OpCode = "fsubp";
                                                LastDisassembleData.Parameters = "st(" + (memory[1] - 0xe8) + "),st(0)";
                                            }
                                            else
                                            {
                                                LastDisassembleData.OpCode = "fisubr";
                                                LastDisassembleData.Parameters = ModRm(memory, _prefix2, 1, 0, ref last);

                                            }

                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                        }
                                        break;


                                    case 6:
                                        {
                                            description = "reverse divide";
                                            last = 2;
                                            if (memory[1] >= 0xf0)
                                            {
                                                LastDisassembleData.OpCode = "fdivrp";
                                                LastDisassembleData.Parameters = "st(" + (memory[1] - 0xf0) + "),st(0)";
                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                            else
                                            {
                                                description = "divide";
                                                LastDisassembleData.OpCode = "fidiv";
                                                LastDisassembleData.Parameters = ModRm(memory, _prefix2, 1, 1, ref last, 16);

                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                        }
                                        break;

                                    case 7:
                                        {
                                            description = "divide";
                                            last = 2;
                                            if (memory[1] >= 0xf8)
                                            {
                                                LastDisassembleData.OpCode = "fdivp";
                                                LastDisassembleData.Parameters = "st(" + (memory[1] - 0xf8) + "),st(0)";
                                            }
                                            else
                                            {
                                                LastDisassembleData.OpCode = "fdivr";
                                                LastDisassembleData.Parameters = ModRm(memory, _prefix2, 1, 0, ref last);

                                            }
                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                        }
                                        break;

                                }
                            }
                            break;

                        case 0xdf:
                            {
                                if (AMathUtils.InRangeX(memory[1], 0xc0, 0xc7))
                                {
                                    description = "free floating-point register and pop (might not work)";
                                    LastDisassembleData.OpCode = "ffreep";
                                    LastDisassembleData.Parameters = "st(" + (memory[1] - 0xc0) + ')';
                                    offset += 1;
                                }
                                else
                                    switch (GetReg(memory[1]))
                                    {
                                        case 0:
                                            {
                                                description = "load integer";
                                                LastDisassembleData.OpCode = "fild";
                                                LastDisassembleData.Parameters = ModRm(memory, _prefix2, 1, 0, ref last, 16);

                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                            break;

                                        case 1:
                                            {
                                                description = "store integer with truncation";
                                                LastDisassembleData.OpCode = "fisttp";
                                                LastDisassembleData.Parameters = ModRm(memory, _prefix2, 1, 0, ref last, 16);

                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                            break;

                                        case 2:
                                            {
                                                description = "store integer";
                                                LastDisassembleData.OpCode = "fist";
                                                LastDisassembleData.Parameters = ModRm(memory, _prefix2, 1, 0, ref last, 16);

                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                            break;

                                        case 3:
                                            {
                                                description = "store integer";
                                                LastDisassembleData.OpCode = "fistp";
                                                LastDisassembleData.Parameters = ModRm(memory, _prefix2, 1, 0, ref last, 16);

                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                            break;

                                        case 4:
                                            {
                                                description = "load binary coded decimal";
                                                last = 2;
                                                if (memory[1] >= 0xe0)
                                                {
                                                    LastDisassembleData.OpCode = "fnstsw";
                                                    LastDisassembleData.Parameters = _colorReg + "ax" + _endColor;
                                                }
                                                else
                                                {
                                                    LastDisassembleData.OpCode = "fbld";
                                                    LastDisassembleData.Parameters = ModRm(memory, _prefix2, 1, 0, ref last, 80);

                                                }
                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                            break;

                                        case 5:
                                            {
                                                if (memory[1] < 0xc0)
                                                {
                                                    description = "load integer";
                                                    LastDisassembleData.OpCode = "fild";
                                                    LastDisassembleData.Parameters = ModRm(memory, _prefix2, 1, 0, ref last, 64);

                                                    offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                }

                                                if (memory[1] >= 0xe8)
                                                {
                                                    description = "compare real and set eflags";
                                                    LastDisassembleData.OpCode = "fucomip";
                                                    LastDisassembleData.Parameters = "st(0),st(" + (memory[1] - 0xe8) + ')';
                                                    offset += 1;
                                                }
                                            }
                                            break;

                                        case 6:
                                            {
                                                if (memory[1] >= 0xf0)
                                                {
                                                    description = "compare real and set eflags";
                                                    LastDisassembleData.OpCode = "fcomip";
                                                    LastDisassembleData.Parameters = "st(0),st(" + (memory[1] - 0xf0) + ')';
                                                    offset += 1;
                                                }
                                                else
                                                {
                                                    description = "store bcd integer and pop";
                                                    LastDisassembleData.OpCode = "fbstp";
                                                    LastDisassembleData.Parameters = ModRm(memory, _prefix2, 1, 0, ref last, 80);

                                                    offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                }
                                            }
                                            break;

                                        case 7:
                                            {
                                                description = "store integer";
                                                LastDisassembleData.OpCode = "fistp";
                                                LastDisassembleData.Parameters = ModRm(memory, _prefix2, 1, 0, ref last, 64);

                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                            break;

                                        default:
                                            {
                                                LastDisassembleData.OpCode = "db";
                                                LastDisassembleData.Parameters = IntToHexSigned((UIntPtr)memory[0], 2);
                                            }
                                            break;
                                    }

                            }
                            break;

                        case 0xe0:
                            {
                                description = "loop according to ecx counter";
                                LastDisassembleData.IsJump = true;
                                LastDisassembleData.IsConditionalJump = true;
                                //if (context != nil)
                                //lastdisassembledata.willjumpaccordingtocontext = (context->eflags & eflags_zf) == 0;

                                LastDisassembleData.OpCode = "loopne";

                                offset += 1;

                                LastDisassembleData.ParameterValueType = ADisassemblerValueType.Address;
                                if (Is64Bit)
                                    LastDisassembleData.ParameterValue = (UIntPtr)(offset.ToUInt64() + (UInt64)(SByte)memory[1]);
                                else
                                    LastDisassembleData.ParameterValue = (UIntPtr)(UInt32)(offset.ToUInt64() + (UInt64)(SByte)memory[1]);

                                LastDisassembleData.Parameters = IntToHexSigned(LastDisassembleData.ParameterValue, 8);

                                LastDisassembleData.Separators[LastDisassembleData.SeparatorCount] = 1;
                                LastDisassembleData.SeparatorCount += 1;
                            }
                            break;

                        case 0xe1:
                            {
                                description = "loop according to ecx counter";
                                LastDisassembleData.IsJump = true;
                                LastDisassembleData.IsConditionalJump = true;
                                //if (context != nil)
                                //lastdisassembledata.willjumpaccordingtocontext = (context->eflags & eflags_zf) != 0;

                                LastDisassembleData.OpCode = "loope";
                                offset += 1;

                                LastDisassembleData.ParameterValueType = ADisassemblerValueType.Address;
                                if (Is64Bit)
                                    LastDisassembleData.ParameterValue = (UIntPtr)(offset.ToUInt64() + (UInt64)(SByte)memory[1]);
                                else
                                    LastDisassembleData.ParameterValue = (UIntPtr)(UInt32)(offset.ToUInt64() + (UInt64)(SByte)memory[1]);

                                LastDisassembleData.Parameters = IntToHexSigned(LastDisassembleData.ParameterValue, 8);

                                LastDisassembleData.Separators[LastDisassembleData.SeparatorCount] = 1;
                                LastDisassembleData.SeparatorCount += 1;
                            }
                            break;

                        case 0xe2:
                            {
                                description = "loop according to ecx counting";
                                LastDisassembleData.OpCode = "loop";
                                // todo readd me
                                //if context<>nil then
                                //lastdisassembledata.willJumpAccordingToContext:=context^.{$ifdef CPU64}RCX{$else}ECX{$endif}<>0;

                                LastDisassembleData.IsJump = true;
                                offset += 1;

                                LastDisassembleData.ParameterValueType = ADisassemblerValueType.Address;
                                if (Is64Bit)
                                    LastDisassembleData.ParameterValue = (UIntPtr)(offset.ToUInt64() + (UInt64)(SByte)memory[1]);
                                else
                                    LastDisassembleData.ParameterValue = (UIntPtr)(UInt32)(offset.ToUInt64() + (UInt64)(SByte)memory[1]);

                                LastDisassembleData.Parameters = IntToHexSigned(LastDisassembleData.ParameterValue, 8);

                                LastDisassembleData.Separators[LastDisassembleData.SeparatorCount] = 1;
                                LastDisassembleData.SeparatorCount += 1;
                            }
                            break;

                        case 0xe3:
                            {
                                description = "jump short if cx=0";
                                LastDisassembleData.IsJump = true;
                                LastDisassembleData.IsConditionalJump = true;

                                if (_prefix2.Contains(0x66))
                                {
                                    LastDisassembleData.OpCode = "jcxz";
                                    // todo readd me
                                    //if context<>nil then
                                    //lastdisassembledata.willJumpAccordingToContext:=((context^.{$ifdef CPU64}RCX{$else}ECX{$endif}) and $ffff)=0;

                                }
                                else
                                {
                                    LastDisassembleData.OpCode = "jecxz";
                                    // todo readd me
                                    //if context<>nil then
                                    //lastdisassembledata.willJumpAccordingToContext:=context^.{$ifdef CPU64}RCX{$else}ECX{$endif}=0;

                                }
                                offset += 1;

                                LastDisassembleData.ParameterValueType = ADisassemblerValueType.Address;



                                if (Is64Bit)
                                    LastDisassembleData.ParameterValue = (UIntPtr)(offset.ToUInt64() + (UInt64)(SByte)memory[1]);
                                else
                                    LastDisassembleData.ParameterValue = (UIntPtr)(UInt32)(offset.ToUInt64() + (UInt64)(SByte)memory[1]);

                                LastDisassembleData.Parameters = IntToHexSigned(LastDisassembleData.ParameterValue, 8);

                                LastDisassembleData.Separators[LastDisassembleData.SeparatorCount] = 1;
                                LastDisassembleData.SeparatorCount += 1;
                            }
                            break;

                        case 0xe4:
                            {
                                description = "input from port";
                                LastDisassembleData.OpCode = "in";
                                LastDisassembleData.ParameterValueType = ADisassemblerValueType.Value;
                                LastDisassembleData.ParameterValue = (UIntPtr)memory[1];
                                LastDisassembleData.Separators[LastDisassembleData.SeparatorCount] = 1;
                                LastDisassembleData.SeparatorCount += 1;

                                LastDisassembleData.Parameters = _colorReg + "al" + _endColor + ',' + IntToHexSigned((UIntPtr)memory[1], 2);
                                offset += 1;

                            }
                            break;

                        case 0xe5:
                            {
                                description = "input from port";
                                LastDisassembleData.OpCode = "in";

                                LastDisassembleData.ParameterValueType = ADisassemblerValueType.Value;
                                LastDisassembleData.ParameterValue = (UIntPtr)memory[1];
                                LastDisassembleData.Separators[LastDisassembleData.SeparatorCount] = 1;
                                LastDisassembleData.SeparatorCount += 1;


                                if (_prefix2.Contains(0x66)) LastDisassembleData.Parameters = _colorReg + "ax" + _endColor + ',' + IntToHexSigned((UIntPtr)memory[1], 2);
                                else LastDisassembleData.Parameters = _colorReg + "eax" + _endColor + ',' + IntToHexSigned((UIntPtr)memory[1], 2);
                                offset += 1;

                            }
                            break;

                        case 0xe6:
                            {
                                description = "output to port";
                                LastDisassembleData.OpCode = "out";
                                LastDisassembleData.Parameters = IntToHexSigned((UIntPtr)memory[1], 2) + ',' + _colorReg + "al" + _endColor;
                                offset += 1;

                                LastDisassembleData.ParameterValueType = ADisassemblerValueType.Value;
                                LastDisassembleData.ParameterValue = (UIntPtr)memory[1];
                                LastDisassembleData.Separators[LastDisassembleData.SeparatorCount] = 1;
                                LastDisassembleData.SeparatorCount += 1;
                            }
                            break;

                        case 0xe7:
                            {
                                description = "output toport";
                                LastDisassembleData.OpCode = "out";
                                if (_prefix2.Contains(0x66))
                                    LastDisassembleData.Parameters = IntToHexSigned((UIntPtr)memory[1], 2) + ',' + _colorReg + "ax" + _endColor;
                                else
                                    LastDisassembleData.Parameters = IntToHexSigned((UIntPtr)memory[1], 2) + ',' + _colorReg + "eax" + _endColor;

                                offset += 1;

                                LastDisassembleData.ParameterValueType = ADisassemblerValueType.Value;
                                LastDisassembleData.ParameterValue = (UIntPtr)memory[1];
                                LastDisassembleData.Separators[LastDisassembleData.SeparatorCount] = 1;
                                LastDisassembleData.SeparatorCount += 1;
                            }
                            break;

                        case 0xe8:
                            {
                                //call
                                //this time no $66 prefix because it will only run in win32
                                description = "call procedure";
                                LastDisassembleData.OpCode = "call";
                                LastDisassembleData.IsJump = true;
                                LastDisassembleData.IsCall = true;

                                if (MarkIpRelativeInstructions)
                                {
                                    LastDisassembleData.RipRelative = 1;
                                    _ripRelative = true;
                                }
                                offset += 4;
                                LastDisassembleData.ParameterValueType = ADisassemblerValueType.Address;

                                if (Is64Bit)
                                    LastDisassembleData.ParameterValue = (UIntPtr)(offset.ToUInt64() + (UInt64)memory.ReadInt32(1));
                                else
                                    LastDisassembleData.ParameterValue = (UIntPtr)(UInt32)(offset.ToUInt64() + (UInt64)memory.ReadInt32(1));

                                LastDisassembleData.Parameters = IntToHexSigned(LastDisassembleData.ParameterValue, 8);

                                LastDisassembleData.Separators[LastDisassembleData.SeparatorCount] = 1;
                                LastDisassembleData.SeparatorCount += 1;

                            }
                            break;

                        case 0xe9:
                            {
                                description = "jump near";
                                LastDisassembleData.IsJump = true;

                                if (_prefix2.Contains(0x66))
                                {
                                    LastDisassembleData.OpCode = "jmp";

                                    offset += 2;
                                    LastDisassembleData.ParameterValueType = ADisassemblerValueType.Address;
                                    LastDisassembleData.ParameterValue = (UIntPtr)(UInt32)(offset.ToUInt64() + (UInt64)memory.ReadInt16(1));
                                    LastDisassembleData.Parameters = IntToHexSigned(LastDisassembleData.ParameterValue, 8);
                                }
                                else
                                {
                                    LastDisassembleData.OpCode = "jmp";

                                    if (MarkIpRelativeInstructions)
                                    {
                                        LastDisassembleData.RipRelative = 1;
                                        _ripRelative = true;
                                    }

                                    offset += 4;
                                    LastDisassembleData.ParameterValueType = ADisassemblerValueType.Address;

                                    if (Is64Bit)
                                        LastDisassembleData.ParameterValue = (UIntPtr)(offset.ToUInt64() + (UInt16)memory.ReadInt32(1));
                                    else
                                        LastDisassembleData.ParameterValue = (UIntPtr)(UInt32)(offset.ToUInt64() + (UInt16)memory.ReadInt32(1));

                                    LastDisassembleData.Parameters = IntToHexSigned(LastDisassembleData.ParameterValue, 8);
                                }

                                LastDisassembleData.Separators[LastDisassembleData.SeparatorCount] = 1;
                                LastDisassembleData.SeparatorCount += 1;

                            }
                            break;

                        case 0xea:
                            {
                                description = "jump far";
                                LastDisassembleData.IsJump = true;

                                LastDisassembleData.Separators[LastDisassembleData.SeparatorCount] = 1;
                                LastDisassembleData.SeparatorCount += 1;
                                LastDisassembleData.Separators[LastDisassembleData.SeparatorCount] = 5;
                                LastDisassembleData.SeparatorCount += 1;


                                var wordptr = memory.ToIntPtr(5).ReadUInt16();
                                LastDisassembleData.OpCode = "jmp";
                                LastDisassembleData.Parameters = IntToHexSigned((UIntPtr)wordptr, 4) + ':';
                                var dwordptr = memory.ToIntPtr(1).ReadUInt32();

                                LastDisassembleData.ParameterValueType = ADisassemblerValueType.Address;
                                LastDisassembleData.ParameterValue = (UIntPtr)dwordptr;


                                LastDisassembleData.Parameters = LastDisassembleData.Parameters + IntToHexSigned((UIntPtr)dwordptr, 8);
                                offset += 6;
                            }
                            break;

                        case 0xeb:
                            {
                                description = "jump short";
                                LastDisassembleData.OpCode = "jmp";
                                LastDisassembleData.IsJump = true;

                                offset += 1;

                                if (Is64Bit)
                                    LastDisassembleData.ParameterValue = (UIntPtr)(offset.ToUInt64() + (UInt64)(SByte)memory[1]);
                                else
                                    LastDisassembleData.ParameterValue = (UIntPtr)(UInt32)(offset.ToUInt64() + (UInt64)(SByte)memory[1]);

                                LastDisassembleData.Parameters = IntToHexSigned(LastDisassembleData.ParameterValue, 8);

                                LastDisassembleData.ParameterValueType = ADisassemblerValueType.Address;

                                LastDisassembleData.Separators[LastDisassembleData.SeparatorCount] = 1;
                                LastDisassembleData.SeparatorCount += 1;

                            }
                            break;

                        case 0xec:
                            {
                                description = "input from port";
                                LastDisassembleData.OpCode = "in";
                                LastDisassembleData.Parameters = _colorReg + "al" + _endColor + ',' + _colorReg + "dx" + _endColor;
                            }
                            break;

                        case 0xed:
                            {
                                description = "input from port";
                                LastDisassembleData.OpCode = "in";
                                if (_prefix2.Contains(0x66)) LastDisassembleData.Parameters = _colorReg + "ax" + _endColor + ',' + _colorReg + "dx" + _endColor;
                                else
                                    LastDisassembleData.Parameters = _colorReg + "eax" + _endColor + ',' + _colorReg + "dx" + _endColor;
                            }
                            break;

                        case 0xee:
                            {
                                description = "input from port";
                                LastDisassembleData.OpCode = "out";
                                LastDisassembleData.Parameters = _colorReg + "dx" + _endColor + ',' + _colorReg + "al" + _endColor;
                            }
                            break;

                        case 0xef:
                            {
                                description = "input from port";
                                LastDisassembleData.OpCode = "out";
                                if (_prefix2.Contains(0x66)) LastDisassembleData.Parameters = _colorReg + "dx" + _endColor + ',' + _colorReg + "ax" + _endColor;
                                else
                                    LastDisassembleData.Parameters = _colorReg + "dx" + _endColor + ',' + _colorReg + "eax" + _endColor;
                            }
                            break;

                        case 0xf3:
                            {
                                ;

                            }
                            break;

                        case 0xf4:
                            {
                                description = "halt";
                                LastDisassembleData.OpCode = "hlt";
                            }
                            break;

                        case 0xf5:
                            {
                                description = "complement carry flag";
                                LastDisassembleData.OpCode = "cmc";
                            }
                            break;

                        case 0xf6:
                            {
                                switch (GetReg(memory[1]))
                                {
                                    case 0:
                                        {
                                            description = "logical compare";
                                            LastDisassembleData.OpCode = "test";
                                            LastDisassembleData.Parameters = ModRm(memory, _prefix2, 1, 2, ref last, 8);
                                            LastDisassembleData.Parameters = LastDisassembleData.Parameters + IntToHexSigned((UIntPtr)memory[(int)last], 2);
                                            LastDisassembleData.ParameterValueType = ADisassemblerValueType.Value;
                                            LastDisassembleData.ParameterValue = (UIntPtr)memory[(int)last];


                                            offset = (UIntPtr)(offset.ToUInt64() + last);
                                        }
                                        break;

                                    case 2:
                                        {
                                            description = "one's complement negation";
                                            LastDisassembleData.OpCode = "not";
                                            LastDisassembleData.Parameters = ModRm(memory, _prefix2, 1, 2, ref last, 8);

                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                        }
                                        break;

                                    case 3:
                                        {
                                            description = "two's complement negation";
                                            LastDisassembleData.OpCode = "neg";
                                            LastDisassembleData.Parameters = ModRm(memory, _prefix2, 1, 2, ref last, 8);

                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                        }
                                        break;

                                    case 4:
                                        {
                                            description = "unsigned multiply";
                                            LastDisassembleData.OpCode = "mul";
                                            LastDisassembleData.Parameters = ModRm(memory, _prefix2, 1, 2, ref last, 8);

                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                        }
                                        break;

                                    case 5:
                                        {
                                            description = "signed multiply";
                                            LastDisassembleData.OpCode = "imul";
                                            LastDisassembleData.Parameters = ModRm(memory, _prefix2, 1, 2, ref last, 8);

                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                        }
                                        break;

                                    case 6:
                                        {
                                            description = "unsigned divide";
                                            LastDisassembleData.OpCode = "div";
                                            LastDisassembleData.Parameters = ModRm(memory, _prefix2, 1, 2, ref last, 8);

                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                        }
                                        break;

                                    case 7:
                                        {
                                            description = "signed divide";
                                            LastDisassembleData.OpCode = "idiv";
                                            LastDisassembleData.Parameters = ModRm(memory, _prefix2, 1, 2, ref last, 8);

                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                        }
                                        break;
                                    default:
                                        {
                                            LastDisassembleData.OpCode = "db";
                                            LastDisassembleData.Parameters = IntToHexSigned((UIntPtr)memory[0], 2);
                                        }
                                        break;

                                }
                            }
                            break;

                        case 0xf7:
                            {
                                switch (GetReg(memory[1]))
                                {
                                    case 0:
                                        {
                                            description = "logical compare";
                                            if (_prefix2.Contains(0x66))
                                            {
                                                LastDisassembleData.OpCode = "test";
                                                LastDisassembleData.Parameters = ModRm(memory, _prefix2, 1, 1, ref last, 16);
                                                var wordptr = memory.ReadUInt16((int)last);
                                                LastDisassembleData.ParameterValueType = ADisassemblerValueType.Address;
                                                LastDisassembleData.ParameterValue = (UIntPtr)wordptr;

                                                LastDisassembleData.Parameters = LastDisassembleData.Parameters + IntToHexSigned((UIntPtr)wordptr, 4);
                                                offset = (UIntPtr)(offset.ToUInt64() + last + 1);
                                            }
                                            else
                                            {
                                                LastDisassembleData.OpCode = "test";
                                                LastDisassembleData.Parameters = ModRm(memory, _prefix2, 1, 0, ref last);
                                                var dwordptr = memory.ReadUInt32((int)last);
                                                LastDisassembleData.ParameterValueType = ADisassemblerValueType.Address;
                                                LastDisassembleData.ParameterValue = (UIntPtr)dwordptr;
                                                if (RexW)
                                                    LastDisassembleData.Parameters = LastDisassembleData.Parameters + IntToHexSigned((UIntPtr)(Int32)dwordptr, 8);
                                                else
                                                    LastDisassembleData.Parameters = LastDisassembleData.Parameters + IntToHexSigned((UIntPtr)dwordptr, 8);
                                                offset = (UIntPtr)(offset.ToUInt64() + last + 3);
                                            }
                                        }
                                        break;

                                    case 2:
                                        {
                                            description = "one's complement negation";
                                            LastDisassembleData.OpCode = "not";
                                            if (_prefix2.Contains(0x66))
                                                LastDisassembleData.Parameters = ModRm(memory, _prefix2, 1, 1, ref last, 16);
                                            else
                                                LastDisassembleData.Parameters = ModRm(memory, _prefix2, 1, 0, ref last);

                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                        }
                                        break;

                                    case 3:
                                        {
                                            description = "two's complement negation";
                                            LastDisassembleData.OpCode = "neg";
                                            if (_prefix2.Contains(0x66))
                                                LastDisassembleData.Parameters = ModRm(memory, _prefix2, 1, 1, ref last, 16);
                                            else
                                                LastDisassembleData.Parameters = ModRm(memory, _prefix2, 1, 0, ref last);


                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                        }
                                        break;

                                    case 4:
                                        {
                                            description = "unsigned multiply";
                                            LastDisassembleData.OpCode = "mul";
                                            if (_prefix2.Contains(0x66))
                                                LastDisassembleData.Parameters = ModRm(memory, _prefix2, 1, 1, ref last, 16);
                                            else
                                                LastDisassembleData.Parameters = ModRm(memory, _prefix2, 1, 0, ref last);


                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                        }
                                        break;

                                    case 5:
                                        {
                                            description = "signed multiply";
                                            LastDisassembleData.OpCode = "imul";
                                            if (_prefix2.Contains(0x66))
                                                LastDisassembleData.Parameters = ModRm(memory, _prefix2, 1, 1, ref last, 16);
                                            else
                                                LastDisassembleData.Parameters = ModRm(memory, _prefix2, 1, 0, ref last);

                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                        }
                                        break;

                                    case 6:
                                        {
                                            description = "unsigned divide";
                                            LastDisassembleData.OpCode = "div";
                                            if (_prefix2.Contains(0x66))
                                                LastDisassembleData.Parameters = ModRm(memory, _prefix2, 1, 1, ref last, 16);
                                            else
                                                LastDisassembleData.Parameters = ModRm(memory, _prefix2, 1, 0, ref last);


                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                        }
                                        break;

                                    case 7:
                                        {
                                            description = "signed divide";
                                            LastDisassembleData.OpCode = "idiv";
                                            if (_prefix2.Contains(0x66))
                                                LastDisassembleData.Parameters = ModRm(memory, _prefix2, 1, 1, ref last, 16);
                                            else
                                                LastDisassembleData.Parameters = ModRm(memory, _prefix2, 1, 0, ref last);


                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                        }
                                        break;

                                    default:
                                        {
                                            LastDisassembleData.OpCode = "db";
                                            LastDisassembleData.Parameters = IntToHexSigned((UIntPtr)memory[0], 2);
                                        }
                                        break;
                                }
                            }
                            break;

                        case 0xf8:
                            {
                                description = "clear carry flag";
                                LastDisassembleData.OpCode = "clc";
                            }
                            break;

                        case 0xf9:
                            {
                                description = "set carry flag";
                                LastDisassembleData.OpCode = "stc";
                            }
                            break;

                        case 0xfa:
                            {
                                description = "clear interrupt flag";
                                LastDisassembleData.OpCode = "cli";
                            }
                            break;

                        case 0xfb:
                            {
                                description = "set interrupt flag";
                                LastDisassembleData.OpCode = "sti";
                            }
                            break;

                        case 0xfc:
                            {
                                description = "clear direction flag";
                                LastDisassembleData.OpCode = "cld";
                            }
                            break;

                        case 0xfd:
                            {
                                description = "set direction flag";
                                LastDisassembleData.OpCode = "std";
                            }
                            break;

                        case 0xfe:
                            {
                                switch (GetReg(memory[1]))
                                {
                                    case 0:
                                        {
                                            description = "increment by 1";
                                            LastDisassembleData.OpCode = "inc";
                                            LastDisassembleData.Parameters = ModRm(memory, _prefix2, 1, 2, ref last, 8);

                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                        }
                                        break;

                                    case 1:
                                        {
                                            description = "decrement by 1";
                                            LastDisassembleData.OpCode = "dec";
                                            LastDisassembleData.Parameters = ModRm(memory, _prefix2, 1, 2, ref last, 7);

                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                        }
                                        break;

                                    default:
                                        {
                                            LastDisassembleData.OpCode = "db";
                                            LastDisassembleData.Parameters = IntToHexSigned((UIntPtr)memory[0], 2);
                                        }
                                        break;
                                }
                            }
                            break;

                        case 0xff:
                            {
                                switch (GetReg(memory[1]))
                                {
                                    case 0:
                                        {
                                            description = "increment by 1";
                                            LastDisassembleData.OpCode = "inc";
                                            if (_prefix2.Contains(0x66))
                                                LastDisassembleData.Parameters = ModRm(memory, _prefix2, 1, 1, ref last, 16);
                                            else
                                                LastDisassembleData.Parameters = ModRm(memory, _prefix2, 1, 0, ref last);


                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                        }
                                        break;

                                    case 1:
                                        {
                                            description = "decrement by 1";
                                            LastDisassembleData.OpCode = "dec";
                                            if (_prefix2.Contains(0x66))
                                                LastDisassembleData.Parameters = ModRm(memory, _prefix2, 1, 1, ref last, 16);
                                            else
                                                LastDisassembleData.Parameters = ModRm(memory, _prefix2, 1, 0, ref last);

                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                        }
                                        break;

                                    case 2:
                                        {
                                            //call
                                            description = "call procedure";
                                            LastDisassembleData.OpCode = "call";
                                            LastDisassembleData.IsJump = true;
                                            LastDisassembleData.IsCall = true;

                                            if (memory[1] >= 0xc0)
                                            {
                                                if (Is64Bit)
                                                    LastDisassembleData.Parameters = ModRm(memory, _prefix2, 1, 0, ref last, 64);
                                                else
                                                    LastDisassembleData.Parameters = ModRm(memory, _prefix2, 1, 0, ref last, 32);

                                            }
                                            else
                                            {
                                                if (Is64Bit)
                                                {

                                                    if ((memory[1] == 0x15) && (memory.ReadUInt32(2) == 2) && (memory.ReadUInt16(6) == 0x8eb))  //special 16 byte call
                                                    {
                                                        LastDisassembleData.Parameters = IntToHexSigned((UIntPtr)memory.ReadUInt64(8), 8);
                                                        LastDisassembleData.ParameterValue = (UIntPtr)memory.ReadUInt64(8);
                                                        LastDisassembleData.ParameterValueType = ADisassemblerValueType.Address;

                                                        last += 8 + 4 + 2 + 2;

                                                        LastDisassembleData.Separators[0] = 2;
                                                        LastDisassembleData.Separators[1] = 2 + 4;
                                                        LastDisassembleData.Separators[2] = 2 + 4 + 2;
                                                        LastDisassembleData.SeparatorCount = 3;

                                                    }
                                                    else
                                                        LastDisassembleData.Parameters = ModRm(memory, _prefix2, 1, 0, ref last, 64);
                                                }
                                                else
                                                    LastDisassembleData.Parameters = ModRm(memory, _prefix2, 1, 0, ref last, 32);
                                            }

                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                        }
                                        break;

                                    case 3:
                                        {
                                            //call
                                            description = "call procedure";
                                            LastDisassembleData.OpCode = "call";
                                            LastDisassembleData.IsJump = true;
                                            LastDisassembleData.IsCall = true;

                                            if (Is64Bit)
                                                LastDisassembleData.Parameters = ModRm(memory, _prefix2, 1, 0, ref last, 64);
                                            else
                                                LastDisassembleData.Parameters = ModRm(memory, _prefix2, 1, 0, ref last, 32);

                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                        }
                                        break;

                                    case 4:
                                        {
                                            //jmp
                                            description = "jump near";
                                            LastDisassembleData.OpCode = "jmp";
                                            LastDisassembleData.IsJump = true;


                                            if (Is64Bit)
                                            {
                                                if ((memory[1] == 0x25) && (memory.ReadUInt32(2) == 0))  //special 14 byte jmp
                                                {
                                                    LastDisassembleData.ParameterValue = (UIntPtr)memory.ReadUInt64(6);
                                                    LastDisassembleData.ParameterValueType = ADisassemblerValueType.Address;

                                                    LastDisassembleData.Parameters = IntToHexSigned((UIntPtr)memory.ReadUInt64(6), 8);
                                                    last += 8 + 4 + 2;

                                                    LastDisassembleData.Separators[0] = 2;
                                                    LastDisassembleData.Separators[1] = 2 + 4;
                                                    LastDisassembleData.SeparatorCount = 2;

                                                }
                                                else
                                                    LastDisassembleData.Parameters = ModRm(memory, _prefix2, 1, 0, ref last, 64);
                                            }
                                            else
                                                LastDisassembleData.Parameters = ModRm(memory, _prefix2, 1, 0, ref last, 32);


                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                        }
                                        break;

                                    case 5:
                                        {
                                            //jmp
                                            description = "jump far";
                                            LastDisassembleData.OpCode = "jmp far";
                                            LastDisassembleData.Parameters = ModRm(memory, _prefix2, 1, 0, ref last);
                                            LastDisassembleData.IsJump = true;

                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                        }
                                        break;

                                    case 6:
                                        {
                                            description = "push word or doubleword onto the stack";
                                            LastDisassembleData.OpCode = "push";
                                            if (_prefix2.Contains(0x66))
                                                LastDisassembleData.Parameters = ModRm(memory, _prefix2, 1, 1, ref last);
                                            else
                                                LastDisassembleData.Parameters = ModRm(memory, _prefix2, 1, 0, ref last);


                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                        }
                                        break;
                                    default:
                                        {
                                            LastDisassembleData.OpCode = "db";
                                            LastDisassembleData.Parameters = IntToHexSigned((UIntPtr)memory[0], 2);
                                        }
                                        break;

                                }

                            }
                            break;

                        default:
                            {
                                LastDisassembleData.OpCode = "db";
                                LastDisassembleData.Parameters = AStringUtils.IntToHex(memory[0], 2);
                            }
                            break;
                    }
                    #endregion
                    if (LastDisassembleData.Parameters != "" && LastDisassembleData.Parameters[LastDisassembleData.Parameters.Length - 1] == ',')
                        LastDisassembleData.Parameters = UStringUtils.SubStr(LastDisassembleData.Parameters, 0, -1); // todo check if this actually shrinks
                    LastDisassembleData.Description = description;
                    //copy the remaining bytes
                    k = LastDisassembleData.Bytes.Length;
                    if ((offset.ToIntPtr().ToInt64() - initialoffset.ToIntPtr().ToInt64()) < k)
                        offset = initialoffset + k;
                    LastDisassembleData.Bytes.SetLength((int)(offset.ToUInt64() - initialoffset.ToUInt64()));
                    if ((k >= 32) || (k < 0))
                        MessageBox.Show(AStringUtils.IntToHex(startoffset, 8) + "disassembler error 1", "debug here");
                    td = (UInt32)(offset.ToUInt64() - initialoffset.ToUInt64() - (UInt64)k);
                    i = (int)(k + td);
                    if ((td >= 32) || (i >= 32) || (i < 0))
                        MessageBox.Show(AStringUtils.IntToHex(startoffset, 8) + "disassembler error 2", "debug here");
                    if (td > 0)
                    {
                        breaknow = false;
                        try
                        {
                            using (var p1 = new UBytePtr(LastDisassembleData.Bytes.Buffer))
                                AArrayUtils.CopyMemory(p1, k, _memory.ToIntPtr(), k, (int)td);
                        }
                        catch
                        {
                            breaknow = true;
                        }
                        if (breaknow)
                            MessageBox.Show(AStringUtils.IntToHex(startoffset, 8) + "disassembler error 3", "debug here");
                    }
                    //adjust for the prefix.
                    if (k != 0)
                    {
                        for (i = 0; i <= LastDisassembleData.SeparatorCount - 1; i++)
                            LastDisassembleData.Separators[i] += prefixsize;

                        if (LastDisassembleData.RipRelative != 0)
                            LastDisassembleData.RipRelative += prefixsize;
                    }
                    //  result:=result+'- '+tempresult;
                    if (_ripRelative)
                    {
                        //add the current offset to the code between []
                        LastDisassembleData.ModRmValue = (UIntPtr)(offset.ToUInt64() + ((UIntPtr)((int)LastDisassembleData.ModRmValue)).ToUInt64()); //sign extended increase
                        i = AStringUtils.Pos("[", LastDisassembleData.Parameters);
                        j = AStringUtils.PosEx("]", LastDisassembleData.Parameters, i);
                        tempaddress = LastDisassembleData.ModRmValue;
                        tempresult = AStringUtils.Copy(LastDisassembleData.Parameters, 1, i);
                        tempresult += IntToHexSigned(tempaddress, 8);
                        LastDisassembleData.Parameters = tempresult + AStringUtils.Copy(LastDisassembleData.Parameters, j, LastDisassembleData.Parameters.Length);
                    }
                }
                else
                {
                    LastDisassembleData.OpCode = "??";
                    offset += 1;
                }
                // todo handle cloak
                //# ifdef windows
                //string result;
                //lastdisassembledata.iscloaked = hascloakedregioninrange(lastdisassembledata.address, length(lastdisassembledata.bytes), va, pa);
                //#else
                LastDisassembleData.IsCloaked = false;
                //#endif
                if (!IsDataOnly)
                {
                    result = AStringUtils.IntToHex(LastDisassembleData.Address, 8) + " - " + GetLastByteString();
                    result += " - ";
                    result = result + LastDisassembleData.Prefix + LastDisassembleData.OpCode;
                    result += ' ';
                    result += LastDisassembleData.Parameters;
                }
                // todo handle custom override
                //if (assigned(onpostdisassemble))
                //{
                //    tempresult = result;
                //    tempdescription = description;
                //
                //    if (onpostdisassemble(self, initialoffset, LastDisassembleData, tempresult, tempdescription))
                //    {
                //        result = tempresult;
                //        description = tempdescription;
                //
                //        if (length(lastdisassembledata.bytes) > 0)
                //            offset = initialoffset + length(lastdisassembledata.bytes);
                //    }
                //}
            }
            catch
            {
                //outputdebugstring(AStringUtils.IntToHex(startoffset,8)+':disassembler exception:'+e.message);
                ///MessageBox(0,pchar('disassembler exception at '+ AStringUtils.IntToHex(startoffset,8)+#13#10+e.message+#13#10+#13#10+'Please provide dark byte the bytes that are at this address so he can fix it'#13#10'(Open another CE instance and in the hexadecimal view go to this address)'),'debug here',MB_OK);
                throw new Exception("error make this work");
            }
            return result;
        }
        #endregion
    }
}
