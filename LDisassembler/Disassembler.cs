using System;
using System.Windows.Forms;
using Process.NET.Marshaling;
using Sputnik.LBinary;
using Sputnik.LMarshal;
using Sputnik.LString;
using Sputnik.LUtils;
using SputnikAsm.LCollections;
using SputnikAsm.LDisassembler.LEnums;
using SputnikAsm.LExtensions;
using SputnikAsm.LProcess;
using SputnikAsm.LProcess.LMemory;
using SputnikAsm.LProcess.LNative;
using SputnikAsm.LProcess.LNative.LTypes;
using SputnikAsm.LProcess.Utilities;
using SputnikAsm.LSymbolHandler;
using SputnikAsm.LUtils;

namespace SputnikAsm.LDisassembler
{
    public unsafe class Disassembler
    {
        #region Constants
        const int bit_rex_w = 8;
        const int bit_rex_r = 4;
        const int bit_rex_x = 2;
        const int bit_rex_b = 1;
        #endregion
        #region Properties
        public Boolean rex_b => opcodeflags.b;
        public Boolean rex_x => opcodeflags.x;
        public Boolean rex_r => opcodeflags.r;
        public Boolean rex_w => opcodeflags.w;
        public AProcessSharp Proc => SymbolHandler.Process;
        #endregion
        #region Variables
        private UBytePtr _memory;
        private opcodeflags opcodeflags;
        private tprefix prefix;
        private tprefix prefix2;
        private Boolean hasvex;
        private Boolean riprelative;
        private String colorhex;
        private String colorreg;
        private String colorsymbol;
        private String endcolor;
        private Boolean fsyntaxhighlighting;
        private Boolean faggressivealignment;
        private tmrpos modrmposition;
        private Byte rexprefix;
        public tlastdisassembledata lastdisassembledata;
        public Boolean Debug;
        public Boolean isdefault;
        public Boolean showsymbols;
        public Boolean showmodules;
        public Boolean showsections;
        public Boolean dataonly;
        public Boolean is64bit;
        public Boolean is64bitoverride;
        public Boolean is64bitoverridestate;
        public Boolean markiprelativeinstructions;
        public Boolean syntaxhighlighting;
        public ASymbolHandler SymbolHandler;
        public ASymbolHandler SelfSymbolHandler;
        public Boolean SupportCloak;
        #endregion
        #region Constructor
        public Disassembler()
        {
            SelfSymbolHandler = new ASymbolHandler();
            SelfSymbolHandler.Process = new AProcessSharp(System.Diagnostics.Process.GetCurrentProcess().Id, AMemoryType.Remote);
            SymbolHandler = new ASymbolHandler();
            SymbolHandler.Process = SelfSymbolHandler.Process;
            rexprefix = 0;
            colorhex = "";
            colorreg = "";
            colorsymbol = "";
            endcolor = "";
            opcodeflags = new opcodeflags();
            lastdisassembledata = new tlastdisassembledata();
            Debug = false;
            fsyntaxhighlighting = false;
            modrmposition = tmrpos.mnone;
            faggressivealignment = false;
            _memory = new UBytePtr(64);
            hasvex = false;
            riprelative = false;
            prefix = new tprefix();
            prefix2 = new tprefix();
            isdefault = false;
            showsymbols = false;
            showmodules = false;
            showsections = false;
            dataonly = false;
            is64bit = false;
            is64bitoverride = false;
            is64bitoverridestate = false;
            markiprelativeinstructions = false;
            syntaxhighlighting = false;
            SupportCloak = false;
        }
        #endregion
        #region regnrtostr
        public String regnrtostr(tregistertype listtype, int nr)
        {
            var result = "Error";
            switch (listtype)
            {
                case tregistertype.rt8:
                    {
                        switch (nr)
                        {
                            case 0: result = "al"; break;
                            case 1: result = "cl"; break;
                            case 2: result = "dl"; break;
                            case 3: result = "bl"; break;
                            case 4: result = rexprefix == 0 ? "ah" : "spl"; break;
                            case 5: result = rexprefix == 0 ? "ch" : "bpl"; break;
                            case 6: result = rexprefix == 0 ? "dh" : "sil"; break;
                            case 7: result = rexprefix == 0 ? "bh" : "dil"; break;
                            case 8: result = "r8l"; break;
                            case 9: result = "r9l"; break;
                            case 10: result = "r10l"; break;
                            case 11: result = "r11l"; break;
                            case 12: result = "r12l"; break;
                            case 13: result = "r13l"; break;
                            case 14: result = "r14l"; break;
                            case 15: result = "r15l"; break;
                        }
                    }
                    break;

                case tregistertype.rt16:
                    {
                        switch (nr)
                        {
                            case 0: result = "ax"; break;
                            case 1: result = "cx"; break;
                            case 2: result = "dx"; break;
                            case 3: result = "bx"; break;
                            case 4: result = "sp"; break;
                            case 5: result = "bp"; break;
                            case 6: result = "si"; break;
                            case 7: result = "di"; break;
                            case 8: result = "r8w"; break;
                            case 9: result = "r9w"; break;
                            case 10: result = "r10w"; break;
                            case 11: result = "r11w"; break;
                            case 12: result = "r12w"; break;
                            case 13: result = "r13w"; break;
                            case 14: result = "r14w"; break;
                            case 15: result = "r15w"; break;
                        }
                    }
                    break;

                case tregistertype.rt32:
                    {
                        switch (nr)
                        {
                            case 0: result = "eax"; break;
                            case 1: result = "ecx"; break;
                            case 2: result = "edx"; break;
                            case 3: result = "ebx"; break;
                            case 4: result = "esp"; break;
                            case 5: result = "ebp"; break;
                            case 6: result = "esi"; break;
                            case 7: result = "edi"; break;
                            case 8: result = "r8d"; break;
                            case 9: result = "r9d"; break;
                            case 10: result = "r10d"; break;
                            case 11: result = "r11d"; break;
                            case 12: result = "r12d"; break;
                            case 13: result = "r13d"; break;
                            case 14: result = "r14d"; break;
                            case 15: result = "r15d"; break;
                        }
                    }
                    break;

                case tregistertype.rt64:
                    {
                        switch (nr)
                        {
                            case 0: result = "rax"; break;
                            case 1: result = "rcx"; break;
                            case 2: result = "rdx"; break;
                            case 3: result = "rbx"; break;
                            case 4: result = "rsp"; break;
                            case 5: result = "rbp"; break;
                            case 6: result = "rsi"; break;
                            case 7: result = "rdi"; break;
                            case 8: result = "r8"; break;
                            case 9: result = "r9"; break;
                            case 10: result = "r10"; break;
                            case 11: result = "r11"; break;
                            case 12: result = "r12"; break;
                            case 13: result = "r13"; break;
                            case 14: result = "r14"; break;
                            case 15: result = "r15"; break;
                        }
                    }
                    break;

                case tregistertype.rtdebugregister:
                    {
                        switch (nr)
                        {
                            case 0: result = "dr0"; break;
                            case 1: result = "dr1"; break;
                            case 2: result = "dr2"; break;
                            case 3: result = "dr3"; break;
                            case 4: result = "dr4"; break;
                            case 5: result = "dr5"; break;
                            case 6: result = "dr6"; break;
                            case 7: result = "dr7"; break;
                            case 8: result = "dr8"; break;//Do not exist, but let's implement the encoding
                            case 9: result = "dr9"; break;
                            case 10: result = "dr10"; break;
                            case 11: result = "dr11"; break;
                            case 12: result = "dr12"; break;
                            case 13: result = "dr13"; break;
                            case 14: result = "dr14"; break;
                            case 15: result = "dr15"; break;
                        }
                    }
                    break;

                case tregistertype.rtcontrolregister:
                    {
                        switch (nr)
                        {
                            case 0: result = "cr0"; break;
                            case 1: result = "cr1"; break;
                            case 2: result = "cr2"; break;
                            case 3: result = "cr3"; break;
                            case 4: result = "cr4"; break;
                            case 5: result = "cr5"; break;
                            case 6: result = "cr6"; break;
                            case 7: result = "cr7"; break;
                            case 8: result = "cr8"; break;
                            case 9: result = "cr9"; break;
                            case 10: result = "cr10"; break;
                            case 11: result = "cr11"; break;
                            case 12: result = "cr12"; break;
                            case 13: result = "cr13"; break;
                            case 14: result = "cr14"; break;
                            case 15: result = "cr15"; break;
                        }
                    }
                    break;
                case tregistertype.rtsegment:
                    {
                        switch (nr)
                        {
                            case 0: result = "es"; break;
                            case 1: result = "cs"; break;
                            case 2: result = "ss"; break;
                            case 3: result = "ds"; break;
                            case 4: result = "fs"; break;
                            case 5: result = "gs"; break;
                            case 6: result = "hs"; break;  //as if...
                            case 7: result = "is"; break;
                            case 8: result = "js"; break;
                            case 9: result = "ks"; break;
                            case 10: result = "ls"; break;
                            case 11: result = "ms"; break;
                            case 12: result = "ns"; break;
                            case 13: result = "os"; break;
                            case 14: result = "ps"; break;
                            case 15: result = "qs"; break;
                        }
                    }
                    break;

                case tregistertype.rtmm:
                    {
                        switch (nr)
                        {
                            case 0: result = "mm0"; break;
                            case 1: result = "mm1"; break;
                            case 2: result = "mm2"; break;
                            case 3: result = "mm3"; break;
                            case 4: result = "mm4"; break;
                            case 5: result = "mm5"; break;
                            case 6: result = "mm6"; break;
                            case 7: result = "mm7"; break;
                            case 8: result = "mm8"; break;
                            case 9: result = "mm9"; break;
                            case 10: result = "mm10"; break;
                            case 11: result = "mm11"; break;
                            case 12: result = "mm12"; break;
                            case 13: result = "mm13"; break;
                            case 14: result = "mm14"; break;
                            case 15: result = "mm15"; break;
                        }
                    }
                    break;

                case tregistertype.rtxmm:
                    {
                        switch (nr)
                        {
                            case 0: result = "xmm0"; break;
                            case 1: result = "xmm1"; break;
                            case 2: result = "xmm2"; break;
                            case 3: result = "xmm3"; break;
                            case 4: result = "xmm4"; break;
                            case 5: result = "xmm5"; break;
                            case 6: result = "xmm6"; break;
                            case 7: result = "xmm7"; break;
                            case 8: result = "xmm8"; break;
                            case 9: result = "xmm9"; break;
                            case 10: result = "xmm10"; break;
                            case 11: result = "xmm11"; break;
                            case 12: result = "xmm12"; break;
                            case 13: result = "xmm13"; break;
                            case 14: result = "xmm14"; break;
                            case 15: result = "xmm15"; break;
                        }
                    }
                    break;

                case tregistertype.rtymm:
                    {
                        switch (nr)
                        {
                            case 0: result = "ymm0"; break;
                            case 1: result = "ymm1"; break;
                            case 2: result = "ymm2"; break;
                            case 3: result = "ymm3"; break;
                            case 4: result = "ymm4"; break;
                            case 5: result = "ymm5"; break;
                            case 6: result = "ymm6"; break;
                            case 7: result = "ymm7"; break;
                            case 8: result = "ymm8"; break;
                            case 9: result = "ymm9"; break;
                            case 10: result = "ymm10"; break;
                            case 11: result = "ymm11"; break;
                            case 12: result = "ymm12"; break;
                            case 13: result = "ymm13"; break;
                            case 14: result = "ymm14"; break;
                            case 15: result = "ymm15"; break;
                        }
                    }
                    break;
            }
            return result;
        }
        #endregion
        #region rd
        public String rd(Byte bt)
        {
            String result;
            if (rex_b)
                bt |= 8;
            switch (bt)
            {
                case 0: result = "eax"; break;
                case 1: result = "ecx"; break;
                case 2: result = "edx"; break;
                case 3: result = "ebx"; break;
                case 4: result = "esp"; break;
                case 5: result = "ebp"; break;
                case 6: result = "esi"; break;
                case 7: result = "edi"; break;
                case 8: result = "r8"; break;
                case 9: result = "r9"; break;
                case 10: result = "r10"; break;
                case 11: result = "r11"; break;
                case 12: result = "r12"; break;
                case 13: result = "r13"; break;
                case 14: result = "r14"; break;
                case 15: result = "r15"; break;
                default: result = ""; break;
            }
            if (!rex_w)
            {
                //not a rex_w field
                if (bt >= 8)  //but the bt field is higher than 8 (so 32-bit addressing, increased register)
                    result += 'd'; //32-bit variant
            }
            else
            {
                using (var p = new UCharPtr(result))
                    p[0] = 'r'; //replace eax,ebx with rax,rbx...
            }
            result = colorreg + result + endcolor;
            return result;
        }
        #endregion
        #region rd8
        public String rd8(Byte bt)
        {
            String result;
            if (rex_b)
                bt |= 8;
            switch (bt)
            {
                case 0: result = "al"; break;
                case 1: result = "cl"; break;
                case 2: result = "dl"; break;
                case 3: result = "bl"; break;
                case 4: result = rexprefix == 0 ? "ah" : "spl"; break;
                case 5: result = rexprefix == 0 ? "ch" : "bpl"; break;
                case 6: result = rexprefix == 0 ? "dh" : "sil"; break;
                case 7: result = rexprefix == 0 ? "bh" : "dil"; break;
                case 8: result = "r8l"; break;
                case 9: result = "r9l"; break;
                case 10: result = "r10l"; break;
                case 11: result = "r11l"; break;
                case 12: result = "r12l"; break;
                case 13: result = "r13l"; break;
                case 14: result = "r14l"; break;
                case 15: result = "r15l"; break;
                default: result = ""; break;
            }
            result = colorreg + result + endcolor;
            return result;
        }
        #endregion
        #region rd16
        public String rd16(Byte bt)
        {
            String result;
            if (rex_b)
                bt |= 8;
            switch (bt)
            {
                case 0: result = "ax"; break;
                case 1: result = "cx"; break;
                case 2: result = "dx"; break;
                case 3: result = "bx"; break;
                case 4: result = "sp"; break;
                case 5: result = "bp"; break;
                case 6: result = "si"; break;
                case 7: result = "di"; break;
                case 8: result = "r8w"; break;
                case 9: result = "r9w"; break;
                case 10: result = "r10w"; break;
                case 11: result = "r11w"; break;
                case 12: result = "r12w"; break;
                case 13: result = "r13w"; break;
                case 14: result = "r14w"; break;
                case 15: result = "r15w"; break;
                default: result = ""; break;
            }
            result = colorreg + result + endcolor;
            return result;
        }
        #endregion
        #region getreg
        public Byte getreg(Byte bt)
        {
            var result = (bt >> 3) & 7;
            if (rex_r)
                result |= 8; //extend the reg field
            return (Byte)result;
        }
        #endregion
        #region getsegmentoverride
        public String getsegmentoverride(tprefix prefix)
        {
            var result = "";
            if (prefix.Contains(0x2e))
                result = "cs:";
            else if (prefix.Contains(0x26))
                result = "es:";
            else if (prefix.Contains(0x36))
                result = "ss:";
            else if (prefix.Contains(0x3e))
                result = "";
            else if (prefix.Contains(0x64))
                result = "fs:";
            else if (prefix.Contains(0x65))
                result = "gs:";
            return result;
        }
        #endregion
        #region getbitof
        public Byte getbitof(UInt64 bt, int bit)
        {
            var result = ABitUtils.GetBit(bit, bt);
            return (Byte)result;
        }
        #endregion
        #region getmod
        public Byte getmod(Byte bt)
        {
            var result = (bt >> 6) & 3;
            return (Byte) result;
        }
        #endregion
        #region r8
        public String r8(Byte bt)
        {
            var regnr = getreg(bt);
            var result = colorreg + regnrtostr(tregistertype.rt8, regnr) + endcolor;
            return result;
        }
        #endregion
        #region r16
        public String r16(Byte bt)
        {
            var regnr = getreg(bt);
            var result = colorreg + regnrtostr(tregistertype.rt16, regnr) + endcolor;
            return result;
        }
        #endregion
        #region r32
        public String r32(Byte bt)
        {
            var regnr = getreg(bt);
            String result;
            if (rex_w)
                result = colorreg + regnrtostr(tregistertype.rt64, regnr) + endcolor;
            else
                result = colorreg + regnrtostr(tregistertype.rt32, regnr) + endcolor;
            return result;
        }
        #endregion
        #region r64
        public String r64(Byte bt)
        {
            var regnr = getreg(bt);
            var result = colorreg + regnrtostr(tregistertype.rt64, regnr) + endcolor;
            return result;
        }
        #endregion
        #region xmm
        public String xmm(Byte bt)
        {
            var regnr = getreg(bt);
            String result;
            if (opcodeflags.l)
                result = colorreg + regnrtostr(tregistertype.rtymm, regnr) + endcolor;
            else
                result = colorreg + regnrtostr(tregistertype.rtxmm, regnr) + endcolor;
            return result;
        }
        #endregion
        #region mm
        public String mm(Byte bt)
        {
            var regnr = getreg(bt);
            var result = colorreg + regnrtostr(tregistertype.rtmm, regnr) + endcolor;
            return result;
        }
        #endregion
        #region sreg
        public String sreg(Byte bt)
        {
            var regnr = getreg(bt);
            var result = colorreg + regnrtostr(tregistertype.rtsegment, regnr) + endcolor;
            return result;
        }
        #endregion
        #region cr
        public String cr(Byte bt)
        {
            var regnr = getreg(bt);
            var result = colorreg + regnrtostr(tregistertype.rtcontrolregister, regnr) + endcolor;
            return result;
        }
        #endregion
        #region dr
        public String dr(Byte bt)
        {
            var regnr = getreg(bt);
            var result = colorreg + regnrtostr(tregistertype.rtdebugregister, regnr) + endcolor;
            return result;
        }
        #endregion
        #region getrm
        public Byte getrm(Byte bt)
        {
            var result = bt & 7;
            //if this instruction does NOT have a SIB byte, only then apply the rex_B bit
            //It has an SIB byte if RM==4 and mod!=3
            if (rex_b & (!((result == 4) && (getmod(bt) != 3))))
                result |= 8;
            return (Byte)result;
        }
        #endregion
        #region modrm
        public String modrm(UBytePtr memory, tprefix prefix, int modrmbyte, int inst, ref UInt32 last, int opperandsize, int addresssize = 0, tmrpos position = tmrpos.mleft)
        {
            var result  = modrm2(memory, prefix, modrmbyte, inst, ref last, opperandsize, addresssize, position);
            return result;
        }
        public String modrm(UBytePtr memory, tprefix prefix, int modrmbyte, int inst,  ref UInt32 last, tmrpos position = tmrpos.mleft)
        {
            switch (inst)
            {
                case 0:
                    lastdisassembledata.datasize = Proc.PointerSize;
                    break;
                case 1:
                    lastdisassembledata.datasize = 2;
                    break;
                case 2:
                    lastdisassembledata.datasize = 1;
                    break;
                case 3:
                    lastdisassembledata.datasize = 4;
                    break;
                case 4:
                    lastdisassembledata.datasize = 8;
                    break;
            }
            var result = modrm2(memory, prefix, modrmbyte, inst, ref last, 0, 0, position);
            return result;
        }
        #endregion
        #region modrm2
        public String modrm2(UBytePtr memory, tprefix prefix, int modrmbyte, int inst, ref UInt32 last, int opperandsize = 0, int addresssize = 0, tmrpos position = tmrpos.mleft)
        {
            string modrm2_result;
            modrmposition = position;
            var result = "";
            var showextrareg = hasvex & (opcodeflags.skipextrareg == false);
            Char regprefix;
            if (is64bit)
                regprefix = 'r';
            else
                regprefix = 'e';
            var operandstring = "";
            var i = 0;
            var ep = "";
            var prestr = "";
            var poststr = "";
            switch (position)
            {
                case tmrpos.mleft:
                case tmrpos.mnone:
                    {
                        prestr = "";
                        poststr = ",";
                    }
                    break;

                case tmrpos.mright:
                    {
                        prestr = ",";
                        poststr = "";
                    }
                    break;
            }

            switch (opperandsize)
            {
                case 8: operandstring = "byte ptr "; break;
                case 16: operandstring = "word ptr "; break;
                case 32: operandstring = "dword ptr "; break;
                case 64: operandstring = "qword ptr "; break;
                case 80: operandstring = "tword ptr "; break;
                case 128: operandstring = "dqword ptr "; break;
                case 256: operandstring = "YMMword ptr "; break;
                default:
                    operandstring = "";
                    break;
            }
            lastdisassembledata.seperators[lastdisassembledata.seperatorcount] = modrmbyte;
            lastdisassembledata.seperatorcount += 1;
            var intptr = memory.ToIntPtr(modrmbyte + 1);
            var dwordptr = intptr.ToUIntPtr();
            last = (UInt32)(modrmbyte + 1);
            lastdisassembledata.seperators[lastdisassembledata.seperatorcount] = (int)last;
            lastdisassembledata.seperatorcount += 1;
            if (!Proc.IsX64 & prefix.Contains(0x67))
            {
                // put some 16-bit stuff in here
                // but since this is a 32-bit debugger only ,forget it...
            }
            else
            {
                switch (getmod(memory[modrmbyte]))
                {
                    case 0:
                        {
                            if (showextrareg & opcodeflags.skipextraregonmemoryaccess) showextrareg = false;

                            switch (getrm(memory[modrmbyte]))
                            {
                                case 0: result = getsegmentoverride(prefix) + '[' + colorreg + regprefix + "ax" + endcolor + ']'; break;
                                case 1: result = getsegmentoverride(prefix) + '[' + colorreg + regprefix + "cx" + endcolor + ']'; break;
                                case 2: result = getsegmentoverride(prefix) + '[' + colorreg + regprefix + "dx" + endcolor + ']'; break;
                                case 3: result = getsegmentoverride(prefix) + '[' + colorreg + regprefix + "bx" + endcolor + ']'; break;
                                case 4:
                                    {
                                        //has an sib
                                        result = getsegmentoverride(prefix) + '[' + sib(memory, modrmbyte + 1, ref last, addresssize) + ']';
                                    }
                                    break;

                                case 5:
                                    {
                                        //followed by a disp32
                                        if (is64bit)
                                        {
                                            riprelative = true;
                                            result = getsegmentoverride(prefix) + '[' + inttohexs_withoutsymbols(dwordptr, 8) + ']';


                                            lastdisassembledata.modrmvaluetype = tdisassemblervaluetype.dvtaddress;
                                            lastdisassembledata.modrmvalue = dwordptr;

                                            lastdisassembledata.riprelative = modrmbyte + 1;

                                        }
                                        else
                                        {
                                            result = getsegmentoverride(prefix) + '[' + inttohexs((UIntPtr)dwordptr, 8) + ']';
                                            lastdisassembledata.modrmvaluetype = tdisassemblervaluetype.dvtaddress;
                                            lastdisassembledata.modrmvalue = dwordptr;
                                        }
                                        last += 4;
                                    }
                                    break;
                                case 6: result = getsegmentoverride(prefix) + '[' + colorreg + regprefix + "si" + endcolor + ']'; break;
                                case 7: result = getsegmentoverride(prefix) + '[' + colorreg + regprefix + "di" + endcolor + ']'; break;
                                case 8: result = getsegmentoverride(prefix) + '[' + colorreg + "r8" + endcolor + ']'; break;
                                case 9: result = getsegmentoverride(prefix) + '[' + colorreg + "r9" + endcolor + ']'; break;
                                case 10: result = getsegmentoverride(prefix) + '[' + colorreg + "r10" + endcolor + ']'; break;
                                case 11: result = getsegmentoverride(prefix) + '[' + colorreg + "r11" + endcolor + ']'; break;
                                case 12: result = getsegmentoverride(prefix) + '[' + colorreg + "r12" + endcolor + ']'; break;
                                case 13: result = getsegmentoverride(prefix) + '[' + colorreg + "r13" + endcolor + ']'; break;
                                case 14: result = getsegmentoverride(prefix) + '[' + colorreg + "r14" + endcolor + ']'; break;
                                case 15: result = getsegmentoverride(prefix) + '[' + colorreg + "r15" + endcolor + ']'; break;
                            }
                            if (opperandsize != 0)
                                lastdisassembledata.datasize = opperandsize / 8;
                            result = operandstring + result;
                        }
                        break;
                    case 1:
                        {
                            if (showextrareg & opcodeflags.skipextraregonmemoryaccess)
                                showextrareg = false;
                            if (getrm(memory[modrmbyte]) != 4)
                            {
                                lastdisassembledata.modrmvaluetype = tdisassemblervaluetype.dvtvalue;
                                lastdisassembledata.modrmvalue = (UIntPtr)(SByte)(memory[modrmbyte + 1]);
                            }
                            switch (getrm(memory[modrmbyte]))
                            {
                                case 0:
                                    {
                                        if ((SByte)memory[modrmbyte + 1] >= 0)
                                            result = getsegmentoverride(prefix) + '[' + colorreg + regprefix + "ax" + endcolor + '+' + inttohexs((UIntPtr)memory[modrmbyte + 1], 2) + ']';
                                        else
                                            result = getsegmentoverride(prefix) + '[' + colorreg + regprefix + "ax" + endcolor + inttohexs((UIntPtr)(SByte)memory[modrmbyte + 1], 2) + ']';
                                    }
                                    break;
                                case 1:
                                    if ((SByte)memory[modrmbyte + 1] >= 0)
                                        result = getsegmentoverride(prefix) + '[' + colorreg + regprefix + "cx" + endcolor + '+' + inttohexs((UIntPtr)memory[modrmbyte + 1], 2) + ']';
                                    else
                                        result = getsegmentoverride(prefix) + '[' + colorreg + regprefix + "cx" + endcolor + inttohexs((UIntPtr)(SByte)memory[modrmbyte + 1], 2) + ']';
                                    break;
                                case 2:
                                    if ((SByte)memory[modrmbyte + 1] >= 0)
                                        result = getsegmentoverride(prefix) + '[' + colorreg + regprefix + "dx" + endcolor + '+' + inttohexs((UIntPtr)memory[modrmbyte + 1], 2) + ']';
                                    else
                                        result = getsegmentoverride(prefix) + '[' + colorreg + regprefix + "dx" + endcolor + inttohexs((UIntPtr)(SByte)memory[modrmbyte + 1], 2) + ']';
                                    break;
                                case 3:
                                    if ((SByte)memory[modrmbyte + 1] >= 0)
                                        result = getsegmentoverride(prefix) + '[' + colorreg + regprefix + "bx" + endcolor + '+' + inttohexs((UIntPtr)memory[modrmbyte + 1], 2) + ']';
                                    else
                                        result = getsegmentoverride(prefix) + '[' + colorreg + regprefix + "bx" + endcolor + inttohexs((UIntPtr)(SByte)memory[modrmbyte + 1], 2) + ']';
                                    break;
                                case 4:
                                    {
                                        result = getsegmentoverride(prefix) + '[' + sib(memory, modrmbyte + 1, ref last, addresssize) + ']';
                                        last -= 1;
                                    }
                                    break;

                                case 5:
                                    if ((SByte)memory[modrmbyte + 1] >= 0)
                                        result = getsegmentoverride(prefix) + '[' + colorreg + regprefix + "bp" + endcolor + '+' + inttohexs((UIntPtr)memory[modrmbyte + 1], 2) + ']';
                                    else
                                        result = getsegmentoverride(prefix) + '[' + colorreg + regprefix + "bp" + endcolor + inttohexs((UIntPtr)(SByte)memory[modrmbyte + 1], 2, true, 2) + ']';
                                    break;


                                case 6:
                                    if ((SByte)memory[modrmbyte + 1] >= 0)
                                        result = getsegmentoverride(prefix) + '[' + colorreg + regprefix + "si" + endcolor + '+' + inttohexs((UIntPtr)memory[modrmbyte + 1], 2) + ']';
                                    else
                                        result = getsegmentoverride(prefix) + '[' + colorreg + regprefix + "si" + endcolor + inttohexs((UIntPtr)(SByte)memory[modrmbyte + 1], 2, true, 2) + ']';
                                    break;


                                case 7:
                                    if ((SByte)memory[modrmbyte + 1] >= 0)
                                        result = getsegmentoverride(prefix) + '[' + colorreg + regprefix + "di" + endcolor + '+' + inttohexs((UIntPtr)memory[modrmbyte + 1], 2) + ']';
                                    else
                                        result = getsegmentoverride(prefix) + '[' + colorreg + regprefix + "di" + endcolor + inttohexs((UIntPtr)(SByte)memory[modrmbyte + 1], 2, true, 2) + ']';
                                    break;


                                case 8:
                                    if ((SByte)memory[modrmbyte + 1] >= 0)
                                        result = getsegmentoverride(prefix) + '[' + colorreg + "r8" + endcolor + '+' + inttohexs((UIntPtr)memory[modrmbyte + 1], 2) + ']';
                                    else
                                        result = getsegmentoverride(prefix) + '[' + colorreg + "r8" + endcolor + inttohexs((UIntPtr)(SByte)memory[modrmbyte + 1], 2, true, 2) + ']';
                                    break;


                                case 9:
                                    if ((SByte)memory[modrmbyte + 1] >= 0)
                                        result = getsegmentoverride(prefix) + '[' + colorreg + "r9" + endcolor + '+' + inttohexs((UIntPtr)memory[modrmbyte + 1], 2) + ']';
                                    else
                                        result = getsegmentoverride(prefix) + '[' + colorreg + "r9" + endcolor + inttohexs((UIntPtr)(SByte)memory[modrmbyte + 1], 2, true, 2) + ']';
                                    break;

                                case 10:
                                    if ((SByte)memory[modrmbyte + 1] >= 0)
                                        result = getsegmentoverride(prefix) + '[' + colorreg + "r10" + endcolor + '+' + inttohexs((UIntPtr)memory[modrmbyte + 1], 2) + ']';
                                    else
                                        result = getsegmentoverride(prefix) + '[' + colorreg + "r10" + endcolor + inttohexs((UIntPtr)(SByte)memory[modrmbyte + 1], 2, true, 2) + ']';
                                    break;


                                case 11:
                                    if ((SByte)memory[modrmbyte + 1] >= 0)
                                        result = getsegmentoverride(prefix) + '[' + colorreg + "r11" + endcolor + '+' + inttohexs((UIntPtr)memory[modrmbyte + 1], 2) + ']';
                                    else
                                        result = getsegmentoverride(prefix) + '[' + colorreg + "r11" + endcolor + inttohexs((UIntPtr)(SByte)memory[modrmbyte + 1], 2, true, 2) + ']';
                                    break;

                                case 12:
                                    if ((SByte)memory[modrmbyte + 1] >= 0)
                                        result = getsegmentoverride(prefix) + '[' + colorreg + "r12" + endcolor + '+' + inttohexs((UIntPtr)memory[modrmbyte + 1], 2) + ']';
                                    else
                                        result = getsegmentoverride(prefix) + '[' + colorreg + "r12" + endcolor + inttohexs((UIntPtr)(SByte)memory[modrmbyte + 1], 2, true, 2) + ']';
                                    break;

                                case 13:
                                    if ((SByte)memory[modrmbyte + 1] >= 0)
                                        result = getsegmentoverride(prefix) + '[' + colorreg + "r13" + endcolor + '+' + inttohexs((UIntPtr)memory[modrmbyte + 1], 2) + ']';
                                    else
                                        result = getsegmentoverride(prefix) + '[' + colorreg + "r13" + endcolor + inttohexs((UIntPtr)(SByte)memory[modrmbyte + 1], 2, true, 2) + ']';
                                    break;

                                case 14:
                                    if ((SByte)memory[modrmbyte + 1] >= 0)
                                        result = getsegmentoverride(prefix) + '[' + colorreg + "r14" + endcolor + '+' + inttohexs((UIntPtr)memory[modrmbyte + 1], 2) + ']';
                                    else
                                        result = getsegmentoverride(prefix) + '[' + colorreg + "r14" + endcolor + inttohexs((UIntPtr)(SByte)memory[modrmbyte + 1], 2, true, 2) + ']';
                                    break;

                                case 15:
                                    if ((SByte)memory[modrmbyte + 1] >= 0)
                                        result = getsegmentoverride(prefix) + '[' + colorreg + "r15" + endcolor + '+' + inttohexs((UIntPtr)memory[modrmbyte + 1], 2) + ']';
                                    else
                                        result = getsegmentoverride(prefix) + '[' + colorreg + "r15" + endcolor + inttohexs((UIntPtr)(SByte)memory[modrmbyte + 1], 2, true, 2) + ']';
                                    break;

                            }

                            last += 1;
                            lastdisassembledata.datasize = opperandsize / 8;
                            result = operandstring + result;
                        }
                        break;

                    case 2:
                        {
                            if (showextrareg & opcodeflags.skipextraregonmemoryaccess) showextrareg = false;

                            if (getrm(memory[modrmbyte]) != 4)
                            {
                                lastdisassembledata.modrmvaluetype = tdisassemblervaluetype.dvtvalue;
                                //lastdisassembledata.modrmvalue = (UIntPtr)(pinteger)(dwordptr); // todo figure out if this is right????
                                //lastdisassembledata.modrmvalue = (UIntPtr)(*(int*)(dwordptr));
                                lastdisassembledata.modrmvalue = (UIntPtr)intptr.ReadInt32();
                            }

                            switch (getrm(memory[modrmbyte]))
                            {
                                case 0:
                                    if (intptr.ToInt32() >= 0)
                                        result = getsegmentoverride(prefix) + '[' + colorreg + regprefix + "ax" + endcolor + '+' + inttohexs((UIntPtr)dwordptr, 8) + ']';
                                    else
                                        result = getsegmentoverride(prefix) + '[' + colorreg + regprefix + "ax" + endcolor + '-' + inttohexs((UIntPtr)(-intptr.ToInt32()), 8) + ']';
                                    break;

                                case 1:
                                    if (intptr.ToInt32() >= 0)
                                        result = getsegmentoverride(prefix) + '[' + colorreg + regprefix + "cx" + endcolor + '+' + inttohexs((UIntPtr)dwordptr, 8) + ']';
                                    else
                                        result = getsegmentoverride(prefix) + '[' + colorreg + regprefix + "cx" + endcolor + '-' + inttohexs((UIntPtr)(-intptr.ToInt32()), 8) + ']';
                                    break;

                                case 2:
                                    if (intptr.ToInt32() >= 0)
                                        result = getsegmentoverride(prefix) + '[' + colorreg + regprefix + "dx" + endcolor + '+' + inttohexs((UIntPtr)dwordptr, 8) + ']';
                                    else
                                        result = getsegmentoverride(prefix) + '[' + colorreg + regprefix + "dx" + endcolor + '-' + inttohexs((UIntPtr)(-intptr.ToInt32()), 8) + ']';
                                    break;


                                case 3:
                                    if (intptr.ToInt32() >= 0)
                                        result = getsegmentoverride(prefix) + '[' + colorreg + regprefix + "bx" + endcolor + '+' + inttohexs((UIntPtr)dwordptr, 8) + ']';
                                    else
                                        result = getsegmentoverride(prefix) + '[' + colorreg + regprefix + "bx" + endcolor + '-' + inttohexs((UIntPtr)(-intptr.ToInt32()), 8) + ']';
                                    break;


                                case 4:
                                    {
                                        result = getsegmentoverride(prefix) + '[' + sib(memory, modrmbyte + 1, ref last, addresssize) + ']';
                                        last -= 4;
                                    }
                                    break;

                                case 5:
                                    if (intptr.ToInt32() >= 0)
                                        result = getsegmentoverride(prefix) + '[' + colorreg + regprefix + "bp" + endcolor + '+' + inttohexs((UIntPtr)dwordptr, 8) + ']';
                                    else
                                        result = getsegmentoverride(prefix) + '[' + colorreg + regprefix + "bp" + endcolor + '-' + inttohexs((UIntPtr)(-intptr.ToInt32()), 8) + ']';
                                    break;


                                case 6:
                                    if (intptr.ToInt32() >= 0)
                                        result = getsegmentoverride(prefix) + '[' + colorreg + regprefix + "si" + endcolor + '+' + inttohexs((UIntPtr)dwordptr, 8) + ']';
                                    else
                                        result = getsegmentoverride(prefix) + '[' + colorreg + regprefix + "si" + endcolor + '-' + inttohexs((UIntPtr)(-intptr.ToInt32()), 8) + ']';
                                    break;


                                case 7:
                                    if (intptr.ToInt32() >= 0)
                                        result = getsegmentoverride(prefix) + '[' + colorreg + regprefix + "di" + endcolor + '+' + inttohexs((UIntPtr)dwordptr, 8) + ']';
                                    else
                                        result = getsegmentoverride(prefix) + '[' + colorreg + regprefix + "di" + endcolor + '-' + inttohexs((UIntPtr)(-intptr.ToInt32()), 8) + ']';
                                    break;


                                case 8:
                                    if (intptr.ToInt32() >= 0)
                                        result = getsegmentoverride(prefix) + '[' + colorreg + "r8" + endcolor + '+' + inttohexs((UIntPtr)dwordptr, 8) + ']';
                                    else
                                        result = getsegmentoverride(prefix) + '[' + colorreg + "r8" + endcolor + '-' + inttohexs((UIntPtr)(-intptr.ToInt32()), 8) + ']';
                                    break;

                                case 9:
                                    if (intptr.ToInt32() >= 0)
                                        result = getsegmentoverride(prefix) + '[' + colorreg + "r9" + endcolor + '+' + inttohexs((UIntPtr)dwordptr, 8) + ']';
                                    else
                                        result = getsegmentoverride(prefix) + '[' + colorreg + "r9" + endcolor + '-' + inttohexs((UIntPtr)(-intptr.ToInt32()), 8) + ']';
                                    break;

                                case 10:
                                    if (intptr.ToInt32() >= 0)
                                        result = getsegmentoverride(prefix) + '[' + colorreg + "r10" + endcolor + '+' + inttohexs((UIntPtr)dwordptr, 8) + ']';
                                    else
                                        result = getsegmentoverride(prefix) + '[' + colorreg + "r10" + endcolor + '-' + inttohexs((UIntPtr)(-intptr.ToInt32()), 8) + ']';
                                    break;

                                case 11:
                                    if (intptr.ToInt32() >= 0)
                                        result = getsegmentoverride(prefix) + '[' + colorreg + "r11" + endcolor + '+' + inttohexs((UIntPtr)dwordptr, 8) + ']';
                                    else
                                        result = getsegmentoverride(prefix) + '[' + colorreg + "r11" + endcolor + '-' + inttohexs((UIntPtr)(-intptr.ToInt32()), 8) + ']';
                                    break;

                                case 12:
                                    if (intptr.ToInt32() >= 0)
                                        result = getsegmentoverride(prefix) + '[' + colorreg + "r12" + endcolor + '+' + inttohexs((UIntPtr)dwordptr, 8) + ']';
                                    else
                                        result = getsegmentoverride(prefix) + '[' + colorreg + "r12" + endcolor + '-' + inttohexs((UIntPtr)(-intptr.ToInt32()), 8) + ']';
                                    break;

                                case 13:
                                    if (intptr.ToInt32() >= 0)
                                        result = getsegmentoverride(prefix) + '[' + colorreg + "r13" + endcolor + '+' + inttohexs((UIntPtr)dwordptr, 8) + ']';
                                    else
                                        result = getsegmentoverride(prefix) + '[' + colorreg + "r13" + endcolor + '-' + inttohexs((UIntPtr)(-intptr.ToInt32()), 8) + ']';
                                    break;

                                case 14:
                                    if (intptr.ToInt32() >= 0)
                                        result = getsegmentoverride(prefix) + '[' + colorreg + "r14" + endcolor + '+' + inttohexs((UIntPtr)dwordptr, 8) + ']';
                                    else
                                        result = getsegmentoverride(prefix) + '[' + colorreg + "r14" + endcolor + '-' + inttohexs((UIntPtr)(-intptr.ToInt32()), 8) + ']';
                                    break;

                                case 15:
                                    if (intptr.ToInt32() >= 0)
                                        result = getsegmentoverride(prefix) + '[' + colorreg + "r15" + endcolor + '+' + inttohexs((UIntPtr)dwordptr, 8) + ']';
                                    else
                                        result = getsegmentoverride(prefix) + '[' + colorreg + "r15" + endcolor + '-' + inttohexs((UIntPtr)(-intptr.ToInt32()), 8) + ']';
                                    break;

                            }
                            last += 4;

                            lastdisassembledata.datasize = opperandsize / 8;
                            result = operandstring + result;
                        }
                        break;

                    case 3:
                        {
                            lastdisassembledata.datasize = 0;
                            switch (getrm(memory[modrmbyte]))
                            {
                                case 0:
                                    switch (inst)
                                    {
                                        case 0: if (rex_w | (opperandsize == 64)) result = "rax"; else result = "eax"; break;
                                        case 1: result = "ax"; break;
                                        case 2: result = "al"; break;
                                        case 3: result = "mm0"; break;
                                        case 4: if (opcodeflags.l) result = "ymm0"; else result = "xmm0"; break;
                                    }
                                    break;

                                case 1:
                                    switch (inst)
                                    {
                                        case 0: if (rex_w | (opperandsize == 64)) result = "rcx"; else result = "ecx"; break;
                                        case 1: result = "cx"; break;
                                        case 2: result = "cl"; break;
                                        case 3: result = "mm1"; break;
                                        case 4: if (opcodeflags.l) result = "ymm1"; else result = "xmm1"; break;
                                    }
                                    break;

                                case 2:
                                    switch (inst)
                                    {
                                        case 0: if (rex_w | (opperandsize == 64)) result = "rdx"; else result = "edx"; break;
                                        case 1: result = "dx"; break;
                                        case 2: result = "dl"; break;
                                        case 3: result = "mm2"; break;
                                        case 4: if (opcodeflags.l) result = "ymm2"; else result = "xmm2"; break;
                                    }
                                    break;

                                case 3:
                                    switch (inst)
                                    {
                                        case 0: if (rex_w | (opperandsize == 64)) result = "rbx"; else result = "ebx"; break;
                                        case 1: result = "bx"; break;
                                        case 2: result = "bl"; break;
                                        case 3: result = "mm3"; break;
                                        case 4: if (opcodeflags.l) result = "ymm3"; else result = "xmm3"; break;
                                    }
                                    break;

                                case 4:
                                    switch (inst)
                                    {
                                        case 0: if (rex_w | (opperandsize == 64)) result = "rsp"; else result = "esp"; break;
                                        case 1: result = "sp"; break;
                                        case 2: if (rexprefix != 0) result = "spl"; else result = "ah"; break;
                                        case 3: result = "mm4"; break;
                                        case 4: if (opcodeflags.l) result = "ymm4"; else result = "xmm4"; break;
                                    }
                                    break;

                                case 5:
                                    switch (inst)
                                    {
                                        case 0: if (rex_w | (opperandsize == 64)) result = "rbp"; else result = "ebp"; break;
                                        case 1: result = "bp"; break;
                                        case 2: if (rexprefix != 0) result = "bpl"; else result = "ch"; break;
                                        case 3: result = "mm5"; break;
                                        case 4: if (opcodeflags.l) result = "ymm5"; else result = "xmm5"; break;
                                    }
                                    break;

                                case 6:
                                    switch (inst)
                                    {
                                        case 0: if (rex_w | (opperandsize == 64)) result = "rsi"; else result = "esi"; break;
                                        case 1: result = "si"; break;
                                        case 2: if (rexprefix != 0) result = "sil"; else result = "dh"; break;
                                        case 3: result = "mm6"; break;
                                        case 4: if (opcodeflags.l) result = "ymm6"; else result = "xmm6"; break;
                                    }
                                    break;

                                case 7:
                                    switch (inst)
                                    {
                                        case 0: if (rex_w | (opperandsize == 64)) result = "rdi"; else result = "edi"; break;
                                        case 1: result = "di"; break;
                                        case 2: if (rexprefix != 0) result = "dil"; else result = "bh"; break;
                                        case 3: result = "mm7"; break;
                                        case 4: if (opcodeflags.l) result = "ymm7"; else result = "xmm7"; break;
                                    }
                                    break;

                                case 8:
                                    switch (inst)
                                    {
                                        case 0: if (rex_w | (opperandsize == 64)) result = "r8"; else result = "r8d"; break;
                                        case 1: result = "r8w"; break;
                                        case 2: result = "r8l"; break;
                                        case 3: result = "mm8"; break;
                                        case 4: if (opcodeflags.l) result = "ymm8"; else result = "xmm8"; break;
                                    }
                                    break;

                                case 9:
                                    switch (inst)
                                    {
                                        case 0: if (rex_w | (opperandsize == 64)) result = "r9"; else result = "r9d"; break;
                                        case 1: result = "r9w"; break;
                                        case 2: result = "r9l"; break;
                                        case 3: result = "mm9"; break;
                                        case 4: if (opcodeflags.l) result = "ymm9"; else result = "xmm9"; break;
                                    }
                                    break;

                                case 10:
                                    switch (inst)
                                    {
                                        case 0: if (rex_w | (opperandsize == 64)) result = "r10"; else result = "r10d"; break;
                                        case 1: result = "r10w"; break;
                                        case 2: result = "r10l"; break;
                                        case 3: result = "mm10"; break;
                                        case 4: if (opcodeflags.l) result = "ymm10"; else result = "xmm10"; break;
                                    }
                                    break;

                                case 11:
                                    switch (inst)
                                    {
                                        case 0: if (rex_w | (opperandsize == 64)) result = "r11"; else result = "r11d"; break;
                                        case 1: result = "r11w"; break;
                                        case 2: result = "r11l"; break;
                                        case 3: result = "mm11"; break;
                                        case 4: if (opcodeflags.l) result = "ymm11"; else result = "xmm11"; break;
                                    }
                                    break;

                                case 12:
                                    switch (inst)
                                    {
                                        case 0: if (rex_w | (opperandsize == 64)) result = "r12"; else result = "r12d"; break;
                                        case 1: result = "r12w"; break;
                                        case 2: result = "r12l"; break;
                                        case 3: result = "mm12"; break;
                                        case 4: if (opcodeflags.l) result = "ymm12"; else result = "xmm12"; break;
                                    }
                                    break;

                                case 13:
                                    switch (inst)
                                    {
                                        case 0: if (rex_w | (opperandsize == 64)) result = "r13"; else result = "r13d"; break;
                                        case 1: result = "r13w"; break;
                                        case 2: result = "r13l"; break;
                                        case 3: result = "mm13"; break;
                                        case 4: if (opcodeflags.l) result = "ymm13"; else result = "xmm13"; break;
                                    }
                                    break;

                                case 14:
                                    switch (inst)
                                    {
                                        case 0: if (rex_w | (opperandsize == 64)) result = "r14"; else result = "r14d"; break;
                                        case 1: result = "r14w"; break;
                                        case 2: result = "r14l"; break;
                                        case 3: result = "mm14"; break;
                                        case 4: if (opcodeflags.l) result = "ymm14"; else result = "xmm14"; break;
                                    }
                                    break;

                                case 15:
                                    switch (inst)
                                    {
                                        case 0: if (rex_w | (opperandsize == 64)) result = "r15"; else result = "r15d"; break;
                                        case 1: result = "r15w"; break;
                                        case 2: result = "r15l"; break;
                                        case 3: result = "mm15"; break;
                                        case 4: if (opcodeflags.l) result = "ymm15"; else result = "xmm15"; break;
                                    }
                                    break;
                            }


                            result = colorreg + result + endcolor;
                        }
                        break;
                }
                if (showextrareg)
                {
                    switch (inst)
                    {
                        case 0: if (rex_w) ep = regnrtostr(tregistertype.rt64, ~opcodeflags.vvvv & 0xf); else ep = regnrtostr(tregistertype.rt32, ~opcodeflags.vvvv & 0xf); break;
                        case 1: ep = regnrtostr(tregistertype.rt16, ~opcodeflags.vvvv & 0xf); break;
                        case 2: ep = regnrtostr(tregistertype.rt8, ~opcodeflags.vvvv & 0xf); break;
                        case 3: ep = regnrtostr(tregistertype.rtmm, ~opcodeflags.vvvv & 0xf); break;
                        case 4: if (opcodeflags.l) ep = regnrtostr(tregistertype.rtymm, ~opcodeflags.vvvv & 0xf); else ep = regnrtostr(tregistertype.rtxmm, ~opcodeflags.vvvv & 0xf); break;
                    }

                    switch (position)
                    {
                        case tmrpos.mleft: case tmrpos.mnone: result = result + ',' + colorreg + ep + endcolor; break;
                        case tmrpos.mright: result = colorreg + ep + endcolor + ',' + result; break;
                    }
                }

                result = prestr + result + poststr;
            }

            if (last != (modrmbyte + 1))  //add an extra seperator since some bytes have been added, usually the last one, except when the opcode has a immeadiate value followed, which this seperator will then separate
            {
                lastdisassembledata.seperators[lastdisassembledata.seperatorcount] = (int)last;
                lastdisassembledata.seperatorcount += 1;
            }
            return result;
        }
        #endregion
        #region sib
        public String sib(UBytePtr memory, int sibbyte, ref UInt32 last, int addresssize = 0)
        {
            var ss = 0;
            var index = 0;
            var _mod = 0;
            var _rm = 0;
            var offset = "";
            var indexstring = "";
            var displacementstring = "";
            var pref = '\0';
            var result = "";
            if (is64bit)
                pref = 'r';
            else pref = 'e';
            var intptr = memory.ToIntPtr(sibbyte - 1);
            var dwordptr = intptr.ToUIntPtr();
            last += 1;  //sib byte
            lastdisassembledata.seperators[lastdisassembledata.seperatorcount] = (int)last;
            lastdisassembledata.seperatorcount += 1;
            ss = (memory[sibbyte] >> 6) & 3;
            index = (memory[sibbyte] >> 3) & 7;
            if (rex_x)
                index |= 8;
            _mod = getmod(memory[sibbyte - 1]);
            _rm = getrm(memory[sibbyte - 1]);
            var @base = memory[sibbyte] & 7;
            if (rex_b)
                /*and (_mod<>0)*/
                @base |= 8;
            offset = "";
            switch (@base)
            {
                case 0: result = "eax"; break;
                case 1: result = "ecx"; break;
                case 2: result = "edx"; break;
                case 3: result = "ebx"; break;
                case 4: result = "esp"; break;
                case 5:
                    {
                        if (_mod != 0)
                            result = "ebp";
                    }
                    break;
                case 6: result = "esi"; break;
                case 7: result = "edi"; break;
                case 8: result = "r8"; break;
                case 9: result = "r9"; break;
                case 10: result = "r10"; break;
                case 11: result = "r11"; break;
                case 12: result = "r12"; break;
                case 13: result = "r13"; break;
                case 14: result = "r14"; break;
                case 15: result = "r15"; break;
            }
            if (is64bit)
            {
                if (result != "")
                    result = "r" + result.Substring(1); //quick replace
            }
            if (result != "")
                result = colorreg + result + endcolor;
            switch (index)
            {
                case 0: indexstring = "eax"; break;
                case 1: indexstring = "ecx"; break;
                case 2: indexstring = "edx"; break;
                case 3: indexstring = "ebx"; break;
                case 4: indexstring = ""; break;//'esp';
                case 5: indexstring = "ebp"; break;
                case 6: indexstring = "esi"; break;
                case 7: indexstring = "edi"; break;
                case 8: indexstring = "r8"; break;
                case 9: indexstring = "r9"; break;
                case 10: indexstring = "r10"; break;
                case 11: indexstring = "r11"; break;
                case 12: indexstring = "r12"; break;
                case 13: indexstring = "r13"; break;
                case 14: indexstring = "r14"; break;
                case 15: indexstring = "r15"; break;
                default:
                    indexstring = "";
                    break;
            }
            if (is64bit & (addresssize != 32))
            {
                if (indexstring != "")
                    indexstring = "r" + indexstring.Substring(1); //quick replace
            }
            if (indexstring != "")
                indexstring = colorreg + indexstring + endcolor;
            if ((is64bit) & ((@base & 7) == 5) && (index == 4) && (_mod == 0))  //disp32
            {
                //special case for 64-bit
                //sib has a 32-bit displacement value (starting at 0000000000000000)
                lastdisassembledata.modrmvaluetype = tdisassemblervaluetype.dvtaddress;
                lastdisassembledata.modrmvalue = dwordptr;
                result = inttohexs((UIntPtr)dwordptr, 8);
                last += 4;
                return result;
            }
            else
            {
                switch (ss)
                {
                    case 0: lastdisassembledata.sibscaler = 1; break;
                    case 1: lastdisassembledata.sibscaler = 2; break;
                    case 2: lastdisassembledata.sibscaler = 4; break;
                    case 3: lastdisassembledata.sibscaler = 8; break;
                }
                if ((ss > 0) && (index != 4))
                    indexstring = indexstring + '*' + colorhex + lastdisassembledata.sibscaler + endcolor;
                if (indexstring != "")
                {
                    if (result == "")
                        result = indexstring;
                    else
                        result = result + '+' + indexstring;
                }
            }
            //
            {
                //mod 0 : [scaled index]+disp32
                //mod 1 : [scaled index]+disp8+ebp
                //mod 2 : [scaled index]+disp32+ebp
                displacementstring = "";
                switch (_mod)
                {
                    case 0: //sib with a mod of 0. scaled index + disp32
                        {
                            //
                            if (@base == 5)
                            {
                                lastdisassembledata.modrmvaluetype = tdisassemblervaluetype.dvtvalue;
                                lastdisassembledata.modrmvalue = (UIntPtr)intptr.ReadInt32();
                                if (intptr.ReadInt32() < 0)
                                    displacementstring = "-" + inttohexs((UIntPtr)(-intptr.ReadInt32()), 8);
                                else
                                    displacementstring = inttohexs((UIntPtr)intptr.ReadInt32(), 8);
                                last += 4;
                            }
                        }
                        break;
                    case 1: //scaled index + ebp+ disp 8
                        {
                            //displacementstring:=colorreg+'EBP'+endcolor;
                            lastdisassembledata.modrmvaluetype = tdisassemblervaluetype.dvtvalue;
                            lastdisassembledata.modrmvalue = (UIntPtr)intptr.ReadSByte();
                            if (intptr.ReadSByte() < 0)
                                displacementstring = "-" + inttohexs((UIntPtr)(-intptr.ReadSByte()), 2);
                            else
                                displacementstring = inttohexs((UIntPtr)intptr.ReadSByte(), 2);
                            last += 1;
                        }
                        break;

                    case 2: //scaled index + ebp+disp 32
                        {
                            //displacementstring:=colorreg+'EBP'+endcolor;
                            lastdisassembledata.modrmvaluetype = tdisassemblervaluetype.dvtvalue;
                            lastdisassembledata.modrmvalue = (UIntPtr)intptr.ReadInt32();
                            if (intptr.ReadInt32() < 0)
                                displacementstring = "-" + inttohexs((UIntPtr)(-intptr.ReadInt32()), 8);
                            else
                                displacementstring = inttohexs((UIntPtr)intptr.ReadInt32(), 8);
                            last += 4;
                        }
                        break;
                }
                if (result == "")
                    result = displacementstring;
                else
                {
                    if (displacementstring != "")
                    {
                        if (displacementstring[1] == '-')
                            result += displacementstring; //already starts with a sign
                        else
                            result = result + '+' + displacementstring;
                    }
                }
            }
            lastdisassembledata.hassib = true;
            lastdisassembledata.sibindex = index;
            if (Debug)
                result = result + " ss=" + ss + " index=" + index + " base=" + @base;
            return result;
        }
        #endregion
        #region opcode4fst
        public int opcode4fst(String opcode)
        {
            var result = 2; //float
            if (opcode.Length >= 4)
            {
                switch (opcode[3])
                {
                    case 'c':
                    case 'e':
                    case 's':
                        result = 1;
                        break;
                }
            }
            return result;
        }
        #endregion
        #region opcode3fn
        public int opcode3fn(String opcode)
        {
            var result = 2; //float
            if (opcode.Length >= 3)
            {
                switch (opcode[2])
                {
                    case 's':
                        result = 1;
                        break; //fnst
                }
            }
            return result;
        }
        #endregion
        #region opcode3fs
        public int opcode3fs(String opcode)
        {
            var result = 2; //float
            if (opcode.Length >= 3)
            {
                switch (opcode[2])
                {
                    case 't':
                        result = opcode4fst(opcode);
                        break; //fstxxx  (fst, fstp, fstcw, fstenv, fstsw)
                }
            }
            return result;
        }
        #endregion
        #region opcode2f
        public int opcode2f(String opcode)
        {
            var result = 2;
            if (opcode.Length >= 2)
            {
                switch (opcode[1])
                {
                    case 'i':
                        result = 1; break; //fixxxxx
                    case 'n':
                        result = opcode3fn(opcode); break;
                    case 's':
                        result = opcode3fs(opcode); break;
                }
            }
            return result;
        }
        #endregion
        #region opcodetovaluetype
        public int opcodetovaluetype(String opcode)
        {
            var result = 1;
            if (opcode.Length >= 1)
            {
                switch (opcode[0])
                {
                    case 'f':
                        result = opcode2f(opcode);
                        break;
                }
            }
            return result;
        }
        #endregion
        #region previousopcode
        public UIntPtr previousopcode(UIntPtr address, Disassembler d = null)
        {
            var x = UIntPtr.Zero;
            var y = UIntPtr.Zero;
            var s = "";
            var found = false;
            var result = UIntPtr.Zero;
            if (d == null)
                d = this;
            var aggressive = d.faggressivealignment;
            d.faggressivealignment = true;
            x = previousopcodehelp(d, address, 80, ref result);
            if (x != address)
            {
                //no match found 80 bytes from the start
                //try 40
                x = previousopcodehelp(d, address, 40, ref result);
                if (x != address)
                {
                    //nothing with 40, try 20
                    x = previousopcodehelp(d, address, 20, ref result);
                    if (x != address)
                    {
                        //no 20, try 10
                        x = previousopcodehelp(d, address, 10, ref result);
                        if (x != address)
                        {
                            //and if all else fails try to find the closest one
                            result = address - 1;
                            for (var i = 1; i <= 20; i++)
                            {
                                x = address - i;
                                d.disassemble(ref x, ref s);
                                if (x == address)
                                {
                                    result = address - i;
                                    return result;
                                }
                            }
                        }

                    }
                }
            }
            d.faggressivealignment = aggressive;
            return UIntPtr.Zero;
        }
        #endregion
        #region getlastbytestring
        public String getlastbytestring()
        {
            var i = 0;
            var j = 0;
            var cloaked = false;
            var changed = false;
            UInt64 va = 0;
            UInt64 pa = 0;
            var result = "";
            for (i = 0; i < lastdisassembledata.bytes.Length; i++)
            {
                if (syntaxhighlighting)
                {
                    if (lastdisassembledata.iscloaked)
                    {
                        //check if this byte is cloaked (due to pageboundaries)
                        // todo handle cloak
                        //cloaked = hascloakedregioninrange(lastdisassembledata.address + i, 1, va, pa);
                        //if (cloaked) result += "{C00FF00}"; //green
                    }
                    // todo add this!
                    changed = false;//hasaddressbeenchanged(lastdisassembledata.address + i);
                    if (changed)
                        result += "{C0000FF}"; //red
                }
                result += AStringUtils.IntToHex(lastdisassembledata.bytes[i], 2);
                if (i < lastdisassembledata.prefixsize)
                    result += ' ';
                else
                    for (j = 0; j <= lastdisassembledata.seperatorcount - 1; j++)
                        if (lastdisassembledata.seperators[j] == i + 1)   //followed by a seperator
                            result += ' ';
                if (syntaxhighlighting & ((lastdisassembledata.iscloaked & cloaked) || changed))
                {
                    result += "{N}"; //back to default
                    cloaked = false;
                    changed = false;
                }
            }
            return result;
        }
        #endregion
        #region has4bytehexstring
        public Boolean has4bytehexstring(String d, ref String hexstring)
        {
            var hexcount = 0;
            var i = 0;
            var lastmatch = 0;
            var lasthexcount = 0;
            var result = false;
            hexcount = 0;
            lasthexcount = 0;
            lastmatch = 0;
            for (i = d.Length - 1; i >= 0; i--)
            {
                if (ACharUtils.InRange(d[i], 'a', 'f') || ACharUtils.InRange(d[i], 'A', 'F') || ACharUtils.InRange(d[i], '0', '9'))
                {
                    hexcount++;
                    if (hexcount > lasthexcount)
                    {
                        lastmatch = i;
                        lasthexcount = hexcount;
                    }
                }
                else
                    hexcount = 0;
            }
            if (lasthexcount >= 8)
            {
                //it has at least a 4 byte hexadecimal value, so an address specifier
                hexstring = "$" + AStringUtils.Copy(d, lastmatch, lasthexcount);
                result = true;
            }
            return result;
        }
        #endregion
        public Boolean isaddress(UIntPtr address)
        {
            // Allocate the structure to store information of memory
            MemoryBasicInformation memoryInfo;
            // Get the next memory page
            var ret = Kernel32.VirtualQueryEx(SelfSymbolHandler.Process.Handle, address.ToIntPtr(), out memoryInfo, MarshalType<MemoryBasicInformation>.Size);
            return ret != 0 && memoryInfo.State == MemoryStateFlags.Commit;
        }
        #region hasaddress
        public Boolean hasaddress(String d, ref UIntPtr address, Object context = null)
        {
            var s = "";
            var i = 0;
            var j = 0;
            var haserror = false;
            var result = false;
            if (d == "")
                return result;
            if (AStringUtils.Pos(" ", d) == -1)
                return result;
            //if the opcode has a , then get the last part
            i = AStringUtils.Pos(",", d);
            if (i != -1)
                d = AStringUtils.Copy(d, i + 1, d.Length);
            if (context == null)
            {
                if (AStringUtils.Pos("+", d) != -1)
                    return result; //it has an offset, so also a register. without a context, this is impossible
                //check O for a hexadecimal value of 8 bytes and longer.
                if (has4bytehexstring(d, ref s))
                {
                    address = (UIntPtr)AStringUtils.StrToQWordEx(s); //s already has the $ in front
                    result = isaddress(address);
                }
            }
            else
            {
                //a slower but more effective address detector
                //strip of everything before the space, and if there's a [ ] get what's inbetween
                //then use the symbolhandler to find out what it is
                i = AStringUtils.Pos(" ", d);
                if (i != -1)  //it has a space , so a instruction is still present, strip it
                    d = AStringUtils.Copy(d, i + 1, d.Length);
                i = AStringUtils.Pos("[", d);
                if (i != -1)
                    d = AStringUtils.Copy(d, i + 1, AStringUtils.Pos("]", d) - i - 1);
                address = SymbolHandler.GetAddressFromName(d, false, out haserror);
                result = !haserror;
            }
            return result;
        }
        #endregion
        #region previousopcodehelp
        public UIntPtr previousopcodehelp(Disassembler d, UIntPtr address, int distance, ref UIntPtr result2)
        {
            var x = UIntPtr.Zero;
            var y = UIntPtr.Zero;
            var s = "";
            x = address - distance;
            while (x.ToUInt64() < address.ToUInt64())
            {
                y = x;
                d.disassemble(ref x, ref s);
            }
            var result = x;
            result2 = y;
            return result;
        }
        #endregion
        #region inttohexs_withoutsymbols
        public String inttohexs(UIntPtr value, int chars, Boolean signed_ = false, int signedsize = 0)
        {
            //if (howsymbols or showmodules) // todo make this work
            return inttohexs_withoutsymbols(value, chars, signed_, signedsize);
        }
        #endregion
        #region inttohexs_withoutsymbols
        public String inttohexs_withoutsymbols(UIntPtr value, int chars, Boolean signed_ = false, int signedsize = 0)
        {
            var result = "";
            if (chars == 2)
            {
                signed_ = true;
                signedsize = 2;
            }
            if (signed_)
            {
                switch (signedsize)
                {
                    case 2:
                    {
                        if ((SByte)value < 0)
                            result = colorhex + '-' + AStringUtils.IntToHex(-(SByte)value, chars) + endcolor;
                        else
                            result = colorhex + AStringUtils.IntToHex((SByte)value, chars) + endcolor;
                    }
                        break;

                    case 4:
                    {
                        if ((Int16)value < 0)
                            result = colorhex + '-' + AStringUtils.IntToHex(-(Int16)value, chars) + endcolor;
                        else
                            result = colorhex + AStringUtils.IntToHex((Int16)value, chars) + endcolor;
                    }
                        break;

                    case 8:
                    {
                        if ((Int64)value < 0)
                            result = colorhex + '-' + AStringUtils.IntToHex(-(Int64)value, chars) + endcolor;
                        else
                            result = colorhex + AStringUtils.IntToHex((Int64)value, chars) + endcolor;
                    }
                        break;

                    default:
                        result = colorhex + AStringUtils.IntToHex(value, chars) + endcolor;
                        break;
                }
            }
            else
                result = colorhex + AStringUtils.IntToHex(value, chars) + endcolor;
            return result;
        }
        #endregion
        #region inttohexs_withsymbols
        public String inttohexs_withsymbols(UIntPtr value, int chars, Boolean signed_ = false, int signedsize = 0)
        {
            var found = false;
            Byte b = 0;
            UInt16 w = 0;
            UInt32 d = 0;
            var i = 0;
            var result = "";
            if ((showsymbols | showmodules | showsections) & (chars >= 8))
            {
                found = false;
                result = SymbolHandler.GetNameFromAddress(value, showsymbols, showmodules, showsections, null, out found, chars, false);
                //when found, and the symbol contains a space or comma, put the symbolname in quotes
                if (found && (AStringUtils.Pos(" ", result) != -1 || AStringUtils.Pos(",", result) != -1))
                {
                    for (i = result.Length - 1; i >= 0; i--)
                    {
                        if (AArrayUtils.InArray(result[i], '-', '+') || (i == 1))
                        {
                            if (i > 1)
                                result = '"' + AStringUtils.Copy(result, 1, i - 1) + '"' + AStringUtils.Copy(result, i, result.Length);
                            else
                                result = '"' + result + '"';
                            break;
                        }
                    }
                }
                if (syntaxhighlighting)
                {
                    if (!found)
                        result = colorhex + result + endcolor;
                    else
                        result = colorsymbol + result + endcolor;
                }
            }
            else
                result = inttohexs_withoutsymbols(value, chars, signed_, signedsize);
            return result;
        }
        #endregion
        #region splitdisassembledstring
        //public void splitdisassembledstring(String disassembled, Boolean showvalues, ref String address, ref String bytes, ref String opcode, ref String special, pcontext context = null)
        //{
        //    var offset = UIntPtr.Zero;
        //    var value = UIntPtr.Zero;
        //    var e = 0;
        //    var i = 0;
        //    var j = 0;
        //    var j2 = 0;
        //    var k = 0;
        //    var l = 0;
        //    string ts, ts2, ts3;
        //    var actualread = UIntPtr.Zero;
        //    var valuetype = 0;
        //    //    tokens: ttokens;
        //    var fvalue = 0.0f;
        //    var fvalue2 = 0.0;
        //    var tempbuf = new UStringBuilder(127);
        //    var pc = "";
        //    var pwc = "";
        //    tvariabletype variabletype;
        //    var tempaddress = UIntPtr.Zero;
        //    var err = false;
        //    var isjumper = false;
        //    var hexstring = "";
        //    i = AStringUtils.Pos(" - ", disassembled);
        //    address = AStringUtils.Copy(disassembled, 1, i - 1).ToUpper();
        //    i += 3;
        //    j = AStringUtils.PosEx(" - ", disassembled, i);
        //    if (j == -1)
        //        j = disassembled.Length + 1;
        //    bytes = AStringUtils.Copy(disassembled, i, (j - i));
        //    j += 3;
        //    k = AStringUtils.PosEx(" : ", disassembled, j);
        //    l = k;
        //    if (k == -1)
        //        k = disassembled.Length + 1;
        //    opcode = AStringUtils.Copy(disassembled, j, (k - j));
        //    if (showvalues)
        //    {
        //        ts = "";
        //        special = "";
        //        if ((hasaddress(opcode, tempaddress, context)) | ((opcode.Length > 3) && (opcode[0] == 'l') && (opcode[1] == 'e') && (opcode[2] == 'a')))
        //        {
        //            if (isaddress(tempaddress))
        //            {
        //                try
        //                {
        //
        //                    if ((opcode[0] == 'l') && (opcode[1] == 'e') && (opcode[2] == 'a')) //lea
        //                    {
        //                        j = AStringUtils.Pos("[", opcode);
        //                        j2 = AStringUtils.Pos("]", opcode);
        //                        ts2 = AStringUtils.Copy(opcode, j + 1, j2 - j - 1);
        //                        tempaddress = SymbolHandler.GetAddressFromName(ts2, false, out err);
        //                        if (err)
        //                            return; //error
        //                    }
        //                }
        //                catch
        //                {
        //                    tempaddress = UIntPtr.Zero; ////////////////////////// REACHED WITH INDEX FIX
        //                }
        //                isjumper = false;
        //                if (opcode[1] == 'j')
        //                    isjumper = true; //jmp, jx
        //                if ((opcode[1] == 'l') && (opcode[2] == 'o') && (opcode[3] == 'o'))
        //                    isjumper = true; //loop
        //                if ((opcode[1] == 'c') && (opcode[2] == 'a'))
        //                    isjumper = true; //call
        //                valuetype = opcodetovaluetype(opcode);
        //                i = pos("[", disassembled);
        //                if (i > 0)
        //                {
        //                    //it might have an override
        //                    if (pos("qword ptr", opcode) > 0)
        //                        valuetype = 4;
        //                    else if (pos("dword ptr", opcode) > 0) //usually a double
        //                        valuetype = 2;
        //                    else if (pos("word ptr", opcode) > 0)
        //                        valuetype = 1;
        //                    else if (pos("byte ptr", opcode) > 0)
        //                        valuetype = 0;
        //                    else
        //                    {
        //                        //check the register used
        //                        j2 = pos(",[", opcode);
        //                        k = pos("],", opcode);
        //                        if (j2 > 0)  //register in front
        //                        {
        //                            l = pos(" ", opcode);
        //                            ts3 = copy(opcode, l + 1, j2 - l - 1);
        //
        //                            switch (tokentoregisterbit(uppercase(ts3)))
        //                            {
        //                                case ttregister8bit:
        //                                    valuetype = 0;
        //                                    break;
        //                                case ttregister16bit:
        //                                    valuetype = 1;
        //                                    break;
        //                                case ttregister32bit:
        //                                    valuetype = 2;
        //                                    break;
        //                                default: valuetype = 2;
        //                                    break;
        //                            }
        //                        }
        //                        else
        //                        if (k > 0)   //register after ],
        //                        {
        //                            l = pos("],", opcode);
        //                            ts3 = copy(opcode, l + 2, length(opcode) - l - 1);
        //
        //                            switch (tokentoregisterbit(uppercase(ts3)))
        //                            {
        //                                case ttregister8bit: valuetype = 0; break;
        //                                case ttregister16bit: valuetype = 1; break;
        //                                case ttregister32bit: valuetype = 2; break;
        //                                default: valuetype = 2; break;
        //                            }
        //                        } //else no idea, check var
        //                    }
        //                } //not an address specifier
        //
        //                if (valuetype == 2)
        //                {
        //                    if (readprocessmemory(processhandle, (pointer)(tempaddress), &tempbuf[0], 16, actualread))
        //                    {
        //                        variabletype = findtypeofdata(tempaddress, &tempbuf[0], 16);
        //                        switch (variabletype)
        //                        {
        //                            case vtsingle: valuetype = 3; break;
        //                            case vtdouble: valuetype = 4; break;
        //                            case vtstring: valuetype = 5; break;
        //                            case vtunicodestring: valuetype = 6; break;
        //                        }
        //                    }
        //                }
        //                if (isjumper)
        //                    valuetype = 2; //handle it as a dword
        //                value = 0;
        //                fvalue = 0;
        //                fvalue2 = 0;
        //                switch (valuetype)
        //                {
        //                    case 0: if (readprocessmemory(processhandle, (pointer)(tempaddress), &value, 1, actualread)) ts = AStringUtils.IntToHex(value, 2); break;
        //                    case 1: if (readprocessmemory(processhandle, (pointer)(tempaddress), &value, 2, actualread)) ts = AStringUtils.IntToHex(value, 4); break;
        //                    case 2:
        //                        if (readprocessmemory(processhandle, (pointer)(tempaddress), &value, 4, actualread))
        //                        {
        //                            if (isjumper && ((value & 0xffff) == 0x25ff))  //it's a jmp [xxxxxxxx]    / call [xxxxxx] ...
        //                            {
        //                                value = 0;
        //                                if (readprocessmemory(processhandle, (pointer)(tempaddress + 2), &value, 4, actualread))
        //                                {
        //                                    if (is64bit)
        //                                        value = tempaddress + 6 + value;
        //                                    if (readprocessmemory(processhandle, (pointer)(value), &value, processhandler.pointersize, actualread))
        //                                        ts = "->" + symhandler.getnamefromaddress(value, symhandler.showsymbols, symhandler.showmodules, symhandler.showsections, nil, nil, 8, false);
        //                                }
        //                            }
        //                            else
        //                                ts = symhandler.getnamefromaddress(value, symhandler.showsymbols, symhandler.showmodules, symhandler.showsections, nil, nil, 8, false);
        //                            if (isjumper)
        //                            {
        //                                //check if ts is a name or a hexadecimal value
        //                                //if hex, don't use it
        //                                val("$" + ts, j, i);
        //                                if (i == 0)
        //                                    ts = ""; //zero the string, it's a hexadecimal string
        //                            }
        //                        }
        //                        break;
        //                    case 3:
        //                        if (readprocessmemory(processhandle, (pointer)(tempaddress), &fvalue, 4, actualread))
        //                            ts = format("(float)%.4f", set::of(fvalue, eos));
        //                        break;
        //                    case 4:
        //                        if (readprocessmemory(processhandle, (pointer)(tempaddress), &fvalue2, 8, actualread))
        //                            ts = format("(double)%.4f", set::of(fvalue2, eos));
        //                        break;
        //                    case 5:
        //                        {
        //                            actualread = 0;
        //                            readprocessmemory(processhandle, (pointer)(tempaddress), &tempbuf[0], 128, actualread);
        //                            tempbuf[127] = 0;
        //                            tempbuf[126] = ord('.');
        //                            tempbuf[125] = ord('.');
        //                            tempbuf[124] = ord('.');
        //                            if (actualread > 0)
        //                                tempbuf[actualread - 1] = 0;
        //                            pc = &tempbuf[0];
        //                            ts = '"' + pc + '"';
        //                        }
        //                        break;
        //                    case 6:
        //                        {
        //                            actualread = 0;
        //                            readprocessmemory(processhandle, (pointer)(tempaddress), &tempbuf[0], 128, actualread);
        //                            tempbuf[127] = 0;
        //                            tempbuf[126] = 0;
        //                            tempbuf[125] = 0;
        //                            tempbuf[124] = ord('.');
        //                            tempbuf[123] = 0;
        //                            tempbuf[122] = ord('.');
        //                            tempbuf[121] = 0;
        //                            tempbuf[120] = ord('.');
        //                            if (actualread > 1)
        //                            {
        //                                tempbuf[actualread - 1] = 0;
        //                                tempbuf[actualread - 2] = 0;
        //                            }
        //                            pwc = &tempbuf[0];
        //                            ts = "\"\"" + pwc + "\"\"";
        //                        }
        //                        break;
        //                }
        //                if (ts != "")
        //                    ts = '[' + ts + ']';
        //            }
        //            else
        //            {
        //                //tempaddress doesn't seem to be an address
        //                variabletype = findtypeofdata(0, &tempaddress, processhandler.pointersize);
        //                if (variabletype == vtsingle)
        //                    ts = UStringUtils.Sprintf("(float)%.4f", tempaddress.ToIntPtr().ReadFloat());
        //            }
        //        }
        //        special = ts;
        //    }
        //    else
        //        special = "";
        //}
        #endregion
        #region decodelastparameterstostring
        //public String decodelastparameterstostring()
        //{
        //    UIntPtr jumpaddress = UIntPtr.Zero;
        //    var buffer = new AByteArray();
        //    buffer.SetLength(63);
        //    var x = UIntPtr.Zero;
        //    var a = false;
        //    var s = "";
        //    var parametercount = 0;
        //    var sv1 = "";
        //    var sv2 = "";
        //    var i = 0;
        //    if (lastdisassembledata.commentsoverride != "")
        //        return lastdisassembledata.commentsoverride;
        //    var result = "";
        //    if (lastdisassembledata.isjump)
        //    {
        //        if (lastdisassembledata.modrmvaluetype == tdisassemblervaluetype.tdisassemblervaluetype.dvtaddress)
        //        {
        //            jumpaddress = lastdisassembledata.modrmvalue;
        //            if (~readprocessmemory(processhandle, (pointer)(jumpaddress), &jumpaddress, processhandler.pointersize, x))
        //                return result;
        //        }
        //        else
        //        {
        //            if (lastdisassembledata.parametervaluetype == tdisassemblervaluetype.tdisassemblervaluetype.dvtnone)
        //                return result; //jump with no address (e.g reg)
        //            jumpaddress = lastdisassembledata.parametervalue;
        //        }
        //        //check if the bytes at jumpAddress is ff 25 (jmp [xxxxxxxx])
        //        if (readprocessmemory(processhandle, (pointer)(jumpaddress), &buffer[0], 6, x))
        //        {
        //
        //            if ((buffer[0] == 0xff) && (buffer[1] == 0x25))
        //            {
        //                result = result + "->";  //double, so ->->
        //                if (is64bit)
        //                    jumpaddress = jumpaddress + 6 + pinteger(&buffer[2]); //jumpaddress+6 because of relative addressing
        //                else
        //                    jumpaddress = pdword(&buffer[2]);
        //                //jumpaddress now contains the address of the address to jump to
        //                //so, get the address it actually jumps to
        //                if (~readprocessmemory(processhandle, (pointer)(jumpaddress), &jumpaddress, processhandler.pointersize, x))
        //                    return result;
        //            }
        //            s = symhandler.getnamefromaddress(jumpaddress, symhandler.showsymbols, symhandler.showmodules, symhandler.showsections, nil, nil, 8, false);
        //            if (pos(s, lastdisassembledata.parameters) == 0)  //no need to show a comment if it's exactly the same
        //                result = result + "->" + s;
        //        }
        //    }
        //    else
        //    {
        //        if ((lastdisassembledata.modrmvaluetype == tdisassemblervaluetype.tdisassemblervaluetype.dvtaddress) || (lastdisassembledata.parametervaluetype != tdisassemblervaluetype.tdisassemblervaluetype.dvtnone))
        //        {
        //            a = false;
        //            parametercount = 0;
        //            if (lastdisassembledata.parametervaluetype != tdisassemblervaluetype.tdisassemblervaluetype.dvtnone)
        //                parametercount += 1;
        //            if (lastdisassembledata.modrmvaluetype == tdisassemblervaluetype.tdisassemblervaluetype.dvtaddress)
        //                parametercount += 1;
        //            if (lastdisassembledata.modrmvaluetype == tdisassemblervaluetype.tdisassemblervaluetype.dvtaddress)
        //            {
        //                if ((parametercount > 1) && (modrmposition == mright))
        //                    values[1].value = lastdisassembledata.modrmvalue;
        //                else
        //                    values[0].value = lastdisassembledata.modrmvalue;
        //            }
        //            if (lastdisassembledata.parametervaluetype != tdisassemblervaluetype.tdisassemblervaluetype.dvtnone)
        //            {
        //                if ((parametercount > 1) && (modrmposition != mright))
        //                    values[1].value = lastdisassembledata.parametervalue;
        //                else
        //                    values[0].value = lastdisassembledata.parametervalue;
        //            }
        //            //for (i = 0; i <= parametercount - 1; i++)
        //            //{
        //            //    values[i].s = "";
        //            //    if (isaddress(values[i].value))
        //            //    {
        //            //        values[i].isaddress = true;
        //            //        x = 0;
        //            //        values[i].vtype = vtdword;
        //            //        readprocessmemory(processhandle, (pointer)(values[i].value), &buffer[0], 63, x);
        //            //        if (x > 0)
        //            //        {
        //            //            if (lastdisassembledata.isfloat)
        //            //            {
        //            //                switch (lastdisassembledata.datasize)
        //            //                {
        //            //                    case 4:
        //            //                        values[i].vtype = vtsingle;
        //            //                        break;
        //            //                    case 8:
        //            //                        values[i].vtype = vtdouble;
        //            //                        break;
        //            //                    case 10:
        //            //                        values[i].vtype = vtqword;
        //            //                        break; 
        //            //                }
        //            //            }
        //            //            else
        //            //                values[i].vtype = findtypeofdata(values[i].value, &buffer[0], x);
        //            //        }
        //            //        else
        //            //        {
        //            //            values[i].s = "";
        //            //            continue;
        //            //        }
        //            //    }
        //            //    else
        //            //    {
        //            //        x = sizeof(values[i].value);
        //            //        pptruint(&buffer[0]) = values[i].value; //assign it so I don't have to make two compare routines
        //            //        values[i].vtype = findtypeofdata(0, &buffer[0], x);
        //            //        values[i].isaddress = false;
        //            //    }
        //            //    switch (values[i].vtype)
        //            //    {
        //            //        case vtbyte:
        //            //            values[i].s = (buffer[0]);
        //            //            break;
        //            //        case vtword:
        //            //            values[i].s = (psmallint(&buffer[0]));
        //            //            break;
        //            //        case vtdword:
        //            //            if (a)
        //            //                values[i].s = AStringUtils.IntToHex(pdword(&buffer[0]), 8);
        //            //            else
        //            //                values[i].s = (pinteger(&buffer[0]));
        //            //            break;
        //            //        case vtqword:
        //            //            values[i].s = (pint64(&buffer[0]));
        //            //            break;
        //            //        case vtsingle:
        //            //            values[i].s = format("%.2f", set::of(psingle(&buffer[0]), eos));
        //            //            break;
        //            //        case vtdouble:
        //            //            values[i].s = format("%.2f", set::of(pdouble(&buffer[0]), eos));
        //            //            break;
        //            //        case vtstring:
        //            //            {
        //            //                buffer[x] = 0;
        //            //                values[i].s = '"' + (pchar)(&buffer[0]) + '"';
        //            //            }
        //            //            break;
        //            //        case vtunicodestring:
        //            //            {
        //            //                buffer[x] = 0;
        //            //                if (x > 0)
        //            //                    buffer[x - 1] = 0;
        //            //
        //            //                values[i].s = '"' + pwidechar(&buffer[0]) + '"';
        //            //            }
        //            //            break;
        //            //        case vtpointer:
        //            //            {
        //            //                if (SelfSymbolHandler.Process.IsX64)
        //            //                    values[i].s = AStringUtils.IntToHex(pqword(&buffer[0]), 8);
        //            //                else
        //            //                    values[i].s = AStringUtils.IntToHex(pdword(&buffer[0]), 8);
        //            //
        //            //            }
        //            //            break;
        //            //    }
        //            //    // result:=VariableTypeToString(vtype);
        //            //    if (values[i].isaddress & (values[i].s != ""))
        //            //        values[i].s = '(' + values[i].s + ')';
        //            //    if (i == 0)
        //            //        result = result + values[i].s;
        //            //    else
        //            //        result = result + ',' + values[i].s;
        //            //}
        //        }
        //    }
        //    return result;
        //}
        #endregion
        #region setsyntaxhighlighting
        public void setsyntaxhighlighting(Boolean state)
        {
            fsyntaxhighlighting = state;
            if (state)
            {
                endcolor = "{N}";
                colorhex = "{H}";
                colorreg = "{R}";
                colorsymbol = "{S}";
            }
            else
            {
                //no color codes
                endcolor = "";
                colorhex = "";
                colorreg = "";
                colorsymbol = "";
            }
        }
        #endregion
        #region readmemory
        public int readmemory(UIntPtr address, UIntPtr destination, int size)
        {
            // todo handle cloak support
            //readprocessmemorywithcloaksupport(processhandle, (pointer)(address), destination, size, actualread);
            Kernel32.ReadProcessMemory(SelfSymbolHandler.Process.Handle, address.ToIntPtr(), destination.ToIntPtr(), size, out var actualread);
            if (actualread == 0 && ((address.ToUInt64() + ((UInt64) size & 0xfffff000UL)) > (address.ToUInt64() & 0xfffff000UL))) //did not read a single byte and overlaps a pageboundary
            {
                var p1 = 0;
                do
                {
                    var i = Math.Min(size, (int) (4096 - (address.ToUInt64() & 0xfff)));
                    // todo handle cloak support
                    //readprocessmemorywithcloaksupport(processhandle, (pointer)(address), destination, i, actualread);
                    Kernel32.ReadProcessMemory(SelfSymbolHandler.Process.Handle, address.ToIntPtr(), destination.ToIntPtr(), i, out actualread);
                    p1 += actualread;
                    address += actualread;
                    size -= actualread;
                    destination += actualread;
                } while (!(actualread == 0 || size == 0));
                return p1;
            }
            return actualread;
        }
        #endregion
        #region disassemble
        public String disassemble(ref UIntPtr offset)
        {
            var ignore = "";
            var result = disassemble(ref offset, ref ignore);
            return result;
        }
        public String disassemble(ref UIntPtr offset, ref String description)
        {
            var actualread = 0;
            var startoffset = UIntPtr.Zero;
            var initialoffset = UIntPtr.Zero;
            String tempresult = "";
            var tempdescription = "";
            String tempst;
            var i = 0;
            var j = 0;
            var k = 0;
            var isprefix = false;
            UInt32 last = 0;
            var foundit = false;
            var tempaddress = UIntPtr.Zero;
            var prefixsize = 0;
            //tmoduleinfo mi;
            UInt64 va = 0;
            UInt64 pa = 0;
            var novexpossible = false;
            var bytestomove = 0;
            UInt32 td = 0;
            var breaknow = false;
            var result = "";
            try
            {
                lastdisassembledata.isfloat = false;
                lastdisassembledata.isfloat64 = false;
                lastdisassembledata.iscloaked = false;
                lastdisassembledata.commentsoverride = "";
                // todo uncomment
                //if (defaultbinutils != nil)
                //{
                //    //use this
                //    lastdisassembledata.address = offset;
                //    lastdisassembledata.seperatorcount = 0;
                //    defaultbinutils.disassemble(lastdisassembledata);
                //    result = AStringUtils.IntToHex(lastdisassembledata.address, 8);
                //    result = result + " - ";
                //    for (i = 0; i <= length(lastdisassembledata.bytes) - 1; i++)
                //        result = result + AStringUtils.IntToHex(lastdisassembledata.bytes[i], 2) + ' ';
                //    result = result + " - ";
                //    result = result + lastdisassembledata.opcode;
                //    result = result + ' ';
                //    result = result + lastdisassembledata.parameters;
                //    if (length(lastdisassembledata.bytes) > 0)
                //        offset += length(lastdisassembledata.bytes);
                //    else
                //    {
                //        if (processhandler.systemarchitecture == archarm)
                //        {
                //            if ((offset | 1) == 1)
                //                offset += 2;
                //            else
                //                offset += 4;
                //        }
                //        else
                //            offset += 1;
                //    }
                //    return result;
                //}
                if (is64bitoverride)
                    is64bit = is64bitoverridestate;
                else
                {
                    // todo uncomment
                    //is64bit = SelfSymbolHandler.Process.IsX64;
                    //if (cpu64)
                    //{
                    //    if (offset >= qword(0))
                    //        is64bit = true;
                    //}
                    //
                    //if (symhandler.getmodulebyaddress(offset, mi))
                    //    is64bit = mi.is64bitmodule;
                }
                // todo handle arm
                //if (processhandler.systemarchitecture == archarm)
                //{
                //    result = armdisassembler.disassemble(offset);
                //    lastdisassembledata = armdisassembler.lastdisassembledata;
                //    return result;
                //}
                modrmposition = tmrpos.mnone;
                last = 0;
                tempresult = "";
                lastdisassembledata.bytes.SetLength(0);
                lastdisassembledata.address = offset;
                lastdisassembledata.seperatorcount = 0;
                lastdisassembledata.prefix = "";
                lastdisassembledata.prefixsize = 0;
                lastdisassembledata.opcode = "";
                lastdisassembledata.parameters = "";
                lastdisassembledata.isjump = false;
                lastdisassembledata.iscall = false;
                lastdisassembledata.isret = false;
                lastdisassembledata.isconditionaljump = false;
                lastdisassembledata.modrmvaluetype = tdisassemblervaluetype.dvtnone;
                lastdisassembledata.parametervaluetype = tdisassemblervaluetype.dvtnone;
                lastdisassembledata.hassib = false;
                lastdisassembledata.datasize = 0;
                lastdisassembledata.riprelative = 0;
                // todo uncomment user override
                //if (assigned(ondisassembleoverride))  //check if the user has defined it's own disassembler
                //{
                //    //if so, call the OnDisassemble propery, and if it returns true don't handle the original
                //    if (ondisassembleoverride(self, offset, LastDisassembleData, result, description))
                //    {
                //        if (length(lastdisassembledata.bytes) == 0)  //BAD!
                //            setlength(lastdisassembledata.bytes, 1);
                //
                //        offset += length(lastdisassembledata.bytes);
                //        return result;
                //    }
                //}
                // //also check global overrides
                // for (i = 0; i <= length(globaldisassembleoverrides) - 1; i++)
                // {
                //     if (assigned(globaldisassembleoverrides[i]))
                //     {
                //         if (globaldisassembleoverrides[i](self, offset, LastDisassembleData, result, description))
                //         {
                //             if (length(lastdisassembledata.bytes) == 0)  //BAD!
                //                 setlength(lastdisassembledata.bytes, 1);
                // 
                //             offset += length(lastdisassembledata.bytes);
                //             return result;
                //         }
                //     }
                // }
                if (isdefault)
                {
                    // todo uncomment
                    showsymbols = false;//symhandler.showsymbols;
                    showmodules = false;//symhandler.showmodules;
                }
                //if (showsymbols | showmodules)
                //    inttohexs = inttohexs_withsymbols;
                //else
                //    inttohexs = inttohexs_withoutsymbols;
                riprelative = false;
                if (dataonly)
                    result = "";
                else
                    result = AStringUtils.IntToHex(offset, 8) + " - ";
                isprefix = true;
                prefix = new tprefix(0xf0, 0xf2, 0xf3, 0x2e, 0x36, 0x3e, 0x26, 0x64, 0x65, 0x66, 0x67);
                prefix2 = new tprefix();
                startoffset = offset;
                initialoffset = offset;
                for (i = 32; i <= 63; i++) //debug code
                    _memory[i] = 0xce;
                actualread = readmemory(offset, _memory.ToIntPtr().ToUIntPtr(), 32);
                var memory = _memory.Shadow();
                if (actualread > 0)
                {
                    //{$ifndef jni}
                    //if debuggerthread<>nil then
                    //  for i:=0 to actualread-1 do
                    //    if memory[i]=$cc then
                    //    begin
                    //      //memory[i]:=debuggerthread.getrealbyte(offset+i);
                    //
                    //      repairbreakbyte(offset+i, memory[i]);
                    //    end;
                    //{$endif}
                    while (isprefix)
                    {
                        offset += 1; //offset will always inc by 1
                        if (prefix.Contains(memory[0]))
                        {
                            if (lastdisassembledata.bytes.Length > 10)
                            {
                                //prevent a too long prefix from crashing the disassembler (e.g 12GB filled with one prefix....)
                                isprefix = false;
                                break;
                            }
                            lastdisassembledata.bytes.Inc();
                            lastdisassembledata.bytes.Last = memory[0];
                            if (!dataonly)
                                result = result + inttohexs((UIntPtr)memory[0], 2) + ' ';
                            isprefix = true;
                            startoffset += 1;
                            prefix2.Add(memory[0]);
                            memory.Inc();
                            if (offset.ToUInt64() > initialoffset.ToUInt64() + 24)  //too long
                            {
                                description = "";
                                lastdisassembledata.opcode = "??";
                                offset = initialoffset + 1;
                                return result;
                            }
            
                        }
                        else
                            isprefix = false;
                    }
                    if (prefix2.Contains(0xf0))
                    {
                        tempresult = "lock ";
                        novexpossible = true;
                    }
                    if (prefix2.Contains(0xf2))
                    {
                        tempresult += "repne ";
                        novexpossible = true;
                    }
                    if (prefix2.Contains(0xf3))
                    {
                        tempresult += "repe ";
                        novexpossible = true;
                    }
                    lastdisassembledata.prefix = tempresult;
                    opcodeflags.Clear();
                    rexprefix = 0;
                    if (is64bit)
                    {
                        if (AMathUtils.InRangeX(memory[0], 0x40, 0x4f))  //does it start with a rex prefix ?
                        {
                            lastdisassembledata.bytes.Inc();
                            lastdisassembledata.bytes.Last = memory[0];
                            rexprefix = memory[0];
                            opcodeflags.b = (rexprefix & bit_rex_b) == bit_rex_b;
                            opcodeflags.x = (rexprefix & bit_rex_x) == bit_rex_x;
                            opcodeflags.r = (rexprefix & bit_rex_r) == bit_rex_r;
                            opcodeflags.w = (rexprefix & bit_rex_w) == bit_rex_w;
                            if (!dataonly)
                                result = result + inttohexs((UIntPtr)rexprefix, 2) + ' ';
                            offset += 1;
                            startoffset += 1;
                            prefix2.Add(rexprefix);
                            memory.Inc();
                            novexpossible = true;
                            if (offset.ToUInt64() > initialoffset.ToUInt64() + 24)
                            {
                                description = "";
                                lastdisassembledata.opcode = "??";
                                offset = initialoffset + 1;
                                return result;
                            }
                        }
                    }
                    prefixsize = lastdisassembledata.bytes.Length;
                    lastdisassembledata.prefixsize = prefixsize;
                    if (novexpossible == false && AMathUtils.InRangeX(memory[0], 0xc4, 0xc5))
                    {
                        // todo uncomment and fix vex
                        hasvex = false;
                        //hasvex = true;
                        //if (memory[0] == 0xc5)
                        //{
                        //    //2 byte VEX
                        //    prefixsize += 2;
                        //    opcodeflags.pp = pvex2byte(&memory[1])->pp;
                        //    opcodeflags.l = pvex2byte(&memory[1])->l == 1;
                        //    opcodeflags.vvvv = pvex2byte(&memory[1])->vvvv;
                        //    opcodeflags.r = pvex2byte(&memory[1])->r == 0;
                        //    opcodeflags.mmmmm = 1;
                        //    i = length(lastdisassembledata.bytes);
                        //    setlength(lastdisassembledata.bytes, length(lastdisassembledata.bytes) + 2);
                        //    lastdisassembledata.bytes[i] = memory[0];
                        //    lastdisassembledata.bytes[i + 1] = memory[1];
                        //    memory[1] = 0xf;
                        //    bytestomove = 1;
                        //    memory.Inc();
                        //    offset += 1;
                        //}
                        //else
                        //{
                        //    //3 byte vex
                        //    prefixsize += 3;
                        //    opcodeflags.pp = pvex3byte(&memory[1])->pp;
                        //    opcodeflags.l = pvex3byte(&memory[1])->l == 1;
                        //    opcodeflags.vvvv = pvex3byte(&memory[1])->vvvv;
                        //    opcodeflags.w = pvex3byte(&memory[1])->w == 1; //this one is NOT inverted
                        //    opcodeflags.mmmmm = pvex3byte(&memory[1])->mmmmm;
                        //    opcodeflags.b = pvex3byte(&memory[1])->b == 0;
                        //    opcodeflags.x = pvex3byte(&memory[1])->x == 0;
                        //    opcodeflags.r = pvex3byte(&memory[1])->r == 0;
                        //    i = length(lastdisassembledata.bytes);
                        //    setlength(lastdisassembledata.bytes, i + 3);
                        //    lastdisassembledata.bytes[i] = memory[0];
                        //    lastdisassembledata.bytes[i + 1] = memory[1];
                        //    lastdisassembledata.bytes[i + 2] = memory[2];
                        //    /* mmmmm:
                        //    00000: Reserved for future use (will #UD)
                        //    00001: implied 0F leading opcode byte
                        //    00010: implied 0F 38 leading opcode bytes
                        //    00011: implied 0F 3A leading opcode bytes
                        //    00100-11111: Reserved for future use (will #UD)
                        //    */
                        //    bytestomove = 3; //number of bytes to shift
                        //    switch (opcodeflags.mmmmm)
                        //    {
                        //        case 1:
                        //            {
                        //                bytestomove = 2;
                        //                memory[2] = 0xf;
                        //            }
                        //            break;
                        //        case 2:
                        //            {
                        //                bytestomove = 1;
                        //                memory[1] = 0xf;
                        //                memory[2] = 0x38;
                        //            }
                        //            break;
                        //        case 3:
                        //            {
                        //                bytestomove = 1;
                        //                memory[1] = 0xf;
                        //                memory[2] = 0x3a;
                        //            }
                        //            break; //else invalid
                        //    }
                        //    memory.IncBy(bytestomove);
                        //    offset += bytestomove;
                        //}
                        //switch (opcodeflags.pp)
                        //{
                        //    case 1:
                        //        prefix2.Add(0x66);
                        //        break;
                        //    case 2:
                        //        prefix2.Add(0xf3);
                        //        break;
                        //    case 3:
                        //        prefix2.Add(0xf2);
                        //        break;
                        //}
                    }
                    else
                        hasvex = false;
                    //compatibility fix for code that still checks for rex.* or sets it as a temporary flag replacement
                    rexprefix = (Byte)(opcodeflags.b ? rexprefix | bit_rex_b : rexprefix);
                    rexprefix = (Byte)(opcodeflags.x ? rexprefix | bit_rex_x : rexprefix);
                    rexprefix = (Byte)(opcodeflags.r ? rexprefix | bit_rex_r : rexprefix);
                    rexprefix = (Byte)(opcodeflags.w ? rexprefix | bit_rex_w : rexprefix);
                    #region Builk Of The Beast
                    var aggressivealignment = faggressivealignment;
                    switch (memory[0])
                    {  //opcode
                        case 0:
                            {
                                if ((aggressivealignment & (((offset.ToUInt64()) & 0xf) == 0) && (memory[1] != 0)) || ((memory[1] == 0x55) && (memory[2] == 0x89) && (memory[3] == 0xe5)))
                                {
                                    description = "Filler";
                                    lastdisassembledata.opcode = "db";
                                    lastdisassembledata.parameters = AStringUtils.IntToHex(memory[0], 2);
                                }
                                else
                                {
                                    description = "Add";

                                    lastdisassembledata.opcode = "add";
                                    lastdisassembledata.parameters = modrm(memory, prefix2, 1, 2, ref last) + r8(memory[1]);
                                    offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                }
                            }
                            break;

                        case 0x1:
                            {
                                description = "Add";

                                lastdisassembledata.opcode = "add";
                                if (prefix2.Contains(0x66)) lastdisassembledata.parameters = modrm(memory, prefix2, 1, 1, ref last) + r16(memory[1]);
                                else
                                    lastdisassembledata.parameters = modrm(memory, prefix2, 1, 0, ref last) + r32(memory[1]);


                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                            }
                            break;

                        case 0x2:
                            {
                                description = "Add";

                                lastdisassembledata.opcode = "add";
                                lastdisassembledata.parameters = r8(memory[1]) + modrm(memory, prefix2, 1, 2, ref last, tmrpos.mright);

                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                            }
                            break;

                        case 0x3:
                            {
                                description = "Add";
                                lastdisassembledata.opcode = "add";
                                if (prefix2.Contains(0x66)) lastdisassembledata.parameters = r16(memory[1]) + modrm(memory, prefix2, 1, 1, ref last, tmrpos.mright);
                                else
                                    lastdisassembledata.parameters = r32(memory[1]) + modrm(memory, prefix2, 1, 0, ref last, tmrpos.mright);


                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                            }
                            break;



                        case 0x4:
                            {
                                description = "Add " + AStringUtils.IntToHex(memory[1], 2) + " to AL";
                                lastdisassembledata.opcode = "add";
                                lastdisassembledata.parametervaluetype = tdisassemblervaluetype.dvtvalue;
                                lastdisassembledata.parametervalue = (UIntPtr)memory[1];
                                lastdisassembledata.parameters = colorreg + "al" + endcolor + ',' + inttohexs((UIntPtr)memory[1], 2);

                                lastdisassembledata.seperators[lastdisassembledata.seperatorcount] = 1;
                                lastdisassembledata.seperatorcount += 1;

                                offset += 1;
                            }
                            break;

                        case 0x5:
                            {
                                lastdisassembledata.opcode = "add";
                                lastdisassembledata.parametervaluetype = tdisassemblervaluetype.dvtvalue;


                                var wordptr = memory.ToIntPtr(1).ReadUInt16();
                                var dwordptr = memory.ToIntPtr(1).ReadUInt32();
                                if (prefix2.Contains(0x66))
                                {
                                    lastdisassembledata.parametervaluetype = tdisassemblervaluetype.dvtvalue;
                                    lastdisassembledata.parametervalue = (UIntPtr)wordptr;
                                    lastdisassembledata.parameters = colorreg + "ax" + endcolor + ',' + inttohexs((UIntPtr)wordptr, 4);

                                    description = "add " + AStringUtils.IntToHex(wordptr, 4) + " to ax";



                                    offset += 2;
                                }
                                else
                                {
                                    if (rex_w)
                                    {
                                        lastdisassembledata.parametervaluetype = tdisassemblervaluetype.dvtvalue;
                                        lastdisassembledata.parametervalue = (UIntPtr)dwordptr;
                                        lastdisassembledata.parameters = colorreg + "rax" + endcolor + ',' + inttohexs((UIntPtr)(Int32)dwordptr, 8);

                                        description = "add " + AStringUtils.IntToHex(dwordptr, 8) + " to rax (sign extended)";
                                    }
                                    else
                                    {
                                        lastdisassembledata.parametervaluetype = tdisassemblervaluetype.dvtvalue;
                                        lastdisassembledata.parametervalue = (UIntPtr)dwordptr;
                                        lastdisassembledata.parameters = colorreg + "eax" + endcolor + ',' + inttohexs((UIntPtr)dwordptr, 8);

                                        description = "add " + AStringUtils.IntToHex(dwordptr, 8) + " to eax";
                                    }
                                    offset += 4;
                                }

                                lastdisassembledata.seperators[lastdisassembledata.seperatorcount] = 1;
                                lastdisassembledata.seperatorcount += 1;
                            }
                            break;

                        case 0x6:
                            {
                                lastdisassembledata.opcode = "push";
                                lastdisassembledata.parameters = colorreg + "es" + endcolor;
                                description = "place es on the stack";
                            }
                            break;

                        case 0x7:
                            {
                                lastdisassembledata.opcode = "pop";
                                lastdisassembledata.parameters = colorreg + "es" + endcolor;
                                description = "remove es from the stack";
                            }
                            break;

                        case 0x8:
                            {
                                description = "logical inclusive or";
                                lastdisassembledata.opcode = "or";
                                lastdisassembledata.parameters = modrm(memory, prefix2, 1, 2, ref last) + r8(memory[1]);
                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                            }
                            break;

                        case 0x9:
                            {
                                description = "logical inclusive or";
                                lastdisassembledata.opcode = "or";
                                if (prefix2.Contains(0x66)) lastdisassembledata.parameters = modrm(memory, prefix2, 1, 1, ref last) + r16(memory[1]);
                                else
                                    lastdisassembledata.parameters = modrm(memory, prefix2, 1, 0, ref last) + r32(memory[1]);
                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                            }
                            break;

                        case 0xa:
                            {
                                description = "logical inclusive or";
                                lastdisassembledata.opcode = "or";
                                lastdisassembledata.parameters = r8(memory[1]) + modrm(memory, prefix2, 1, 2, ref last, tmrpos.mright);
                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                            }
                            break;

                        case 0xb:
                            {
                                description = "logical inclusive or";
                                lastdisassembledata.opcode = "or";
                                if (prefix2.Contains(0x66)) lastdisassembledata.parameters = r16(memory[1]) + modrm(memory, prefix2, 1, 1, ref last, tmrpos.mright);
                                else
                                    lastdisassembledata.parameters = r32(memory[1]) + modrm(memory, prefix2, 1, 0, ref last, tmrpos.mright);

                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                            }
                            break;

                        case 0xc:
                            {
                                description = "logical inclusive or";
                                lastdisassembledata.opcode = "or";
                                lastdisassembledata.parameters = colorreg + "al" + endcolor + ',' + inttohexs((UIntPtr)memory[1], 2);
                                lastdisassembledata.parametervaluetype = tdisassemblervaluetype.dvtvalue;
                                lastdisassembledata.parametervalue = (UIntPtr)memory[1];

                                lastdisassembledata.seperators[lastdisassembledata.seperatorcount] = 1;
                                lastdisassembledata.seperatorcount += 1;

                                offset += 1;
                            }
                            break;

                        case 0xd:
                            {
                                description = "logical inclusive or";
                                lastdisassembledata.opcode = "or";
                                lastdisassembledata.parametervaluetype = tdisassemblervaluetype.dvtvalue;

                                if (prefix2.Contains(0x66))
                                {
                                    var wordptr = memory.ToIntPtr(1).ReadUInt16();;

                                    lastdisassembledata.parametervalue = (UIntPtr)wordptr;
                                    lastdisassembledata.parameters = colorreg + "ax" + endcolor + ',' + inttohexs(lastdisassembledata.parametervalue, 4);

                                    offset += 2;
                                }
                                else
                                {
                                    var dwordptr = memory.ToIntPtr(1).ReadUInt32();;
                                    lastdisassembledata.parametervalue = (UIntPtr)dwordptr;

                                    if (rex_w)
                                    {
                                        lastdisassembledata.parameters = colorreg + "rax" + endcolor + ',' + inttohexs((UIntPtr)(int)(lastdisassembledata.parametervalue), 8);
                                        description = description + " (sign-extended)";
                                    }
                                    else
                                        lastdisassembledata.parameters = colorreg + "eax" + endcolor + ',' + inttohexs(lastdisassembledata.parametervalue, 8);


                                    lastdisassembledata.seperators[lastdisassembledata.seperatorcount] = 1;
                                    lastdisassembledata.seperatorcount += 1;
                                    offset += 4;
                                }
                            }
                            break;

                        case 0xe:
                            {
                                description = "place cs on the stack";
                                lastdisassembledata.opcode = "push";
                                lastdisassembledata.parameters = colorreg + "cs" + endcolor;
                            }
                            break;

                        case 0xf:
                            {  //simd extensions
                                if (prefix2.Contains(0xf0))
                                    lastdisassembledata.prefix = "lock ";
                                else
                                    lastdisassembledata.prefix = ""; //these usually treat the f2/f3 prefix differently

                                switch (memory[1])
                                {
                                    case 0:
                                        {
                                            switch (getreg(memory[2]))
                                            {
                                                case 0:
                                                    {
                                                        lastdisassembledata.opcode = "sldt";
                                                        description = "store local descriptor table register";
                                                        if (prefix2.Contains(0x66)) lastdisassembledata.parameters = modrm(memory, prefix2, 2, 1, ref last, 16);
                                                        else
                                                            lastdisassembledata.parameters = modrm(memory, prefix2, 2, 0, ref last);

                                                        offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                    }
                                                    break;

                                                case 1:
                                                    {
                                                        description = "store task register";
                                                        lastdisassembledata.opcode = "str";
                                                        lastdisassembledata.parameters = modrm(memory, prefix2, 2, 1, ref last, 16);
                                                        offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                    }
                                                    break;

                                                case 2:
                                                    {
                                                        description = "load local descriptor table register";
                                                        lastdisassembledata.opcode = "lldt";
                                                        lastdisassembledata.parameters = modrm(memory, prefix2, 2, 1, ref last, 16);
                                                        offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                    }
                                                    break;

                                                case 3:
                                                    {
                                                        description = "load task register";
                                                        lastdisassembledata.opcode = "ltr";
                                                        lastdisassembledata.parameters = modrm(memory, prefix2, 2, 1, ref last, 16);
                                                        offset = (UIntPtr)((last - 1) + offset.ToUInt64()); ;
                                                    }
                                                    break;

                                                case 4:
                                                    {
                                                        description = "verify a segment for reading";
                                                        lastdisassembledata.opcode = "verr";
                                                        lastdisassembledata.parameters = modrm(memory, prefix2, 2, 1, ref last, 16);
                                                        offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                    }
                                                    break;

                                                case 5:
                                                    {
                                                        description = "verify a segment for writing";
                                                        lastdisassembledata.opcode = "verw";
                                                        lastdisassembledata.parameters = modrm(memory, prefix2, 2, 1, ref last, 16);
                                                        offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                    }
                                                    break;
                                                default:
                                                    {
                                                        lastdisassembledata.opcode = "db";
                                                        lastdisassembledata.parameters = AStringUtils.IntToHex(memory[0], 2);
                                                        description = "not specified by the intel documentation";
                                                    }
                                                    break;

                                            }

                                        }
                                        break;

                                    case 0x1:
                                        {
                                            switch (memory[2])
                                            {
                                                case 0xc1:
                                                    {
                                                        description = "call to vm monitor by causing vm exit";
                                                        lastdisassembledata.opcode = "vmcall";
                                                        offset += 2;
                                                    }
                                                    break;

                                                case 0xc2:
                                                    {
                                                        description = "launch virtual machine managed by current vmcs";
                                                        lastdisassembledata.opcode = "vmlaunch";
                                                        offset += 2;
                                                    }
                                                    break;

                                                case 0xc3:
                                                    {
                                                        description = "resume virtual machine managed by current vmcs";
                                                        lastdisassembledata.opcode = "vmresume";
                                                        offset += 2;
                                                    }
                                                    break;

                                                case 0xc4:
                                                    {
                                                        description = "leaves vmx operation";
                                                        lastdisassembledata.opcode = "vmxoff";
                                                        offset += 2;
                                                    }
                                                    break;

                                                case 0xc8:
                                                    {
                                                        description = "set up monitor address";
                                                        lastdisassembledata.opcode = "monitor";
                                                        offset += 2;
                                                    }
                                                    break;

                                                case 0xc9:
                                                    {
                                                        description = "Monitor wait";
                                                        lastdisassembledata.opcode = "mwait";
                                                        offset += 2;
                                                    }
                                                    break;

                                                case 0xca:
                                                    {
                                                        description = "Clear AC flag in EFLAGS register";
                                                        lastdisassembledata.opcode = "clac";
                                                        offset += 2;
                                                    }
                                                    break;

                                                case 0xd0:
                                                    {
                                                        description = "Get value of extended control register";
                                                        lastdisassembledata.opcode = "xgetbv";
                                                        offset += 2;
                                                    }
                                                    break;

                                                case 0xd1:
                                                    {
                                                        description = "Set value of extended control register";
                                                        lastdisassembledata.opcode = "xsetbv";
                                                        offset += 2;
                                                    }
                                                    break;

                                                case 0xd5:
                                                    {
                                                        description = "Transactional end";
                                                        lastdisassembledata.opcode = "xend";
                                                        offset += 2;
                                                    }
                                                    break;

                                                case 0xd6:
                                                    {
                                                        description = "Test if in transactional execution";
                                                        lastdisassembledata.opcode = "xtest";
                                                        offset += 2;
                                                    }
                                                    break;

                                                case 0xf8:
                                                    {
                                                        description = "Swap GS base register";
                                                        lastdisassembledata.opcode = "swapgs";
                                                        offset += 2;
                                                    }
                                                    break;

                                                case 0xf9:
                                                    {
                                                        description = "Read time-stamp counter and processor ID";
                                                        lastdisassembledata.opcode = "rdtscp";
                                                        offset += 2;
                                                    }
                                                    break;

                                                default:
                                                    {
                                                        switch (getreg(memory[2]))
                                                        {
                                                            case 0:
                                                                {
                                                                    description = "store global descriptor table register";
                                                                    lastdisassembledata.opcode = "sgdt";
                                                                    lastdisassembledata.parameters = modrm(memory, prefix2, 2, 0, ref last);
                                                                    offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                                }
                                                                break;

                                                            case 1:
                                                                {
                                                                    description = "store interrupt descriptor table register";
                                                                    lastdisassembledata.opcode = "sidt";
                                                                    lastdisassembledata.parameters = modrm(memory, prefix2, 2, 0, ref last);
                                                                    offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                                }
                                                                break;

                                                            case 2:
                                                                {
                                                                    description = "load global descriptor table register";
                                                                    lastdisassembledata.opcode = "lgdt";
                                                                    lastdisassembledata.parameters = modrm(memory, prefix2, 2, 0, ref last);
                                                                    offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                                }
                                                                break;

                                                            case 3:
                                                                {
                                                                    description = "load interupt descriptor table register";
                                                                    lastdisassembledata.opcode = "lidt";
                                                                    lastdisassembledata.parameters = modrm(memory, prefix2, 2, 0, ref last);
                                                                    offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                                }
                                                                break;

                                                            case 4:
                                                                {
                                                                    description = "store machine status word";
                                                                    lastdisassembledata.opcode = "smsw";

                                                                    if (prefix2.Contains(0x66)) lastdisassembledata.parameters = modrm(memory, prefix2, 2, 1, ref last);
                                                                    else lastdisassembledata.parameters = modrm(memory, prefix2, 2, 0, ref last);
                                                                    offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                                }
                                                                break;

                                                            case 6:
                                                                {
                                                                    description = "load machine status word";
                                                                    lastdisassembledata.opcode = "lmsw";
                                                                    lastdisassembledata.parameters = modrm(memory, prefix2, 2, 1, ref last);
                                                                    offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                                }
                                                                break;

                                                            case 7:
                                                                {
                                                                    description = "invalidate tlb entry";
                                                                    lastdisassembledata.opcode = "invplg";
                                                                    lastdisassembledata.parameters = modrm(memory, prefix2, 2, 0, ref last);
                                                                    offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                                }
                                                                break;
                                                        }
                                                    }
                                                    break;
                                            }
                                        }
                                        break;

                                    case 0x2:
                                        {
                                            description = "load access rights byte";
                                            lastdisassembledata.opcode = "lar";
                                            if (prefix2.Contains(0x66)) lastdisassembledata.parameters = r16(memory[2]) + modrm(memory, prefix2, 2, 1, ref last, tmrpos.mright);
                                            else
                                                lastdisassembledata.parameters = r32(memory[2]) + modrm(memory, prefix2, 2, 2, ref last, tmrpos.mright);

                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                        }
                                        break;

                                    /*0f*/
                                    case 0x3:
                                        {
                                            description = "load segment limit";
                                            lastdisassembledata.opcode = "lsl";
                                            if (prefix2.Contains(0x66)) lastdisassembledata.parameters = r16(memory[2]) + modrm(memory, prefix2, 2, 1, ref last, tmrpos.mright);
                                            else
                                                lastdisassembledata.parameters = r32(memory[2]) + modrm(memory, prefix2, 2, 2, ref last, tmrpos.mright);

                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                        }
                                        break;

                                    case 0x5:
                                        {
                                            description = "fast system call";
                                            lastdisassembledata.opcode = "syscall";
                                            offset += 1;
                                        }
                                        break;

                                    case 0x6:
                                        {
                                            description = "clear task-switched flag in cr0";
                                            lastdisassembledata.opcode = "clts";
                                            offset += 1;
                                        }
                                        break;

                                    case 0x7:
                                        {
                                            description = "return from fast system call";
                                            lastdisassembledata.opcode = "sysret";
                                            offset += 1;
                                        }
                                        break;

                                    case 0x8:
                                        {
                                            description = "invalidate internal caches";
                                            lastdisassembledata.opcode = "invd";
                                            offset += 1;
                                        }
                                        break;

                                    case 0x9:
                                        {
                                            description = "write back and invalidate cache";
                                            lastdisassembledata.opcode = "wbinvd";
                                            offset += 1;
                                        }
                                        break;

                                    case 0xb:
                                        {
                                            description = "undefined instruction(yes, this one really excists..)";
                                            lastdisassembledata.opcode = "ud2";
                                            offset += 1;
                                        }
                                        break;

                                    case 0xd:
                                        {
                                            switch (getreg(memory[2]))
                                            {
                                                case 1:
                                                    {
                                                        description = "Prefetch Data into Caches in Anticipation of a Write";
                                                        lastdisassembledata.opcode = "prefetchw";
                                                        lastdisassembledata.parameters = modrm(memory, prefix2, 2, 2, ref last);
                                                        offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                    }
                                                    break;

                                                case 2:
                                                    {
                                                        description = "Prefetch Vector Data Into Caches with Intent to Write and T1 Hint";
                                                        lastdisassembledata.opcode = "prefetchwt1";
                                                        lastdisassembledata.parameters = modrm(memory, prefix2, 2, 2, ref last);
                                                        offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                    }
                                                    break;
                                            }
                                        }
                                        break;


                                    case 0x10:
                                        {
                                            lastdisassembledata.isfloat = true;

                                            if (prefix2.Contains(0xf2))
                                            {
                                                description = "move scalar double-fp";
                                                opcodeflags.l = false; //LIG
                                                opcodeflags.skipextraregonmemoryaccess = true;
                                                lastdisassembledata.isfloat64 = true;

                                                if (hasvex)
                                                    lastdisassembledata.opcode = "vmovsd";
                                                else
                                                    lastdisassembledata.opcode = "movsd";

                                                opcodeflags.skipextraregonmemoryaccess = true;
                                                lastdisassembledata.parameters = xmm(memory[2]) + modrm(memory, prefix2, 2, 4, ref last, tmrpos.mright);
                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                            else
                                            if (prefix2.Contains(0xf3))
                                            {
                                                description = "move scalar single-fp";
                                                if (hasvex)
                                                    lastdisassembledata.opcode = "vmovss";
                                                else
                                                    lastdisassembledata.opcode = "movss";

                                                opcodeflags.skipextraregonmemoryaccess = true;
                                                lastdisassembledata.parameters = xmm(memory[2]) + modrm(memory, prefix2, 2, 4, ref last, tmrpos.mright);
                                                lastdisassembledata.datasize = 4;
                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                            else
                                            if (prefix2.Contains(0x66))
                                            {
                                                description = "move unaligned packed double-fp";
                                                if (hasvex)
                                                    lastdisassembledata.opcode = "lmovupd";
                                                else
                                                    lastdisassembledata.opcode = "movupd";

                                                opcodeflags.skipextrareg = true;
                                                lastdisassembledata.parameters = xmm(memory[2]) + modrm(memory, prefix2, 2, 4, ref last, tmrpos.mright);
                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                            else
                                            {
                                                description = "move unaligned four packed single-fp";
                                                if (hasvex)
                                                    lastdisassembledata.opcode = "vmovups";
                                                else
                                                    lastdisassembledata.opcode = "movups";

                                                opcodeflags.skipextrareg = true;
                                                lastdisassembledata.parameters = xmm(memory[2]) + modrm(memory, prefix2, 2, 4, ref last, tmrpos.mright);
                                                lastdisassembledata.datasize = 4;
                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                        }
                                        break;

                                    case 0x11:
                                        {
                                            lastdisassembledata.isfloat = true;
                                            if (prefix2.Contains(0xf2))
                                            {
                                                description = "move scalar double-fp";
                                                if (hasvex)
                                                    lastdisassembledata.opcode = "vmovsd";
                                                else
                                                    lastdisassembledata.opcode = "movsd";

                                                lastdisassembledata.isfloat64 = true;

                                                opcodeflags.skipextraregonmemoryaccess = true;
                                                lastdisassembledata.parameters = modrm(memory, prefix2, 2, 4, ref last, tmrpos.mleft) + xmm(memory[2]);
                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                            else
                                            if (prefix2.Contains(0xf3))
                                            {
                                                description = "move scalar single-fp";
                                                if (hasvex)
                                                    lastdisassembledata.opcode = "vmovss";
                                                else
                                                    lastdisassembledata.opcode = "movss";

                                                opcodeflags.skipextraregonmemoryaccess = true;
                                                lastdisassembledata.parameters = modrm(memory, prefix2, 2, 4, ref last) + xmm(memory[2]);
                                                lastdisassembledata.datasize = 4;
                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                            else
                                            if (prefix2.Contains(0x66))
                                            {
                                                description = "move unaligned packed double-fp";
                                                if (hasvex)
                                                    lastdisassembledata.opcode = "lmovupd";
                                                else
                                                    lastdisassembledata.opcode = "movupd";

                                                opcodeflags.skipextraregonmemoryaccess = true;
                                                lastdisassembledata.parameters = modrm(memory, prefix2, 2, 4, ref last) + xmm(memory[2]);
                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                            else
                                            {
                                                description = "move unaligned four packed single-fp";
                                                if (hasvex)
                                                    lastdisassembledata.opcode = "vmovups";
                                                else
                                                    lastdisassembledata.opcode = "movups";

                                                opcodeflags.skipextraregonmemoryaccess = true;
                                                lastdisassembledata.parameters = modrm(memory, prefix2, 2, 4, ref last) + xmm(memory[2]);
                                                lastdisassembledata.datasize = 4;
                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }

                                        }
                                        break;

                                    /*0f*/
                                    case 0x12:
                                        {
                                            if (prefix2.Contains(0xf2))
                                            {
                                                description = "move one double-fp and duplicate";
                                                if (hasvex)
                                                    lastdisassembledata.opcode = "vmovddup";
                                                else
                                                    lastdisassembledata.opcode = "movddup";

                                                lastdisassembledata.parameters = xmm(memory[2]) + modrm(memory, prefix2, 2, 4, ref last, tmrpos.mright);
                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                            else
                                            if (prefix2.Contains(0xf3))
                                            {
                                                description = "move packed single-fp Low and duplicate";
                                                if (hasvex)
                                                    lastdisassembledata.opcode = "vmovsldup";
                                                else
                                                    lastdisassembledata.opcode = "movsldup";

                                                lastdisassembledata.parameters = xmm(memory[2]) + modrm(memory, prefix2, 2, 4, ref last, tmrpos.mright);
                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                            else
                                            if (prefix2.Contains(0x66))
                                            {
                                                description = "move low packed double-precision floating-point value";
                                                if (hasvex)
                                                    lastdisassembledata.opcode = "vmovlpd";
                                                else
                                                    lastdisassembledata.opcode = "movlpd";

                                                lastdisassembledata.parameters = xmm(memory[2]) + modrm(memory, prefix2, 2, 4, ref last, tmrpos.mright);
                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                            else
                                            {
                                                description = "high to low packed single-fp";

                                                if (getmod(memory[2]) == 3)
                                                    lastdisassembledata.opcode = "movhlps";
                                                else
                                                    lastdisassembledata.opcode = "movlps";

                                                if (hasvex)
                                                    lastdisassembledata.opcode = 'v' + lastdisassembledata.opcode;

                                                lastdisassembledata.parameters = xmm(memory[2]) + modrm(memory, prefix2, 2, 4, ref last, tmrpos.mright);

                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                        }
                                        break;

                                    case 0x13:
                                        {
                                            lastdisassembledata.isfloat = true;
                                            if (prefix2.Contains(0x66))
                                            {
                                                description = "move low packed double-fp";
                                                if (hasvex)
                                                    lastdisassembledata.opcode = "vmovlpd";
                                                else
                                                    lastdisassembledata.opcode = "movlpd";

                                                opcodeflags.skipextrareg = true;
                                                lastdisassembledata.parameters = modrm(memory, prefix2, 2, 4, ref last) + xmm(memory[2]);
                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                            else
                                            {
                                                description = "move low packed single-fp";

                                                if (hasvex)
                                                    lastdisassembledata.opcode = "vmovlps";
                                                else
                                                    lastdisassembledata.opcode = "movlps";

                                                opcodeflags.skipextrareg = true;
                                                lastdisassembledata.parameters = modrm(memory, prefix2, 2, 4, ref last) + xmm(memory[2]);
                                                lastdisassembledata.datasize = 4;
                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                        }
                                        break;

                                    /*0f*/
                                    case 0x14:
                                        {
                                            lastdisassembledata.isfloat = true;
                                            if (prefix2.Contains(0x66))
                                            {
                                                description = "unpack low packed single-fp";
                                                if (hasvex)
                                                    lastdisassembledata.opcode = "vunpcklpd";
                                                else
                                                    lastdisassembledata.opcode = "unpcklpd";
                                                lastdisassembledata.parameters = xmm(memory[2]) + modrm(memory, prefix2, 2, 4, ref last, tmrpos.mright);
                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                            else
                                            {
                                                description = "unpack low packed single-fp";
                                                if (hasvex)
                                                    lastdisassembledata.opcode = "vunpcklps";
                                                else
                                                    lastdisassembledata.opcode = "unpcklps";
                                                lastdisassembledata.parameters = xmm(memory[2]) + modrm(memory, prefix2, 2, 4, ref last, tmrpos.mright);
                                                lastdisassembledata.datasize = 4;
                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                        }
                                        break;

                                    case 0x15:
                                        {
                                            lastdisassembledata.isfloat = true;
                                            if (prefix2.Contains(0x66))
                                            {
                                                description = "unpack and interleave high packed double-fp";
                                                if (hasvex)
                                                    lastdisassembledata.opcode = "vunpckhpd";
                                                else
                                                    lastdisassembledata.opcode = "unpckhpd";
                                                lastdisassembledata.parameters = xmm(memory[2]) + modrm(memory, prefix2, 2, 4, ref last, tmrpos.mright);
                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                            else
                                            {
                                                description = "unpack high packed single-fp";
                                                if (hasvex)
                                                    lastdisassembledata.opcode = "unpckhps";
                                                else
                                                    lastdisassembledata.opcode = "unpckhps";
                                                lastdisassembledata.parameters = xmm(memory[2]) + modrm(memory, prefix2, 2, 4, ref last, tmrpos.mright);
                                                lastdisassembledata.datasize = 4;
                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                        }
                                        break;

                                    case 0x16:
                                        {
                                            lastdisassembledata.isfloat = true;
                                            if (prefix2.Contains(0xf3))
                                            {
                                                description = "move packed single-fp high and duplicate";
                                                if (hasvex)
                                                    lastdisassembledata.opcode = "vmovshdup";
                                                else
                                                    lastdisassembledata.opcode = "movshdup";

                                                lastdisassembledata.parameters = xmm(memory[2]) + modrm(memory, prefix2, 2, 4, ref last, tmrpos.mright);
                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                            else
                                            if (prefix2.Contains(0x66))
                                            {
                                                description = "move high packed double-precision floating-point value";
                                                if (hasvex)
                                                    lastdisassembledata.opcode = "vmovhpd";
                                                else
                                                    lastdisassembledata.opcode = "movhpd";

                                                lastdisassembledata.parameters = xmm(memory[2]) + modrm(memory, prefix2, 2, 4, ref last, tmrpos.mright);
                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                            else
                                            {
                                                description = "high to low packed single-fp";

                                                if (getmod(memory[2]) == 3)
                                                    lastdisassembledata.opcode = "movlhps";
                                                else
                                                    lastdisassembledata.opcode = "movhps";

                                                if (hasvex)
                                                    lastdisassembledata.opcode = 'v' + lastdisassembledata.opcode;

                                                lastdisassembledata.parameters = xmm(memory[2]) + modrm(memory, prefix2, 2, 4, ref last, tmrpos.mright);
                                                lastdisassembledata.datasize = 4;
                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                        }
                                        break;

                                    case 0x17:
                                        {
                                            lastdisassembledata.isfloat = true;
                                            if (prefix2.Contains(0x66))
                                            {
                                                description = "move high packed double-precision floating-point value";
                                                if (hasvex)
                                                    lastdisassembledata.opcode = "vmovhpd";
                                                else
                                                    lastdisassembledata.opcode = "movhpd";

                                                lastdisassembledata.parameters = modrm(memory, prefix2, 2, 4, ref last) + xmm(memory[2]);
                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                            else
                                            {
                                                description = "high to low packed single-fp";
                                                if (hasvex)
                                                    lastdisassembledata.opcode = "vmovhps";
                                                else
                                                    lastdisassembledata.opcode = "movhps";
                                                lastdisassembledata.parameters = modrm(memory, prefix2, 2, 4, ref last) + xmm(memory[2]);
                                                lastdisassembledata.datasize = 4;
                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                        }
                                        break;

                                    case 0x18:
                                        {
                                            switch (getreg(memory[2]))
                                            {
                                                case 0:
                                                    {
                                                        description = "prefetch";
                                                        lastdisassembledata.opcode = "prefetchnta";
                                                        lastdisassembledata.parameters = modrm(memory, prefix2, 2, 2, ref last);
                                                        offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                    }
                                                    break;

                                                case 1:
                                                    {
                                                        description = "prefetch";
                                                        lastdisassembledata.opcode = "prefetchto";
                                                        lastdisassembledata.parameters = modrm(memory, prefix2, 2, 2, ref last);
                                                        offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                    }
                                                    break;

                                                case 2:
                                                    {
                                                        description = "prefetch";
                                                        lastdisassembledata.opcode = "prefetcht1";
                                                        lastdisassembledata.parameters = modrm(memory, prefix2, 2, 2, ref last);
                                                        offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                    }
                                                    break;

                                                case 3:
                                                    {
                                                        description = "prefetch";
                                                        lastdisassembledata.opcode = "prefetcht2";
                                                        lastdisassembledata.parameters = modrm(memory, prefix2, 2, 2, ref last);
                                                        offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                    }
                                                    break;

                                            }
                                        }
                                        break;

                                    case 0x1f:
                                        {
                                            switch (getreg(memory[2]))
                                            {
                                                case 0:
                                                    {
                                                        description = "multibyte nop";
                                                        lastdisassembledata.opcode = "nop";


                                                        if (rex_w)
                                                            lastdisassembledata.parameters = modrm(memory, prefix2, 2, 0, ref last, 64);
                                                        else
                                                        {
                                                            if (prefix2.Contains(0x66))
                                                                lastdisassembledata.parameters = modrm(memory, prefix2, 2, 0, ref last, 16);
                                                            else
                                                                lastdisassembledata.parameters = modrm(memory, prefix2, 2, 0, ref last, 32);
                                                        }

                                                        offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                    }
                                                    break;
                                            }
                                        }
                                        break;



                                    case 0x20:
                                        {
                                            description = "move from control register";
                                            lastdisassembledata.opcode = "mov";
                                            lastdisassembledata.parameters = modrm(memory, prefix2, 2, 0, ref last) + cr(memory[2]);
                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                        }
                                        break;

                                    case 0x21:
                                        {
                                            description = "move from debug register";
                                            lastdisassembledata.opcode = "mov";
                                            lastdisassembledata.parameters = modrm(memory, prefix2, 2, 0, ref last) + dr(memory[2]);
                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                        }
                                        break;

                                    case 0x22:
                                        {
                                            description = "move to control register";
                                            lastdisassembledata.opcode = "mov";
                                            lastdisassembledata.parameters = cr(memory[2]) + modrm(memory, prefix2, 2, 0, ref last, tmrpos.mright);
                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                        }
                                        break;

                                    case 0x23:
                                        {
                                            description = "move to debug register";
                                            lastdisassembledata.opcode = "mov";
                                            lastdisassembledata.parameters = dr(memory[2]) + modrm(memory, prefix2, 2, 0, ref last, tmrpos.mright);
                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                        }
                                        break;

                                    case 0x28:
                                        {
                                            if (prefix2.Contains(0x66))
                                            {
                                                description = "move aligned packed double-fp values";
                                                if (hasvex)
                                                    lastdisassembledata.opcode = "vmovapd";
                                                else
                                                    lastdisassembledata.opcode = "movapd";

                                                opcodeflags.skipextrareg = true;
                                                lastdisassembledata.parameters = xmm(memory[2]) + modrm(memory, prefix2, 2, 4, ref last, tmrpos.mright);
                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                            else
                                            {
                                                description = "move aligned four packed single-fp";
                                                if (hasvex)
                                                    lastdisassembledata.opcode = "vmovaps";
                                                else
                                                    lastdisassembledata.opcode = "movaps";

                                                opcodeflags.skipextrareg = true;
                                                lastdisassembledata.parameters = xmm(memory[2]) + modrm(memory, prefix2, 2, 4, ref last, tmrpos.mright);
                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                        }
                                        break;

                                    case 0x29:
                                        {
                                            if (prefix2.Contains(0x66))
                                            {
                                                description = "move aligned packed double-fp values";
                                                if (hasvex)
                                                    lastdisassembledata.opcode = "vmovapd";
                                                else
                                                    lastdisassembledata.opcode = "movapd";

                                                opcodeflags.skipextrareg = true;
                                                lastdisassembledata.parameters = modrm(memory, prefix2, 2, 4, ref last) + xmm(memory[2]);
                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                            else
                                            {
                                                description = "move aligned four packed single-fp";
                                                if (hasvex)
                                                    lastdisassembledata.opcode = "vmovaps";
                                                else
                                                    lastdisassembledata.opcode = "movaps";

                                                opcodeflags.skipextrareg = true;
                                                lastdisassembledata.parameters = modrm(memory, prefix2, 2, 4, ref last) + xmm(memory[2]);
                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                        }
                                        break;


                                    case 0x2a:
                                        {
                                            if (prefix2.Contains(0xf2))
                                            {

                                                description = "convert doubleword integer to scalar doubleprecision floating-point value";
                                                if (hasvex)
                                                    lastdisassembledata.opcode = "vcvtsi2sd";
                                                else
                                                    lastdisassembledata.opcode = "cvtsi2sd";

                                                lastdisassembledata.parameters = xmm(memory[2]) + modrm(memory, prefix2, 2, 4, ref last, tmrpos.mright);

                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                            else
                                            if (prefix2.Contains(0xf3))
                                            {

                                                description = "scalar signed int32 to single-fp conversion";
                                                if (hasvex)
                                                    lastdisassembledata.opcode = "vcvtsi2ss";
                                                else
                                                    lastdisassembledata.opcode = "cvtsi2ss";

                                                lastdisassembledata.parameters = xmm(memory[2]) + modrm(memory, prefix2, 2, 4, ref last, tmrpos.mright);

                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                            else
                                            {
                                                if (prefix2.Contains(0x66))
                                                {
                                                    description = "convert packed dword's to packed dp-fp's";
                                                    lastdisassembledata.opcode = "cvtpi2pd";
                                                    lastdisassembledata.parameters = xmm(memory[2]) + modrm(memory, prefix2, 2, 3, ref last, tmrpos.mright);

                                                    offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                }
                                                else
                                                {
                                                    description = "packed signed int32 to packed single-fp conversion";
                                                    lastdisassembledata.opcode = "cvtpi2ps";
                                                    lastdisassembledata.parameters = xmm(memory[2]) + modrm(memory, prefix2, 2, 4, ref last, tmrpos.mright);

                                                    offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                }
                                            }
                                        }
                                        break;

                                    case 0x2b:
                                        {
                                            if (prefix2.Contains(0x66))
                                            {
                                                if (hasvex)
                                                    lastdisassembledata.opcode = "vmovntpd";
                                                else
                                                    lastdisassembledata.opcode = "movntpd";
                                                lastdisassembledata.parameters = modrm(memory, prefix2, 2, 4, ref last) + xmm(memory[2]);
                                                description = "move packed double-precision floating-point using non-temporal hint";
                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                            else
                                            {
                                                if (hasvex)
                                                    lastdisassembledata.opcode = "vmovntps";
                                                else
                                                    lastdisassembledata.opcode = "movntps";
                                                lastdisassembledata.parameters = modrm(memory, prefix2, 2, 4, ref last) + xmm(memory[2]);
                                                description = "move aligned four packed single-fp non temporal";
                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                        }
                                        break;

                                    case 0x2c:
                                        {
                                            if (prefix2.Contains(0xf2))
                                            {

                                                description = "convert with truncation scalar double-precision floating point value to signed doubleword integer";
                                                if (hasvex)
                                                    lastdisassembledata.opcode = "vcvttsd2si";
                                                else
                                                    lastdisassembledata.opcode = "cvttsd2si";

                                                opcodeflags.skipextrareg = true;
                                                lastdisassembledata.parameters = r32(memory[2]) + modrm(memory, prefix2, 2, 4, ref last, tmrpos.mright);
                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                            else
                                            if (prefix2.Contains(0xf3))
                                            {
                                                description = "scalar single-fp to signed int32 conversion (truncate)";
                                                if (hasvex)
                                                    lastdisassembledata.opcode = "vcvttss2si";
                                                else
                                                    lastdisassembledata.opcode = "cvttss2si";

                                                opcodeflags.skipextrareg = true;
                                                lastdisassembledata.parameters = r32(memory[2]) + modrm(memory, prefix2, 2, 4, ref last, tmrpos.mright);
                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                            else
                                            {
                                                if (prefix2.Contains(0x66))
                                                {
                                                    description = "packed doubleprecision-fp to packed dword conversion (truncate)";
                                                    lastdisassembledata.opcode = "cvttpd2pi";
                                                    lastdisassembledata.parameters = mm(memory[2]) + modrm(memory, prefix2, 2, 4, ref last, tmrpos.mright);
                                                    offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                }
                                                else
                                                {
                                                    description = "packed single-fp to packed int32 conversion (truncate)";
                                                    lastdisassembledata.opcode = "cvttps2pi";
                                                    lastdisassembledata.parameters = mm(memory[2]) + modrm(memory, prefix2, 2, 4, ref last, tmrpos.mright);
                                                    offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                }
                                            }
                                        }
                                        break;

                                    case 0x2d:
                                        {
                                            lastdisassembledata.isfloat = true;
                                            if (prefix2.Contains(0xf2))
                                            {
                                                description = "convert scalar double-precision floating-point value to doubleword integer";
                                                if (hasvex)
                                                    lastdisassembledata.opcode = "vcvtsd2si";
                                                else
                                                    lastdisassembledata.opcode = "cvtsd2si";

                                                opcodeflags.skipextrareg = true;
                                                lastdisassembledata.parameters = r32(memory[2]) + modrm(memory, prefix2, 2, 4, ref last, tmrpos.mright);
                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                            else
                                            if (prefix2.Contains(0xf3))
                                            {
                                                description = "scalar single-fp to signed int32 conversion";
                                                if (hasvex)
                                                    lastdisassembledata.opcode = "vcvtss2si";
                                                else
                                                    lastdisassembledata.opcode = "cvtss2si";

                                                opcodeflags.skipextrareg = true;
                                                lastdisassembledata.parameters = r32(memory[2]) + modrm(memory, prefix2, 2, 4, ref last, tmrpos.mright);
                                                lastdisassembledata.datasize = 4;
                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                            else
                                            {
                                                if (prefix2.Contains(0x66))
                                                {
                                                    description = "convert 2 packed dp-fp's from param 2 to packed signed dword in param1";
                                                    lastdisassembledata.opcode = "cvtpi2ps";
                                                    lastdisassembledata.parameters = mm(memory[2]) + modrm(memory, prefix2, 2, 4, ref last, tmrpos.mright);
                                                    offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                }
                                                else
                                                {
                                                    description = "packed single-fp to packed int32 conversion";
                                                    lastdisassembledata.opcode = "cvtps2pi";
                                                    lastdisassembledata.parameters = mm(memory[2]) + modrm(memory, prefix2, 2, 4, ref last, tmrpos.mright);
                                                    lastdisassembledata.datasize = 4;
                                                    offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                }
                                            }
                                        }
                                        break;

                                    case 0x2e:
                                        {
                                            lastdisassembledata.isfloat = true;
                                            if (prefix2.Contains(0x66))
                                            {
                                                description = "unordered scalar double-fp compare and set eflags";
                                                if (hasvex)
                                                    lastdisassembledata.opcode = "vucomisd";
                                                else
                                                    lastdisassembledata.opcode = "ucomisd";

                                                opcodeflags.skipextrareg = true;
                                                lastdisassembledata.parameters = xmm(memory[2]) + modrm(memory, prefix2, 2, 4, ref last, tmrpos.mright);
                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                            else
                                            {
                                                description = "unordered scalar single-fp compare and set eflags";
                                                if (hasvex)
                                                    lastdisassembledata.opcode = "vucomiss";
                                                else
                                                    lastdisassembledata.opcode = "ucomiss";

                                                opcodeflags.skipextrareg = true;
                                                lastdisassembledata.parameters = xmm(memory[2]) + modrm(memory, prefix2, 2, 4, ref last, tmrpos.mright);
                                                lastdisassembledata.datasize = 4;
                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                        }
                                        break;


                                    case 0x2f:
                                        {
                                            lastdisassembledata.isfloat = true;
                                            if (prefix2.Contains(0x66))
                                            {
                                                description = "compare scalar ordered double-precision floating point values and set eflags";
                                                if (hasvex)
                                                    lastdisassembledata.opcode = "vcomisd";
                                                else
                                                    lastdisassembledata.opcode = "comisd";
                                                opcodeflags.skipextrareg = true;

                                                lastdisassembledata.parameters = xmm(memory[2]) + modrm(memory, prefix2, 2, 4, ref last, tmrpos.mright);
                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                            else
                                            {
                                                description = "scalar ordered single-fp compare and set eflags";
                                                if (hasvex)
                                                    lastdisassembledata.opcode = "vcomiss";
                                                else
                                                    lastdisassembledata.opcode = "comiss";

                                                opcodeflags.skipextrareg = true;
                                                lastdisassembledata.parameters = xmm(memory[2]) + modrm(memory, prefix2, 2, 4, ref last, tmrpos.mright);
                                                lastdisassembledata.datasize = 4;
                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                        }
                                        break;

                                    case 0x30:
                                        {
                                            description = "write to model specific register";
                                            lastdisassembledata.opcode = "wrmsr";
                                            offset += 1;
                                        }
                                        break;

                                    case 0x31:
                                        {
                                            description = "read time-stamp counter";
                                            lastdisassembledata.opcode = "rdtsc";
                                            offset += 1;
                                        }
                                        break;

                                    case 0x32:
                                        {
                                            description = "read from model specific register";
                                            lastdisassembledata.opcode = "rdmsr";
                                            offset += 1;
                                        }
                                        break;

                                    case 0x33:
                                        {
                                            description = "read performance-monitoring counters";
                                            lastdisassembledata.opcode = "rdpmc";
                                            offset += 1;
                                        }
                                        break;

                                    case 0x34:
                                        {
                                            description = "fast transistion to system call entry point";
                                            lastdisassembledata.opcode = "sysenter";
                                            lastdisassembledata.isret = true;
                                            offset += 1;
                                        }
                                        break;

                                    case 0x35:
                                        {
                                            description = "fast transistion from system call entry point";
                                            lastdisassembledata.opcode = "sysexit";
                                            offset += 1;
                                        }
                                        break;

                                    case 0x37:
                                        {
                                            description = "Safermode multipurpose function";
                                            lastdisassembledata.opcode = "getsec";
                                            offset += 1;
                                        }
                                        break;

                                    /*0f*/
                                    case 0x38:
                                        {
                                            switch (memory[2])
                                            {
                                                case 0:
                                                    {
                                                        description = "Packed shuffle bytes";
                                                        lastdisassembledata.opcode = "pshufb";

                                                        if (prefix2.Contains(0x66))
                                                        {
                                                            lastdisassembledata.parameters = xmm(memory[3]) + modrm(memory, prefix2, 3, 4, ref last, tmrpos.mright);

                                                            if (hasvex)
                                                                lastdisassembledata.opcode = 'v' + lastdisassembledata.opcode;
                                                        }
                                                        else
                                                            lastdisassembledata.parameters = mm(memory[3]) + modrm(memory, prefix2, 3, 3, ref last, tmrpos.mright);
                                                        offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                    }
                                                    break;

                                                case 0x1:
                                                    {
                                                        description = "Packed horizontal add";
                                                        lastdisassembledata.opcode = "phaddw";

                                                        if (prefix2.Contains(0x66))
                                                        {
                                                            lastdisassembledata.parameters = xmm(memory[3]) + modrm(memory, prefix2, 3, 4, ref last, tmrpos.mright);

                                                            if (hasvex)
                                                                lastdisassembledata.opcode = 'v' + lastdisassembledata.opcode;
                                                        }
                                                        else
                                                            lastdisassembledata.parameters = mm(memory[3]) + modrm(memory, prefix2, 3, 3, ref last, tmrpos.mright);
                                                        offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                    }
                                                    break;

                                                /*0f*//*38*/
                                                case 0x2:
                                                    {
                                                        description = "Packed horizontal add";
                                                        lastdisassembledata.opcode = "phaddd";

                                                        if (prefix2.Contains(0x66))
                                                        {
                                                            lastdisassembledata.parameters = xmm(memory[3]) + modrm(memory, prefix2, 3, 4, ref last, tmrpos.mright);

                                                            if (hasvex)
                                                                lastdisassembledata.opcode = 'v' + lastdisassembledata.opcode;
                                                        }
                                                        else
                                                            lastdisassembledata.parameters = mm(memory[3]) + modrm(memory, prefix2, 3, 3, ref last, tmrpos.mright);
                                                        offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                    }
                                                    break;

                                                case 0x3:
                                                    {
                                                        description = "Packed horizontal add and saturate";
                                                        lastdisassembledata.opcode = "phaddsw";

                                                        if (prefix2.Contains(0x66))
                                                        {
                                                            lastdisassembledata.parameters = xmm(memory[3]) + modrm(memory, prefix2, 3, 4, ref last, tmrpos.mright);

                                                            if (hasvex)
                                                                lastdisassembledata.opcode = 'v' + lastdisassembledata.opcode;
                                                        }
                                                        else
                                                            lastdisassembledata.parameters = mm(memory[3]) + modrm(memory, prefix2, 3, 3, ref last, tmrpos.mright);
                                                        offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                    }
                                                    break;

                                                case 0x4:
                                                    {
                                                        description = "Multiply and add signed and unsigned bytes";
                                                        lastdisassembledata.opcode = "pmaddubsw";

                                                        if (prefix2.Contains(0x66))
                                                        {
                                                            lastdisassembledata.parameters = xmm(memory[3]) + modrm(memory, prefix2, 3, 4, ref last, tmrpos.mright);

                                                            if (hasvex)
                                                                lastdisassembledata.opcode = 'v' + lastdisassembledata.opcode;
                                                        }
                                                        else
                                                            lastdisassembledata.parameters = mm(memory[3]) + modrm(memory, prefix2, 3, 3, ref last, tmrpos.mright);
                                                        offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                    }
                                                    break;

                                                /*0f*//*38*/
                                                case 0x5:
                                                    {
                                                        description = "Packed horizontal subtract";
                                                        lastdisassembledata.opcode = "phsubw";

                                                        if (prefix2.Contains(0x66))
                                                        {
                                                            lastdisassembledata.parameters = xmm(memory[3]) + modrm(memory, prefix2, 3, 4, ref last, tmrpos.mright);

                                                            if (hasvex)
                                                                lastdisassembledata.opcode = 'v' + lastdisassembledata.opcode;
                                                        }
                                                        else
                                                            lastdisassembledata.parameters = mm(memory[3]) + modrm(memory, prefix2, 3, 3, ref last, tmrpos.mright);
                                                        offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                    }
                                                    break;

                                                case 0x6:
                                                    {
                                                        description = "Packed horizontal subtract";
                                                        lastdisassembledata.opcode = "phsubd";

                                                        if (prefix2.Contains(0x66))
                                                        {
                                                            lastdisassembledata.parameters = xmm(memory[3]) + modrm(memory, prefix2, 3, 4, ref last, tmrpos.mright);

                                                            if (hasvex)
                                                                lastdisassembledata.opcode = 'v' + lastdisassembledata.opcode;
                                                        }
                                                        else
                                                            lastdisassembledata.parameters = mm(memory[3]) + modrm(memory, prefix2, 3, 3, ref last, tmrpos.mright);
                                                        offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                    }
                                                    break;

                                                case 0x7:
                                                    {
                                                        description = "Packed horizontal subtract";
                                                        lastdisassembledata.opcode = "phsubsw";

                                                        if (prefix2.Contains(0x66))
                                                        {
                                                            lastdisassembledata.parameters = xmm(memory[3]) + modrm(memory, prefix2, 3, 4, ref last, tmrpos.mright);

                                                            if (hasvex)
                                                                lastdisassembledata.opcode = 'v' + lastdisassembledata.opcode;
                                                        }
                                                        else
                                                            lastdisassembledata.parameters = mm(memory[3]) + modrm(memory, prefix2, 3, 3, ref last, tmrpos.mright);
                                                        offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                    }
                                                    break;

                                                case 0x8:
                                                    {
                                                        description = "Packed SIGN";
                                                        lastdisassembledata.opcode = "psignb";

                                                        if (prefix2.Contains(0x66))
                                                        {
                                                            lastdisassembledata.parameters = xmm(memory[3]) + modrm(memory, prefix2, 3, 4, ref last, tmrpos.mright);

                                                            if (hasvex)
                                                                lastdisassembledata.opcode = 'v' + lastdisassembledata.opcode;
                                                        }
                                                        else
                                                            lastdisassembledata.parameters = mm(memory[3]) + modrm(memory, prefix2, 3, 3, ref last, tmrpos.mright);
                                                        offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                    }
                                                    break;

                                                case 0x9:
                                                    {
                                                        description = "Packed SIGN";
                                                        lastdisassembledata.opcode = "psignw";

                                                        if (prefix2.Contains(0x66))
                                                        {
                                                            lastdisassembledata.parameters = xmm(memory[3]) + modrm(memory, prefix2, 3, 4, ref last, tmrpos.mright);

                                                            if (hasvex)
                                                                lastdisassembledata.opcode = 'v' + lastdisassembledata.opcode;
                                                        }
                                                        else
                                                            lastdisassembledata.parameters = mm(memory[3]) + modrm(memory, prefix2, 3, 3, ref last, tmrpos.mright);
                                                        offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                    }
                                                    break;

                                                case 0xa:
                                                    {
                                                        description = "Packed SIGN";
                                                        lastdisassembledata.opcode = "psignd";

                                                        if (prefix2.Contains(0x66))
                                                        {
                                                            lastdisassembledata.parameters = xmm(memory[3]) + modrm(memory, prefix2, 3, 4, ref last, tmrpos.mright);

                                                            if (hasvex)
                                                                lastdisassembledata.opcode = 'v' + lastdisassembledata.opcode;
                                                        }
                                                        else
                                                            lastdisassembledata.parameters = mm(memory[3]) + modrm(memory, prefix2, 3, 3, ref last, tmrpos.mright);
                                                        offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                    }
                                                    break;

                                                /*0f*//*38*/
                                                case 0xb:
                                                    {
                                                        description = "Packed multiply high with round and scale";
                                                        lastdisassembledata.opcode = "phmulhrsw";

                                                        if (prefix2.Contains(0x66))
                                                        {
                                                            lastdisassembledata.parameters = xmm(memory[3]) + modrm(memory, prefix2, 3, 4, ref last, tmrpos.mright);

                                                            if (hasvex)
                                                                lastdisassembledata.opcode = 'v' + lastdisassembledata.opcode;
                                                        }
                                                        else
                                                            lastdisassembledata.parameters = mm(memory[3]) + modrm(memory, prefix2, 3, 3, ref last, tmrpos.mright);
                                                        offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                    }
                                                    break;

                                                /*0f*//*38*/
                                                case 0xc:
                                                    {
                                                        if (prefix2.Contains(0x66))
                                                        {
                                                            if (hasvex)
                                                            {
                                                                description = "permute single-precision floating-point values";
                                                                lastdisassembledata.opcode = "vpermilps";
                                                                lastdisassembledata.parameters = xmm(memory[3]) + modrm(memory, prefix2, 3, 4, ref last, tmrpos.mright);

                                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                            }
                                                        }

                                                    }
                                                    break;

                                                /*0f*//*38*/
                                                case 0xd:
                                                    {
                                                        if (prefix2.Contains(0x66))
                                                        {
                                                            if (hasvex)
                                                            {
                                                                description = "permute double-precision floating-point values";
                                                                lastdisassembledata.opcode = "vpermilpd";
                                                                lastdisassembledata.parameters = xmm(memory[3]) + modrm(memory, prefix2, 3, 4, ref last, tmrpos.mright);

                                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                            }
                                                        }

                                                    }
                                                    break;

                                                /*0f*//*38*/
                                                case 0xe:
                                                    {
                                                        if (prefix2.Contains(0x66))
                                                        {
                                                            if (hasvex)
                                                            {
                                                                description = "Packed bit test";
                                                                lastdisassembledata.opcode = "vtestps";
                                                                opcodeflags.skipextrareg = true;
                                                                lastdisassembledata.parameters = xmm(memory[3]) + modrm(memory, prefix2, 3, 4, ref last, tmrpos.mright);

                                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                            }
                                                        }
                                                    }
                                                    break;

                                                /*0f*//*38*/
                                                case 0xf:
                                                    {
                                                        if (prefix2.Contains(0x66))
                                                        {
                                                            if (hasvex)
                                                            {
                                                                description = "Packed bit test";
                                                                lastdisassembledata.opcode = "vtestpd";
                                                                opcodeflags.skipextrareg = true;
                                                                lastdisassembledata.parameters = xmm(memory[3]) + modrm(memory, prefix2, 3, 4, ref last, tmrpos.mright);

                                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                            }
                                                        }
                                                    }
                                                    break;

                                                case 0x10:
                                                    {
                                                        description = "Variable blend packed bytes";
                                                        if (prefix2.Contains(0x66))
                                                        {
                                                            if (hasvex)
                                                            {
                                                                lastdisassembledata.opcode = "vpblendvb";
                                                                lastdisassembledata.parameters = xmm(memory[3]) + modrm(memory, prefix2, 3, 4, ref last, tmrpos.mright);
                                                                lastdisassembledata.parameters = lastdisassembledata.parameters + ',' + regnrtostr(tregistertype.rtxmm, memory[(int)last]);
                                                                offset += 1;
                                                            }
                                                            else
                                                            {
                                                                lastdisassembledata.opcode = "pblendvb";
                                                                lastdisassembledata.parameters = xmm(memory[3]) + modrm(memory, prefix2, 3, 4, ref last, tmrpos.mright) + ',' + regnrtostr(tregistertype.rtxmm, 0);
                                                            }
                                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                        }
                                                    }
                                                    break;

                                                /*0f*//*38*/
                                                case 0x13:
                                                    {
                                                        if (prefix2.Contains(0x66))
                                                        {
                                                            description = "Convert 16-bit FP values to single-precision FP values";
                                                            lastdisassembledata.opcode = "vcvtph2ps";

                                                            lastdisassembledata.parameters = xmm(memory[3]) + modrm(memory, prefix2, 3, 4, ref last, tmrpos.mright);
                                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                        }
                                                    }
                                                    break;


                                                case 0x14:
                                                    {
                                                        description = "Variable blend packed single precision floating-point values";
                                                        if (prefix2.Contains(0x66))
                                                        {
                                                            if (hasvex)
                                                            {
                                                                lastdisassembledata.opcode = "vblendvps";
                                                                lastdisassembledata.parameters = xmm(memory[3]) + modrm(memory, prefix2, 3, 4, ref last, tmrpos.mright);
                                                                lastdisassembledata.parameters = lastdisassembledata.parameters + ',' + regnrtostr(tregistertype.rtxmm, memory[(int)last]);
                                                                offset += 1;
                                                            }
                                                            else
                                                            {
                                                                lastdisassembledata.opcode = "blendvps";
                                                                lastdisassembledata.parameters = xmm(memory[3]) + modrm(memory, prefix2, 3, 4, ref last, tmrpos.mright) + ',' + regnrtostr(tregistertype.rtxmm, 0);
                                                            }
                                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                        }
                                                    }
                                                    break;

                                                case 0x15:
                                                    {
                                                        description = "Variable blend packed double precision floating-point values";
                                                        if (prefix2.Contains(0x66))
                                                        {
                                                            if (hasvex)
                                                            {
                                                                lastdisassembledata.opcode = "vblendvpd invalid";
                                                                lastdisassembledata.parameters = xmm(memory[3]) + modrm(memory, prefix2, 3, 4, ref last, tmrpos.mright);
                                                                lastdisassembledata.parameters = lastdisassembledata.parameters + ',' + regnrtostr(tregistertype.rtxmm, memory[(int)last]);
                                                                offset += 1;
                                                            }
                                                            else
                                                            {
                                                                lastdisassembledata.opcode = "blendvpd";
                                                                lastdisassembledata.parameters = xmm(memory[3]) + modrm(memory, prefix2, 3, 4, ref last, tmrpos.mright) + ',' + colorreg + regnrtostr(tregistertype.rtxmm, 0) + endcolor;
                                                            }
                                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                        }
                                                    }
                                                    break;

                                                case 0x16:
                                                    {
                                                        if (prefix2.Contains(0x66))
                                                        {
                                                            if (hasvex)
                                                            {
                                                                description = "Permute single-precision floating-point elements";
                                                                lastdisassembledata.opcode = "vpermps";
                                                                lastdisassembledata.parameters = xmm(memory[3]) + modrm(memory, prefix2, 3, 4, ref last, tmrpos.mright);
                                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                            }
                                                        }
                                                    }
                                                    break;

                                                case 0x17:
                                                    {
                                                        if (prefix2.Contains(0x66))
                                                        {
                                                            description = "Logical compare";
                                                            if (hasvex)
                                                                lastdisassembledata.opcode = "vptest";
                                                            else
                                                                lastdisassembledata.opcode = "ptest";

                                                            opcodeflags.skipextrareg = true;
                                                            lastdisassembledata.parameters = xmm(memory[3]) + modrm(memory, prefix2, 3, 4, ref last, tmrpos.mright);
                                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                        }
                                                    }
                                                    break;

                                                case 0x18:
                                                    {
                                                        if (prefix2.Contains(0x66))
                                                        {
                                                            if (hasvex)
                                                            {
                                                                description = "Broadcast floating-point-data";
                                                                lastdisassembledata.opcode = "vbroadcastss";
                                                                opcodeflags.skipextrareg = true;
                                                                lastdisassembledata.parameters = xmm(memory[3]) + modrm(memory, prefix2, 3, 4, ref last, tmrpos.mright);
                                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                            }
                                                        }
                                                    }
                                                    break;

                                                case 0x19:
                                                    {
                                                        if (prefix2.Contains(0x66))
                                                        {
                                                            if (hasvex)
                                                            {
                                                                description = "Broadcast floating-point-data";
                                                                lastdisassembledata.opcode = "vbroadcastsd";
                                                                opcodeflags.skipextrareg = true;
                                                                lastdisassembledata.parameters = xmm(memory[3]) + modrm(memory, prefix2, 3, 4, ref last, tmrpos.mright);
                                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                            }
                                                        }
                                                    }
                                                    break;

                                                case 0x1a:
                                                    {
                                                        if (prefix2.Contains(0x66))
                                                        {
                                                            if (hasvex)
                                                            {
                                                                description = "Broadcast floating-point-data";
                                                                lastdisassembledata.opcode = "vbroadcastf128";
                                                                opcodeflags.skipextrareg = true;
                                                                lastdisassembledata.parameters = xmm(memory[3]) + modrm(memory, prefix2, 3, 4, ref last, tmrpos.mright);
                                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                            }
                                                        }
                                                    }
                                                    break;

                                                /*0f*//*38*/
                                                case 0x1c:
                                                    {
                                                        if (prefix2.Contains(0x66))
                                                        {
                                                            description = "Packed absolute value";
                                                            if (hasvex)
                                                                lastdisassembledata.opcode = "vpabsb";
                                                            else
                                                                lastdisassembledata.opcode = "pabsb";

                                                            opcodeflags.skipextrareg = true;
                                                            lastdisassembledata.parameters = xmm(memory[3]) + modrm(memory, prefix2, 3, 4, ref last, tmrpos.mright);
                                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                        }
                                                        else
                                                        {
                                                            description = "Packed absolute value";
                                                            lastdisassembledata.opcode = "pabsb";
                                                            lastdisassembledata.parameters = mm(memory[3]) + modrm(memory, prefix2, 3, 3, ref last, tmrpos.mright);
                                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                        }
                                                    }
                                                    break;

                                                /*0f*//*38*/
                                                case 0x1d:
                                                    {
                                                        if (prefix2.Contains(0x66))
                                                        {
                                                            description = "Packed absolute value";
                                                            if (hasvex)
                                                                lastdisassembledata.opcode = "vpabsw";
                                                            else
                                                                lastdisassembledata.opcode = "pabsw";

                                                            opcodeflags.skipextrareg = true;
                                                            lastdisassembledata.parameters = xmm(memory[3]) + modrm(memory, prefix2, 3, 4, ref last, tmrpos.mright);
                                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                        }
                                                        else
                                                        {
                                                            description = "Packed absolute value";
                                                            lastdisassembledata.opcode = "pabsw";
                                                            lastdisassembledata.parameters = mm(memory[3]) + modrm(memory, prefix2, 3, 3, ref last, tmrpos.mright);
                                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                        }
                                                    }
                                                    break;

                                                /*0f*//*38*/
                                                case 0x1e:
                                                    {
                                                        if (prefix2.Contains(0x66))
                                                        {
                                                            description = "Packed absolute value";
                                                            if (hasvex)
                                                                lastdisassembledata.opcode = "vpabsd";
                                                            else
                                                                lastdisassembledata.opcode = "pabsd";

                                                            opcodeflags.skipextrareg = true;
                                                            lastdisassembledata.parameters = xmm(memory[3]) + modrm(memory, prefix2, 3, 4, ref last, tmrpos.mright);
                                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                        }
                                                        else
                                                        {
                                                            description = "Packed absolute value";
                                                            lastdisassembledata.opcode = "pabsd";
                                                            lastdisassembledata.parameters = mm(memory[3]) + modrm(memory, prefix2, 3, 3, ref last, tmrpos.mright);
                                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                        }
                                                    }
                                                    break;

                                                /*0f*//*38*/
                                                case 0x20:
                                                    {
                                                        if (prefix2.Contains(0x66))
                                                        {
                                                            description = "Packed move with sign extend";
                                                            if (hasvex)
                                                                lastdisassembledata.opcode = "vpmovsxbw";
                                                            else
                                                                lastdisassembledata.opcode = "pmovsxbw";

                                                            lastdisassembledata.parameters = xmm(memory[3]) + modrm(memory, prefix2, 3, 4, ref last, tmrpos.mright);
                                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                        }
                                                    }
                                                    break;

                                                /*0f*//*38*/
                                                case 0x21:
                                                    {
                                                        if (prefix2.Contains(0x66))
                                                        {
                                                            description = "Packed move with sign extend";
                                                            if (hasvex)
                                                                lastdisassembledata.opcode = "vpmovsxbd";
                                                            else
                                                                lastdisassembledata.opcode = "pmovsxbd";

                                                            lastdisassembledata.parameters = xmm(memory[3]) + modrm(memory, prefix2, 3, 4, ref last, tmrpos.mright);
                                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                        }
                                                    }
                                                    break;

                                                /*0f*//*38*/
                                                case 0x22:
                                                    {
                                                        if (prefix2.Contains(0x66))
                                                        {
                                                            description = "Packed move with sign extend";
                                                            if (hasvex)
                                                                lastdisassembledata.opcode = "vpmovsxbq";
                                                            else
                                                                lastdisassembledata.opcode = "pmovsxbq";

                                                            lastdisassembledata.parameters = xmm(memory[3]) + modrm(memory, prefix2, 3, 4, ref last, tmrpos.mright);
                                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                        }
                                                    }
                                                    break;

                                                /*0f*//*38*/
                                                case 0x23:
                                                    {
                                                        if (prefix2.Contains(0x66))
                                                        {
                                                            description = "Packed move with sign extend";
                                                            if (hasvex)
                                                                lastdisassembledata.opcode = "vpmovsxwd";
                                                            else
                                                                lastdisassembledata.opcode = "pmovsxwd";

                                                            lastdisassembledata.parameters = xmm(memory[3]) + modrm(memory, prefix2, 3, 4, ref last, tmrpos.mright);
                                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                        }
                                                    }
                                                    break;

                                                /*0f*//*38*/
                                                case 0x24:
                                                    {
                                                        if (prefix2.Contains(0x66))
                                                        {
                                                            description = "Packed move with sign extend";
                                                            if (hasvex)
                                                                lastdisassembledata.opcode = "vpmovsxwq";
                                                            else
                                                                lastdisassembledata.opcode = "pmovsxwq";

                                                            lastdisassembledata.parameters = xmm(memory[3]) + modrm(memory, prefix2, 3, 4, ref last, tmrpos.mright);
                                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                        }
                                                    }
                                                    break;

                                                /*0f*//*38*/
                                                case 0x25:
                                                    {
                                                        if (prefix2.Contains(0x66))
                                                        {
                                                            description = "Packed move with sign extend";
                                                            if (hasvex)
                                                                lastdisassembledata.opcode = "vpmovsxdq";
                                                            else
                                                                lastdisassembledata.opcode = "pmovsxdq";

                                                            lastdisassembledata.parameters = xmm(memory[3]) + modrm(memory, prefix2, 3, 4, ref last, tmrpos.mright);
                                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                        }
                                                    }
                                                    break;

                                                /*0f*//*38*/
                                                case 0x28:
                                                    {
                                                        if (prefix2.Contains(0x66))
                                                        {
                                                            description = "Multiple packed signed dword integers";
                                                            if (hasvex)
                                                                lastdisassembledata.opcode = "vpmuldq";
                                                            else
                                                                lastdisassembledata.opcode = "pmuldq";

                                                            lastdisassembledata.parameters = xmm(memory[3]) + modrm(memory, prefix2, 3, 4, ref last, tmrpos.mright);
                                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                        }
                                                    }
                                                    break;

                                                /*0f*//*38*/
                                                case 0x29:
                                                    {
                                                        if (prefix2.Contains(0x66))
                                                        {
                                                            description = "Compare packed qword data for equal";
                                                            if (hasvex)
                                                                lastdisassembledata.opcode = "vpcmpeqq";
                                                            else
                                                                lastdisassembledata.opcode = "pcmpeqq";

                                                            lastdisassembledata.parameters = xmm(memory[3]) + modrm(memory, prefix2, 3, 4, ref last, tmrpos.mright);
                                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                        }
                                                    }
                                                    break;

                                                /*0f*//*38*/
                                                case 0x2a:
                                                    {
                                                        if (prefix2.Contains(0x66))
                                                        {
                                                            description = "Load double quadword non-temporal aligned hint";
                                                            if (hasvex)
                                                                lastdisassembledata.opcode = "vmovntdqa";
                                                            else
                                                                lastdisassembledata.opcode = "movntdqa";

                                                            opcodeflags.skipextrareg = true;
                                                            lastdisassembledata.parameters = xmm(memory[3]) + modrm(memory, prefix2, 3, 4, ref last, tmrpos.mright);
                                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                        }
                                                    }
                                                    break;

                                                /*0f*//*38*/
                                                case 0x2b:
                                                    {
                                                        if (prefix2.Contains(0x66))
                                                        {
                                                            description = "Pack with unsigned saturation";
                                                            if (hasvex)
                                                                lastdisassembledata.opcode = "vpackusdw";
                                                            else
                                                                lastdisassembledata.opcode = "packusdw";

                                                            lastdisassembledata.parameters = xmm(memory[3]) + modrm(memory, prefix2, 3, 4, ref last, tmrpos.mright);
                                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                        }
                                                    }
                                                    break;

                                                /*0f*//*38*/
                                                case 0x2c:
                                                    {
                                                        if (prefix2.Contains(0x66))
                                                        {
                                                            if (hasvex)
                                                            {
                                                                description = "Conditional SIMD packed loads and stores";
                                                                lastdisassembledata.opcode = "vmaskmovps";
                                                                lastdisassembledata.parameters = xmm(memory[3]) + modrm(memory, prefix2, 3, 4, ref last, tmrpos.mright);
                                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                            }
                                                        }
                                                    }
                                                    break;

                                                /*0f*//*38*/
                                                case 0x2d:
                                                    {
                                                        if (prefix2.Contains(0x66))
                                                        {
                                                            if (hasvex)
                                                            {
                                                                description = "Conditional SIMD packed loads and stores";
                                                                lastdisassembledata.opcode = "vmaskmovpd";
                                                                lastdisassembledata.parameters = xmm(memory[3]) + modrm(memory, prefix2, 3, 4, ref last, tmrpos.mright);
                                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                            }
                                                        }
                                                    }
                                                    break;

                                                /*0f*//*38*/
                                                case 0x2e:
                                                    {
                                                        if (prefix2.Contains(0x66))
                                                        {
                                                            if (hasvex)
                                                            {
                                                                description = "Conditional SIMD packed loads and stores";
                                                                lastdisassembledata.opcode = "vmaskmovps";
                                                                lastdisassembledata.parameters = modrm(memory, prefix2, 3, 4, ref last, tmrpos.mleft) + xmm(memory[3]);
                                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                            }
                                                        }
                                                    }
                                                    break;

                                                /*0f*//*38*/
                                                case 0x2f:
                                                    {
                                                        if (prefix2.Contains(0x66))
                                                        {
                                                            if (hasvex)
                                                            {
                                                                description = "Conditional SIMD packed loads and stores";
                                                                lastdisassembledata.opcode = "vmaskmovpd";
                                                                lastdisassembledata.parameters = modrm(memory, prefix2, 3, 4, ref last, tmrpos.mleft) + xmm(memory[3]);
                                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                            }
                                                        }
                                                    }
                                                    break;

                                                /*0f*//*38*/
                                                case 0x30:
                                                    {
                                                        if (prefix2.Contains(0x66))
                                                        {
                                                            description = "Packed move with zero extend";
                                                            if (hasvex)
                                                                lastdisassembledata.opcode = "vpmovzxbw";
                                                            else
                                                                lastdisassembledata.opcode = "pmovzxbw";

                                                            lastdisassembledata.parameters = xmm(memory[3]) + modrm(memory, prefix2, 3, 4, ref last, tmrpos.mright);
                                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                        }
                                                    }
                                                    break;

                                                /*0f*//*38*/
                                                case 0x31:
                                                    {
                                                        if (prefix2.Contains(0x66))
                                                        {
                                                            description = "Packed move with zero extend";
                                                            if (hasvex)
                                                                lastdisassembledata.opcode = "vpmovzxbd";
                                                            else
                                                                lastdisassembledata.opcode = "pmovzxbd";

                                                            lastdisassembledata.parameters = xmm(memory[3]) + modrm(memory, prefix2, 3, 4, ref last, tmrpos.mright);
                                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                        }
                                                    }
                                                    break;

                                                /*0f*//*38*/
                                                case 0x32:
                                                    {
                                                        if (prefix2.Contains(0x66))
                                                        {
                                                            description = "Packed move with zero extend";
                                                            if (hasvex)
                                                                lastdisassembledata.opcode = "vpmovzxbq";
                                                            else
                                                                lastdisassembledata.opcode = "pmovzxbq";

                                                            lastdisassembledata.parameters = xmm(memory[3]) + modrm(memory, prefix2, 3, 4, ref last, tmrpos.mright);
                                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                        }
                                                    }
                                                    break;

                                                /*0f*//*38*/
                                                case 0x33:
                                                    {
                                                        if (prefix2.Contains(0x66))
                                                        {
                                                            description = "Packed move with zero extend";
                                                            if (hasvex)
                                                                lastdisassembledata.opcode = "vpmovzxwd";
                                                            else
                                                                lastdisassembledata.opcode = "pmovzxwd";

                                                            lastdisassembledata.parameters = xmm(memory[3]) + modrm(memory, prefix2, 3, 4, ref last, tmrpos.mright);
                                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                        }
                                                    }
                                                    break;

                                                /*0f*//*38*/
                                                case 0x34:
                                                    {
                                                        if (prefix2.Contains(0x66))
                                                        {
                                                            description = "Packed move with zero extend";
                                                            if (hasvex)
                                                                lastdisassembledata.opcode = "vpmovzxwq";
                                                            else
                                                                lastdisassembledata.opcode = "pmovzxwq";

                                                            lastdisassembledata.parameters = xmm(memory[3]) + modrm(memory, prefix2, 3, 4, ref last, tmrpos.mright);
                                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                        }
                                                    }
                                                    break;

                                                /*0f*//*38*/
                                                case 0x35:
                                                    {
                                                        if (prefix2.Contains(0x66))
                                                        {
                                                            description = "Packed move with zero extend";
                                                            if (hasvex)
                                                                lastdisassembledata.opcode = "vpmovzxdq";
                                                            else
                                                                lastdisassembledata.opcode = "pmovzxdq";

                                                            lastdisassembledata.parameters = xmm(memory[3]) + modrm(memory, prefix2, 3, 4, ref last, tmrpos.mright);
                                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                        }
                                                    }
                                                    break;

                                                /*0f*//*38*/
                                                case 0x36:
                                                    {
                                                        if (prefix2.Contains(0x66))
                                                        {
                                                            if (hasvex)
                                                            {
                                                                description = "Full doublewords element permutation";
                                                                lastdisassembledata.opcode = "vpermd";
                                                                lastdisassembledata.parameters = xmm(memory[3]) + modrm(memory, prefix2, 3, 4, ref last, tmrpos.mright);
                                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                            }
                                                        }
                                                    }
                                                    break;


                                                /*0f*//*38*/
                                                case 0x37:
                                                    {
                                                        if (prefix2.Contains(0x66))
                                                        {
                                                            description = "Compare packed data for greater than";
                                                            if (hasvex)
                                                                lastdisassembledata.opcode = "vpcmpgtq";
                                                            else
                                                                lastdisassembledata.opcode = "pcmpgtq";

                                                            lastdisassembledata.parameters = xmm(memory[3]) + modrm(memory, prefix2, 3, 4, ref last, tmrpos.mright);
                                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                        }
                                                    }
                                                    break;

                                                /*0f*//*38*/
                                                case 0x38:
                                                    {
                                                        if (prefix2.Contains(0x66))
                                                        {
                                                            description = "Minimum of packed signed byte integers";
                                                            if (hasvex)
                                                                lastdisassembledata.opcode = "vpminsb";
                                                            else
                                                                lastdisassembledata.opcode = "pminsb";

                                                            lastdisassembledata.parameters = xmm(memory[3]) + modrm(memory, prefix2, 3, 4, ref last, tmrpos.mright);
                                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                        }
                                                    }
                                                    break;

                                                /*0f*//*38*/
                                                case 0x39:
                                                    {
                                                        if (prefix2.Contains(0x66))
                                                        {
                                                            description = "Minimum of packed dword integers";
                                                            if (hasvex)
                                                                lastdisassembledata.opcode = "vpminsd";
                                                            else
                                                                lastdisassembledata.opcode = "pminsd";

                                                            lastdisassembledata.parameters = xmm(memory[3]) + modrm(memory, prefix2, 3, 4, ref last, tmrpos.mright);
                                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                        }
                                                    }
                                                    break;

                                                /*0f*//*38*/
                                                case 0x3a:
                                                    {
                                                        if (prefix2.Contains(0x66))
                                                        {
                                                            description = "Minimum of packed word integers";
                                                            if (hasvex)
                                                                lastdisassembledata.opcode = "vpminuw";
                                                            else
                                                                lastdisassembledata.opcode = "pminuw";

                                                            lastdisassembledata.parameters = xmm(memory[3]) + modrm(memory, prefix2, 3, 4, ref last, tmrpos.mright);
                                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                        }
                                                    }
                                                    break;

                                                /*0f*//*38*/
                                                case 0x3b:
                                                    {
                                                        if (prefix2.Contains(0x66))
                                                        {
                                                            description = "Minimum of packed dword integers";
                                                            if (hasvex)
                                                                lastdisassembledata.opcode = "vpminud";
                                                            else
                                                                lastdisassembledata.opcode = "pminud";

                                                            lastdisassembledata.parameters = xmm(memory[3]) + modrm(memory, prefix2, 3, 4, ref last, tmrpos.mright);
                                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                        }
                                                    }
                                                    break;

                                                /*0f*//*38*/
                                                case 0x3c:
                                                    {
                                                        if (prefix2.Contains(0x66))
                                                        {
                                                            description = "Maximum of packed signed byte integers";
                                                            if (hasvex)
                                                                lastdisassembledata.opcode = "vpmaxsb";
                                                            else
                                                                lastdisassembledata.opcode = "pmaxsb";

                                                            lastdisassembledata.parameters = xmm(memory[3]) + modrm(memory, prefix2, 3, 4, ref last, tmrpos.mright);
                                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                        }
                                                    }
                                                    break;

                                                /*0f*//*38*/
                                                case 0x3d:
                                                    {
                                                        if (prefix2.Contains(0x66))
                                                        {
                                                            description = "Maximum of packed signed dword integers";
                                                            if (hasvex)
                                                                lastdisassembledata.opcode = "vpmaxsd";
                                                            else
                                                                lastdisassembledata.opcode = "pmaxsd";

                                                            lastdisassembledata.parameters = xmm(memory[3]) + modrm(memory, prefix2, 3, 4, ref last, tmrpos.mright);
                                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                        }
                                                    }
                                                    break;

                                                /*0f*//*38*/
                                                case 0x3e:
                                                    {
                                                        if (prefix2.Contains(0x66))
                                                        {
                                                            description = "Maximum of packed word integers";
                                                            if (hasvex)
                                                                lastdisassembledata.opcode = "vpmaxuw";
                                                            else
                                                                lastdisassembledata.opcode = "pmaxuw";

                                                            lastdisassembledata.parameters = xmm(memory[3]) + modrm(memory, prefix2, 3, 4, ref last, tmrpos.mright);
                                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                        }
                                                    }
                                                    break;

                                                /*0f*//*38*/
                                                case 0x3f:
                                                    {
                                                        if (prefix2.Contains(0x66))
                                                        {
                                                            description = "Maximum of packed unsigned dword integers";
                                                            if (hasvex)
                                                                lastdisassembledata.opcode = "vpmaxud";
                                                            else
                                                                lastdisassembledata.opcode = "pmaxud";

                                                            lastdisassembledata.parameters = xmm(memory[3]) + modrm(memory, prefix2, 3, 4, ref last, tmrpos.mright);
                                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                        }
                                                    }
                                                    break;

                                                /*0f*//*38*/
                                                case 0x40:
                                                    {
                                                        if (prefix2.Contains(0x66))
                                                        {
                                                            description = "Multiply Packed Signed Dword Integers and Store Low Result";
                                                            if (hasvex)
                                                                lastdisassembledata.opcode = "vpmulld";
                                                            else
                                                                lastdisassembledata.opcode = "pmulld";

                                                            lastdisassembledata.parameters = xmm(memory[3]) + modrm(memory, prefix2, 3, 4, ref last, tmrpos.mright);
                                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                        }
                                                    }
                                                    break;

                                                /*0f*//*38*/
                                                case 0x41:
                                                    {
                                                        if (prefix2.Contains(0x66))
                                                        {
                                                            description = "Packed horitontal word minimum";
                                                            if (hasvex)
                                                                lastdisassembledata.opcode = "phminposuw";
                                                            else
                                                                lastdisassembledata.opcode = "vphminposuw";

                                                            opcodeflags.skipextrareg = true;
                                                            lastdisassembledata.parameters = xmm(memory[3]) + modrm(memory, prefix2, 3, 4, ref last, tmrpos.mright);
                                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                        }
                                                    }
                                                    break;

                                                case 0x45:
                                                    {
                                                        if (prefix2.Contains(0x66))
                                                        {
                                                            if (hasvex)
                                                            {
                                                                description = "Variable Bit Shift Right Logical";

                                                                if (rex_w)
                                                                    lastdisassembledata.opcode = "vpsrlvq";
                                                                else
                                                                    lastdisassembledata.opcode = "vpsrlvd";

                                                                lastdisassembledata.parameters = xmm(memory[3]) + modrm(memory, prefix2, 3, 4, ref last, tmrpos.mright);
                                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                            }
                                                        }
                                                    }
                                                    break;

                                                /*0f*//*38*/
                                                case 0x46:
                                                    {
                                                        if (prefix2.Contains(0x66))
                                                        {
                                                            if (hasvex)
                                                            {
                                                                description = "Variable bit shift right arithmetic";
                                                                lastdisassembledata.opcode = "vpsravd";
                                                                lastdisassembledata.parameters = xmm(memory[3]) + modrm(memory, prefix2, 3, 4, ref last, tmrpos.mright);
                                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                            }
                                                        }
                                                    }
                                                    break;

                                                case 0x47:
                                                    {
                                                        if (prefix2.Contains(0x66))
                                                        {
                                                            if (hasvex)
                                                            {
                                                                description = "Variable Bit Shift Left Logical";

                                                                if (rex_w)
                                                                    lastdisassembledata.opcode = "vpsllvq";
                                                                else
                                                                    lastdisassembledata.opcode = "vpsllvd";

                                                                lastdisassembledata.parameters = xmm(memory[3]) + modrm(memory, prefix2, 3, 4, ref last, tmrpos.mright);
                                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                            }
                                                        }
                                                    }
                                                    break;


                                                /*0f*//*38*/
                                                case 0x58:
                                                    {
                                                        if (prefix2.Contains(0x66))
                                                        {
                                                            if (hasvex)
                                                            {
                                                                description = "Broadcast integer data";
                                                                lastdisassembledata.opcode = "vpbroadcastd";
                                                                opcodeflags.skipextrareg = true;
                                                                lastdisassembledata.parameters = xmm(memory[3]) + modrm(memory, prefix2, 3, 4, ref last, tmrpos.mright);
                                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                            }
                                                        }
                                                    }
                                                    break;

                                                /*0f*//*38*/
                                                case 0x59:
                                                    {
                                                        if (prefix2.Contains(0x66))
                                                        {
                                                            if (hasvex)
                                                            {
                                                                description = "Broadcast integer data";
                                                                lastdisassembledata.opcode = "vpbroadcastq";
                                                                opcodeflags.skipextrareg = true;
                                                                lastdisassembledata.parameters = xmm(memory[3]) + modrm(memory, prefix2, 3, 4, ref last, tmrpos.mright);
                                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                            }
                                                        }
                                                    }
                                                    break;

                                                /*0f*//*38*/
                                                case 0x5a:
                                                    {
                                                        if (prefix2.Contains(0x66))
                                                        {
                                                            if (hasvex)
                                                            {
                                                                description = "Broadcast integer data";
                                                                lastdisassembledata.opcode = "vpbroadcasti128";
                                                                opcodeflags.skipextrareg = true;
                                                                lastdisassembledata.parameters = xmm(memory[3]) + modrm(memory, prefix2, 3, 4, ref last, tmrpos.mright);
                                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                            }
                                                        }
                                                    }
                                                    break;

                                                /*0f*//*38*/
                                                case 0x78:
                                                    {
                                                        if (prefix2.Contains(0x66))
                                                        {
                                                            if (hasvex)
                                                            {
                                                                description = "Broadcast integer data";
                                                                lastdisassembledata.opcode = "vpbroadcastb";
                                                                opcodeflags.skipextrareg = true;
                                                                lastdisassembledata.parameters = xmm(memory[3]) + modrm(memory, prefix2, 3, 4, ref last, tmrpos.mright);
                                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                            }
                                                        }
                                                    }
                                                    break;

                                                /*0f*//*38*/
                                                case 0x79:
                                                    {
                                                        if (prefix2.Contains(0x66))
                                                        {
                                                            if (hasvex)
                                                            {
                                                                description = "Broadcast integer data";
                                                                lastdisassembledata.opcode = "vpbroadcastw";
                                                                opcodeflags.skipextrareg = true;
                                                                lastdisassembledata.parameters = xmm(memory[3]) + modrm(memory, prefix2, 3, 4, ref last, tmrpos.mright);
                                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                            }
                                                        }
                                                    }
                                                    break;

                                                case 0x82:
                                                    {
                                                        description = "Invalidate process-context-identifier";
                                                        lastdisassembledata.opcode = "invpcid";
                                                        if (SelfSymbolHandler.Process.IsX64)
                                                            lastdisassembledata.parameters = r64(memory[3]) + modrm(memory, prefix2, 3, 0, ref last, 128, 0, tmrpos.mright);
                                                        else
                                                            lastdisassembledata.parameters = r32(memory[3]) + modrm(memory, prefix2, 3, 0, ref last, 128, 0, tmrpos.mright);

                                                        offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                    }
                                                    break;

                                                case 0x8c:
                                                    {
                                                        if (prefix2.Contains(0x66))
                                                        {
                                                            if (hasvex)
                                                            {
                                                                if (rex_w)
                                                                {
                                                                    description = "Conditional SIMD Integer Packed Loads and Stores";
                                                                    lastdisassembledata.opcode = "vpmaskmovq";
                                                                    lastdisassembledata.parameters = xmm(memory[3]) + modrm(memory, prefix2, 3, 4, ref last, tmrpos.mright);
                                                                    offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                                }
                                                                else
                                                                {
                                                                    description = "Conditional SIMD Integer Packed Loads and Stores";
                                                                    lastdisassembledata.opcode = "vpmaskmovd";
                                                                    lastdisassembledata.parameters = xmm(memory[3]) + modrm(memory, prefix2, 3, 4, ref last, tmrpos.mright);
                                                                    offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                                }
                                                            }
                                                        }
                                                    }
                                                    break;

                                                case 0x8e:
                                                    {
                                                        if (prefix2.Contains(0x66))
                                                        {
                                                            if (hasvex)
                                                            {
                                                                if (rex_w)
                                                                {
                                                                    description = "Conditional SIMD Integer Packed Loads and Stores";
                                                                    lastdisassembledata.opcode = "vpmaskmovq";
                                                                    lastdisassembledata.parameters = modrm(memory, prefix2, 3, 4, ref last, tmrpos.mleft) + xmm(memory[3]);
                                                                    offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                                }
                                                                else
                                                                {
                                                                    description = "Conditional SIMD Integer Packed Loads and Stores";
                                                                    lastdisassembledata.opcode = "vpmaskmovd";
                                                                    lastdisassembledata.parameters = modrm(memory, prefix2, 3, 4, ref last, tmrpos.mleft) + xmm(memory[3]);
                                                                    offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                                }
                                                            }
                                                        }
                                                    }
                                                    break;


                                                case 0x96:
                                                    {
                                                        if (prefix2.Contains(0x66))
                                                        {
                                                            if (hasvex)
                                                            {
                                                                if (rex_w)
                                                                {
                                                                    description = "Fused multiple-alnterating add/subtract of packed double precision floating-point-values";
                                                                    lastdisassembledata.opcode = "vfmaddsub132pd";
                                                                    lastdisassembledata.parameters = xmm(memory[3]) + modrm(memory, prefix2, 3, 4, ref last, tmrpos.mright);
                                                                    offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                                }
                                                                else
                                                                {
                                                                    description = "Fused multiple-alnterating add/subtract of precision floating-point-values";
                                                                    lastdisassembledata.opcode = "vfmaddsub132ps";
                                                                    lastdisassembledata.parameters = xmm(memory[3]) + modrm(memory, prefix2, 3, 4, ref last, tmrpos.mright);
                                                                    offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                                }
                                                            }
                                                        }
                                                    }
                                                    break;

                                                case 0x97:
                                                    {
                                                        if (prefix2.Contains(0x66))
                                                        {
                                                            if (hasvex)
                                                            {
                                                                if (rex_w)
                                                                {
                                                                    description = "Fused multiple-alnterating subtract/add of packed double precision floating-point-values";
                                                                    lastdisassembledata.opcode = "vfmsubadd132pd";
                                                                    lastdisassembledata.parameters = xmm(memory[3]) + modrm(memory, prefix2, 3, 4, ref last, tmrpos.mright);
                                                                    offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                                }
                                                                else
                                                                {
                                                                    description = "Fused multiple-alnterating subtract/add of precision floating-point-values";
                                                                    lastdisassembledata.opcode = "vfmsubadd132ps";
                                                                    lastdisassembledata.parameters = xmm(memory[3]) + modrm(memory, prefix2, 3, 4, ref last, tmrpos.mright);
                                                                    offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                                }
                                                            }
                                                        }
                                                    }
                                                    break;

                                                case 0x98:
                                                    {
                                                        if (prefix2.Contains(0x66))
                                                        {
                                                            if (hasvex)
                                                            {
                                                                if (rex_w)
                                                                {
                                                                    description = "Fused multiple-add of packed double precision floating-point-values";
                                                                    lastdisassembledata.opcode = "vfmadd132pd";
                                                                    lastdisassembledata.parameters = xmm(memory[3]) + modrm(memory, prefix2, 3, 4, ref last, tmrpos.mright);
                                                                    offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                                }
                                                                else
                                                                {
                                                                    description = "Fused multiple-add of packed single precision floating-point-values";
                                                                    lastdisassembledata.opcode = "vfmadd132ps";
                                                                    lastdisassembledata.parameters = xmm(memory[3]) + modrm(memory, prefix2, 3, 4, ref last, tmrpos.mright);
                                                                    offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                                }
                                                            }
                                                        }
                                                    }
                                                    break;

                                                case 0x99:
                                                    {
                                                        if (prefix2.Contains(0x66))
                                                        {
                                                            if (hasvex)
                                                            {
                                                                if (rex_w)
                                                                {
                                                                    description = "Fused multiple-add of scalar double precision floating-point-values";
                                                                    lastdisassembledata.opcode = "vfmadd132sd";
                                                                    lastdisassembledata.parameters = xmm(memory[3]) + modrm(memory, prefix2, 3, 4, ref last, tmrpos.mright);
                                                                    offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                                }
                                                                else
                                                                {
                                                                    description = "Fused multiple-add of scalar single precision floating-point-values";
                                                                    lastdisassembledata.opcode = "vfmadd132ss";
                                                                    lastdisassembledata.parameters = xmm(memory[3]) + modrm(memory, prefix2, 3, 4, ref last, tmrpos.mright);
                                                                    offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                                }
                                                            }
                                                        }
                                                    }
                                                    break;

                                                case 0x9a:
                                                    {
                                                        if (prefix2.Contains(0x66))
                                                        {
                                                            if (hasvex)
                                                            {
                                                                if (rex_w)
                                                                {
                                                                    description = "Fused multiple-subtract of packed double precision floating-point-values";
                                                                    lastdisassembledata.opcode = "vfmsub132pd";
                                                                    lastdisassembledata.parameters = xmm(memory[3]) + modrm(memory, prefix2, 3, 4, ref last, tmrpos.mright);
                                                                    offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                                }
                                                                else
                                                                {
                                                                    description = "Fused multiple-subtract of packed single precision floating-point-values";
                                                                    lastdisassembledata.opcode = "vfmsub132ps";
                                                                    lastdisassembledata.parameters = xmm(memory[3]) + modrm(memory, prefix2, 3, 4, ref last, tmrpos.mright);
                                                                    offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                                }
                                                            }
                                                        }
                                                    }
                                                    break;

                                                case 0x9b:
                                                    {
                                                        if (prefix2.Contains(0x66))
                                                        {
                                                            if (hasvex)
                                                            {
                                                                if (rex_w)
                                                                {
                                                                    description = "Fused multiple-subtract of scalar double precision floating-point-values";
                                                                    lastdisassembledata.opcode = "vfmsub132sd";
                                                                    lastdisassembledata.parameters = xmm(memory[3]) + modrm(memory, prefix2, 3, 4, ref last, tmrpos.mright);
                                                                    offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                                }
                                                                else
                                                                {
                                                                    description = "Fused multiple-subtract of scalar single precision floating-point-values";
                                                                    lastdisassembledata.opcode = "vfmsub132ss";
                                                                    lastdisassembledata.parameters = xmm(memory[3]) + modrm(memory, prefix2, 3, 4, ref last, tmrpos.mright);
                                                                    offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                                }
                                                            }
                                                        }
                                                    }
                                                    break;

                                                /*0f*//*38*/
                                                case 0x9c:
                                                    {
                                                        if (prefix2.Contains(0x66))
                                                        {
                                                            if (hasvex)
                                                            {
                                                                if (rex_w)
                                                                {
                                                                    description = "Fused negative multiply-add of packed double precision floating-point-values";
                                                                    lastdisassembledata.opcode = "vfnmadd132pd";
                                                                    lastdisassembledata.parameters = xmm(memory[3]) + modrm(memory, prefix2, 3, 4, ref last, tmrpos.mright);
                                                                    offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                                }
                                                                else
                                                                {
                                                                    description = "Fused negative multiply-add of packed single-precision floating-point-values";
                                                                    lastdisassembledata.opcode = "vfnmadd132ps";
                                                                    lastdisassembledata.parameters = xmm(memory[3]) + modrm(memory, prefix2, 3, 4, ref last, tmrpos.mright);
                                                                    offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                                }
                                                            }
                                                        }
                                                    }
                                                    break;

                                                case 0x9d:
                                                    {
                                                        if (prefix2.Contains(0x66))
                                                        {
                                                            if (hasvex)
                                                            {
                                                                if (rex_w)
                                                                {
                                                                    description = "Fused negative multiply-add of scalar double precision floating-point-values";
                                                                    lastdisassembledata.opcode = "vfnmadd132sd";
                                                                    lastdisassembledata.parameters = xmm(memory[3]) + modrm(memory, prefix2, 3, 4, ref last, tmrpos.mright);
                                                                    offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                                }
                                                                else
                                                                {
                                                                    description = "Fused negative multiply-add of scalar single precision floating-point-values";
                                                                    lastdisassembledata.opcode = "vfnmadd132ss";
                                                                    lastdisassembledata.parameters = xmm(memory[3]) + modrm(memory, prefix2, 3, 4, ref last, tmrpos.mright);
                                                                    offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                                }
                                                            }
                                                        }
                                                    }
                                                    break;

                                                case 0x9e:
                                                    {
                                                        if (prefix2.Contains(0x66))
                                                        {
                                                            if (hasvex)
                                                            {
                                                                if (rex_w)
                                                                {
                                                                    description = "Fused negative multiply-subtract of packed double precision floating-point-values";
                                                                    lastdisassembledata.opcode = "vfmsub132pd";
                                                                    lastdisassembledata.parameters = xmm(memory[3]) + modrm(memory, prefix2, 3, 4, ref last, tmrpos.mright);
                                                                    offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                                }
                                                                else
                                                                {
                                                                    description = "Fused negative multiply-subtract of packed single precision floating-point-values";
                                                                    lastdisassembledata.opcode = "vfmsub132ps";
                                                                    lastdisassembledata.parameters = xmm(memory[3]) + modrm(memory, prefix2, 3, 4, ref last, tmrpos.mright);
                                                                    offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                                }
                                                            }
                                                        }
                                                    }
                                                    break;

                                                case 0x9f:
                                                    {
                                                        if (prefix2.Contains(0x66))
                                                        {
                                                            if (hasvex)
                                                            {
                                                                if (rex_w)
                                                                {
                                                                    description = "Fused negative multiply-subtract of scalar double precision floating-point-values";
                                                                    lastdisassembledata.opcode = "vfmsub132sd";
                                                                    lastdisassembledata.parameters = xmm(memory[3]) + modrm(memory, prefix2, 3, 4, ref last, tmrpos.mright);
                                                                    offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                                }
                                                                else
                                                                {
                                                                    description = "Fused begative multiply-subtract of scalar single precision floating-point-values";
                                                                    lastdisassembledata.opcode = "vfmsub132ss";
                                                                    lastdisassembledata.parameters = xmm(memory[3]) + modrm(memory, prefix2, 3, 4, ref last, tmrpos.mright);
                                                                    offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                                }
                                                            }
                                                        }
                                                    }
                                                    break;

                                                case 0xa6:
                                                    {
                                                        if (prefix2.Contains(0x66))
                                                        {
                                                            if (hasvex)
                                                            {
                                                                if (rex_w)
                                                                {
                                                                    description = "Fused multiply-alternating add/subtract of packed double precision floating-point-values";
                                                                    lastdisassembledata.opcode = "vfmaddsub213pd";
                                                                    lastdisassembledata.parameters = xmm(memory[3]) + modrm(memory, prefix2, 3, 4, ref last, tmrpos.mright);
                                                                    offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                                }
                                                                else
                                                                {
                                                                    description = "Fused multiply-alternating add/subtract of packed single precision floating-point-values";
                                                                    lastdisassembledata.opcode = "vfmaddsub213ps";
                                                                    lastdisassembledata.parameters = xmm(memory[3]) + modrm(memory, prefix2, 3, 4, ref last, tmrpos.mright);
                                                                    offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                                }
                                                            }
                                                        }
                                                    }
                                                    break;

                                                case 0xa7:
                                                    {
                                                        if (prefix2.Contains(0x66))
                                                        {
                                                            if (hasvex)
                                                            {
                                                                if (rex_w)
                                                                {
                                                                    description = "Fused multiply-alternating subtract/add of packed double precision floating-point-values";
                                                                    lastdisassembledata.opcode = "vfmsubadd213pd";
                                                                    lastdisassembledata.parameters = xmm(memory[3]) + modrm(memory, prefix2, 3, 4, ref last, tmrpos.mright);
                                                                    offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                                }
                                                                else
                                                                {
                                                                    description = "Fused multiply-alternating subtract/add of packed single precision floating-point-values";
                                                                    lastdisassembledata.opcode = "vfmsubadd213ps";
                                                                    lastdisassembledata.parameters = xmm(memory[3]) + modrm(memory, prefix2, 3, 4, ref last, tmrpos.mright);
                                                                    offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                                }
                                                            }
                                                        }
                                                    }
                                                    break;

                                                case 0xa8:
                                                    {
                                                        if (prefix2.Contains(0x66))
                                                        {
                                                            if (hasvex)
                                                            {
                                                                if (rex_w)
                                                                {
                                                                    description = "Fused multiple-add of packed double precision floating-point-values";
                                                                    lastdisassembledata.opcode = "vfmadd213pd";
                                                                    lastdisassembledata.parameters = xmm(memory[3]) + modrm(memory, prefix2, 3, 4, ref last, tmrpos.mright);
                                                                    offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                                }
                                                                else
                                                                {
                                                                    description = "Fused multiple-add of packed single precision floating-point-values";
                                                                    lastdisassembledata.opcode = "vfmadd213ps";
                                                                    lastdisassembledata.parameters = xmm(memory[3]) + modrm(memory, prefix2, 3, 4, ref last, tmrpos.mright);
                                                                    offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                                }
                                                            }
                                                        }
                                                    }
                                                    break;

                                                /*0f*//*38*/
                                                case 0xa9:
                                                    {
                                                        if (prefix2.Contains(0x66))
                                                        {
                                                            if (hasvex)
                                                            {
                                                                if (rex_w)
                                                                {
                                                                    description = "Fused multiple-add of scalar double precision floating-point-values";
                                                                    lastdisassembledata.opcode = "vfmadd213sd";
                                                                    lastdisassembledata.parameters = xmm(memory[3]) + modrm(memory, prefix2, 3, 4, ref last, tmrpos.mright);
                                                                    offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                                }
                                                                else
                                                                {
                                                                    description = "Fused multiple-add of scalar single precision floating-point-values";
                                                                    lastdisassembledata.opcode = "vfmadd213ss";
                                                                    lastdisassembledata.parameters = xmm(memory[3]) + modrm(memory, prefix2, 3, 4, ref last, tmrpos.mright);
                                                                    offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                                }
                                                            }
                                                        }
                                                    }
                                                    break;

                                                case 0xaa:
                                                    {
                                                        if (prefix2.Contains(0x66))
                                                        {
                                                            if (hasvex)
                                                            {
                                                                if (rex_w)
                                                                {
                                                                    description = "Fused multiple-subtract of packed double precision floating-point-values";
                                                                    lastdisassembledata.opcode = "vfmsub213pd";
                                                                    lastdisassembledata.parameters = xmm(memory[3]) + modrm(memory, prefix2, 3, 4, ref last, tmrpos.mright);
                                                                    offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                                }
                                                                else
                                                                {
                                                                    description = "Fused multiple-subtract of packed single precision floating-point-values";
                                                                    lastdisassembledata.opcode = "vfmsub213ps";
                                                                    lastdisassembledata.parameters = xmm(memory[3]) + modrm(memory, prefix2, 3, 4, ref last, tmrpos.mright);
                                                                    offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                                }
                                                            }
                                                        }
                                                    }
                                                    break;


                                                case 0xab:
                                                    {
                                                        if (prefix2.Contains(0x66))
                                                        {
                                                            if (hasvex)
                                                            {
                                                                if (rex_w)
                                                                {
                                                                    description = "Fused multiple-subtract of scalar double precision floating-point-values";
                                                                    lastdisassembledata.opcode = "vfmsub213sd";
                                                                    lastdisassembledata.parameters = xmm(memory[3]) + modrm(memory, prefix2, 3, 4, ref last, tmrpos.mright);
                                                                    offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                                }
                                                                else
                                                                {
                                                                    description = "Fused multiple-subtract of scalar single precision floating-point-values";
                                                                    lastdisassembledata.opcode = "vfmsub213ss";
                                                                    lastdisassembledata.parameters = xmm(memory[3]) + modrm(memory, prefix2, 3, 4, ref last, tmrpos.mright);
                                                                    offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                                }
                                                            }
                                                        }
                                                    }
                                                    break;

                                                case 0xac:
                                                    {
                                                        if (prefix2.Contains(0x66))
                                                        {
                                                            if (hasvex)
                                                            {
                                                                if (rex_w)
                                                                {
                                                                    description = "Fused negative multiply-add of packed double precision floating-point-values";
                                                                    lastdisassembledata.opcode = "vfnmadd213pd";
                                                                    lastdisassembledata.parameters = xmm(memory[3]) + modrm(memory, prefix2, 3, 4, ref last, tmrpos.mright);
                                                                    offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                                }
                                                                else
                                                                {
                                                                    description = "Fused negative multiply-add of packed single-precision floating-point-values";
                                                                    lastdisassembledata.opcode = "vfnmadd213ps";
                                                                    lastdisassembledata.parameters = xmm(memory[3]) + modrm(memory, prefix2, 3, 4, ref last, tmrpos.mright);
                                                                    offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                                }
                                                            }
                                                        }
                                                    }
                                                    break;

                                                case 0xad:
                                                    {
                                                        if (prefix2.Contains(0x66))
                                                        {
                                                            if (hasvex)
                                                            {
                                                                if (rex_w)
                                                                {
                                                                    description = "Fused negative multiply-add of scalar double precision floating-point-values";
                                                                    lastdisassembledata.opcode = "vfnmadd213sd";
                                                                    lastdisassembledata.parameters = xmm(memory[3]) + modrm(memory, prefix2, 3, 4, ref last, tmrpos.mright);
                                                                    offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                                }
                                                                else
                                                                {
                                                                    description = "Fused negative multiply-add of scalar single precision floating-point-values";
                                                                    lastdisassembledata.opcode = "vfnmadd213ss";
                                                                    lastdisassembledata.parameters = xmm(memory[3]) + modrm(memory, prefix2, 3, 4, ref last, tmrpos.mright);
                                                                    offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                                }
                                                            }
                                                        }
                                                    }
                                                    break;

                                                /*0f*//*38*/
                                                case 0xae:
                                                    {
                                                        if (prefix2.Contains(0x66))
                                                        {
                                                            if (hasvex)
                                                            {
                                                                if (rex_w)
                                                                {
                                                                    description = "Fused negative multiply-subtract of packed double precision floating-point-values";
                                                                    lastdisassembledata.opcode = "vfmsub213pd";
                                                                    lastdisassembledata.parameters = xmm(memory[3]) + modrm(memory, prefix2, 3, 4, ref last, tmrpos.mright);
                                                                    offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                                }
                                                                else
                                                                {
                                                                    description = "Fused negative multiply-subtract of packed single precision floating-point-values";
                                                                    lastdisassembledata.opcode = "vfmsub213ps";
                                                                    lastdisassembledata.parameters = xmm(memory[3]) + modrm(memory, prefix2, 3, 4, ref last, tmrpos.mright);
                                                                    offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                                }
                                                            }
                                                        }
                                                    }
                                                    break;

                                                case 0xaf:
                                                    {
                                                        if (prefix2.Contains(0x66))
                                                        {
                                                            if (hasvex)
                                                            {
                                                                if (rex_w)
                                                                {
                                                                    description = "Fused negative multiply-subtract of scalar double precision floating-point-values";
                                                                    lastdisassembledata.opcode = "vfnmsub213sd";
                                                                    lastdisassembledata.parameters = xmm(memory[3]) + modrm(memory, prefix2, 3, 4, ref last, tmrpos.mright);
                                                                    offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                                }
                                                                else
                                                                {
                                                                    description = "Fused begative multiply-subtract of scalar single precision floating-point-values";
                                                                    lastdisassembledata.opcode = "vfnmsub213ss";
                                                                    lastdisassembledata.parameters = xmm(memory[3]) + modrm(memory, prefix2, 3, 4, ref last, tmrpos.mright);
                                                                    offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                                }
                                                            }
                                                        }
                                                    }
                                                    break;

                                                case 0xb6:
                                                    {
                                                        if (prefix2.Contains(0x66))
                                                        {
                                                            if (hasvex)
                                                            {
                                                                if (rex_w)
                                                                {
                                                                    description = "Fused multiply-alternating add/subtract of packed double precision floating-point-values";
                                                                    lastdisassembledata.opcode = "vfmaddsub231pd";
                                                                    lastdisassembledata.parameters = xmm(memory[3]) + modrm(memory, prefix2, 3, 4, ref last, tmrpos.mright);
                                                                    offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                                }
                                                                else
                                                                {
                                                                    description = "Fused multiply-alternating add/subtract of packed single precision floating-point-values";
                                                                    lastdisassembledata.opcode = "vfmaddsub231ps";
                                                                    lastdisassembledata.parameters = xmm(memory[3]) + modrm(memory, prefix2, 3, 4, ref last, tmrpos.mright);
                                                                    offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                                }
                                                            }
                                                        }
                                                    }
                                                    break;

                                                case 0xb7:
                                                    {
                                                        if (prefix2.Contains(0x66))
                                                        {
                                                            if (hasvex)
                                                            {
                                                                if (rex_w)
                                                                {
                                                                    description = "Fused multiply-alternating subtract/add of packed double precision floating-point-values";
                                                                    lastdisassembledata.opcode = "vfmsubadd231pd";
                                                                    lastdisassembledata.parameters = xmm(memory[3]) + modrm(memory, prefix2, 3, 4, ref last, tmrpos.mright);
                                                                    offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                                }
                                                                else
                                                                {
                                                                    description = "Fused multiply-alternating add/subtract of packed single precision floating-point-values";
                                                                    lastdisassembledata.opcode = "vfmsubadd231ps";
                                                                    lastdisassembledata.parameters = xmm(memory[3]) + modrm(memory, prefix2, 3, 4, ref last, tmrpos.mright);
                                                                    offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                                }
                                                            }
                                                        }
                                                    }
                                                    break;

                                                case 0xb8:
                                                    {
                                                        if (prefix2.Contains(0x66))
                                                        {
                                                            if (hasvex)
                                                            {
                                                                if (rex_w)
                                                                {
                                                                    description = "Fused multiple-add of packed double precision floating-point-values";
                                                                    lastdisassembledata.opcode = "vfmadd231pd";
                                                                    lastdisassembledata.parameters = xmm(memory[3]) + modrm(memory, prefix2, 3, 4, ref last, tmrpos.mright);
                                                                    offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                                }
                                                                else
                                                                {
                                                                    description = "Fused multiple-add of packed single precision floating-point-values";
                                                                    lastdisassembledata.opcode = "vfmadd231ps";
                                                                    lastdisassembledata.parameters = xmm(memory[3]) + modrm(memory, prefix2, 3, 4, ref last, tmrpos.mright);
                                                                    offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                                }
                                                            }
                                                        }
                                                    }
                                                    break;

                                                case 0xb9:
                                                    {
                                                        if (prefix2.Contains(0x66))
                                                        {
                                                            if (hasvex)
                                                            {
                                                                if (rex_w)
                                                                {
                                                                    description = "Fused multiple-add of scalar double precision floating-point-values";
                                                                    lastdisassembledata.opcode = "vfmadd231sd";
                                                                    lastdisassembledata.parameters = xmm(memory[3]) + modrm(memory, prefix2, 3, 4, ref last, tmrpos.mright);
                                                                    offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                                }
                                                                else
                                                                {
                                                                    description = "Fused multiple-add of scalar single precision floating-point-values";
                                                                    lastdisassembledata.opcode = "vfmadd231ss";
                                                                    lastdisassembledata.parameters = xmm(memory[3]) + modrm(memory, prefix2, 3, 4, ref last, tmrpos.mright);
                                                                    offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                                }
                                                            }
                                                        }
                                                    }
                                                    break;

                                                case 0xba:
                                                    {
                                                        if (prefix2.Contains(0x66))
                                                        {
                                                            if (hasvex)
                                                            {
                                                                if (rex_w)
                                                                {
                                                                    description = "Fused multiple-subtract of packed double precision floating-point-values";
                                                                    lastdisassembledata.opcode = "vfmsub231pd";
                                                                    lastdisassembledata.parameters = xmm(memory[3]) + modrm(memory, prefix2, 3, 4, ref last, tmrpos.mright);
                                                                    offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                                }
                                                                else
                                                                {
                                                                    description = "Fused multiple-subtract of packed single precision floating-point-values";
                                                                    lastdisassembledata.opcode = "vfmsub231ps";
                                                                    lastdisassembledata.parameters = xmm(memory[3]) + modrm(memory, prefix2, 3, 4, ref last, tmrpos.mright);
                                                                    offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                                }
                                                            }
                                                        }
                                                    }
                                                    break;

                                                case 0xbb:
                                                    {
                                                        if (prefix2.Contains(0x66))
                                                        {
                                                            if (hasvex)
                                                            {
                                                                if (rex_w)
                                                                {
                                                                    description = "Fused multiple-subtract of scalar double precision floating-point-values";
                                                                    lastdisassembledata.opcode = "vfmsub231sd";
                                                                    lastdisassembledata.parameters = xmm(memory[3]) + modrm(memory, prefix2, 3, 4, ref last, tmrpos.mright);
                                                                    offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                                }
                                                                else
                                                                {
                                                                    description = "Fused multiple-subtract of scalar single precision floating-point-values";
                                                                    lastdisassembledata.opcode = "vfmsub231ss";
                                                                    lastdisassembledata.parameters = xmm(memory[3]) + modrm(memory, prefix2, 3, 4, ref last, tmrpos.mright);
                                                                    offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                                }
                                                            }
                                                        }
                                                    }
                                                    break;

                                                /*0f*//*38*/
                                                case 0xbc:
                                                    {
                                                        if (prefix2.Contains(0x66))
                                                        {
                                                            if (hasvex)
                                                            {
                                                                if (rex_w)
                                                                {
                                                                    description = "Fused negative multiply-add of packed double precision floating-point-values";
                                                                    lastdisassembledata.opcode = "vfnmadd231pd";
                                                                    lastdisassembledata.parameters = xmm(memory[3]) + modrm(memory, prefix2, 3, 4, ref last, tmrpos.mright);
                                                                    offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                                }
                                                                else
                                                                {
                                                                    description = "Fused negative multiply-add of packed single-precision floating-point-values";
                                                                    lastdisassembledata.opcode = "vfnmadd231ps";
                                                                    lastdisassembledata.parameters = xmm(memory[3]) + modrm(memory, prefix2, 3, 4, ref last, tmrpos.mright);
                                                                    offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                                }
                                                            }
                                                        }
                                                    }
                                                    break;

                                                case 0xbd:
                                                    {
                                                        if (prefix2.Contains(0x66))
                                                        {
                                                            if (hasvex)
                                                            {
                                                                if (rex_w)
                                                                {
                                                                    description = "Fused negative multiply-add of scalar double precision floating-point-values";
                                                                    lastdisassembledata.opcode = "vfnmadd231sd";
                                                                    lastdisassembledata.parameters = xmm(memory[3]) + modrm(memory, prefix2, 3, 4, ref last, tmrpos.mright);
                                                                    offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                                }
                                                                else
                                                                {
                                                                    description = "Fused negative multiply-add of scalar single precision floating-point-values";
                                                                    lastdisassembledata.opcode = "vfnmadd231ss";
                                                                    lastdisassembledata.parameters = xmm(memory[3]) + modrm(memory, prefix2, 3, 4, ref last, tmrpos.mright);
                                                                    offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                                }
                                                            }
                                                        }
                                                    }
                                                    break;


                                                case 0xbe:
                                                    {
                                                        if (prefix2.Contains(0x66))
                                                        {
                                                            if (hasvex)
                                                            {
                                                                if (rex_w)
                                                                {
                                                                    description = "Fused negative multiply-subtract of packed double precision floating-point-values";
                                                                    lastdisassembledata.opcode = "vfmsub231pd";
                                                                    lastdisassembledata.parameters = xmm(memory[3]) + modrm(memory, prefix2, 3, 4, ref last, tmrpos.mright);
                                                                    offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                                }
                                                                else
                                                                {
                                                                    description = "Fused negative multiply-subtract of packed single precision floating-point-values";
                                                                    lastdisassembledata.opcode = "vfmsub231ps";
                                                                    lastdisassembledata.parameters = xmm(memory[3]) + modrm(memory, prefix2, 3, 4, ref last, tmrpos.mright);
                                                                    offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                                }
                                                            }
                                                        }
                                                    }
                                                    break;

                                                case 0xbf:
                                                    {
                                                        if (prefix2.Contains(0x66))
                                                        {
                                                            if (hasvex)
                                                            {
                                                                if (rex_w)
                                                                {
                                                                    description = "Fused negative multiply-subtract of scalar double precision floating-point-values";
                                                                    lastdisassembledata.opcode = "vfmsub231sd";
                                                                    lastdisassembledata.parameters = xmm(memory[3]) + modrm(memory, prefix2, 3, 4, ref last, tmrpos.mright);
                                                                    offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                                }
                                                                else
                                                                {
                                                                    description = "Fused begative multiply-subtract of scalar single precision floating-point-values";
                                                                    lastdisassembledata.opcode = "vfmsub231ss";
                                                                    lastdisassembledata.parameters = xmm(memory[3]) + modrm(memory, prefix2, 3, 4, ref last, tmrpos.mright);
                                                                    offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                                }
                                                            }
                                                        }
                                                    }
                                                    break;


                                                case 0xdb:
                                                    {
                                                        if (prefix2.Contains(0x66))
                                                        {
                                                            description = "Perform the AES InvMixColumn transformation";
                                                            if (hasvex)
                                                                lastdisassembledata.opcode = "vaesimc";
                                                            else
                                                                lastdisassembledata.opcode = "aesimc";

                                                            lastdisassembledata.parameters = xmm(memory[3]) + modrm(memory, prefix2, 3, 4, ref last, tmrpos.mright);
                                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                        }
                                                    }
                                                    break;

                                                case 0xdc:
                                                    {
                                                        if (prefix2.Contains(0x66))
                                                        {
                                                            description = "Perform one round of an AES encryption flow";
                                                            if (hasvex)
                                                                lastdisassembledata.opcode = "vaesenc";
                                                            else
                                                                lastdisassembledata.opcode = "aesenc";

                                                            lastdisassembledata.parameters = xmm(memory[3]) + modrm(memory, prefix2, 3, 4, ref last, tmrpos.mright);
                                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                        }
                                                    }
                                                    break;

                                                case 0xdd:
                                                    {
                                                        if (prefix2.Contains(0x66))
                                                        {
                                                            description = "Perform last round of an AES encryption flow";
                                                            if (hasvex)
                                                                lastdisassembledata.opcode = "caesenclast";
                                                            else
                                                                lastdisassembledata.opcode = "aesenclast";

                                                            lastdisassembledata.parameters = xmm(memory[3]) + modrm(memory, prefix2, 3, 4, ref last, tmrpos.mright);
                                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                        }
                                                    }
                                                    break;

                                                /*0f*//*38*/
                                                case 0xde:
                                                    {
                                                        if (prefix2.Contains(0x66))
                                                        {
                                                            description = "Perform one round of an AES decryption flow";
                                                            if (hasvex)
                                                                lastdisassembledata.opcode = "vaesdec";
                                                            else
                                                                lastdisassembledata.opcode = "aesdec";

                                                            lastdisassembledata.parameters = xmm(memory[3]) + modrm(memory, prefix2, 3, 4, ref last, tmrpos.mright);
                                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                        }
                                                    }
                                                    break;

                                                case 0xdf:
                                                    {
                                                        if (prefix2.Contains(0x66))
                                                        {
                                                            description = "Perform last round of an AES decryption flow";
                                                            if (hasvex)
                                                                lastdisassembledata.opcode = "caesdeclast";
                                                            else
                                                                lastdisassembledata.opcode = "aesdeclast";

                                                            lastdisassembledata.parameters = xmm(memory[3]) + modrm(memory, prefix2, 3, 4, ref last, tmrpos.mright);
                                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                        }
                                                    }
                                                    break;

                                                /*0f*//*38*/
                                                case 0xf0:
                                                    {
                                                        if (prefix2.Contains(0xf2))
                                                        {
                                                            description = "Accumulate CRC32 value";
                                                            lastdisassembledata.opcode = "crc32";
                                                            lastdisassembledata.parameters = r32(memory[3]) + modrm(memory, prefix2, 3, 2, ref last, tmrpos.mright);
                                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                        }
                                                        else
                                                        {
                                                            description = "Move data after swapping bytes";
                                                            lastdisassembledata.opcode = "movbe";
                                                            if (prefix2.Contains(0x66))
                                                                lastdisassembledata.parameters = r16(memory[3]) + modrm(memory, prefix2, 3, 2, ref last, tmrpos.mright);
                                                            else
                                                                lastdisassembledata.parameters = r32(memory[3]) + modrm(memory, prefix2, 3, 0, ref last, tmrpos.mright);
                                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                        }
                                                    }
                                                    break;

                                                case 0xf1:
                                                    {
                                                        if (prefix2.Contains(0xf2))
                                                        {
                                                            description = "Accumulate CRC32 value";
                                                            lastdisassembledata.opcode = "crc32";
                                                            lastdisassembledata.parameters = r32(memory[3]) + modrm(memory, prefix2, 3, 0, ref last, tmrpos.mright);
                                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                        }
                                                        else
                                                        {
                                                            description = "Move data after swapping bytes";
                                                            lastdisassembledata.opcode = "movbe";
                                                            lastdisassembledata.parameters = modrm(memory, prefix2, 3, 0, ref last, tmrpos.mleft) + r32(memory[3]);
                                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                        }
                                                    }
                                                    break;

                                                case 0xf2:
                                                    {
                                                        if (hasvex)
                                                        {
                                                            description = "Logical AND NOT";
                                                            lastdisassembledata.opcode = "andn";
                                                            lastdisassembledata.parameters = r32(memory[3]) + modrm(memory, prefix2, 3, 0, ref last, tmrpos.mright);
                                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                        }
                                                    }
                                                    break;

                                                /*0f*//*38*/
                                                case 0xf3:
                                                    {
                                                        switch (getreg(memory[3]))
                                                        {
                                                            case 1:
                                                                {
                                                                    description = "Reset lowerst set bit";
                                                                    lastdisassembledata.opcode = "blsr";
                                                                    lastdisassembledata.parameters = modrm(memory, prefix2, 3, 0, ref last, tmrpos.mright);
                                                                    offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                                }
                                                                break;

                                                            case 2:
                                                                {
                                                                    description = "Get mask up to lowest set bit";
                                                                    lastdisassembledata.opcode = "blsmsk";
                                                                    lastdisassembledata.parameters = modrm(memory, prefix2, 3, 0, ref last, tmrpos.mright);
                                                                    offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                                }
                                                                break;

                                                            case 3:
                                                                {
                                                                    description = "Extract lowest set isolated bit";
                                                                    lastdisassembledata.opcode = "blsi";
                                                                    lastdisassembledata.parameters = modrm(memory, prefix2, 3, 0, ref last, tmrpos.mright);
                                                                    offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                                }
                                                                break;
                                                        }
                                                    }
                                                    break;

                                                case 0xf5:
                                                    {
                                                        if (prefix2.Contains(0xf2))
                                                        {
                                                            description = "Parallel bits deposit";
                                                            lastdisassembledata.opcode = "pdep";
                                                            lastdisassembledata.parameters = r32(memory[3]) + modrm(memory, prefix2, 3, 0, ref last, tmrpos.mleft);
                                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                        }
                                                        else
                                                        {
                                                            description = "Zero high bits starting with specified bit position";
                                                            lastdisassembledata.opcode = "bzhi";
                                                            lastdisassembledata.parameters = r32(memory[3]) + modrm(memory, prefix2, 3, 0, ref last, tmrpos.mleft);
                                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                        }
                                                    }
                                                    break;


                                                case 0xf6:
                                                    {
                                                        if (prefix2.Contains(0x66))
                                                        {
                                                            description = "ADX: Unsigned Integer Addition of Two Operands with Carry Flag";
                                                            lastdisassembledata.opcode = "adcx";
                                                            lastdisassembledata.parameters = r32(memory[3]) + modrm(memory, prefix2, 3, 0, ref last, tmrpos.mright);
                                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                        }
                                                        else
                                                        if (prefix2.Contains(0xf3))
                                                        {
                                                            description = "ADX: Unsigned Integer Addition of Two Operands with Overflow Flag";
                                                            lastdisassembledata.opcode = "adox";
                                                            lastdisassembledata.parameters = r32(memory[3]) + modrm(memory, prefix2, 3, 0, ref last, tmrpos.mright);
                                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                        }
                                                        else
                                                        {
                                                            if (hasvex)
                                                            {
                                                                description = "Unsigned multiple without affecting flags";
                                                                lastdisassembledata.opcode = "mulx";
                                                                lastdisassembledata.parameters = r32(memory[3]) + modrm(memory, prefix2, 3, 0, ref last, tmrpos.mright);
                                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                            }
                                                        }
                                                    }
                                                    break;

                                                /*0f*//*38*/
                                                case 0xf7:
                                                    {
                                                        if (hasvex)
                                                        {
                                                            if (prefix2.Contains(0xf3))
                                                            {
                                                                description = "Shift arithmetically right without affecting flags";
                                                                lastdisassembledata.opcode = "SARX";
                                                                lastdisassembledata.parameters = r32(memory[3]) + modrm(memory, prefix2, 3, 0, ref last, tmrpos.mright);
                                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                            }
                                                            else
                                                            if (prefix2.Contains(0xf2))
                                                            {
                                                                description = "Shift logically right without affecting flags";
                                                                lastdisassembledata.opcode = "SHRX";
                                                                lastdisassembledata.parameters = r32(memory[3]) + modrm(memory, prefix2, 3, 0, ref last, tmrpos.mright);
                                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                            }
                                                            else
                                                            if (prefix2.Contains(0x66))
                                                            {
                                                                description = "Shift logically left without affecting flags";
                                                                lastdisassembledata.opcode = "SHLX";
                                                                lastdisassembledata.parameters = r32(memory[3]) + modrm(memory, prefix2, 3, 0, ref last, tmrpos.mright);
                                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                            }
                                                        }
                                                        else
                                                        {
                                                            description = "Bit field extract";
                                                            lastdisassembledata.opcode = "BEXTR";
                                                            lastdisassembledata.parameters = r32(memory[3]) + modrm(memory, prefix2, 3, 0, ref last, tmrpos.mright);
                                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                        }
                                                    }
                                                    break;

                                                default:
                                                    {
                                                        if (hasvex)
                                                        {
                                                            lastdisassembledata.opcode = "unknown avx 0F38 " + AStringUtils.IntToHex(memory[2], 2);
                                                            lastdisassembledata.parameters = xmm(memory[3]) + modrm(memory, prefix2, 3, 4, ref last, tmrpos.mright);

                                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                        }
                                                    }
                                                    break;
                                            }
                                        }
                                        break;

                                    case 0x3a:
                                        {
                                            switch (memory[2])
                                            {
                                                case 0:
                                                    {
                                                        if (prefix2.Contains(0x66))
                                                        {
                                                            if (hasvex)
                                                            {
                                                                description = "Qwords element permutation";
                                                                lastdisassembledata.opcode = "vpermq";

                                                                lastdisassembledata.parameters = xmm(memory[3]) + modrm(memory, prefix2, 3, 4, ref last, tmrpos.mright) + ',';
                                                                lastdisassembledata.parameters = lastdisassembledata.parameters + AStringUtils.IntToHex(memory[(int)last], 2);
                                                                last += 1;
                                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                            }
                                                        }
                                                    }
                                                    break;

                                                case 0x1:
                                                    {
                                                        if (prefix2.Contains(0x66))
                                                        {
                                                            if (hasvex)
                                                            {
                                                                description = "Permute double-precision floating-point elements";
                                                                lastdisassembledata.opcode = "vpermpd";

                                                                lastdisassembledata.parameters = xmm(memory[3]) + modrm(memory, prefix2, 3, 4, ref last, tmrpos.mright) + ',';
                                                                lastdisassembledata.parameters = lastdisassembledata.parameters + AStringUtils.IntToHex(memory[(int)last], 2);
                                                                last += 1;
                                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                            }
                                                        }
                                                    }
                                                    break;

                                                case 0x2:
                                                    {
                                                        if (prefix2.Contains(0x66))
                                                        {
                                                            if (hasvex)
                                                            {
                                                                description = "Blend packed dwords";
                                                                lastdisassembledata.opcode = "vblenddd";

                                                                lastdisassembledata.parameters = xmm(memory[3]) + modrm(memory, prefix2, 3, 4, ref last, tmrpos.mright) + ',';
                                                                lastdisassembledata.parameters = lastdisassembledata.parameters + AStringUtils.IntToHex(memory[(int)last], 2);
                                                                last += 1;
                                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                            }
                                                        }
                                                    }
                                                    break;

                                                case 0x4:
                                                    {
                                                        if (prefix2.Contains(0x66))
                                                        {
                                                            if (hasvex)
                                                            {
                                                                description = "Permute single-prevision floating-point values";
                                                                lastdisassembledata.opcode = "vpermilps";

                                                                opcodeflags.skipextrareg = true;
                                                                lastdisassembledata.parameters = xmm(memory[3]) + modrm(memory, prefix2, 3, 4, ref last, tmrpos.mright) + ',';
                                                                lastdisassembledata.parameters = lastdisassembledata.parameters + AStringUtils.IntToHex(memory[(int)last], 2);
                                                                last += 1;
                                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                            }
                                                        }
                                                    }
                                                    break;


                                                case 0x5:
                                                    {
                                                        if (prefix2.Contains(0x66))
                                                        {
                                                            if (hasvex)
                                                            {
                                                                description = "Permute double-prevision floating-point values";
                                                                lastdisassembledata.opcode = "vpermilpd";

                                                                opcodeflags.skipextrareg = true;
                                                                lastdisassembledata.parameters = xmm(memory[3]) + modrm(memory, prefix2, 3, 4, ref last, tmrpos.mright) + ',';
                                                                lastdisassembledata.parameters = lastdisassembledata.parameters + AStringUtils.IntToHex(memory[(int)last], 2);
                                                                last += 1;
                                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                            }
                                                        }
                                                    }
                                                    break;

                                                /*0f*//*3a*/
                                                case 0x6:
                                                    {
                                                        if (prefix2.Contains(0x66))
                                                        {
                                                            if (hasvex)
                                                            {
                                                                description = "Permute floating-point values";
                                                                lastdisassembledata.opcode = "vperm2f128";

                                                                lastdisassembledata.parameters = xmm(memory[3]) + modrm(memory, prefix2, 3, 4, ref last, tmrpos.mright) + ',';
                                                                lastdisassembledata.parameters = lastdisassembledata.parameters + AStringUtils.IntToHex(memory[(int)last], 2);
                                                                last += 1;
                                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                            }
                                                        }
                                                    }
                                                    break;


                                                /*0f*//*3a*/
                                                case 0x8:
                                                    {
                                                        if (prefix2.Contains(0x66))
                                                        {
                                                            description = "Round scalar single precision floating-point values";
                                                            if (hasvex)
                                                                lastdisassembledata.opcode = "vroundps";
                                                            else
                                                                lastdisassembledata.opcode = "roundps";

                                                            opcodeflags.skipextrareg = true;
                                                            lastdisassembledata.parameters = xmm(memory[3]) + modrm(memory, prefix2, 3, 4, ref last, tmrpos.mright) + ',';
                                                            lastdisassembledata.parameters = lastdisassembledata.parameters + AStringUtils.IntToHex(memory[(int)last], 2);
                                                            last += 1;
                                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                        }
                                                    }
                                                    break;

                                                case 0x9:
                                                    {
                                                        if (prefix2.Contains(0x66))
                                                        {
                                                            description = "Round packed double precision floating-point values";
                                                            if (hasvex)
                                                                lastdisassembledata.opcode = "vroundpd";
                                                            else
                                                                lastdisassembledata.opcode = "roundpd";

                                                            opcodeflags.skipextrareg = true;

                                                            lastdisassembledata.parameters = xmm(memory[3]) + modrm(memory, prefix2, 3, 4, ref last, tmrpos.mright) + ',';
                                                            lastdisassembledata.parameters = lastdisassembledata.parameters + AStringUtils.IntToHex(memory[(int)last], 2);
                                                            last += 1;
                                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                        }
                                                    }
                                                    break;

                                                case 0xa:
                                                    {
                                                        if (prefix2.Contains(0x66))
                                                        {
                                                            description = "Round scalar single precision floating-point values";
                                                            if (hasvex)
                                                                lastdisassembledata.opcode = "vroundss";
                                                            else
                                                                lastdisassembledata.opcode = "roundss";

                                                            lastdisassembledata.parameters = xmm(memory[3]) + modrm(memory, prefix2, 3, 4, ref last, tmrpos.mright) + ',';
                                                            lastdisassembledata.parameters = lastdisassembledata.parameters + AStringUtils.IntToHex(memory[(int)last], 2);
                                                            last += 1;
                                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                        }
                                                    }
                                                    break;

                                                case 0xb:
                                                    {
                                                        if (prefix2.Contains(0x66))
                                                        {
                                                            description = "Round packed single precision floating-point values";
                                                            if (hasvex)
                                                                lastdisassembledata.opcode = "vroundsd";
                                                            else
                                                                lastdisassembledata.opcode = "roundsd";



                                                            lastdisassembledata.parameters = xmm(memory[3]) + modrm(memory, prefix2, 3, 4, ref last, tmrpos.mright) + ',';
                                                            lastdisassembledata.parameters = lastdisassembledata.parameters + AStringUtils.IntToHex(memory[(int)last], 2);
                                                            last += 1;
                                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                        }
                                                    }
                                                    break;

                                                /*0f*//*3a*/
                                                case 0xc:
                                                    {
                                                        if (prefix2.Contains(0x66))
                                                        {
                                                            description = "Blend packed single precision floating-point values";
                                                            if (hasvex)
                                                                lastdisassembledata.opcode = "vblendps";
                                                            else
                                                                lastdisassembledata.opcode = "blendps";

                                                            lastdisassembledata.parameters = xmm(memory[3]) + modrm(memory, prefix2, 3, 4, ref last, tmrpos.mright) + ',';
                                                            lastdisassembledata.parameters = lastdisassembledata.parameters + AStringUtils.IntToHex(memory[(int)last], 2);
                                                            last += 1;
                                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                        }
                                                    }
                                                    break;

                                                /*0f*//*3a*/
                                                case 0xd:
                                                    {
                                                        if (prefix2.Contains(0x66))
                                                        {
                                                            description = "Blend packed double precision floating-point values";
                                                            if (hasvex)
                                                                lastdisassembledata.opcode = "vblendpd";
                                                            else
                                                                lastdisassembledata.opcode = "blendpd";

                                                            lastdisassembledata.parameters = xmm(memory[3]) + modrm(memory, prefix2, 3, 4, ref last, tmrpos.mright) + ',';
                                                            lastdisassembledata.parameters = lastdisassembledata.parameters + AStringUtils.IntToHex(memory[(int)last], 2);
                                                            last += 1;
                                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                        }
                                                    }
                                                    break;

                                                /*0f*//*3a*/
                                                case 0xe:
                                                    {
                                                        if (prefix2.Contains(0x66))
                                                        {
                                                            description = "Blend packed words";
                                                            if (hasvex)
                                                                lastdisassembledata.opcode = "vpblendw";
                                                            else
                                                                lastdisassembledata.opcode = "pblendw";

                                                            lastdisassembledata.parameters = xmm(memory[3]) + modrm(memory, prefix2, 3, 4, ref last, tmrpos.mright) + ',';
                                                            lastdisassembledata.parameters = lastdisassembledata.parameters + AStringUtils.IntToHex(memory[(int)last], 2);
                                                            last += 1;
                                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                        }
                                                    }
                                                    break;

                                                /*0f*//*3a*/
                                                case 0xf:
                                                    {
                                                        if (prefix2.Contains(0x66))
                                                        {
                                                            description = "Packed align right";
                                                            if (hasvex)
                                                                lastdisassembledata.opcode = "vpalignr";
                                                            else
                                                                lastdisassembledata.opcode = "palignr";

                                                            lastdisassembledata.parameters = xmm(memory[3]) + modrm(memory, prefix2, 3, 4, ref last, tmrpos.mright) + ',';
                                                            lastdisassembledata.parameters = lastdisassembledata.parameters + AStringUtils.IntToHex(memory[(int)last], 2);
                                                            last += 1;
                                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                        }
                                                        else
                                                        {
                                                            lastdisassembledata.opcode = "palignr";
                                                            lastdisassembledata.parameters = mm(memory[3]) + modrm(memory, prefix2, 3, 3, ref last, tmrpos.mright) + ',';
                                                            lastdisassembledata.parameters = lastdisassembledata.parameters + AStringUtils.IntToHex(memory[(int)last], 2);
                                                            last += 1;
                                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                        }
                                                    }
                                                    break;

                                                /*0f*//*3a*/
                                                case 0x14:
                                                    {
                                                        if (prefix2.Contains(0x66))
                                                        {
                                                            description = "Extract byte";
                                                            if (hasvex)
                                                                lastdisassembledata.opcode = "vpextrb";
                                                            else
                                                                lastdisassembledata.opcode = "pextrb";

                                                            lastdisassembledata.parameters = modrm(memory, prefix2, 3, 2, ref last, tmrpos.mleft) + xmm(memory[3]) + ',';
                                                            lastdisassembledata.parameters = lastdisassembledata.parameters + AStringUtils.IntToHex(memory[(int)last], 2);
                                                            last += 1;
                                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                        }
                                                    }
                                                    break;

                                                /*0f*//*3a*/
                                                case 0x15:
                                                    {
                                                        if (prefix2.Contains(0x66))
                                                        {
                                                            description = "Extract word";
                                                            if (hasvex)
                                                                lastdisassembledata.opcode = "vpextrw";
                                                            else
                                                                lastdisassembledata.opcode = "pextrw";

                                                            lastdisassembledata.parameters = modrm(memory, prefix2, 3, 1, ref last, tmrpos.mleft) + xmm(memory[3]) + ',';
                                                            lastdisassembledata.parameters = lastdisassembledata.parameters + AStringUtils.IntToHex(memory[(int)last], 2);
                                                            last += 1;
                                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                        }
                                                    }
                                                    break;

                                                /*0f*//*3a*/
                                                case 0x16:
                                                    {
                                                        if (prefix2.Contains(0x66))
                                                        {
                                                            if (rex_w)
                                                            {
                                                                description = "Extract qword";
                                                                lastdisassembledata.opcode = "pextrq";
                                                            }
                                                            else
                                                            {
                                                                description = "Extract dword";
                                                                lastdisassembledata.opcode = "pextrd";
                                                            }

                                                            if (hasvex) lastdisassembledata.opcode = 'v' + lastdisassembledata.opcode;

                                                            opcodeflags.skipextrareg = true;
                                                            lastdisassembledata.parameters = modrm(memory, prefix2, 3, 2, ref last, tmrpos.mleft) + xmm(memory[3]) + ',';
                                                            lastdisassembledata.parameters = lastdisassembledata.parameters + AStringUtils.IntToHex(memory[(int)last], 2);
                                                            last += 1;
                                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                        }
                                                    }
                                                    break;

                                                case 0x17:
                                                    {
                                                        if (prefix2.Contains(0x66))
                                                        {
                                                            description = "Extract packed single precision floating-point value";
                                                            if (hasvex)
                                                                lastdisassembledata.opcode = "vextractps";
                                                            else
                                                                lastdisassembledata.opcode = "extractps";

                                                            lastdisassembledata.parameters = modrm(memory, prefix2, 3, 4, ref last, tmrpos.mleft) + xmm(memory[3]) + ',';
                                                            lastdisassembledata.parameters = lastdisassembledata.parameters + AStringUtils.IntToHex(memory[(int)last], 2);
                                                            last += 1;
                                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                        }
                                                    }
                                                    break;


                                                case 0x18:
                                                    {
                                                        if (prefix2.Contains(0x66))
                                                        {
                                                            if (hasvex)
                                                            {
                                                                description = "Insert packed floating-point values";
                                                                lastdisassembledata.opcode = "vinsertf128";
                                                                lastdisassembledata.parameters = xmm(memory[3]) + modrm(memory, prefix2, 3, 4, ref last, tmrpos.mright) + ',';
                                                                lastdisassembledata.parameters = lastdisassembledata.parameters + AStringUtils.IntToHex(memory[(int)last], 2);
                                                                last += 1;
                                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                            }
                                                        }
                                                    }
                                                    break;

                                                case 0x19:
                                                    {
                                                        if (prefix2.Contains(0x66))
                                                        {
                                                            if (hasvex)
                                                            {
                                                                description = "Extract packed floating-point values";
                                                                lastdisassembledata.opcode = "vextractf128";
                                                                lastdisassembledata.parameters = xmm(memory[3]) + modrm(memory, prefix2, 3, 4, ref last, tmrpos.mright) + ',';
                                                                lastdisassembledata.parameters = lastdisassembledata.parameters + AStringUtils.IntToHex(memory[(int)last], 2);
                                                                last += 1;
                                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                            }
                                                        }
                                                    }
                                                    break;


                                                /*0f*//*3a*/
                                                case 0x1d:
                                                    {
                                                        if (prefix2.Contains(0x66))
                                                        {
                                                            if (hasvex)
                                                            {
                                                                description = "Convert single-precision FP value to 16-bit FP value";
                                                                lastdisassembledata.opcode = "vcvtps2ph";
                                                                lastdisassembledata.parameters = xmm(memory[3]) + modrm(memory, prefix2, 3, 4, ref last, tmrpos.mright) + ',';
                                                                lastdisassembledata.parameters = lastdisassembledata.parameters + AStringUtils.IntToHex(memory[(int)last], 2);
                                                                last += 1;
                                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                            }
                                                        }
                                                    }
                                                    break;

                                                /*0f*//*3a*/
                                                case 0x20:
                                                    {
                                                        if (prefix2.Contains(0x66))
                                                        {
                                                            description = "Insert Byte";
                                                            if (hasvex)
                                                                lastdisassembledata.opcode = "vpinsrb";
                                                            else
                                                                lastdisassembledata.opcode = "pinsrb";

                                                            lastdisassembledata.parameters = xmm(memory[3]) + modrm(memory, prefix2, 3, 0, ref last, tmrpos.mright) + ',';
                                                            lastdisassembledata.parameters = lastdisassembledata.parameters + AStringUtils.IntToHex(memory[(int)last], 2);
                                                            last += 1;
                                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                        }
                                                    }
                                                    break;

                                                /*0f*//*3a*/
                                                case 0x21:
                                                    {    //C4 E3 79 21 80 B8 00 00 00 20
                                                        if (prefix2.Contains(0x66))
                                                        {
                                                            description = "Insert Scalar Single-Precision Floating-Point Value";
                                                            if (hasvex)
                                                                lastdisassembledata.opcode = "vinsertps";
                                                            else
                                                                lastdisassembledata.opcode = "insertps";

                                                            lastdisassembledata.parameters = xmm(memory[3]) + modrm(memory, prefix2, 3, 4, ref last, tmrpos.mright) + ',';
                                                            lastdisassembledata.parameters = lastdisassembledata.parameters + AStringUtils.IntToHex(memory[(int)last], 2);
                                                            last += 1;
                                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                        }
                                                    }
                                                    break;

                                                case 0x22:
                                                    {
                                                        if (prefix2.Contains(0x66))
                                                        {
                                                            if (rex_w)
                                                            {
                                                                description = "Insert qword";
                                                                lastdisassembledata.opcode = "pinsrq";
                                                            }
                                                            else
                                                            {
                                                                description = "Insert dword";
                                                                lastdisassembledata.opcode = "pinsrd";
                                                            }

                                                            if (hasvex)
                                                                lastdisassembledata.opcode = 'v' + lastdisassembledata.opcode;

                                                            lastdisassembledata.parameters = xmm(memory[3]) + modrm(memory, prefix2, 3, 0, ref last, tmrpos.mright) + ',';
                                                            lastdisassembledata.parameters = lastdisassembledata.parameters + AStringUtils.IntToHex(memory[(int)last], 2);
                                                            last += 1;
                                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                        }
                                                    }
                                                    break;

                                                case 0x38:
                                                    {
                                                        if (prefix2.Contains(0x66))
                                                        {
                                                            if (hasvex)
                                                            {
                                                                description = "Insert packed integer values";
                                                                lastdisassembledata.opcode = "vinserti128";
                                                                lastdisassembledata.parameters = xmm(memory[3]) + modrm(memory, prefix2, 3, 4, ref last, tmrpos.mright) + ',';
                                                                lastdisassembledata.parameters = lastdisassembledata.parameters + AStringUtils.IntToHex(memory[(int)last], 2);
                                                                last += 1;
                                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                            }
                                                        }
                                                    }
                                                    break;

                                                case 0x39:
                                                    {
                                                        if (prefix2.Contains(0x66))
                                                        {
                                                            if (hasvex)
                                                            {
                                                                description = "Extract packed integer values";
                                                                lastdisassembledata.opcode = "vextracti128";
                                                                lastdisassembledata.parameters = xmm(memory[3]) + modrm(memory, prefix2, 3, 4, ref last, tmrpos.mright) + ',';
                                                                lastdisassembledata.parameters = lastdisassembledata.parameters + AStringUtils.IntToHex(memory[(int)last], 2);
                                                                last += 1;
                                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                            }
                                                        }
                                                    }
                                                    break;

                                                case 0x40:
                                                    {
                                                        if (prefix2.Contains(0x66))
                                                        {
                                                            description = "Dot product of packed single precision floating-point values";
                                                            if (hasvex)
                                                                lastdisassembledata.opcode = "vdpps";
                                                            else
                                                                lastdisassembledata.opcode = "dpps";

                                                            lastdisassembledata.parameters = xmm(memory[3]) + modrm(memory, prefix2, 3, 4, ref last, tmrpos.mright) + ',';
                                                            lastdisassembledata.parameters = lastdisassembledata.parameters + AStringUtils.IntToHex(memory[(int)last], 2);
                                                            last += 1;
                                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                        }
                                                    }
                                                    break;

                                                case 0x41:
                                                    {
                                                        if (prefix2.Contains(0x66))
                                                        {
                                                            description = "Dot product of packed double precision floating-point values";
                                                            if (hasvex)
                                                                lastdisassembledata.opcode = "vdppd";
                                                            else
                                                                lastdisassembledata.opcode = "dppd";

                                                            lastdisassembledata.parameters = xmm(memory[3]) + modrm(memory, prefix2, 3, 4, ref last, tmrpos.mright) + ',';
                                                            lastdisassembledata.parameters = lastdisassembledata.parameters + AStringUtils.IntToHex(memory[(int)last], 2);
                                                            last += 1;
                                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                        }
                                                    }
                                                    break;

                                                /*0f*//*3a*/
                                                case 0x42:
                                                    {
                                                        if (prefix2.Contains(0x66))
                                                        {
                                                            description = "Compute multiple packed sums of absolute difference";
                                                            if (hasvex)
                                                                lastdisassembledata.opcode = "vmpsadbw";
                                                            else
                                                                lastdisassembledata.opcode = "mpsadbw";

                                                            lastdisassembledata.parameters = xmm(memory[3]) + modrm(memory, prefix2, 3, 4, ref last, tmrpos.mright) + ',';
                                                            lastdisassembledata.parameters = lastdisassembledata.parameters + AStringUtils.IntToHex(memory[(int)last], 2);
                                                            last += 1;
                                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                        }
                                                    }
                                                    break;

                                                /*0f*//*3a*/
                                                case 0x44:
                                                    {
                                                        if (prefix2.Contains(0x66))
                                                        {
                                                            description = "Carry-less multiplication quadword";
                                                            if (hasvex)
                                                                lastdisassembledata.opcode = "vpclmulqdq";
                                                            else
                                                                lastdisassembledata.opcode = "pclmulqdq";

                                                            lastdisassembledata.parameters = xmm(memory[3]) + modrm(memory, prefix2, 3, 4, ref last, tmrpos.mright) + ',';
                                                            lastdisassembledata.parameters = lastdisassembledata.parameters + AStringUtils.IntToHex(memory[(int)last], 2);
                                                            last += 1;
                                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                        }
                                                    }
                                                    break;

                                                /*0f*//*3a*/
                                                case 0x46:
                                                    {
                                                        if (prefix2.Contains(0x66))
                                                        {
                                                            if (hasvex)
                                                            {
                                                                description = "Permute integer values";
                                                                lastdisassembledata.opcode = "vperm2i128";

                                                                lastdisassembledata.parameters = xmm(memory[3]) + modrm(memory, prefix2, 3, 4, ref last, tmrpos.mright) + ',';
                                                                lastdisassembledata.parameters = lastdisassembledata.parameters + AStringUtils.IntToHex(memory[(int)last], 2);
                                                                last += 1;
                                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                            }
                                                        }
                                                    }
                                                    break;

                                                /*0f*//*3a*/
                                                case 0x4a:
                                                    {
                                                        if (prefix2.Contains(0x66))
                                                        {
                                                            if (hasvex)
                                                            {
                                                                description = "Variable Blend Packed Single Precision Floating-Point Values";
                                                                lastdisassembledata.opcode = "vblendvps";

                                                                lastdisassembledata.parameters = xmm(memory[3]) + modrm(memory, prefix2, 3, 4, ref last, tmrpos.mright) + ',';
                                                                if (opcodeflags.l)
                                                                    lastdisassembledata.parameters = lastdisassembledata.parameters + colorreg + regnrtostr(tregistertype.rtymm, ((int)memory[(int)last] >> 4) & 0xf) + endcolor;
                                                                else
                                                                    lastdisassembledata.parameters = lastdisassembledata.parameters + colorreg + regnrtostr(tregistertype.rtxmm, ((int)memory[(int)last] >> 4) & 0xf) + endcolor;

                                                                last += 1;
                                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                            }
                                                        }
                                                    }
                                                    break;

                                                /*0f*//*3a*/
                                                case 0x4b:
                                                    {
                                                        if (prefix2.Contains(0x66))
                                                        {
                                                            if (hasvex)
                                                            {
                                                                description = "Variable Blend Packed Double Precision Floating-Point Values";
                                                                lastdisassembledata.opcode = "vblendvpd";

                                                                lastdisassembledata.parameters = xmm(memory[3]) + modrm(memory, prefix2, 3, 4, ref last, tmrpos.mright) + ',';
                                                                if (opcodeflags.l)
                                                                    lastdisassembledata.parameters = lastdisassembledata.parameters + colorreg + regnrtostr(tregistertype.rtymm, ((int)memory[(int)last] >> 4) & 0xf) + endcolor;
                                                                else
                                                                    lastdisassembledata.parameters = lastdisassembledata.parameters + colorreg + regnrtostr(tregistertype.rtxmm, ((int)memory[(int)last] >> 4) & 0xf) + endcolor;

                                                                last += 1;
                                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                            }
                                                        }
                                                    }
                                                    break;


                                                /*0f*//*3a*/
                                                case 0x60:
                                                    {
                                                        if (prefix2.Contains(0x66))
                                                        {
                                                            description = "Packed compare explicit length string, return mask";
                                                            if (hasvex)
                                                                lastdisassembledata.opcode = "vpcmpestrm";
                                                            else
                                                                lastdisassembledata.opcode = "pcmpestrm";

                                                            opcodeflags.skipextrareg = true;
                                                            lastdisassembledata.parameters = xmm(memory[3]) + modrm(memory, prefix2, 3, 4, ref last, tmrpos.mright) + ',';
                                                            lastdisassembledata.parameters = lastdisassembledata.parameters + AStringUtils.IntToHex(memory[(int)last], 2);
                                                            last += 1;
                                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                        }
                                                    }
                                                    break;

                                                /*0f*//*3a*/
                                                case 0x61:
                                                    {
                                                        if (prefix2.Contains(0x66))
                                                        {
                                                            description = "Packed compare explicit length string, return index";
                                                            if (hasvex)
                                                                lastdisassembledata.opcode = "vpcmpestri";
                                                            else
                                                                lastdisassembledata.opcode = "pcmpestri";

                                                            opcodeflags.skipextrareg = true;
                                                            lastdisassembledata.parameters = xmm(memory[3]) + modrm(memory, prefix2, 3, 4, ref last, tmrpos.mright) + ',';
                                                            lastdisassembledata.parameters = lastdisassembledata.parameters + AStringUtils.IntToHex(memory[(int)last], 2);
                                                            last += 1;
                                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                        }
                                                    }
                                                    break;

                                                /*0f*//*3a*/
                                                case 0x62:
                                                    {
                                                        if (prefix2.Contains(0x66))
                                                        {
                                                            description = "Packed compare implicit length string, return mask";
                                                            if (hasvex)
                                                                lastdisassembledata.opcode = "vpcmpistrm";
                                                            else
                                                                lastdisassembledata.opcode = "pcmpistrm";

                                                            opcodeflags.skipextrareg = true;
                                                            lastdisassembledata.parameters = xmm(memory[3]) + modrm(memory, prefix2, 3, 4, ref last, tmrpos.mright) + ',';
                                                            lastdisassembledata.parameters = lastdisassembledata.parameters + AStringUtils.IntToHex(memory[(int)last], 2);
                                                            last += 1;
                                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                        }
                                                    }
                                                    break;

                                                /*0f*//*3a*/
                                                case 0x63:
                                                    {
                                                        if (prefix2.Contains(0x66))
                                                        {
                                                            description = "Packed compare implicit length string, return index";
                                                            if (hasvex)
                                                                lastdisassembledata.opcode = "vpcmpistri";
                                                            else
                                                                lastdisassembledata.opcode = "pcmpistri";

                                                            opcodeflags.skipextrareg = true;
                                                            lastdisassembledata.parameters = xmm(memory[3]) + modrm(memory, prefix2, 3, 4, ref last, tmrpos.mright) + ',';
                                                            lastdisassembledata.parameters = lastdisassembledata.parameters + AStringUtils.IntToHex(memory[(int)last], 2);
                                                            last += 1;
                                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                        }
                                                    }
                                                    break;

                                                case 0xdf:
                                                    {
                                                        if (prefix2.Contains(0x66))
                                                        {
                                                            description = "AES round key generation assist";
                                                            if (hasvex)
                                                                lastdisassembledata.opcode = "vaeskeygenassist";
                                                            else
                                                                lastdisassembledata.opcode = "aeskeygenassist";

                                                            lastdisassembledata.parameters = xmm(memory[3]) + modrm(memory, prefix2, 3, 4, ref last, tmrpos.mright) + ',';
                                                            lastdisassembledata.parameters = lastdisassembledata.parameters + AStringUtils.IntToHex(memory[(int)last], 2);
                                                            last += 1;
                                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                        }
                                                    }
                                                    break;

                                                case 0xf0:
                                                    {
                                                        if (prefix2.Contains(0xf2))
                                                        {
                                                            if (hasvex)
                                                            {
                                                                description = "Rotate right logical without affecting flags";
                                                                lastdisassembledata.opcode = "rorx";
                                                                opcodeflags.skipextrareg = true;
                                                                lastdisassembledata.parameters = r32(memory[3]) + modrm(memory, prefix2, 3, 0, ref last, tmrpos.mright) + ',';
                                                                lastdisassembledata.parameters = lastdisassembledata.parameters + ',' + AStringUtils.IntToHex(memory[(int)last], 2);
                                                                last += 1;
                                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                            }
                                                        }
                                                    }
                                                    break;



                                                default:
                                                    {
                                                        if (hasvex)
                                                        {
                                                            lastdisassembledata.opcode = "unknown avx 0F3A " + AStringUtils.IntToHex(memory[2], 2);
                                                            lastdisassembledata.parameters = xmm(memory[3]) + modrm(memory, prefix2, 3, 4, ref last, tmrpos.mright);
                                                            lastdisassembledata.parameters = lastdisassembledata.parameters + ',' + AStringUtils.IntToHex(memory[(int)last], 2);
                                                            last += 1;
                                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                        }
                                                    }
                                                    break;
                                            }
                                        }
                                        break;


                                    case 0x40:
                                        {
                                            description = "move if overflow";
                                            lastdisassembledata.opcode = "cmovo";
                                            if (prefix2.Contains(0x66)) lastdisassembledata.parameters = r16(memory[2]) + modrm(memory, prefix2, 2, 1, ref last, tmrpos.mright);
                                            else
                                                lastdisassembledata.parameters = r32(memory[2]) + modrm(memory, prefix2, 2, 0, ref last, tmrpos.mright);
                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                        }
                                        break;

                                    case 0x41:
                                        {
                                            description = "move if not overflow";
                                            lastdisassembledata.opcode = "cmovno";
                                            if (prefix2.Contains(0x66))
                                                lastdisassembledata.parameters = r16(memory[2]) + modrm(memory, prefix2, 2, 1, ref last, tmrpos.mright);
                                            else
                                                lastdisassembledata.parameters = r32(memory[2]) + modrm(memory, prefix2, 2, 0, ref last, tmrpos.mright);

                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                        }
                                        break;

                                    case 0x42:
                                        {
                                            description = "move if below/ move if carry";
                                            lastdisassembledata.opcode = "cmovb";
                                            if (prefix2.Contains(0x66))
                                                lastdisassembledata.parameters = r16(memory[2]) + modrm(memory, prefix2, 2, 1, ref last, tmrpos.mright);
                                            else
                                                lastdisassembledata.parameters = r32(memory[2]) + modrm(memory, prefix2, 2, 0, ref last, tmrpos.mright);

                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                        }
                                        break;

                                    case 0x43:
                                        {
                                            description = "move if above or equal/ move if not carry";
                                            lastdisassembledata.opcode = "cmovae";
                                            if (prefix2.Contains(0x66))
                                                lastdisassembledata.parameters = r16(memory[2]) + modrm(memory, prefix2, 2, 1, ref last, tmrpos.mright);
                                            else
                                                lastdisassembledata.parameters = r32(memory[2]) + modrm(memory, prefix2, 2, 0, ref last, tmrpos.mright);

                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                        }
                                        break;

                                    case 0x44:
                                        {
                                            description = "move if equal/move if zero";
                                            lastdisassembledata.opcode = "cmove";
                                            if (prefix2.Contains(0x66))
                                                lastdisassembledata.parameters = r16(memory[2]) + modrm(memory, prefix2, 2, 1, ref last, tmrpos.mright);
                                            else
                                                lastdisassembledata.parameters = r32(memory[2]) + modrm(memory, prefix2, 2, 0, ref last, tmrpos.mright);

                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                        }
                                        break;

                                    case 0x45:
                                        {
                                            description = "move if not equal/move if not zero";
                                            lastdisassembledata.opcode = "cmovne";
                                            if (prefix2.Contains(0x66))
                                                lastdisassembledata.parameters = r16(memory[2]) + modrm(memory, prefix2, 2, 1, ref last, tmrpos.mright);
                                            else
                                                lastdisassembledata.parameters = r32(memory[2]) + modrm(memory, prefix2, 2, 0, ref last, tmrpos.mright);

                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                        }
                                        break;

                                    case 0x46:
                                        {
                                            description = "move if below or equal";
                                            lastdisassembledata.opcode = "cmovbe";
                                            if (prefix2.Contains(0x66))
                                                lastdisassembledata.parameters = r16(memory[2]) + modrm(memory, prefix2, 2, 1, ref last, tmrpos.mright);
                                            else
                                                lastdisassembledata.parameters = r32(memory[2]) + modrm(memory, prefix2, 2, 0, ref last, tmrpos.mright);

                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                        }
                                        break;


                                    case 0x47:
                                        {
                                            description = "move if above";
                                            lastdisassembledata.opcode = "cmova";
                                            if (prefix2.Contains(0x66))
                                                lastdisassembledata.parameters = r16(memory[2]) + modrm(memory, prefix2, 2, 1, ref last, tmrpos.mright);
                                            else
                                                lastdisassembledata.parameters = r32(memory[2]) + modrm(memory, prefix2, 2, 0, ref last, tmrpos.mright);

                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                        }
                                        break;

                                    case 0x48:
                                        {
                                            description = "move if sign";
                                            lastdisassembledata.opcode = "cmovs";
                                            if (prefix2.Contains(0x66))
                                                lastdisassembledata.parameters = r16(memory[2]) + modrm(memory, prefix2, 2, 1, ref last, tmrpos.mright);
                                            else
                                                lastdisassembledata.parameters = r32(memory[2]) + modrm(memory, prefix2, 2, 0, ref last, tmrpos.mright);

                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                        }
                                        break;

                                    case 0x49:
                                        {
                                            description = "move if not sign";
                                            lastdisassembledata.opcode = "cmovns";
                                            if (prefix2.Contains(0x66))
                                                lastdisassembledata.parameters = r16(memory[2]) + modrm(memory, prefix2, 2, 1, ref last, tmrpos.mright);
                                            else
                                                lastdisassembledata.parameters = r32(memory[2]) + modrm(memory, prefix2, 2, 0, ref last, tmrpos.mright);

                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                        }
                                        break;

                                    case 0x4a:
                                        {
                                            description = "move if parity even";
                                            lastdisassembledata.opcode = "cmovpe";
                                            if (prefix2.Contains(0x66))
                                                lastdisassembledata.parameters = r16(memory[2]) + modrm(memory, prefix2, 2, 1, ref last, tmrpos.mright);
                                            else
                                                lastdisassembledata.parameters = r32(memory[2]) + modrm(memory, prefix2, 2, 0, ref last, tmrpos.mright);

                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                        }
                                        break;

                                    case 0x4b:
                                        {
                                            description = "move if not parity/move if parity odd";
                                            lastdisassembledata.opcode = "cmovnp";
                                            if (prefix2.Contains(0x66))
                                                lastdisassembledata.parameters = r16(memory[2]) + modrm(memory, prefix2, 2, 1, ref last, tmrpos.mright);
                                            else
                                                lastdisassembledata.parameters = r32(memory[2]) + modrm(memory, prefix2, 2, 0, ref last, tmrpos.mright);

                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                        }
                                        break;

                                    case 0x4c:
                                        {
                                            description = "move if less";
                                            lastdisassembledata.opcode = "cmovl";
                                            if (prefix2.Contains(0x66))
                                                lastdisassembledata.parameters = r16(memory[2]) + modrm(memory, prefix2, 2, 1, ref last, tmrpos.mright);
                                            else
                                                lastdisassembledata.parameters = r32(memory[2]) + modrm(memory, prefix2, 2, 0, ref last, tmrpos.mright);

                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                        }
                                        break;

                                    case 0x4d:
                                        {
                                            description = "move if greater or equal";
                                            lastdisassembledata.opcode = "cmovge";
                                            if (prefix2.Contains(0x66))
                                                lastdisassembledata.parameters = r16(memory[2]) + modrm(memory, prefix2, 2, 1, ref last, tmrpos.mright);
                                            else
                                                lastdisassembledata.parameters = r32(memory[2]) + modrm(memory, prefix2, 2, 0, ref last, tmrpos.mright);

                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                        }
                                        break;

                                    case 0x4e:
                                        {
                                            description = "move if less or equal";
                                            lastdisassembledata.opcode = "cmovle";
                                            if (prefix2.Contains(0x66))
                                                lastdisassembledata.parameters = r16(memory[2]) + modrm(memory, prefix2, 2, 1, ref last, tmrpos.mright);
                                            else
                                                lastdisassembledata.parameters = r32(memory[2]) + modrm(memory, prefix2, 2, 0, ref last, tmrpos.mright);


                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                        }
                                        break;

                                    case 0x4f:
                                        {
                                            description = "move if greater";
                                            lastdisassembledata.opcode = "cmovg";
                                            if (prefix2.Contains(0x66))
                                                lastdisassembledata.parameters = r16(memory[2]) + modrm(memory, prefix2, 2, 1, ref last, tmrpos.mright);
                                            else
                                                lastdisassembledata.parameters = r32(memory[2]) + modrm(memory, prefix2, 2, 0, ref last, tmrpos.mright);

                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                        }
                                        break;

                                    case 0x50:
                                        {
                                            lastdisassembledata.isfloat = true;
                                            if (prefix2.Contains(0x66))
                                            {
                                                if (hasvex)
                                                    lastdisassembledata.opcode = "vmovmskpd";
                                                else
                                                    lastdisassembledata.opcode = "movmskpd";

                                                lastdisassembledata.parameters = r32(memory[2]) + modrm(memory, prefix2, 2, 4, ref last, tmrpos.mright);
                                                description = "extract packed double-precision floating-point sign mask";
                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                            else
                                            {
                                                if (hasvex)
                                                    lastdisassembledata.opcode = "vmovmskps";
                                                else
                                                    lastdisassembledata.opcode = "movmskps";

                                                lastdisassembledata.parameters = r32(memory[2]) + modrm(memory, prefix2, 2, 4, ref last, tmrpos.mright);
                                                lastdisassembledata.datasize = 4;

                                                description = "move mask to integer";
                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                        }
                                        break;

                                    case 0x51:
                                        {
                                            lastdisassembledata.isfloat = true;
                                            if (prefix2.Contains(0xf2))
                                            {
                                                if (hasvex)
                                                    lastdisassembledata.opcode = "vsqrtsd";
                                                else
                                                    lastdisassembledata.opcode = "sqrtsd";

                                                lastdisassembledata.parameters = xmm(memory[2]) + modrm(memory, prefix2, 2, 4, ref last, tmrpos.mright);
                                                description = "scalar double-fp square root";
                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                            else
                                            if (prefix2.Contains(0xf3))
                                            {
                                                if (hasvex)
                                                    lastdisassembledata.opcode = "vsqrtss";
                                                else
                                                    lastdisassembledata.opcode = "sqrtss";

                                                lastdisassembledata.parameters = xmm(memory[2]) + modrm(memory, prefix2, 2, 4, ref last, tmrpos.mright);
                                                description = "scalar single-fp square root";
                                                lastdisassembledata.datasize = 4;
                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                            else
                                            if (prefix2.Contains(0x66))
                                            {
                                                if (hasvex)
                                                    lastdisassembledata.opcode = "vsqrtpd";
                                                else
                                                    lastdisassembledata.opcode = "sqrtpd";

                                                opcodeflags.skipextrareg = true;
                                                lastdisassembledata.parameters = xmm(memory[2]) + modrm(memory, prefix2, 2, 4, ref last, tmrpos.mright);
                                                description = "packed double-fp square root";

                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                            else
                                            {
                                                if (hasvex)
                                                    lastdisassembledata.opcode = "vsqrtps";
                                                else
                                                    lastdisassembledata.opcode = "sqrtps";

                                                opcodeflags.skipextrareg = true;
                                                lastdisassembledata.parameters = xmm(memory[2]) + modrm(memory, prefix2, 2, 4, ref last, tmrpos.mright);
                                                description = "packed single-fp square root";

                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                        }
                                        break;

                                    case 0x52:
                                        {
                                            lastdisassembledata.isfloat = true;
                                            if (prefix2.Contains(0xf3))
                                            {
                                                if (hasvex)
                                                    lastdisassembledata.opcode = "vrsqrtss";
                                                else
                                                    lastdisassembledata.opcode = "rsqrtss";

                                                lastdisassembledata.parameters = xmm(memory[2]) + modrm(memory, prefix2, 2, 4, ref last, tmrpos.mright);

                                                description = "packed single-fp square root reciprocal";
                                                lastdisassembledata.datasize = 4;
                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                            else
                                            {
                                                if (hasvex)
                                                    lastdisassembledata.opcode = "vrsqrtps";
                                                else
                                                    lastdisassembledata.opcode = "rsqrtps";
                                                lastdisassembledata.parameters = xmm(memory[2]) + modrm(memory, prefix2, 2, 4, ref last, tmrpos.mright);

                                                description = "scalar single-fp square root reciprocal";
                                                lastdisassembledata.datasize = 4;
                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                        }
                                        break;

                                    case 0x53:
                                        {
                                            lastdisassembledata.isfloat = true;
                                            if (prefix2.Contains(0xf3))
                                            {
                                                if (hasvex)
                                                    lastdisassembledata.opcode = "vrcpss";
                                                else
                                                    lastdisassembledata.opcode = "rcpss";

                                                lastdisassembledata.parameters = xmm(memory[2]) + modrm(memory, prefix2, 2, 4, ref last, tmrpos.mright);

                                                description = "Compute Reciprocal of Scalar Single-Precision Floating-Point Values";
                                                lastdisassembledata.datasize = 4;
                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                            else
                                            {
                                                if (hasvex)
                                                    lastdisassembledata.opcode = "vrcpps";
                                                else
                                                    lastdisassembledata.opcode = "rcpps";
                                                lastdisassembledata.parameters = xmm(memory[2]) + modrm(memory, prefix2, 2, 4, ref last, tmrpos.mright);

                                                description = "Compute Reciprocals of Packed Single-Precision Floating-Point Values";
                                                lastdisassembledata.datasize = 4;
                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                        }
                                        break;

                                    case 0x54:
                                        {
                                            if (prefix2.Contains(0x66))
                                            {
                                                if (hasvex)
                                                    lastdisassembledata.opcode = "vandpd";
                                                else
                                                    lastdisassembledata.opcode = "andpd";

                                                lastdisassembledata.parameters = xmm(memory[2]) + modrm(memory, prefix2, 2, 4, ref last, tmrpos.mright);

                                                description = "bit-wise logical and of xmm2/m128 and xmm1";
                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                            else
                                            {
                                                if (hasvex)
                                                    lastdisassembledata.opcode = "vandps";
                                                else
                                                    lastdisassembledata.opcode = "andps";
                                                lastdisassembledata.parameters = xmm(memory[2]) + modrm(memory, prefix2, 2, 4, ref last, tmrpos.mright);
                                                lastdisassembledata.datasize = 4;

                                                description = "bit-wise logical and for single fp";
                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                        }
                                        break;

                                    case 0x55:
                                        {
                                            if (prefix2.Contains(0x66))
                                            {
                                                description = "bit-wise logical and not of packed double-precision fp values";
                                                if (hasvex)
                                                    lastdisassembledata.opcode = "vandnpd";
                                                else
                                                    lastdisassembledata.opcode = "andnpd";

                                                lastdisassembledata.parameters = xmm(memory[2]) + modrm(memory, prefix2, 2, 4, ref last, tmrpos.mright);
                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                            else
                                            {
                                                description = "bit-wise logical and not for single-fp";
                                                if (hasvex)
                                                    lastdisassembledata.opcode = "vandnps";
                                                else
                                                    lastdisassembledata.opcode = "andnps";
                                                lastdisassembledata.parameters = xmm(memory[2]) + modrm(memory, prefix2, 2, 4, ref last, tmrpos.mright);
                                                lastdisassembledata.datasize = 4;

                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                        }
                                        break;

                                    case 0x56:
                                        {
                                            if (prefix2.Contains(0x66))
                                            {
                                                description = "bit-wise logical or of double-fp";
                                                if (hasvex)
                                                    lastdisassembledata.opcode = "vorpd";
                                                else
                                                    lastdisassembledata.opcode = "orpd";

                                                lastdisassembledata.parameters = xmm(memory[2]) + modrm(memory, prefix2, 2, 4, ref last, tmrpos.mright);


                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                            else
                                            {
                                                description = "bit-wise logical or for single-fp";
                                                if (hasvex)
                                                    lastdisassembledata.opcode = "vorps";
                                                else
                                                    lastdisassembledata.opcode = "orps";

                                                lastdisassembledata.parameters = xmm(memory[2]) + modrm(memory, prefix2, 2, 4, ref last, tmrpos.mright);
                                                lastdisassembledata.datasize = 4;

                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                        }
                                        break;

                                    case 0x57:
                                        {
                                            if (prefix2.Contains(0x66))
                                            {
                                                description = "bit-wise logical xor for double-fp data";
                                                if (hasvex)
                                                    lastdisassembledata.opcode = "vxorpd";
                                                else
                                                    lastdisassembledata.opcode = "xorpd";
                                                lastdisassembledata.parameters = xmm(memory[2]) + modrm(memory, prefix2, 2, 4, ref last, tmrpos.mright);


                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                            else
                                            {
                                                description = "bit-wise logical xor for single-fp data";
                                                if (hasvex)
                                                    lastdisassembledata.opcode = "vxorps";
                                                else
                                                    lastdisassembledata.opcode = "xorps";

                                                lastdisassembledata.parameters = xmm(memory[2]) + modrm(memory, prefix2, 2, 4, ref last, tmrpos.mright);
                                                lastdisassembledata.datasize = 4;

                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                        }
                                        break;

                                    case 0x58:
                                        {
                                            lastdisassembledata.isfloat = true;
                                            if (prefix2.Contains(0xf2))
                                            {
                                                //delete the repne from the tempresult
                                                if (hasvex)
                                                    lastdisassembledata.opcode = "vaddsd";
                                                else
                                                    lastdisassembledata.opcode = "addsd";
                                                lastdisassembledata.parameters = xmm(memory[2]) + modrm(memory, prefix2, 2, 4, ref last, tmrpos.mright);

                                                description = "add the lower sp fp number from xmm2/mem to xmm1.";
                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                            else
                                            if (prefix2.Contains(0xf3))
                                            {
                                                //delete the repe from the tempresult

                                                if (hasvex)
                                                    lastdisassembledata.opcode = "vaddss";
                                                else
                                                    lastdisassembledata.opcode = "addss";
                                                lastdisassembledata.parameters = xmm(memory[2]) + modrm(memory, prefix2, 2, 4, ref last, tmrpos.mright);
                                                lastdisassembledata.datasize = 4;

                                                description = "add the lower sp fp number from xmm2/mem to xmm1.";
                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                            else
                                            {
                                                if (prefix2.Contains(0x66))
                                                {
                                                    if (hasvex)
                                                        lastdisassembledata.opcode = "vaddpd";
                                                    else
                                                        lastdisassembledata.opcode = "addpd";

                                                    lastdisassembledata.parameters = xmm(memory[2]) + modrm(memory, prefix2, 2, 4, ref last, tmrpos.mright);

                                                    description = "add packed double-precision floating-point values from xmm2/mem to xmm1";
                                                    offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                }
                                                else
                                                {
                                                    if (hasvex)
                                                        lastdisassembledata.opcode = "vaddps";
                                                    else
                                                        lastdisassembledata.opcode = "addps";

                                                    lastdisassembledata.parameters = xmm(memory[2]) + modrm(memory, prefix2, 2, 4, ref last, tmrpos.mright);
                                                    lastdisassembledata.datasize = 4;

                                                    description = "add packed sp fp numbers from xmm2/mem to xmm1";
                                                    offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                }
                                            }
                                        }
                                        break;

                                    case 0x59:
                                        {
                                            lastdisassembledata.isfloat = true;
                                            if (prefix2.Contains(0xf2))
                                            {

                                                if (hasvex)
                                                    lastdisassembledata.opcode = "vmulsd";
                                                else
                                                    lastdisassembledata.opcode = "mulsd";
                                                lastdisassembledata.parameters = xmm(memory[2]) + modrm(memory, prefix2, 2, 4, ref last, tmrpos.mright);

                                                description = "scalar double-fp multiply";
                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                            else
                                            if (prefix2.Contains(0xf3))
                                            {

                                                if (hasvex)
                                                    lastdisassembledata.opcode = "vmulss";
                                                else
                                                    lastdisassembledata.opcode = "mulss";
                                                lastdisassembledata.parameters = xmm(memory[2]) + modrm(memory, prefix2, 2, 4, ref last, tmrpos.mright);
                                                lastdisassembledata.datasize = 4;

                                                description = "scalar single-fp multiply";
                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                            else
                                            if (prefix2.Contains(0x66))
                                            {
                                                if (hasvex)
                                                    lastdisassembledata.opcode = "vmulpd";
                                                else
                                                    lastdisassembledata.opcode = "mulpd";

                                                lastdisassembledata.parameters = xmm(memory[2]) + modrm(memory, prefix2, 2, 4, ref last, tmrpos.mright);

                                                description = "packed double-fp multiply";
                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                            else
                                            {
                                                if (hasvex)
                                                    lastdisassembledata.opcode = "vmulps";
                                                else
                                                    lastdisassembledata.opcode = "mulps";
                                                lastdisassembledata.parameters = xmm(memory[2]) + modrm(memory, prefix2, 2, 4, ref last, tmrpos.mright);
                                                lastdisassembledata.datasize = 4;

                                                description = "packed single-fp multiply";
                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                        }
                                        break;

                                    case 0x5a:
                                        {
                                            lastdisassembledata.isfloat = true;
                                            if (prefix2.Contains(0xf2))
                                            {

                                                if (hasvex)
                                                    lastdisassembledata.opcode = "vcvtsd2ss";
                                                else
                                                    lastdisassembledata.opcode = "cvtsd2ss";
                                                lastdisassembledata.parameters = xmm(memory[2]) + modrm(memory, prefix2, 2, 4, ref last, tmrpos.mright);

                                                description = "convert scalar double-precision floating-point value to scalar single-precision floating-point value";
                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                            else
                                            if (prefix2.Contains(0xf3))
                                            {

                                                if (hasvex)
                                                    lastdisassembledata.opcode = "vcvtss2sd";
                                                else
                                                    lastdisassembledata.opcode = "cvtss2sd";

                                                lastdisassembledata.parameters = xmm(memory[2]) + modrm(memory, prefix2, 2, 4, ref last, tmrpos.mright);
                                                lastdisassembledata.datasize = 4;

                                                description = "convert scalar single-precision floating-point value to scalar double-precision floating-point value";
                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                            else
                                            {
                                                if (prefix2.Contains(0x66))
                                                {
                                                    if (hasvex)
                                                        lastdisassembledata.opcode = "vcvtpd2ps";
                                                    else
                                                        lastdisassembledata.opcode = "cvtpd2ps";
                                                    opcodeflags.skipextrareg = true;

                                                    lastdisassembledata.parameters = xmm(memory[2]) + modrm(memory, prefix2, 2, 4, ref last, tmrpos.mright);

                                                    description = "convert packed double precision fp values to packed single precision fp values";
                                                    offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                }
                                                else
                                                {
                                                    if (hasvex)
                                                        lastdisassembledata.opcode = "vcvtps2pd";
                                                    else
                                                        lastdisassembledata.opcode = "cvtps2pd";

                                                    opcodeflags.skipextrareg = true;
                                                    lastdisassembledata.parameters = xmm(memory[2]) + modrm(memory, prefix2, 2, 4, ref last, tmrpos.mright);
                                                    lastdisassembledata.datasize = 4;

                                                    description = "convert packed single precision fp values to packed double precision fp values";
                                                    offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                }
                                            }
                                        }
                                        break;

                                    case 0x5b:
                                        {

                                            if (prefix2.Contains(0x66))
                                            {
                                                lastdisassembledata.isfloat = true;
                                                if (hasvex)
                                                    lastdisassembledata.opcode = "vcvtps2dq";
                                                else
                                                    lastdisassembledata.opcode = "cvtps2dq";

                                                opcodeflags.skipextrareg = true;
                                                lastdisassembledata.parameters = xmm(memory[2]) + modrm(memory, prefix2, 2, 4, ref last, tmrpos.mright);
                                                lastdisassembledata.datasize = 4;

                                                description = "convert ps-precision fpoint values to packed dword's ";
                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                            else
                                            if (prefix2.Contains(0xf3))
                                            {
                                                if (hasvex)
                                                    lastdisassembledata.opcode = "vcvttps2dq";
                                                else
                                                    lastdisassembledata.opcode = "cvttps2dq";

                                                opcodeflags.skipextrareg = true;
                                                lastdisassembledata.parameters = xmm(memory[2]) + modrm(memory, prefix2, 2, 4, ref last, tmrpos.mright);

                                                description = "Convert with Truncation Packed Single-Precision FP Values to Packed Dword Integers";
                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                            else
                                            {
                                                if (hasvex)
                                                    lastdisassembledata.opcode = "vcvtdq2ps";
                                                else
                                                    lastdisassembledata.opcode = "cvtdq2ps";

                                                opcodeflags.skipextrareg = true;
                                                lastdisassembledata.parameters = xmm(memory[2]) + modrm(memory, prefix2, 2, 4, ref last, tmrpos.mright);

                                                description = "convert packed dword's to ps-precision fpoint values";
                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                        }
                                        break;

                                    case 0x5c:
                                        {
                                            lastdisassembledata.isfloat = true;
                                            if (prefix2.Contains(0xf2))
                                            {
                                                if (hasvex)
                                                    lastdisassembledata.opcode = "vsubsd";
                                                else
                                                    lastdisassembledata.opcode = "subsd";
                                                lastdisassembledata.parameters = xmm(memory[2]) + modrm(memory, prefix2, 2, 4, ref last, tmrpos.mright);

                                                description = "scalar double-fp subtract";
                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                            else
                                            if (prefix2.Contains(0xf3))
                                            {
                                                if (hasvex)
                                                    lastdisassembledata.opcode = "vsubss";
                                                else
                                                    lastdisassembledata.opcode = "subss";
                                                lastdisassembledata.parameters = xmm(memory[2]) + modrm(memory, prefix2, 2, 4, ref last, tmrpos.mright);
                                                lastdisassembledata.datasize = 4;

                                                description = "scalar single-fp subtract";
                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                            else
                                            if (prefix2.Contains(0x66))
                                            {
                                                if (hasvex)
                                                    lastdisassembledata.opcode = "vsubpd";
                                                else
                                                    lastdisassembledata.opcode = "subpd";
                                                lastdisassembledata.parameters = xmm(memory[2]) + modrm(memory, prefix2, 2, 4, ref last, tmrpos.mright);

                                                description = "packed double-fp subtract";
                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                            else
                                            {
                                                if (hasvex)
                                                    lastdisassembledata.opcode = "vsubps";
                                                else
                                                    lastdisassembledata.opcode = "subps";
                                                lastdisassembledata.parameters = xmm(memory[2]) + modrm(memory, prefix2, 2, 4, ref last, tmrpos.mright);
                                                lastdisassembledata.datasize = 4; //4*4 actually

                                                description = "packed single-fp subtract";
                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                        }
                                        break;


                                    case 0x5d:
                                        {
                                            lastdisassembledata.isfloat = true;
                                            if (prefix2.Contains(0xf2))
                                            {
                                                if (hasvex)
                                                    lastdisassembledata.opcode = "vminsd";
                                                else
                                                    lastdisassembledata.opcode = "minsd";

                                                lastdisassembledata.parameters = xmm(memory[2]) + modrm(memory, prefix2, 2, 4, ref last, tmrpos.mright);

                                                description = "scalar single-fp minimum";
                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                            else
                                            if (prefix2.Contains(0xf3))
                                            {
                                                if (hasvex)
                                                    lastdisassembledata.opcode = "vminss";
                                                else
                                                    lastdisassembledata.opcode = "minss";

                                                lastdisassembledata.parameters = xmm(memory[2]) + modrm(memory, prefix2, 2, 4, ref last, tmrpos.mright);
                                                lastdisassembledata.datasize = 4;

                                                description = "scalar single-fp minimum";
                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                            else
                                            {
                                                if (prefix2.Contains(0x66))
                                                {
                                                    if (hasvex)
                                                        lastdisassembledata.opcode = "vminpd";
                                                    else
                                                        lastdisassembledata.opcode = "minpd";

                                                    lastdisassembledata.parameters = xmm(memory[2]) + modrm(memory, prefix2, 2, 4, ref last, tmrpos.mright);

                                                    description = "packed double-fp minimum";
                                                    offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                }
                                                else
                                                {
                                                    if (hasvex)
                                                        lastdisassembledata.opcode = "vminps";
                                                    else
                                                        lastdisassembledata.opcode = "minps";

                                                    lastdisassembledata.parameters = xmm(memory[2]) + modrm(memory, prefix2, 2, 4, ref last, tmrpos.mright);

                                                    description = "packed single-fp minimum";
                                                    offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                }
                                            }
                                        }
                                        break;

                                    case 0x5e:
                                        {
                                            lastdisassembledata.isfloat = true;
                                            if (prefix2.Contains(0xf2))
                                            {
                                                if (hasvex)
                                                    lastdisassembledata.opcode = "divsd";
                                                else
                                                    lastdisassembledata.opcode = "divsd";
                                                lastdisassembledata.parameters = xmm(memory[2]) + modrm(memory, prefix2, 2, 4, ref last, tmrpos.mright);

                                                description = "scalar double-precision-fp divide";
                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                            else
                                            if (prefix2.Contains(0xf3))
                                            {

                                                if (hasvex)
                                                    lastdisassembledata.opcode = "vdivss";
                                                else
                                                    lastdisassembledata.opcode = "divss";
                                                lastdisassembledata.parameters = xmm(memory[2]) + modrm(memory, prefix2, 2, 4, ref last, tmrpos.mright);
                                                lastdisassembledata.datasize = 4;

                                                description = "scalar single-fp divide";
                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                            else
                                            {
                                                if (prefix2.Contains(0x66))
                                                {
                                                    if (hasvex)
                                                        lastdisassembledata.opcode = "vdivpd";
                                                    else
                                                        lastdisassembledata.opcode = "divpd";

                                                    lastdisassembledata.parameters = xmm(memory[2]) + modrm(memory, prefix2, 2, 4, ref last, tmrpos.mright);

                                                    description = "packed double-precision fp divide";
                                                    offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                }
                                                else
                                                {
                                                    if (hasvex)
                                                        lastdisassembledata.opcode = "vdivps";
                                                    else
                                                        lastdisassembledata.opcode = "divps";
                                                    lastdisassembledata.parameters = xmm(memory[2]) + modrm(memory, prefix2, 2, 4, ref last, tmrpos.mright);
                                                    lastdisassembledata.datasize = 4;

                                                    description = "packed single-fp divide";
                                                    offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                }
                                            }
                                        }
                                        break;

                                    case 0x5f:
                                        {
                                            lastdisassembledata.isfloat = true;
                                            if (prefix2.Contains(0xf2))
                                            {

                                                description = "scalar double-fp maximum";
                                                if (hasvex)
                                                    lastdisassembledata.opcode = "vmaxsd";
                                                else
                                                    lastdisassembledata.opcode = "maxsd";
                                                lastdisassembledata.parameters = xmm(memory[2]) + modrm(memory, prefix2, 2, 4, ref last, tmrpos.mright);

                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                            else
                                            if (prefix2.Contains(0xf3))
                                            {

                                                description = "scalar single-fp maximum";
                                                if (hasvex)
                                                    lastdisassembledata.opcode = "vmaxss";
                                                else
                                                    lastdisassembledata.opcode = "maxss";
                                                lastdisassembledata.parameters = xmm(memory[2]) + modrm(memory, prefix2, 2, 4, ref last, tmrpos.mright);
                                                lastdisassembledata.datasize = 4;

                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                            else
                                            {
                                                if (prefix2.Contains(0x66))
                                                {
                                                    description = "packed double-fp maximum";
                                                    if (hasvex)
                                                        lastdisassembledata.opcode = "vmaxpd";
                                                    else
                                                        lastdisassembledata.opcode = "maxpd";
                                                    lastdisassembledata.parameters = xmm(memory[2]) + modrm(memory, prefix2, 2, 4, ref last, tmrpos.mright);

                                                    offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                }
                                                else
                                                {
                                                    description = "packed single-fp maximum";
                                                    if (hasvex)
                                                        lastdisassembledata.opcode = "vmaxps";
                                                    else
                                                        lastdisassembledata.opcode = "maxps";

                                                    lastdisassembledata.parameters = xmm(memory[2]) + modrm(memory, prefix2, 2, 4, ref last, tmrpos.mright);
                                                    lastdisassembledata.datasize = 4;

                                                    offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                }
                                            }
                                        }
                                        break;

                                    case 0x60:
                                        {
                                            if (prefix2.Contains(0x66))
                                            {
                                                description = "unpack low packed data";
                                                if (hasvex)
                                                    lastdisassembledata.opcode = "vpunpcklbw";
                                                else
                                                    lastdisassembledata.opcode = "punpcklbw";
                                                lastdisassembledata.parameters = xmm(memory[2]) + modrm(memory, prefix2, 2, 4, ref last, tmrpos.mright);

                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                            else
                                            {
                                                description = "unpack low packed data";
                                                lastdisassembledata.opcode = "punpcklbw";
                                                lastdisassembledata.parameters = mm(memory[2]) + modrm(memory, prefix2, 2, 3, ref last, tmrpos.mright);

                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                        }
                                        break;

                                    case 0x61:
                                        {
                                            if (prefix2.Contains(0x66))
                                            {
                                                description = "unpack low packed data";
                                                if (hasvex)
                                                    lastdisassembledata.opcode = "punpcklwd";
                                                else
                                                    lastdisassembledata.opcode = "punpcklwd";
                                                lastdisassembledata.parameters = xmm(memory[2]) + modrm(memory, prefix2, 2, 4, ref last, tmrpos.mright);

                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                            else
                                            {
                                                description = "unpack low packed data";
                                                lastdisassembledata.opcode = "punpcklwd";
                                                lastdisassembledata.parameters = mm(memory[2]) + modrm(memory, prefix2, 2, 3, ref last, tmrpos.mright);

                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                        }
                                        break;

                                    case 0x62:
                                        {
                                            if (prefix2.Contains(0x66))
                                            {
                                                description = "unpack low packed data";
                                                if (hasvex)
                                                    lastdisassembledata.opcode = "vpunpckldq";
                                                else
                                                    lastdisassembledata.opcode = "punpckldq";

                                                lastdisassembledata.parameters = xmm(memory[2]) + modrm(memory, prefix2, 2, 4, ref last, tmrpos.mright);

                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                            else
                                            {
                                                description = "unpack low packed data";
                                                lastdisassembledata.opcode = "punpckldq";
                                                lastdisassembledata.parameters = mm(memory[2]) + modrm(memory, prefix2, 2, 3, ref last, tmrpos.mright);

                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                        }
                                        break;

                                    case 0x63:
                                        {
                                            if (prefix2.Contains(0x66))
                                            {
                                                description = "pack with signed saturation";
                                                if (hasvex)
                                                    lastdisassembledata.opcode = "packsswb";
                                                else
                                                    lastdisassembledata.opcode = "vpacksswb";

                                                opcodeflags.skipextrareg = true;
                                                lastdisassembledata.parameters = xmm(memory[2]) + modrm(memory, prefix2, 2, 4, ref last, tmrpos.mright);

                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                            else
                                            {
                                                description = "pack with signed saturation";
                                                lastdisassembledata.opcode = "packsswb";
                                                lastdisassembledata.parameters = mm(memory[2]) + modrm(memory, prefix2, 2, 3, ref last, tmrpos.mright);

                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                        }
                                        break;

                                    case 0x64:
                                        {
                                            if (prefix2.Contains(0x66))
                                            {
                                                description = "packed compare for greater than";
                                                if (hasvex)
                                                    lastdisassembledata.opcode = "vpcmpgtb";
                                                else
                                                    lastdisassembledata.opcode = "pcmpgtb";
                                                lastdisassembledata.parameters = xmm(memory[2]) + modrm(memory, prefix2, 2, 4, ref last, tmrpos.mright);

                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                            else
                                            {
                                                description = "packed compare for greater than";
                                                lastdisassembledata.opcode = "pcmpgtb";
                                                lastdisassembledata.parameters = mm(memory[2]) + modrm(memory, prefix2, 2, 3, ref last, tmrpos.mright);

                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                        }
                                        break;

                                    case 0x65:
                                        {
                                            if (prefix2.Contains(0x66))
                                            {
                                                description = "packed compare for greater than";
                                                if (hasvex)
                                                    lastdisassembledata.opcode = "vpcmpgtw";
                                                else
                                                    lastdisassembledata.opcode = "pcmpgtw";
                                                lastdisassembledata.parameters = xmm(memory[2]) + modrm(memory, prefix2, 2, 4, ref last, tmrpos.mright);

                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                            else
                                            {
                                                description = "packed compare for greater than";
                                                lastdisassembledata.opcode = "pcmpgtw";
                                                lastdisassembledata.parameters = mm(memory[2]) + modrm(memory, prefix2, 2, 3, ref last, tmrpos.mright);

                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                        }
                                        break;

                                    case 0x66:
                                        {
                                            if (prefix2.Contains(0x66))
                                            {
                                                description = "packed compare for greater than";
                                                if (hasvex)
                                                    lastdisassembledata.opcode = "vpcmpgtd";
                                                else
                                                    lastdisassembledata.opcode = "pcmpgtd";
                                                lastdisassembledata.parameters = xmm(memory[2]) + modrm(memory, prefix2, 2, 4, ref last, tmrpos.mright);

                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                            else
                                            {
                                                description = "packed compare for greater than";
                                                lastdisassembledata.opcode = "pcmpgtd";
                                                lastdisassembledata.parameters = mm(memory[2]) + modrm(memory, prefix2, 2, 3, ref last, tmrpos.mright);

                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                        }
                                        break;


                                    case 0x67:
                                        {
                                            if (prefix2.Contains(0x66))
                                            {
                                                description = "pack with unsigned saturation";
                                                if (hasvex)
                                                    lastdisassembledata.opcode = "vpackuswb";
                                                else
                                                    lastdisassembledata.opcode = "packuswb";

                                                lastdisassembledata.parameters = xmm(memory[2]) + modrm(memory, prefix2, 2, 4, ref last, tmrpos.mright);

                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                            else
                                            {
                                                description = "pack with unsigned saturation";
                                                lastdisassembledata.opcode = "packuswb";
                                                lastdisassembledata.parameters = mm(memory[2]) + modrm(memory, prefix2, 2, 3, ref last, tmrpos.mright);

                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                        }
                                        break;

                                    case 0x68:
                                        {
                                            if (prefix2.Contains(0x66))
                                            {
                                                description = "unpack high packed data";
                                                if (hasvex)
                                                    lastdisassembledata.opcode = "vpunpckhbw";
                                                else
                                                    lastdisassembledata.opcode = "punpckhbw";
                                                lastdisassembledata.parameters = xmm(memory[2]) + modrm(memory, prefix2, 2, 4, ref last, tmrpos.mright);
                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                            else
                                            {
                                                description = "unpack high packed data";
                                                lastdisassembledata.opcode = "punpckhbw";
                                                lastdisassembledata.parameters = mm(memory[2]) + modrm(memory, prefix2, 2, 3, ref last, tmrpos.mright);
                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                        }
                                        break;

                                    case 0x69:
                                        {
                                            if (prefix2.Contains(0x66))
                                            {
                                                description = "unpack high packed data";
                                                if (hasvex)
                                                    lastdisassembledata.opcode = "vpunpckhwd";
                                                else
                                                    lastdisassembledata.opcode = "punpckhwd";

                                                lastdisassembledata.parameters = xmm(memory[2]) + modrm(memory, prefix2, 2, 4, ref last, tmrpos.mright);
                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                            else
                                            {
                                                description = "unpack high packed data";
                                                lastdisassembledata.opcode = "punpckhwd";
                                                lastdisassembledata.parameters = mm(memory[2]) + modrm(memory, prefix2, 2, 3, ref last, tmrpos.mright);
                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                        }
                                        break;

                                    case 0x6a:
                                        {
                                            if (prefix2.Contains(0x66))
                                            {
                                                description = "unpack high packed data";
                                                if (hasvex)
                                                    lastdisassembledata.opcode = "vpunpckhdq";
                                                else
                                                    lastdisassembledata.opcode = "punpckhdq";
                                                lastdisassembledata.parameters = xmm(memory[2]) + modrm(memory, prefix2, 2, 4, ref last, tmrpos.mright);
                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                            else
                                            {
                                                description = "unpack high packed data";
                                                lastdisassembledata.opcode = "punpckhdq";
                                                lastdisassembledata.parameters = mm(memory[2]) + modrm(memory, prefix2, 2, 3, ref last, tmrpos.mright);
                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                        }
                                        break;

                                    case 0x6b:
                                        {
                                            if (prefix2.Contains(0x66))
                                            {
                                                description = "pack with signed saturation";
                                                if (hasvex)
                                                    lastdisassembledata.opcode = "packssdw";
                                                else
                                                    lastdisassembledata.opcode = "packssdw";

                                                opcodeflags.skipextrareg = true;
                                                lastdisassembledata.parameters = xmm(memory[2]) + modrm(memory, prefix2, 2, 4, ref last, tmrpos.mright);

                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                            else
                                            {
                                                description = "pack with signed saturation";
                                                lastdisassembledata.opcode = "packssdw";
                                                lastdisassembledata.parameters = mm(memory[2]) + modrm(memory, prefix2, 2, 3, ref last, tmrpos.mright);

                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                        }
                                        break;

                                    case 0x6c:
                                        {
                                            if (prefix2.Contains(0x66))
                                            {
                                                description = "unpack low packed data";
                                                lastdisassembledata.opcode = "punpcklqdq";
                                                lastdisassembledata.parameters = xmm(memory[2]) + modrm(memory, prefix2, 2, 4, ref last, tmrpos.mright);
                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                        }
                                        break;

                                    case 0x6d:
                                        {
                                            if (prefix2.Contains(0x66))
                                            {
                                                description = "unpack high packed data";
                                                lastdisassembledata.opcode = "punpckhqdq";
                                                lastdisassembledata.parameters = xmm(memory[2]) + modrm(memory, prefix2, 2, 4, ref last, tmrpos.mright);
                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                        }
                                        break;


                                    case 0x6e:
                                        {
                                            //lastdisassembledata.isfloat:=true; //not sure
                                            if (rex_w)
                                            {
                                                description = "move quadword";
                                                lastdisassembledata.opcode = "movq";
                                            }
                                            else
                                            {
                                                description = "move doubleword";
                                                lastdisassembledata.opcode = "movd";
                                            }

                                            if (hasvex)
                                                lastdisassembledata.opcode = 'v' + lastdisassembledata.opcode;

                                            opcodeflags.skipextrareg = true;
                                            if (prefix2.Contains(0x66))
                                                lastdisassembledata.parameters = xmm(memory[2]) + modrm(memory, prefix2, 2, 0, ref last, tmrpos.mright);
                                            else
                                                lastdisassembledata.parameters = mm(memory[2]) + modrm(memory, prefix2, 2, 0, ref last, tmrpos.mright);

                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                        }
                                        break;

                                    case 0x6f:
                                        {
                                            if (prefix2.Contains(0xf3))
                                            {

                                                description = "move unaligned double quadword";
                                                if (hasvex)
                                                    lastdisassembledata.opcode = "vmovdqu";
                                                else
                                                    lastdisassembledata.opcode = "movdqu";

                                                lastdisassembledata.parameters = xmm(memory[2]) + modrm(memory, prefix2, 2, 4, ref last, tmrpos.mright);

                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                            else
                                            if (prefix2.Contains(0x66))
                                            {
                                                description = "move aligned double quadword";
                                                if (hasvex)
                                                    lastdisassembledata.opcode = "vmovdqa";
                                                else
                                                    lastdisassembledata.opcode = "movdqa";

                                                opcodeflags.skipextrareg = true;
                                                lastdisassembledata.parameters = xmm(memory[2]) + modrm(memory, prefix2, 2, 4, ref last, tmrpos.mright);

                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                            else
                                            {
                                                description = "move 64 bits";
                                                lastdisassembledata.opcode = "movq";
                                                lastdisassembledata.parameters = mm(memory[2]) + modrm(memory, prefix2, 2, 4, ref last);

                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                        }
                                        break;

                                    case 0x70:
                                        {
                                            if (prefix2.Contains(0xf2))
                                            {

                                                description = "shuffle packed low words";
                                                if (hasvex)
                                                    lastdisassembledata.opcode = "vpshuflw";
                                                else
                                                    lastdisassembledata.opcode = "pshuflw";

                                                opcodeflags.skipextrareg = true;
                                                lastdisassembledata.parameters = xmm(memory[2]) + modrm(memory, prefix2, 2, 4, ref last, tmrpos.mright);

                                                lastdisassembledata.parametervaluetype = tdisassemblervaluetype.dvtvalue;
                                                lastdisassembledata.parametervalue = (UIntPtr)memory[(int)last];
                                                lastdisassembledata.parameters = lastdisassembledata.parameters + inttohexs(lastdisassembledata.parametervalue, 2);
                                                offset = (UIntPtr)(offset.ToUInt64() + last);
                                            }
                                            else
                                            if (prefix2.Contains(0xf3))
                                            {

                                                description = "shuffle packed high words";
                                                if (hasvex)
                                                    lastdisassembledata.opcode = "vpshufhw";
                                                else
                                                    lastdisassembledata.opcode = "pshufhw";

                                                opcodeflags.skipextrareg = true;
                                                lastdisassembledata.parameters = xmm(memory[2]) + modrm(memory, prefix2, 2, 4, ref last, tmrpos.mright);
                                                lastdisassembledata.parametervaluetype = tdisassemblervaluetype.dvtvalue;
                                                lastdisassembledata.parametervalue = (UIntPtr)memory[(int)last];
                                                lastdisassembledata.parameters = lastdisassembledata.parameters + inttohexs(lastdisassembledata.parametervalue, 2);
                                                offset = (UIntPtr)(offset.ToUInt64() + last);
                                            }
                                            else
                                            if (prefix2.Contains(0x66))
                                            {
                                                description = "packed shuffle doubleword";
                                                lastdisassembledata.opcode = "pshufd";

                                                lastdisassembledata.parameters = xmm(memory[2]) + modrm(memory, prefix2, 2, 4, ref last, tmrpos.mright);
                                                lastdisassembledata.parametervaluetype = tdisassemblervaluetype.dvtvalue;
                                                lastdisassembledata.parametervalue = (UIntPtr)memory[(int)last];
                                                lastdisassembledata.parameters = lastdisassembledata.parameters + inttohexs(lastdisassembledata.parametervalue, 2);
                                                offset = (UIntPtr)(offset.ToUInt64() + last);
                                            }
                                            else
                                            {
                                                description = "packed shuffle word";
                                                if (hasvex)
                                                    lastdisassembledata.opcode = "vpshufw";
                                                else
                                                    lastdisassembledata.opcode = "pshufw";

                                                opcodeflags.skipextrareg = true;
                                                lastdisassembledata.parameters = mm(memory[2]) + modrm(memory, prefix2, 2, 3, ref last, tmrpos.mright);
                                                lastdisassembledata.parametervaluetype = tdisassemblervaluetype.dvtvalue;
                                                lastdisassembledata.parametervalue = (UIntPtr)memory[(int)last];
                                                lastdisassembledata.parameters = lastdisassembledata.parameters + inttohexs(lastdisassembledata.parametervalue, 2);
                                                offset = (UIntPtr)(offset.ToUInt64() + last);
                                            }
                                        }
                                        break;

                                    case 0x71:
                                        {
                                            lastdisassembledata.parametervaluetype = tdisassemblervaluetype.dvtvalue;
                                            lastdisassembledata.parametervalue = (UIntPtr)memory[3];
                                            lastdisassembledata.seperators[lastdisassembledata.seperatorcount] = 3;
                                            lastdisassembledata.seperatorcount += 1;


                                            switch (getreg(memory[2]))
                                            {
                                                case 2:
                                                    {
                                                        if (prefix2.Contains(0x66))
                                                        {
                                                            description = "packed shift right logical";
                                                            if (hasvex)
                                                                lastdisassembledata.opcode = "vpsrlw";
                                                            else
                                                                lastdisassembledata.opcode = "psrlw";

                                                            lastdisassembledata.parameters = xmm(memory[2]) + ',' + inttohexs((UIntPtr)memory[3], 2);
                                                            offset += 3;
                                                        }
                                                        else
                                                        {
                                                            description = "packed shift right logical";
                                                            lastdisassembledata.opcode = "psrlw";
                                                            lastdisassembledata.parameters = mm(memory[2]) + ',' + inttohexs((UIntPtr)memory[3], 2);
                                                            offset += 3;
                                                        }
                                                    }
                                                    break;

                                                case 4:
                                                    {
                                                        if (prefix2.Contains(0x66))
                                                        {
                                                            description = "shift packed data right arithmetic";
                                                            if (hasvex)
                                                                lastdisassembledata.opcode = "vpsraw";
                                                            else
                                                                lastdisassembledata.opcode = "psraw";

                                                            lastdisassembledata.parameters = modrm(memory, prefix2, 2, 4, ref last);
                                                            lastdisassembledata.parameters = lastdisassembledata.parameters + inttohexs((UIntPtr)memory[(int)last], 2);

                                                            offset = (UIntPtr)(offset.ToUInt64() + last - 1 + 1);
                                                        }
                                                        else
                                                        {
                                                            description = "packed shift left logical";
                                                            lastdisassembledata.opcode = "psraw";
                                                            lastdisassembledata.parameters = modrm(memory, prefix2, 2, 3, ref last);
                                                            lastdisassembledata.parameters = lastdisassembledata.parameters + inttohexs((UIntPtr)memory[(int)last], 2);

                                                            offset = (UIntPtr)(offset.ToUInt64() + last - 1 + 1);
                                                        }
                                                    }
                                                    break;

                                                case 6:
                                                    {
                                                        if (prefix2.Contains(0x66))
                                                        {
                                                            description = "packed shift left logical";
                                                            if (hasvex)
                                                                lastdisassembledata.opcode = "vpsllw";
                                                            else
                                                                lastdisassembledata.opcode = "psllw";

                                                            lastdisassembledata.parameters = modrm(memory, prefix2, 2, 4, ref last);
                                                            lastdisassembledata.parameters = lastdisassembledata.parameters + inttohexs((UIntPtr)memory[(int)last], 2);

                                                            offset = (UIntPtr)(offset.ToUInt64() + last - 1 + 1);
                                                        }
                                                        else
                                                        {
                                                            description = "packed shift left logical";
                                                            lastdisassembledata.opcode = "psllw";
                                                            lastdisassembledata.parameters = modrm(memory, prefix2, 2, 3, ref last);
                                                            lastdisassembledata.parameters = lastdisassembledata.parameters + inttohexs((UIntPtr)memory[(int)last], 2);

                                                            offset = (UIntPtr)(offset.ToUInt64() + last - 1 + 1);
                                                        }
                                                    }
                                                    break;
                                            }
                                        }
                                        break;

                                    case 0x72:
                                        {
                                            lastdisassembledata.parametervaluetype = tdisassemblervaluetype.dvtvalue;
                                            lastdisassembledata.parametervalue = (UIntPtr)memory[3];
                                            lastdisassembledata.seperators[lastdisassembledata.seperatorcount] = 3;
                                            lastdisassembledata.seperatorcount += 1;

                                            switch (getreg(memory[2]))
                                            {
                                                case 2:
                                                    {
                                                        if (prefix2.Contains(0x66))
                                                        {
                                                            description = "packed shift right logical";
                                                            if (hasvex)
                                                                lastdisassembledata.opcode = "vpsrld";
                                                            else
                                                                lastdisassembledata.opcode = "psrld";
                                                            lastdisassembledata.parameters = modrm(memory, prefix2, 2, 4, ref last);
                                                            lastdisassembledata.parameters = lastdisassembledata.parameters + inttohexs((UIntPtr)memory[(int)last], 2);
                                                            offset += 3;
                                                        }
                                                        else
                                                        {
                                                            description = "packed shift right logical";
                                                            lastdisassembledata.opcode = "psrld";
                                                            lastdisassembledata.parameters = modrm(memory, prefix2, 2, 3, ref last);
                                                            lastdisassembledata.parameters = lastdisassembledata.parameters + inttohexs((UIntPtr)memory[(int)last], 2);
                                                            offset += 3;
                                                        }
                                                    }
                                                    break;

                                                case 4:
                                                    {
                                                        if (prefix2.Contains(0x66))
                                                        {
                                                            description = "packed shift right arithmetic";
                                                            if (hasvex)
                                                                lastdisassembledata.opcode = "vpsrad";
                                                            else
                                                                lastdisassembledata.opcode = "psrad";
                                                            lastdisassembledata.parameters = modrm(memory, prefix2, 2, 4, ref last);
                                                            lastdisassembledata.parameters = lastdisassembledata.parameters + inttohexs((UIntPtr)memory[(int)last], 2);

                                                            offset += 3;
                                                        }
                                                        else
                                                        {
                                                            description = "packed shift right arithmetic";
                                                            lastdisassembledata.opcode = "psrad";
                                                            lastdisassembledata.parameters = modrm(memory, prefix2, 2, 3, ref last);
                                                            lastdisassembledata.parameters = lastdisassembledata.parameters + inttohexs((UIntPtr)memory[(int)last], 2);

                                                            offset += 3;
                                                        }
                                                    }
                                                    break;

                                                case 6:
                                                    {
                                                        if (prefix2.Contains(0x66))
                                                        {
                                                            description = "packed shift left logical";
                                                            if (hasvex)
                                                                lastdisassembledata.opcode = "pslld";
                                                            else
                                                                lastdisassembledata.opcode = "pslld";

                                                            lastdisassembledata.parameters = modrm(memory, prefix2, 2, 4, ref last);
                                                            lastdisassembledata.parameters = lastdisassembledata.parameters + ',' + inttohexs((UIntPtr)memory[(int)last], 2);
                                                            offset += 3;
                                                        }
                                                        else
                                                        {
                                                            description = "packed shift left logical";
                                                            lastdisassembledata.opcode = "pslld";
                                                            lastdisassembledata.parameters = modrm(memory, prefix2, 2, 3, ref last);
                                                            lastdisassembledata.parameters = lastdisassembledata.parameters + inttohexs((UIntPtr)memory[(int)last], 2);
                                                            offset += 3;
                                                        }
                                                    }
                                                    break;
                                            }
                                        }
                                        break;

                                    case 0x73:
                                        {
                                            lastdisassembledata.parametervaluetype = tdisassemblervaluetype.dvtvalue;
                                            lastdisassembledata.parametervalue = (UIntPtr)memory[3];
                                            lastdisassembledata.seperators[lastdisassembledata.seperatorcount] = 3;
                                            lastdisassembledata.seperatorcount += 1;

                                            switch (getreg(memory[2]))
                                            {
                                                case 2:
                                                    {
                                                        if (prefix2.Contains(0x66))
                                                        {
                                                            description = "packed shift right logical";
                                                            if (hasvex)
                                                                lastdisassembledata.opcode = "vpsrlq";
                                                            else
                                                                lastdisassembledata.opcode = "psrlq";
                                                            lastdisassembledata.parameters = modrm(memory, prefix2, 2, 4, ref last, tmrpos.mright);
                                                            lastdisassembledata.parameters = lastdisassembledata.parameters + ',' + inttohexs((UIntPtr)memory[(int)last], 2);
                                                            offset += 3;
                                                        }
                                                        else
                                                        {
                                                            description = "packed shift right logical";
                                                            lastdisassembledata.opcode = "psrlq";
                                                            lastdisassembledata.parameters = modrm(memory, prefix2, 2, 3, ref last, tmrpos.mright);
                                                            lastdisassembledata.parameters = lastdisassembledata.parameters + ',' + inttohexs((UIntPtr)memory[(int)last], 2);
                                                            offset += 3;
                                                        }
                                                        lastdisassembledata.parameters = lastdisassembledata.parameters.Substring(1);
                                                    }
                                                    break;

                                                case 3:
                                                    {
                                                        if (prefix2.Contains(0x66))
                                                        {
                                                            description = "shift double quadword right logical";
                                                            if (hasvex)
                                                                lastdisassembledata.opcode = "vpsrldq";
                                                            else
                                                                lastdisassembledata.opcode = "psrldq";

                                                            lastdisassembledata.parameters = modrm(memory, prefix2, 2, 4, ref last, tmrpos.mright);
                                                            lastdisassembledata.parameters = lastdisassembledata.parameters + ',' + inttohexs((UIntPtr)memory[(int)last], 2);
                                                            offset += 3;
                                                        }
                                                        lastdisassembledata.parameters = lastdisassembledata.parameters.Substring(1);
                                                    }
                                                    break;

                                                case 6:
                                                    {
                                                        if (prefix2.Contains(0x66))
                                                        {
                                                            description = "packed shift left logical";
                                                            if (hasvex)
                                                                lastdisassembledata.opcode = "vpsllq";
                                                            else
                                                                lastdisassembledata.opcode = "psllq";
                                                            lastdisassembledata.parameters = modrm(memory, prefix2, 2, 4, ref last, tmrpos.mright);
                                                            lastdisassembledata.parameters = lastdisassembledata.parameters + ',' + inttohexs((UIntPtr)memory[(int)last], 2);
                                                            offset += 3;
                                                        }
                                                        else
                                                        {
                                                            description = "packed shift left logical";
                                                            lastdisassembledata.opcode = "psllq";
                                                            lastdisassembledata.parameters = modrm(memory, prefix2, 2, 3, ref last, tmrpos.mright);
                                                            lastdisassembledata.parameters = lastdisassembledata.parameters + ',' + inttohexs((UIntPtr)memory[(int)last], 2);
                                                            offset += 3;
                                                        }
                                                        lastdisassembledata.parameters = lastdisassembledata.parameters.Substring(1);
                                                    }
                                                    break;

                                                case 7:
                                                    {
                                                        if (prefix2.Contains(0x66))
                                                        {
                                                            description = "shift double quadword left logical";
                                                            if (hasvex)
                                                                lastdisassembledata.opcode = "vpslldq";
                                                            else
                                                                lastdisassembledata.opcode = "pslldq";
                                                            lastdisassembledata.parameters = modrm(memory, prefix2, 2, 4, ref last, tmrpos.mright);
                                                            lastdisassembledata.parameters = lastdisassembledata.parameters + ',' + inttohexs((UIntPtr)memory[(int)last], 2);

                                                            lastdisassembledata.parameters = lastdisassembledata.parameters.Substring(1);
                                                            offset += 3;
                                                        }
                                                    }
                                                    break;
                                            }
                                        }
                                        break;



                                    case 0x74:
                                        {
                                            if (prefix2.Contains(0x66))
                                            {
                                                description = "packed compare for equal";
                                                if (hasvex)
                                                    lastdisassembledata.opcode = "vpcmpeqb";
                                                else
                                                    lastdisassembledata.opcode = "pcmpeqb";

                                                lastdisassembledata.parameters = xmm(memory[2]) + modrm(memory, prefix2, 2, 4, ref last, tmrpos.mright);
                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                            else
                                            {
                                                description = "packed compare for equal";
                                                lastdisassembledata.opcode = "pcmpeqb";
                                                lastdisassembledata.parameters = mm(memory[2]) + modrm(memory, prefix2, 2, 3, ref last, tmrpos.mright);

                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                        }
                                        break;

                                    case 0x75:
                                        {
                                            if (prefix2.Contains(0x66))
                                            {
                                                description = "packed compare for equal";
                                                if (hasvex)
                                                    lastdisassembledata.opcode = "vpcmpeqw";
                                                else
                                                    lastdisassembledata.opcode = "pcmpeqw";
                                                lastdisassembledata.parameters = xmm(memory[2]) + modrm(memory, prefix2, 2, 4, ref last, tmrpos.mright);

                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                            else
                                            {
                                                description = "packed compare for equal";
                                                lastdisassembledata.opcode = "pcmpeqw";
                                                lastdisassembledata.parameters = mm(memory[2]) + modrm(memory, prefix2, 2, 3, ref last, tmrpos.mright);

                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                        }
                                        break;

                                    case 0x76:
                                        {
                                            if (prefix2.Contains(0x66))
                                            {
                                                description = "packed compare for equal";
                                                if (hasvex)
                                                    lastdisassembledata.opcode = "vpcmpeqd";
                                                else
                                                    lastdisassembledata.opcode = "pcmpeqd";
                                                lastdisassembledata.parameters = xmm(memory[2]) + modrm(memory, prefix2, 2, 4, ref last, tmrpos.mright);

                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                            else
                                            {
                                                description = "packed compare for equal";
                                                lastdisassembledata.opcode = "pcmpeqd";
                                                lastdisassembledata.parameters = mm(memory[2]) + modrm(memory, prefix2, 2, 3, ref last, tmrpos.mright);

                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                        }
                                        break;


                                    case 0x77:
                                        {
                                            if (hasvex)
                                            {
                                                if (opcodeflags.l)
                                                {
                                                    description = "Zero all YMM registers";
                                                    lastdisassembledata.opcode = "vzeroall";
                                                    offset += 1;
                                                }
                                                else
                                                {
                                                    description = "Zero upper bits of YMM registers";
                                                    lastdisassembledata.opcode = "vzeroupper";
                                                    offset += 1;
                                                }
                                            }
                                            else
                                            {
                                                description = "empty mmx™ state";
                                                lastdisassembledata.opcode = "emms";
                                                offset += 1;
                                            }
                                        }
                                        break;

                                    case 0x78:
                                        {
                                            description = "reads a specified vmcs field (32 bits)";
                                            lastdisassembledata.opcode = "vmread";
                                            lastdisassembledata.parameters = modrm(memory, prefix2, 2, 0, ref last) + r32(memory[2]);
                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                        }
                                        break;

                                    case 0x79:
                                        {
                                            description = "writes a specified vmcs field (32 bits)";
                                            lastdisassembledata.opcode = "vmwrite";
                                            lastdisassembledata.parameters = r32(memory[2]) + modrm(memory, prefix2, 2, 0, ref last, tmrpos.mright);

                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                        }
                                        break;

                                    case 0x7c:
                                        {
                                            if (prefix2.Contains(0x66))
                                            {
                                                if (hasvex)
                                                    lastdisassembledata.opcode = "vhaddpd";
                                                else
                                                    lastdisassembledata.opcode = "haddpd";

                                                lastdisassembledata.parameters = xmm(memory[2]) + modrm(memory, prefix2, 2, 4, ref last, tmrpos.mright);

                                                description = "packed double-fp horizontal add";
                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                            else
                                            if (prefix2.Contains(0xf2))
                                            {
                                                if (hasvex)
                                                    lastdisassembledata.opcode = "vhaddps";
                                                else
                                                    lastdisassembledata.opcode = "haddps";

                                                lastdisassembledata.parameters = xmm(memory[2]) + modrm(memory, prefix2, 2, 4, ref last, tmrpos.mright);

                                                description = "packed single-fp horizontal add";
                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                        }
                                        break;

                                    case 0x7d:
                                        {
                                            if (prefix2.Contains(0x66))
                                            {
                                                if (hasvex)
                                                    lastdisassembledata.opcode = "vhsubpd";
                                                else
                                                    lastdisassembledata.opcode = "hsubpd";

                                                lastdisassembledata.parameters = xmm(memory[2]) + modrm(memory, prefix2, 2, 4, ref last, tmrpos.mright);

                                                description = "packed double-fp horizontal subtract";
                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                            else
                                            if (prefix2.Contains(0xf2))
                                            {
                                                if (hasvex)
                                                    lastdisassembledata.opcode = "vhsubps";
                                                else
                                                    lastdisassembledata.opcode = "hsubps";

                                                lastdisassembledata.parameters = xmm(memory[2]) + modrm(memory, prefix2, 2, 4, ref last, tmrpos.mright);

                                                description = "packed single-fp horizontal subtract";
                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                        }
                                        break;

                                    case 0x7e:
                                        {

                                            if (prefix2.Contains(0xf3))
                                            {

                                                description = "move quadword";
                                                if (hasvex)
                                                    lastdisassembledata.opcode = "vmovq";
                                                else
                                                    lastdisassembledata.opcode = "movq";

                                                opcodeflags.skipextrareg = true;
                                                lastdisassembledata.parameters = xmm(memory[2]) + modrm(memory, prefix2, 2, 4, ref last, tmrpos.mright);

                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                            else
                                            if (prefix2.Contains(0x66))
                                            {
                                                if (rex_w)
                                                {
                                                    description = "move 64 bits";
                                                    lastdisassembledata.opcode = "movq";
                                                }
                                                else
                                                {
                                                    description = "move 32 bits";
                                                    lastdisassembledata.opcode = "movd";
                                                }

                                                if (hasvex)
                                                    lastdisassembledata.opcode = 'v' + lastdisassembledata.opcode;

                                                opcodeflags.skipextrareg = true;

                                                lastdisassembledata.parameters = modrm(memory, prefix2, 2, 0, ref last) + xmm(memory[2]);  //r32/rm32,xmm
                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                            else
                                            {
                                                if (rex_w)
                                                {
                                                    description = "move 64 bits";
                                                    lastdisassembledata.opcode = "movq";
                                                }
                                                else
                                                {
                                                    description = "move 32 bits";
                                                    lastdisassembledata.opcode = "movd";
                                                }


                                                lastdisassembledata.parameters = modrm(memory, prefix2, 2, 0, ref last) + mm(memory[2]); //r32/rm32,mm
                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                        }
                                        break;

                                    case 0x7f:
                                        {
                                            if (prefix2.Contains(0xf3))
                                            {

                                                description = "move unaligned double quadword";
                                                if (hasvex)
                                                    lastdisassembledata.opcode = "vmovdqu";
                                                else
                                                    lastdisassembledata.opcode = "movdqu";

                                                opcodeflags.skipextrareg = true;
                                                lastdisassembledata.parameters = modrm(memory, prefix2, 2, 4, ref last) + xmm(memory[2]);
                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                            else
                                            if (prefix2.Contains(0x66))
                                            {
                                                description = "move aligned double quadword";
                                                if (hasvex)
                                                    lastdisassembledata.opcode = "vmovdqa";
                                                else
                                                    lastdisassembledata.opcode = "movdqa";

                                                opcodeflags.skipextrareg = true;
                                                lastdisassembledata.parameters = modrm(memory, prefix2, 2, 4, ref last) + xmm(memory[2]);
                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                            else
                                            {
                                                description = "move 64 bits";
                                                lastdisassembledata.opcode = "movq";
                                                lastdisassembledata.parameters = modrm(memory, prefix2, 2, 3, ref last) + mm(memory[2]);
                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                        }
                                        break;

                                    case 0x80:
                                        {
                                            description = "jump near if overflow (OF=1)";
                                            lastdisassembledata.opcode = "jo";
                                            lastdisassembledata.isjump = true;
                                            lastdisassembledata.isconditionaljump = true;
                                            //if (context != nil)
                                                //lastdisassembledata.willjumpaccordingtocontext = (context->eflags & eflags_of) != 0;

                                            offset += 1 + 4;
                                            if (markiprelativeinstructions)
                                            {
                                                lastdisassembledata.riprelative = 2;
                                                riprelative = true;
                                            }

                                            lastdisassembledata.parametervaluetype = tdisassemblervaluetype.dvtaddress;
                                            if (is64bit)
                                                lastdisassembledata.parametervalue = (UIntPtr)(offset.ToUInt64() + (UInt64)memory.ReadInt32(2));
                                            else
                                                lastdisassembledata.parametervalue = (UIntPtr)(UInt32)(offset.ToUInt64() + (UInt64)memory.ReadInt32(2));

                                            lastdisassembledata.seperators[lastdisassembledata.seperatorcount] = 2;
                                            lastdisassembledata.seperatorcount += 1;



                                            lastdisassembledata.parameters = inttohexs(lastdisassembledata.parametervalue, 8);
                                        }
                                        break;

                                    case 0x81:
                                        {
                                            description = "jump near if not overflow (OF=0)";
                                            lastdisassembledata.opcode = "jno";
                                            lastdisassembledata.isjump = true;
                                            lastdisassembledata.isconditionaljump = true;
                                            //if (context != nil)
                                                //lastdisassembledata.willjumpaccordingtocontext = (context->eflags & eflags_of) == 0;

                                            offset += 1 + 4;
                                            if (markiprelativeinstructions)
                                            {
                                                lastdisassembledata.riprelative = 2;
                                                riprelative = true;
                                            }

                                            lastdisassembledata.parametervaluetype = tdisassemblervaluetype.dvtaddress;
                                            if (is64bit)
                                                lastdisassembledata.parametervalue = (UIntPtr)(offset.ToUInt64() + (UInt64)memory.ReadInt32(2));
                                            else
                                                lastdisassembledata.parametervalue = (UIntPtr)(UInt32)(offset.ToUInt64() + (UInt64)memory.ReadInt32(2));

                                            lastdisassembledata.seperators[lastdisassembledata.seperatorcount] = 2;
                                            lastdisassembledata.seperatorcount += 1;



                                            lastdisassembledata.parameters = inttohexs(lastdisassembledata.parametervalue, 8);

                                        }
                                        break;

                                    case 0x82:
                                        {
                                            description = "jump near if below/carry (CF=1)";

                                            lastdisassembledata.opcode = "jb";
                                            lastdisassembledata.isjump = true;
                                            lastdisassembledata.isconditionaljump = true;

                                            //if (context != nil)
                                                //lastdisassembledata.willjumpaccordingtocontext = (context->eflags & eflags_cf) != 0;

                                            offset += 1 + 4;
                                            if (markiprelativeinstructions)
                                            {
                                                lastdisassembledata.riprelative = 2;
                                                riprelative = true;
                                            }

                                            lastdisassembledata.parametervaluetype = tdisassemblervaluetype.dvtaddress;
                                            if (is64bit)
                                                lastdisassembledata.parametervalue = (UIntPtr)(offset.ToUInt64() + (UInt64)memory.ReadInt32(2));
                                            else
                                                lastdisassembledata.parametervalue = (UIntPtr)(UInt32)(offset.ToUInt64() + (UInt64)memory.ReadInt32(2));

                                            lastdisassembledata.seperators[lastdisassembledata.seperatorcount] = 2;
                                            lastdisassembledata.seperatorcount += 1;



                                            lastdisassembledata.parameters = inttohexs(lastdisassembledata.parametervalue, 8);

                                        }
                                        break;

                                    case 0x83:
                                        {
                                            description = "jump near if above or equal (CF=0)";
                                            lastdisassembledata.opcode = "jae";
                                            lastdisassembledata.isjump = true;
                                            lastdisassembledata.isconditionaljump = true;
                                            //if (context != nil)
                                                //lastdisassembledata.willjumpaccordingtocontext = (context->eflags & eflags_cf) == 0;

                                            offset += 1 + 4;
                                            if (markiprelativeinstructions)
                                            {
                                                lastdisassembledata.riprelative = 2;
                                                riprelative = true;
                                            }

                                            lastdisassembledata.parametervaluetype = tdisassemblervaluetype.dvtaddress;
                                            if (is64bit)
                                                lastdisassembledata.parametervalue = (UIntPtr)(offset.ToUInt64() + (UInt64)memory.ReadInt32(2));
                                            else
                                                lastdisassembledata.parametervalue = (UIntPtr)(UInt32)(offset.ToUInt64() + (UInt64)memory.ReadInt32(2));

                                            lastdisassembledata.seperators[lastdisassembledata.seperatorcount] = 2;
                                            lastdisassembledata.seperatorcount += 1;



                                            lastdisassembledata.parameters = inttohexs(lastdisassembledata.parametervalue, 8);
                                        }
                                        break;

                                    case 0x84:
                                        {
                                            description = "jump near if equal (ZF=1)";

                                            lastdisassembledata.opcode = "je";
                                            lastdisassembledata.isjump = true;
                                            lastdisassembledata.isconditionaljump = true;
                                            //if (context != nil)
                                                //lastdisassembledata.willjumpaccordingtocontext = (context->eflags & eflags_zf) != 0;

                                            offset += 1 + 4;
                                            if (markiprelativeinstructions)
                                            {
                                                lastdisassembledata.riprelative = 2;
                                                riprelative = true;
                                            }

                                            lastdisassembledata.parametervaluetype = tdisassemblervaluetype.dvtaddress;
                                            if (is64bit)
                                                lastdisassembledata.parametervalue = (UIntPtr)(offset.ToUInt64() + (UInt64)memory.ReadInt32(2));
                                            else
                                                lastdisassembledata.parametervalue = (UIntPtr)(UInt32)(offset.ToUInt64() + (UInt64)memory.ReadInt32(2));

                                            lastdisassembledata.seperators[lastdisassembledata.seperatorcount] = 2;
                                            lastdisassembledata.seperatorcount += 1;



                                            lastdisassembledata.parameters = inttohexs(lastdisassembledata.parametervalue, 8);
                                        }
                                        break;


                                    case 0x85:
                                        {
                                            description = "jump near if not equal (ZF=0)";
                                            lastdisassembledata.opcode = "jne";
                                            lastdisassembledata.isjump = true;
                                            lastdisassembledata.isconditionaljump = true;
                                            //if (context != nil)
                                                //lastdisassembledata.willjumpaccordingtocontext = (context->eflags & eflags_zf) == 0;

                                            offset += 1 + 4;
                                            if (markiprelativeinstructions)
                                            {
                                                lastdisassembledata.riprelative = 2;
                                                riprelative = true;
                                            }

                                            lastdisassembledata.parametervaluetype = tdisassemblervaluetype.dvtaddress;
                                            if (is64bit)
                                                lastdisassembledata.parametervalue = (UIntPtr)(offset.ToUInt64() + (UInt64)memory.ReadInt32(2));
                                            else
                                                lastdisassembledata.parametervalue = (UIntPtr)(UInt32)(offset.ToUInt64() + (UInt64)memory.ReadInt32(2));

                                            lastdisassembledata.seperators[lastdisassembledata.seperatorcount] = 2;
                                            lastdisassembledata.seperatorcount += 1;



                                            lastdisassembledata.parameters = inttohexs(lastdisassembledata.parametervalue, 8);

                                        }
                                        break;

                                    case 0x86:
                                        {
                                            description = "jump near if below or equal (CF=1 or ZF=1)";
                                            lastdisassembledata.opcode = "jbe";
                                            lastdisassembledata.isjump = true;
                                            lastdisassembledata.isconditionaljump = true;
                                            //if (context != nil)
                                                //lastdisassembledata.willjumpaccordingtocontext = (context->eflags & (eflags_cf | eflags_zf)) != 0;

                                            offset += 1 + 4;
                                            if (markiprelativeinstructions)
                                            {
                                                lastdisassembledata.riprelative = 2;
                                                riprelative = true;
                                            }


                                            lastdisassembledata.parametervaluetype = tdisassemblervaluetype.dvtaddress;
                                            if (is64bit)
                                                lastdisassembledata.parametervalue = (UIntPtr)(offset.ToUInt64() + (UInt64)memory.ReadInt32(2));
                                            else
                                                lastdisassembledata.parametervalue = (UIntPtr)(UInt32)(offset.ToUInt64() + (UInt64)memory.ReadInt32(2));

                                            lastdisassembledata.seperators[lastdisassembledata.seperatorcount] = 2;
                                            lastdisassembledata.seperatorcount += 1;



                                            lastdisassembledata.parameters = inttohexs(lastdisassembledata.parametervalue, 8);
                                        }
                                        break;

                                    case 0x87:
                                        {
                                            description = "jump near if above (CF=0 and ZF=0)";
                                            lastdisassembledata.opcode = "ja";
                                            lastdisassembledata.isjump = true;
                                            lastdisassembledata.isconditionaljump = true;
                                            //if (context != nil)
                                                //lastdisassembledata.willjumpaccordingtocontext = (context->eflags & (eflags_cf | eflags_zf)) == 0;
                                            offset += 1 + 4;
                                            if (markiprelativeinstructions)
                                            {
                                                lastdisassembledata.riprelative = 2;
                                                riprelative = true;
                                            }

                                            lastdisassembledata.parametervaluetype = tdisassemblervaluetype.dvtaddress;
                                            if (is64bit)
                                                lastdisassembledata.parametervalue = (UIntPtr)(offset.ToUInt64() + (UInt64)memory.ReadInt32(2));
                                            else
                                                lastdisassembledata.parametervalue = (UIntPtr)(UInt32)(offset.ToUInt64() + (UInt64)memory.ReadInt32(2));

                                            lastdisassembledata.seperators[lastdisassembledata.seperatorcount] = 2;
                                            lastdisassembledata.seperatorcount += 1;



                                            lastdisassembledata.parameters = inttohexs(lastdisassembledata.parametervalue, 8);
                                        }
                                        break;

                                    case 0x88:
                                        {
                                            description = "jump near if sign (SF=1)";
                                            lastdisassembledata.opcode = "js";
                                            lastdisassembledata.isjump = true;
                                            lastdisassembledata.isconditionaljump = true;
                                            //if (context != nil)
                                                //lastdisassembledata.willjumpaccordingtocontext = (context->eflags & eflags_sf) != 0;

                                            offset += 1 + 4;
                                            if (markiprelativeinstructions)
                                            {
                                                lastdisassembledata.riprelative = 2;
                                                riprelative = true;
                                            }

                                            lastdisassembledata.parametervaluetype = tdisassemblervaluetype.dvtaddress;
                                            if (is64bit)
                                                lastdisassembledata.parametervalue = (UIntPtr)(offset.ToUInt64() + (UInt64)memory.ReadInt32(2));
                                            else
                                                lastdisassembledata.parametervalue = (UIntPtr)(UInt32)(offset.ToUInt64() + (UInt64)memory.ReadInt32(2));

                                            lastdisassembledata.seperators[lastdisassembledata.seperatorcount] = 2;
                                            lastdisassembledata.seperatorcount += 1;



                                            lastdisassembledata.parameters = inttohexs(lastdisassembledata.parametervalue, 8);
                                        }
                                        break;

                                    case 0x89:
                                        {
                                            description = "jump near if not sign (SF=0)";
                                            lastdisassembledata.opcode = "jns";
                                            lastdisassembledata.isjump = true;
                                            lastdisassembledata.isconditionaljump = true;
                                            //if (context != nil)
                                                //lastdisassembledata.willjumpaccordingtocontext = (context->eflags & eflags_sf) == 0;

                                            offset += 1 + 4;
                                            if (markiprelativeinstructions)
                                            {
                                                lastdisassembledata.riprelative = 2;
                                                riprelative = true;
                                            }

                                            lastdisassembledata.parametervaluetype = tdisassemblervaluetype.dvtaddress;
                                            if (is64bit)
                                                lastdisassembledata.parametervalue = (UIntPtr)(offset.ToUInt64() + (UInt64)memory.ReadInt32(2));
                                            else
                                                lastdisassembledata.parametervalue = (UIntPtr)(UInt32)(offset.ToUInt64() + (UInt64)memory.ReadInt32(2));

                                            lastdisassembledata.seperators[lastdisassembledata.seperatorcount] = 2;
                                            lastdisassembledata.seperatorcount += 1;



                                            lastdisassembledata.parameters = inttohexs(lastdisassembledata.parametervalue, 8);
                                        }
                                        break;

                                    case 0x8a:
                                        {
                                            description = "jump near if parity (PF=1)";
                                            lastdisassembledata.opcode = "jp";
                                            lastdisassembledata.isjump = true;
                                            lastdisassembledata.isconditionaljump = true;
                                            //if (context != nil)
                                                //lastdisassembledata.willjumpaccordingtocontext = (context->eflags & eflags_pf) != 0;

                                            offset += 1 + 4;
                                            if (markiprelativeinstructions)
                                            {
                                                lastdisassembledata.riprelative = 2;
                                                riprelative = true;
                                            }

                                            lastdisassembledata.parametervaluetype = tdisassemblervaluetype.dvtaddress;
                                            if (is64bit)
                                                lastdisassembledata.parametervalue = (UIntPtr)(offset.ToUInt64() + (UInt64)memory.ReadInt32(2));
                                            else
                                                lastdisassembledata.parametervalue = (UIntPtr)(UInt32)(offset.ToUInt64() + (UInt64)memory.ReadInt32(2));

                                            lastdisassembledata.seperators[lastdisassembledata.seperatorcount] = 2;
                                            lastdisassembledata.seperatorcount += 1;



                                            lastdisassembledata.parameters = inttohexs(lastdisassembledata.parametervalue, 8);
                                        }
                                        break;

                                    case 0x8b:
                                        {
                                            description = "jump near if not parity (PF=0)";
                                            lastdisassembledata.opcode = "jnp";
                                            lastdisassembledata.isjump = true;
                                            lastdisassembledata.isconditionaljump = true;
                                            //if (context != nil)
                                                //lastdisassembledata.willjumpaccordingtocontext = (context->eflags & eflags_pf) == 0;

                                            offset += 1 + 4;
                                            if (markiprelativeinstructions)
                                            {
                                                lastdisassembledata.riprelative = 2;
                                                riprelative = true;
                                            }

                                            lastdisassembledata.parametervaluetype = tdisassemblervaluetype.dvtaddress;
                                            if (is64bit)
                                                lastdisassembledata.parametervalue = (UIntPtr)(offset.ToUInt64() + (UInt64)memory.ReadInt32(2));
                                            else
                                                lastdisassembledata.parametervalue = (UIntPtr)(UInt32)(offset.ToUInt64() + (UInt64)memory.ReadInt32(2));

                                            lastdisassembledata.seperators[lastdisassembledata.seperatorcount] = 2;
                                            lastdisassembledata.seperatorcount += 1;



                                            lastdisassembledata.parameters = inttohexs(lastdisassembledata.parametervalue, 8);
                                        }
                                        break;

                                    case 0x8c:
                                        {
                                            description = "jump near if less (SF~=OF)";
                                            lastdisassembledata.opcode = "jl";
                                            lastdisassembledata.isjump = true;
                                            lastdisassembledata.isconditionaljump = true;
                                            //if (context != nil)
                                                //lastdisassembledata.willjumpaccordingtocontext = (context->eflags & eflags_sf) != (context->eflags & eflags_of);

                                            offset += 1 + 4;
                                            if (markiprelativeinstructions)
                                            {
                                                lastdisassembledata.riprelative = 2;
                                                riprelative = true;
                                            }

                                            lastdisassembledata.parametervaluetype = tdisassemblervaluetype.dvtaddress;
                                            if (is64bit)
                                                lastdisassembledata.parametervalue = (UIntPtr)(offset.ToUInt64() + (UInt64)memory.ReadInt32(2));
                                            else
                                                lastdisassembledata.parametervalue = (UIntPtr)(UInt32)(offset.ToUInt64() + (UInt64)memory.ReadInt32(2));

                                            lastdisassembledata.seperators[lastdisassembledata.seperatorcount] = 2;
                                            lastdisassembledata.seperatorcount += 1;



                                            lastdisassembledata.parameters = inttohexs(lastdisassembledata.parametervalue, 8);
                                        }
                                        break;

                                    case 0x8d:
                                        {
                                            description = "jump near if not less (SF=OF)";
                                            lastdisassembledata.opcode = "jnl";
                                            lastdisassembledata.isjump = true;
                                            lastdisassembledata.isconditionaljump = true;
                                            //if (context != nil)
                                                //lastdisassembledata.willjumpaccordingtocontext = (context->eflags & eflags_sf) == (context->eflags & eflags_of);

                                            offset += 1 + 4;
                                            if (markiprelativeinstructions)
                                            {
                                                lastdisassembledata.riprelative = 2;
                                                riprelative = true;
                                            }

                                            lastdisassembledata.parametervaluetype = tdisassemblervaluetype.dvtaddress;
                                            if (is64bit)
                                                lastdisassembledata.parametervalue = (UIntPtr)(offset.ToUInt64() + (UInt64)memory.ReadInt32(2));
                                            else
                                                lastdisassembledata.parametervalue = (UIntPtr)(UInt32)(offset.ToUInt64() + (UInt64)memory.ReadInt32(2));

                                            lastdisassembledata.seperators[lastdisassembledata.seperatorcount] = 2;
                                            lastdisassembledata.seperatorcount += 1;



                                            lastdisassembledata.parameters = inttohexs(lastdisassembledata.parametervalue, 8);
                                        }
                                        break;

                                    case 0x8e:
                                        {
                                            description = "jump near if not greater (ZF=1 or SF~=OF)";
                                            lastdisassembledata.opcode = "jng";
                                            lastdisassembledata.isjump = true;
                                            lastdisassembledata.isconditionaljump = true;
                                            //if (context != nil)
                                                //lastdisassembledata.willjumpaccordingtocontext = ((context->eflags & eflags_sf) != (context->eflags & eflags_of)) || ((context->eflags & eflags_zf) != 0);


                                            offset += 1 + 4;
                                            if (markiprelativeinstructions)
                                            {
                                                lastdisassembledata.riprelative = 2;
                                                riprelative = true;
                                            }

                                            lastdisassembledata.parametervaluetype = tdisassemblervaluetype.dvtaddress;
                                            if (is64bit)
                                                lastdisassembledata.parametervalue = (UIntPtr)(offset.ToUInt64() + (UInt64)memory.ReadInt32(2));
                                            else
                                                lastdisassembledata.parametervalue = (UIntPtr)(UInt32)(offset.ToUInt64() + (UInt64)memory.ReadInt32(2));

                                            lastdisassembledata.seperators[lastdisassembledata.seperatorcount] = 2;
                                            lastdisassembledata.seperatorcount += 1;



                                            lastdisassembledata.parameters = inttohexs(lastdisassembledata.parametervalue, 8);
                                        }
                                        break;

                                    case 0x8f:
                                        {
                                            description = "jump near if greater (ZF=0 and SF=OF)";
                                            lastdisassembledata.opcode = "jg";
                                            lastdisassembledata.isjump = true;
                                            lastdisassembledata.isconditionaljump = true;
                                            //if (context != nil)
                                                //lastdisassembledata.willjumpaccordingtocontext = ((context->eflags & eflags_sf) == (context->eflags & eflags_of)) && ((context->eflags & eflags_zf) == 0);


                                            offset += 1 + 4;
                                            if (markiprelativeinstructions)
                                            {
                                                lastdisassembledata.riprelative = 2;
                                                riprelative = true;
                                            }

                                            lastdisassembledata.parametervaluetype = tdisassemblervaluetype.dvtaddress;
                                            if (is64bit)
                                                lastdisassembledata.parametervalue = (UIntPtr)(offset.ToUInt64() + (UInt64)memory.ReadInt32(2));
                                            else
                                                lastdisassembledata.parametervalue = (UIntPtr)(UInt32)(offset.ToUInt64() + (UInt64)memory.ReadInt32(2));

                                            lastdisassembledata.seperators[lastdisassembledata.seperatorcount] = 2;
                                            lastdisassembledata.seperatorcount += 1;



                                            lastdisassembledata.parameters = inttohexs(lastdisassembledata.parametervalue, 8);
                                        }
                                        break;

                                    case 0x90:
                                        {
                                            description = "set byte if overflow";
                                            lastdisassembledata.opcode = "seto";
                                            lastdisassembledata.parameters = modrm(memory, prefix2, 2, 2, ref last, 8);

                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                        }
                                        break;

                                    case 0x91:
                                        {
                                            description = "set byte if not overfloww";
                                            lastdisassembledata.opcode = "setno";
                                            lastdisassembledata.parameters = modrm(memory, prefix2, 2, 2, ref last, 8);

                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                        }
                                        break;

                                    case 0x92:
                                        {
                                            description = "set byte if below/carry";
                                            lastdisassembledata.opcode = "setb";
                                            lastdisassembledata.parameters = modrm(memory, prefix2, 2, 2, ref last, 8);

                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                        }
                                        break;

                                    case 0x93:
                                        {
                                            description = "set byte if above or equal";
                                            lastdisassembledata.opcode = "setae";
                                            lastdisassembledata.parameters = modrm(memory, prefix2, 2, 2, ref last, 8);

                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                        }
                                        break;

                                    case 0x94:
                                        {
                                            description = "set byte if equal";
                                            lastdisassembledata.opcode = "sete";
                                            lastdisassembledata.parameters = modrm(memory, prefix2, 2, 2, ref last, 8);

                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                        }
                                        break;

                                    case 0x95:
                                        {
                                            description = "set byte if not equal";
                                            lastdisassembledata.opcode = "setne";
                                            lastdisassembledata.parameters = modrm(memory, prefix2, 2, 2, ref last, 8);

                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                        }
                                        break;

                                    case 0x96:
                                        {
                                            description = "set byte if below or equal";
                                            lastdisassembledata.opcode = "setbe";
                                            lastdisassembledata.parameters = modrm(memory, prefix2, 2, 2, ref last, 8);

                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                        }
                                        break;

                                    case 0x97:
                                        {
                                            description = "set byte if above";
                                            lastdisassembledata.opcode = "seta";
                                            lastdisassembledata.parameters = modrm(memory, prefix2, 2, 2, ref last, 8);

                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                        }
                                        break;

                                    case 0x98:
                                        {
                                            description = "set byte if sign";
                                            lastdisassembledata.opcode = "sets";
                                            lastdisassembledata.parameters = modrm(memory, prefix2, 2, 2, ref last, 8);

                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                        }
                                        break;

                                    case 0x99:
                                        {
                                            description = "set byte if not sign";
                                            lastdisassembledata.opcode = "setns";
                                            lastdisassembledata.parameters = modrm(memory, prefix2, 2, 2, ref last, 8);

                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                        }
                                        break;

                                    case 0x9a:
                                        {
                                            description = "set byte if parity";
                                            lastdisassembledata.opcode = "setp";
                                            lastdisassembledata.parameters = modrm(memory, prefix2, 2, 2, ref last, 8);

                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                        }
                                        break;

                                    case 0x9b:
                                        {
                                            description = "set byte if not parity";
                                            lastdisassembledata.opcode = "setnp";
                                            lastdisassembledata.parameters = modrm(memory, prefix2, 2, 2, ref last, 8);

                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                        }
                                        break;

                                    case 0x9c:
                                        {
                                            description = "set byte if less";
                                            lastdisassembledata.opcode = "setl";
                                            lastdisassembledata.parameters = modrm(memory, prefix2, 2, 2, ref last, 8);

                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                        }
                                        break;

                                    case 0x9d:
                                        {
                                            description = "set byte if greater or equal";
                                            lastdisassembledata.opcode = "setge";
                                            lastdisassembledata.parameters = modrm(memory, prefix2, 2, 2, ref last, 8);
                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());

                                        }
                                        break;

                                    case 0x9e:
                                        {
                                            description = "set byte if less or equal";
                                            lastdisassembledata.opcode = "setle";
                                            lastdisassembledata.parameters = modrm(memory, prefix2, 2, 2, ref last, 8);
                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());

                                        }
                                        break;

                                    case 0x9f:
                                        {
                                            description = "set byte if greater";
                                            lastdisassembledata.opcode = "setg";
                                            lastdisassembledata.parameters = modrm(memory, prefix2, 2, 2, ref last, 8);
                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());


                                        }
                                        break;

                                    case 0xa0:
                                        {
                                            description = "push word or doubleword onto the stack";
                                            lastdisassembledata.opcode = "push";
                                            lastdisassembledata.parameters = "fs";
                                            offset += 1;
                                        }
                                        break;

                                    case 0xa1:
                                        {
                                            description = "pop a value from the stack";
                                            lastdisassembledata.opcode = "pop";
                                            lastdisassembledata.parameters = "fs";
                                            offset += 1;
                                        }
                                        break;


                                    case 0xa2:
                                        {
                                            description = "cpu identification";
                                            lastdisassembledata.opcode = "cpuid";
                                            offset += 1;
                                        }
                                        break;

                                    case 0xa3:
                                        {
                                            description = "bit test";
                                            lastdisassembledata.opcode = "bt";
                                            if (prefix2.Contains(0x66))
                                                lastdisassembledata.parameters = modrm(memory, prefix2, 2, 1, ref last) + r16(memory[2]);
                                            else
                                                lastdisassembledata.parameters = modrm(memory, prefix2, 2, 0, ref last) + r32(memory[2]);

                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                        }
                                        break;

                                    case 0xa4:
                                        {
                                            description = "double precision shift left";
                                            lastdisassembledata.opcode = "shld";
                                            if (prefix2.Contains(0x66))
                                                lastdisassembledata.parameters = modrm(memory, prefix2, 2, 1, ref last) + r16(memory[2]);
                                            else
                                                lastdisassembledata.parameters = modrm(memory, prefix2, 2, 0, ref last) + r32(memory[2]);

                                            lastdisassembledata.parameters = lastdisassembledata.parameters + ',' + AStringUtils.IntToHex(memory[(int)last], 2);
                                            last += 1;
                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());

                                        }
                                        break;

                                    case 0xa5:
                                        {
                                            description = "double precision shift left";
                                            lastdisassembledata.opcode = "shld";
                                            if (prefix2.Contains(0x66))
                                                lastdisassembledata.parameters = modrm(memory, prefix2, 2, 1, ref last) + r16(memory[2]) + ',' + colorreg + "cl" + endcolor;
                                            else
                                                lastdisassembledata.parameters = modrm(memory, prefix2, 2, 0, ref last) + r32(memory[2]) + ',' + colorreg + "cl" + endcolor;
                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());

                                        }
                                        break;

                                    case 0xa8:
                                        {
                                            description = "push word or doubleword onto the stack";
                                            lastdisassembledata.opcode = "push";
                                            lastdisassembledata.parameters = "gs";
                                            offset += 1;
                                        }
                                        break;

                                    case 0xa9:
                                        {
                                            description = "pop a value from the stack";
                                            lastdisassembledata.opcode = "pop";
                                            lastdisassembledata.parameters = "gs";
                                            offset += 1;
                                        }
                                        break;

                                    case 0xaa:
                                        {
                                            description = "resume from system management mode";
                                            lastdisassembledata.opcode = "rsm";
                                            offset += 1;
                                        }
                                        break;

                                    case 0xab:
                                        {
                                            description = "bit test and set";
                                            lastdisassembledata.opcode = "bts";
                                            if (prefix2.Contains(0x66))
                                                lastdisassembledata.parameters = modrm(memory, prefix2, 2, 1, ref last) + r16(memory[2]);
                                            else
                                                lastdisassembledata.parameters = modrm(memory, prefix2, 2, 0, ref last) + r32(memory[2]);
                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());

                                        }
                                        break;

                                    case 0xac:
                                        {
                                            description = "double precision shift right";
                                            lastdisassembledata.opcode = "shrd";
                                            if (prefix2.Contains(0x66))
                                                lastdisassembledata.parameters = modrm(memory, prefix2, 2, 1, ref last) + r16(memory[2]);
                                            else
                                                lastdisassembledata.parameters = modrm(memory, prefix2, 2, 0, ref last) + r32(memory[2]);

                                            lastdisassembledata.parameters = lastdisassembledata.parameters + ',' + AStringUtils.IntToHex(memory[(int)last], 2);
                                            last += 1;
                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                        }
                                        break;

                                    case 0xad:
                                        {
                                            description = "double precision shift right";
                                            lastdisassembledata.opcode = "shrd";
                                            if (prefix2.Contains(0x66))
                                                lastdisassembledata.parameters = modrm(memory, prefix2, 2, 1, ref last) + r16(memory[2]) + ',' + colorreg + "cl" + endcolor;
                                            else
                                                lastdisassembledata.parameters = modrm(memory, prefix2, 2, 0, ref last) + r32(memory[2]) + ',' + colorreg + "cl" + endcolor;
                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());

                                        }
                                        break;

                                    case 0xae:
                                        {
                                            switch (memory[2])
                                            {
                                                case 0xf0:
                                                    {
                                                        description = "memory fence";
                                                        lastdisassembledata.opcode = "mfence";
                                                        offset += 1;
                                                    }
                                                    break;

                                                case 0xf8:
                                                    {
                                                        description = "store fence";
                                                        lastdisassembledata.opcode = "sfence";
                                                        offset += 1;
                                                    }
                                                    break;

                                                default:
                                                    switch (getreg(memory[2]))
                                                    {
                                                        case 0:
                                                            {
                                                                if (prefix2.Contains(0xf3))
                                                                {
                                                                    description = "read fs base address";
                                                                    lastdisassembledata.opcode = "rdfsbase";
                                                                    lastdisassembledata.parameters = modrm(memory, prefix2, 2, 0, ref last);
                                                                    offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                                }
                                                                else
                                                                {
                                                                    description = "store fp and mmx state and streaming simd extension state";
                                                                    lastdisassembledata.opcode = "fxsave";
                                                                    lastdisassembledata.parameters = modrm(memory, prefix2, 2, 0, ref last);
                                                                    offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                                }
                                                            }
                                                            break;

                                                        case 1:
                                                            {
                                                                if (prefix2.Contains(0xf3))
                                                                {
                                                                    description = "read gs base address";
                                                                    lastdisassembledata.opcode = "rdgsbase";
                                                                    lastdisassembledata.parameters = modrm(memory, prefix2, 2, 0, ref last);
                                                                    offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                                }
                                                                else
                                                                {
                                                                    description = "restore fp and mmx state and streaming simd extension state";
                                                                    lastdisassembledata.opcode = "fxrstor";
                                                                    lastdisassembledata.parameters = modrm(memory, prefix2, 2, 0, ref last);
                                                                    offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                                }
                                                            }
                                                            break;

                                                        case 2:
                                                            {
                                                                if (prefix2.Contains(0xf3))
                                                                {
                                                                    description = "write fs base address";
                                                                    lastdisassembledata.opcode = "wrfsbase";
                                                                    lastdisassembledata.parameters = modrm(memory, prefix2, 2, 0, ref last);
                                                                    offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                                }
                                                                else
                                                                {
                                                                    description = "load streaming simd extension control/status";
                                                                    if (hasvex)
                                                                        lastdisassembledata.opcode = "vldmxcsr";
                                                                    else
                                                                        lastdisassembledata.opcode = "ldmxcsr";
                                                                    lastdisassembledata.parameters = modrm(memory, prefix2, 2, 0, ref last);
                                                                    offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                                }
                                                            }
                                                            break;

                                                        case 3:
                                                            {
                                                                if (prefix2.Contains(0xf3))
                                                                {
                                                                    description = "write gs base address";
                                                                    lastdisassembledata.opcode = "wrgsbase";
                                                                    lastdisassembledata.parameters = modrm(memory, prefix2, 2, 0, ref last);
                                                                    offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                                }
                                                                else
                                                                {
                                                                    description = "store streaming simd extension control/status";
                                                                    if (hasvex)
                                                                        lastdisassembledata.opcode = "stmxcsr";
                                                                    else
                                                                        lastdisassembledata.opcode = "stmxcsr";

                                                                    opcodeflags.skipextrareg = true;
                                                                    lastdisassembledata.parameters = modrm(memory, prefix2, 2, 0, ref last);
                                                                    offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                                }
                                                            }
                                                            break;

                                                        case 4:
                                                            {
                                                                description = "save processor extended state";
                                                                if (rex_w)
                                                                    lastdisassembledata.opcode = "xsave64";
                                                                else
                                                                    lastdisassembledata.opcode = "xsave";
                                                                lastdisassembledata.parameters = modrm(memory, prefix2, 2, 0, ref last);
                                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                            }
                                                            break;

                                                        case 5:
                                                            {
                                                                if (getmod(memory[2]) == 3)
                                                                {
                                                                    description = "Load Fence";
                                                                    lastdisassembledata.opcode = "lfence";
                                                                    offset += 2;
                                                                }
                                                                else
                                                                {
                                                                    description = "restore processor extended state";
                                                                    if (rex_w)
                                                                        lastdisassembledata.opcode = "xrstor64";
                                                                    else
                                                                        lastdisassembledata.opcode = "xrstor";
                                                                    lastdisassembledata.parameters = modrm(memory, prefix2, 2, 0, ref last);
                                                                    offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                                }
                                                            }
                                                            break;

                                                        case 6:
                                                            {
                                                                description = "save processor extended status optimized";
                                                                if (rex_w)
                                                                    lastdisassembledata.opcode = "xsaveopt64";
                                                                else
                                                                    lastdisassembledata.opcode = "xsaveopt";
                                                                lastdisassembledata.parameters = modrm(memory, prefix2, 2, 0, ref last);
                                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                            }
                                                            break;

                                                        case 7:
                                                            {
                                                                ;

                                                            }
                                                            break;

                                                    }
                                                    break;

                                            }



                                        }
                                        break;

                                    case 0xaf:
                                        {
                                            description = "signed multiply";
                                            lastdisassembledata.opcode = "imul";
                                            if (prefix2.Contains(0x66))
                                                lastdisassembledata.parameters = r16(memory[2]) + modrm(memory, prefix2, 2, 1, ref last, tmrpos.mright);
                                            else
                                                lastdisassembledata.parameters = r32(memory[2]) + modrm(memory, prefix2, 2, 0, ref last, tmrpos.mright);

                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                        }
                                        break;

                                    case 0xb0:
                                        {
                                            description = "compare and exchange";
                                            lastdisassembledata.opcode = "cmpxchg";
                                            lastdisassembledata.parameters = modrm(memory, prefix2, 2, 2, ref last) + r8(memory[2]);
                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                        }
                                        break;

                                    case 0xb1:
                                        {
                                            description = "compare and exchange";
                                            lastdisassembledata.opcode = "cmpxchg";
                                            if (prefix2.Contains(0x66))
                                                lastdisassembledata.parameters = modrm(memory, prefix2, 2, 1, ref last) + r16(memory[2]);
                                            else
                                                lastdisassembledata.parameters = modrm(memory, prefix2, 2, 0, ref last) + r32(memory[2]);
                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                        }
                                        break;

                                    case 0xb2:
                                        {
                                            description = "load far pointer";
                                            lastdisassembledata.opcode = "lss";
                                            if (prefix2.Contains(0x66))
                                                lastdisassembledata.parameters = r16(memory[2]) + modrm(memory, prefix2, 2, 1, ref last, tmrpos.mright);
                                            else
                                                lastdisassembledata.parameters = r32(memory[2]) + modrm(memory, prefix2, 2, 0, ref last, tmrpos.mright);

                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                        }
                                        break;

                                    case 0xb3:
                                        {
                                            description = "bit test and reset";
                                            lastdisassembledata.opcode = "btr";
                                            if (prefix2.Contains(0x66))
                                                lastdisassembledata.parameters = modrm(memory, prefix2, 2, 1, ref last) + r16(memory[2]);
                                            else
                                                lastdisassembledata.parameters = modrm(memory, prefix2, 2, 0, ref last) + r32(memory[2]);
                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());

                                        }
                                        break;

                                    case 0xb4:
                                        {
                                            description = "load far pointer";
                                            lastdisassembledata.opcode = "lfs";
                                            if (prefix2.Contains(0x66))
                                                lastdisassembledata.parameters = r16(memory[2]) + modrm(memory, prefix2, 2, 1, ref last, tmrpos.mright);
                                            else
                                                lastdisassembledata.parameters = r32(memory[2]) + modrm(memory, prefix2, 2, 0, ref last, tmrpos.mright);

                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                        }
                                        break;

                                    case 0xb5:
                                        {
                                            description = "load far pointer";
                                            lastdisassembledata.opcode = "lgs";
                                            if (prefix2.Contains(0x66))
                                                lastdisassembledata.parameters = r16(memory[2]) + modrm(memory, prefix2, 2, 1, ref last, tmrpos.mright);
                                            else
                                                lastdisassembledata.parameters = r32(memory[2]) + modrm(memory, prefix2, 2, 0, ref last, tmrpos.mright);

                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                        }
                                        break;

                                    case 0xb6:
                                        {
                                            description = "Move with zero-extend";
                                            lastdisassembledata.opcode = "movzx";
                                            if (prefix2.Contains(0x66))
                                                lastdisassembledata.parameters = r16(memory[2]) + modrm(memory, prefix2, 2, 2, ref last, 8, 0, tmrpos.mright);
                                            else
                                                lastdisassembledata.parameters = r32(memory[2]) + modrm(memory, prefix2, 2, 2, ref last, 8, 0, tmrpos.mright);


                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                        }
                                        break;

                                    case 0xb7:
                                        {
                                            description = "Move with zero-extend";
                                            lastdisassembledata.opcode = "movzx";
                                            if (prefix2.Contains(0x66))
                                                lastdisassembledata.parameters = r16(memory[2]) + modrm(memory, prefix2, 2, 1, ref last, 16, 0, tmrpos.mright);
                                            else
                                                lastdisassembledata.parameters = r32(memory[2]) + modrm(memory, prefix2, 2, 1, ref last, 16, 0, tmrpos.mright);


                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                        }
                                        break;

                                    case 0xb8:
                                        {
                                            if (prefix2.Contains(0xf3))
                                            {
                                                description = "Return the Count of Number of Bits Set to 1";
                                                lastdisassembledata.opcode = "popcnt";
                                                if (prefix2.Contains(0x66))
                                                    lastdisassembledata.parameters = r16(memory[2]) + modrm(memory, prefix2, 2, 1, ref last, tmrpos.mright);
                                                else
                                                    lastdisassembledata.parameters = r32(memory[2]) + modrm(memory, prefix2, 2, 1, ref last, tmrpos.mright);

                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                        }
                                        break;


                                    case 0xba:
                                        {
                                            lastdisassembledata.parametervaluetype = tdisassemblervaluetype.dvtvalue;


                                            switch (getreg(memory[2]))
                                            {
                                                case 4:
                                                    {
                                                        //bt
                                                        description = "bit test";
                                                        lastdisassembledata.opcode = "bt";
                                                        if (prefix2.Contains(0x66))
                                                            lastdisassembledata.parameters = modrm(memory, prefix2, 2, 1, ref last);
                                                        else
                                                            lastdisassembledata.parameters = modrm(memory, prefix2, 2, 0, ref last);     //notice the difference in the modrm 4th parameter

                                                        lastdisassembledata.parametervalue = (UIntPtr)memory[(int)last];
                                                        lastdisassembledata.parameters = lastdisassembledata.parameters + inttohexs((UIntPtr)memory[(int)last], 2);

                                                        offset = (UIntPtr)(offset.ToUInt64() + last - 1 + 1);
                                                    }
                                                    break;

                                                case 5:
                                                    {
                                                        //bts
                                                        description = "bit test and set";
                                                        lastdisassembledata.opcode = "bts";
                                                        if (prefix2.Contains(0x66))
                                                            lastdisassembledata.parameters = modrm(memory, prefix2, 2, 1, ref last);
                                                        else
                                                            lastdisassembledata.parameters = modrm(memory, prefix2, 2, 0, ref last);     //notice the difference in the modrm 4th parameter

                                                        lastdisassembledata.parametervalue = (UIntPtr)memory[(int)last];
                                                        lastdisassembledata.parameters = lastdisassembledata.parameters + inttohexs((UIntPtr)memory[(int)last], 2);
                                                        offset = (UIntPtr)(offset.ToUInt64() + last - 1 + 1);
                                                    }
                                                    break;

                                                case 6:
                                                    {
                                                        //btr
                                                        description = "bit test and reset";
                                                        lastdisassembledata.opcode = "btr";
                                                        if (prefix2.Contains(0x66))
                                                            lastdisassembledata.parameters = modrm(memory, prefix2, 2, 1, ref last);
                                                        else
                                                            lastdisassembledata.parameters = modrm(memory, prefix2, 2, 0, ref last);     //notice the difference in the modrm 4th parameter

                                                        lastdisassembledata.parametervalue = (UIntPtr)memory[(int)last];
                                                        lastdisassembledata.parameters = lastdisassembledata.parameters + inttohexs((UIntPtr)memory[(int)last], 2);

                                                        offset = (UIntPtr)(offset.ToUInt64() + last - 1 + 1);
                                                    }
                                                    break;

                                                case 7:
                                                    {
                                                        //btc
                                                        description = "bit test and complement";
                                                        lastdisassembledata.opcode = "btc";
                                                        if (prefix2.Contains(0x66))
                                                            lastdisassembledata.parameters = modrm(memory, prefix2, 2, 1, ref last);
                                                        else
                                                            lastdisassembledata.parameters = modrm(memory, prefix2, 2, 0, ref last);     //notice the difference in the modrm 4th parameter

                                                        lastdisassembledata.parametervalue = (UIntPtr)memory[(int)last];
                                                        lastdisassembledata.parameters = lastdisassembledata.parameters + inttohexs((UIntPtr)memory[(int)last], 2);

                                                        offset = (UIntPtr)(offset.ToUInt64() + last - 1 + 1);
                                                    }
                                                    break;

                                            }

                                        }
                                        break;

                                    case 0xbb:
                                        {
                                            description = "bit test and complement";
                                            lastdisassembledata.opcode = "btc";
                                            if (prefix2.Contains(0x66))
                                                lastdisassembledata.parameters = modrm(memory, prefix2, 2, 1, ref last) + r16(memory[2]);
                                            else
                                                lastdisassembledata.parameters = modrm(memory, prefix2, 2, 0, ref last) + r32(memory[2]);
                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());

                                        }
                                        break;


                                    case 0xbc:
                                        {
                                            if (prefix2.Contains(0xf3))
                                            {
                                                description = "count the number of trailing zero bits";
                                                lastdisassembledata.opcode = "tzcnt";
                                                if (prefix2.Contains(0x66))
                                                    lastdisassembledata.parameters = r16(memory[2]) + modrm(memory, prefix2, 2, 1, ref last, tmrpos.mright);
                                                else
                                                    lastdisassembledata.parameters = r32(memory[2]) + modrm(memory, prefix2, 2, 0, ref last, tmrpos.mright);

                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                            else
                                            {
                                                //bsf
                                                description = "bit scan forward";
                                                lastdisassembledata.opcode = "bsf";
                                                if (prefix2.Contains(0x66))
                                                    lastdisassembledata.parameters = r16(memory[2]) + modrm(memory, prefix2, 2, 1, ref last, tmrpos.mright);
                                                else
                                                    lastdisassembledata.parameters = r32(memory[2]) + modrm(memory, prefix2, 2, 0, ref last, tmrpos.mright);


                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                        }
                                        break;

                                    case 0xbd:
                                        {
                                            if (prefix2.Contains(0xf3))
                                            {
                                                description = "count the number of leading zero bits";
                                                lastdisassembledata.opcode = "lzcnt";
                                                if (prefix2.Contains(0x66))
                                                    lastdisassembledata.parameters = r16(memory[2]) + modrm(memory, prefix2, 2, 1, ref last, tmrpos.mright);
                                                else
                                                    lastdisassembledata.parameters = r32(memory[2]) + modrm(memory, prefix2, 2, 0, ref last, tmrpos.mright);

                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                            else
                                            {
                                                //bsf
                                                description = "bit scan reverse";
                                                lastdisassembledata.opcode = "bsr";
                                                if (prefix2.Contains(0x66))
                                                    lastdisassembledata.parameters = r16(memory[2]) + modrm(memory, prefix2, 2, 1, ref last, tmrpos.mright);
                                                else
                                                    lastdisassembledata.parameters = r32(memory[2]) + modrm(memory, prefix2, 2, 0, ref last, tmrpos.mright);


                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                        }
                                        break;

                                    case 0xbe:
                                        {
                                            description = "move with sign-extension";
                                            lastdisassembledata.opcode = "movsx";
                                            if (prefix2.Contains(0x66))
                                                lastdisassembledata.parameters = r16(memory[2]) + modrm(memory, prefix2, 2, 2, ref last, 8, 0, tmrpos.mright);
                                            else
                                                lastdisassembledata.parameters = r32(memory[2]) + modrm(memory, prefix2, 2, 2, ref last, 8, 0, tmrpos.mright);



                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                        }
                                        break;

                                    case 0xbf:
                                        {
                                            description = "move with sign-extension";
                                            lastdisassembledata.opcode = "movsx";
                                            lastdisassembledata.parameters = r32(memory[2]) + modrm(memory, prefix2, 2, 1, ref last, 16, 0, tmrpos.mright);

                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                        }
                                        break;

                                    case 0xc0:
                                        {
                                            description = "exchange and add";
                                            lastdisassembledata.opcode = "xadd";
                                            lastdisassembledata.parameters = modrm(memory, prefix2, 2, 2, ref last) + r8(memory[2]);
                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                        }
                                        break;

                                    case 0xc1:
                                        {
                                            description = "exchange and add";
                                            lastdisassembledata.opcode = "xadd";
                                            if (prefix2.Contains(0x66))
                                                lastdisassembledata.parameters = modrm(memory, prefix2, 2, 1, ref last) + r16(memory[2]);
                                            else

                                                lastdisassembledata.parameters = modrm(memory, prefix2, 2, 0, ref last) + r32(memory[2]);
                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                        }
                                        break;

                                    case 0xc2:
                                        {
                                            lastdisassembledata.isfloat = true;
                                            if (prefix2.Contains(0xf2))
                                            {

                                                description = "compare scalar dpuble-precision floating-point values";
                                                if (hasvex)
                                                    lastdisassembledata.opcode = "vcmpsd";
                                                else
                                                    lastdisassembledata.opcode = "cmpsd";
                                                lastdisassembledata.parameters = xmm(memory[2]) + modrm(memory, prefix2, 2, 4, ref last, 128, 0, tmrpos.mright);

                                                lastdisassembledata.parametervaluetype = tdisassemblervaluetype.dvtvalue;
                                                lastdisassembledata.parametervalue = (UIntPtr)memory[(int)last];
                                                lastdisassembledata.parameters = lastdisassembledata.parameters + ',' + inttohexs(lastdisassembledata.parametervalue, 2);
                                                offset = (UIntPtr)(offset.ToUInt64() + last);
                                            }
                                            else
                                            if (prefix2.Contains(0xf3))
                                            {
                                                description = "packed single-fp compare";
                                                if (hasvex)
                                                    lastdisassembledata.opcode = "vcmpss";
                                                else
                                                    lastdisassembledata.opcode = "cmpss";
                                                lastdisassembledata.parameters = xmm(memory[2]) + modrm(memory, prefix2, 2, 4, ref last, 128, 0, tmrpos.mright);
                                                lastdisassembledata.parametervaluetype = tdisassemblervaluetype.dvtvalue;
                                                lastdisassembledata.parametervalue = (UIntPtr)memory[(int)last];
                                                lastdisassembledata.parameters = lastdisassembledata.parameters + ',' + inttohexs(lastdisassembledata.parametervalue, 2);
                                                lastdisassembledata.datasize = 4;
                                                offset = (UIntPtr)(offset.ToUInt64() + last);
                                            }
                                            else
                                            {
                                                if (prefix2.Contains(0x66))
                                                {
                                                    description = "compare packed double-precision floating-point values";
                                                    if (hasvex)
                                                        lastdisassembledata.opcode = "vcmppd";
                                                    else
                                                        lastdisassembledata.opcode = "cmppd";
                                                    lastdisassembledata.parameters = xmm(memory[2]) + modrm(memory, prefix2, 2, 4, ref last, 128, 0, tmrpos.mright);
                                                    lastdisassembledata.parametervaluetype = tdisassemblervaluetype.dvtvalue;
                                                    lastdisassembledata.parametervalue = (UIntPtr)memory[(int)last];
                                                    lastdisassembledata.parameters = lastdisassembledata.parameters + ',' + inttohexs(lastdisassembledata.parametervalue, 2);
                                                    offset = (UIntPtr)(offset.ToUInt64() + last);
                                                }
                                                else
                                                {
                                                    description = "packed single-fp compare";
                                                    if (hasvex)
                                                        lastdisassembledata.opcode = "vcmpps";
                                                    else
                                                        lastdisassembledata.opcode = "cmpps";
                                                    lastdisassembledata.parameters = xmm(memory[2]) + modrm(memory, prefix2, 2, 4, ref last, 128, 0, tmrpos.mright);
                                                    lastdisassembledata.parametervaluetype = tdisassemblervaluetype.dvtvalue;
                                                    lastdisassembledata.parametervalue = (UIntPtr)memory[(int)last];
                                                    lastdisassembledata.parameters = lastdisassembledata.parameters + ',' + inttohexs(lastdisassembledata.parametervalue, 2);
                                                    lastdisassembledata.datasize = 4;
                                                    offset = (UIntPtr)(offset.ToUInt64() + last);
                                                }
                                            }
                                        }
                                        break;

                                    case 0xc3:
                                        {
                                            description = "store doubleword using non-temporal hint";
                                            lastdisassembledata.opcode = "movnti";
                                            lastdisassembledata.parameters = modrm(memory, prefix2, 2, 0, ref last) + r32(memory[2]);
                                            offset = (UIntPtr)(offset.ToUInt64() + last);
                                        }
                                        break;

                                    case 0xc4:
                                        {
                                            if (prefix2.Contains(0x66))
                                            {
                                                description = "insert word";
                                                if (hasvex)
                                                    lastdisassembledata.opcode = "vpinsrw";
                                                else
                                                    lastdisassembledata.opcode = "pinsrw";

                                                lastdisassembledata.parameters = xmm(memory[2]) + modrm(memory, prefix2, 2, 0, ref last, tmrpos.mright);
                                                lastdisassembledata.parametervaluetype = tdisassemblervaluetype.dvtvalue;
                                                lastdisassembledata.parametervalue = (UIntPtr)memory[(int)last];
                                                lastdisassembledata.parameters = lastdisassembledata.parameters + inttohexs(lastdisassembledata.parametervalue, 2);
                                                offset = (UIntPtr)(offset.ToUInt64() + last);
                                            }
                                            else
                                            {
                                                description = "insert word";
                                                lastdisassembledata.opcode = "pinsrw";
                                                lastdisassembledata.parameters = mm(memory[2]) + modrm(memory, prefix2, 2, 0, ref last, tmrpos.mright);
                                                lastdisassembledata.parametervaluetype = tdisassemblervaluetype.dvtvalue;
                                                lastdisassembledata.parametervalue = (UIntPtr)memory[(int)last];
                                                lastdisassembledata.parameters = lastdisassembledata.parameters + inttohexs(lastdisassembledata.parametervalue, 2);
                                                offset = (UIntPtr)(offset.ToUInt64() + last);
                                            }
                                        }
                                        break;

                                    case 0xc5:
                                        {
                                            if (prefix2.Contains(0x66))
                                            {
                                                description = "extract word";
                                                lastdisassembledata.opcode = "pextrw";
                                                lastdisassembledata.parameters = r32(memory[2]) + modrm(memory, prefix2, 2, 4, ref last);
                                                lastdisassembledata.parametervaluetype = tdisassemblervaluetype.dvtvalue;
                                                lastdisassembledata.parametervalue = (UIntPtr)memory[(int)last];
                                                lastdisassembledata.parameters = lastdisassembledata.parameters + inttohexs(lastdisassembledata.parametervalue, 2);
                                                offset += 3;
                                            }
                                            else
                                            {
                                                description = "extract word";
                                                lastdisassembledata.opcode = "pextrw";
                                                lastdisassembledata.parameters = r32(memory[2]) + modrm(memory, prefix2, 2, 3, ref last, tmrpos.mright);
                                                lastdisassembledata.parametervaluetype = tdisassemblervaluetype.dvtvalue;
                                                lastdisassembledata.parametervalue = (UIntPtr)memory[(int)last];
                                                lastdisassembledata.parameters = lastdisassembledata.parameters + inttohexs(lastdisassembledata.parametervalue, 2);
                                                offset += 3;
                                            }
                                        }
                                        break;

                                    case 0xc6:
                                        {
                                            lastdisassembledata.isfloat = true;
                                            if (prefix2.Contains(0x66))
                                            {
                                                description = "shuffle double-fp";
                                                if (hasvex)
                                                    lastdisassembledata.opcode = "vshufpd";
                                                else
                                                    lastdisassembledata.opcode = "shufpd";
                                                lastdisassembledata.parameters = xmm(memory[2]) + modrm(memory, prefix2, 2, 4, ref last, tmrpos.mright);
                                                lastdisassembledata.parametervaluetype = tdisassemblervaluetype.dvtvalue;
                                                lastdisassembledata.parametervalue = (UIntPtr)memory[(int)last];
                                                lastdisassembledata.parameters = lastdisassembledata.parameters + ',' + inttohexs(lastdisassembledata.parametervalue, 2);
                                                offset = (UIntPtr)(offset.ToUInt64() + last);
                                            }
                                            else
                                            {
                                                description = "shuffle single-fp";
                                                if (hasvex)
                                                    lastdisassembledata.opcode = "vshufps";
                                                else
                                                    lastdisassembledata.opcode = "shufps";
                                                lastdisassembledata.parameters = xmm(memory[2]) + modrm(memory, prefix2, 2, 4, ref last, tmrpos.mright);
                                                lastdisassembledata.parametervaluetype = tdisassemblervaluetype.dvtvalue;
                                                lastdisassembledata.parametervalue = (UIntPtr)memory[(int)last];
                                                lastdisassembledata.parameters = lastdisassembledata.parameters + ',' + inttohexs(lastdisassembledata.parametervalue, 2);
                                                lastdisassembledata.datasize = 4;
                                                offset = (UIntPtr)(offset.ToUInt64() + last);
                                            }
                                        }
                                        break;

                                    case 0xc7:
                                        {
                                            switch (getreg(memory[2]))
                                            {
                                                case 1:
                                                    {
                                                        description = "compare and exchange 8 bytes";
                                                        lastdisassembledata.opcode = "cmpxchg8b";
                                                        lastdisassembledata.parameters = modrm(memory, prefix2, 2, 0, ref last);
                                                        offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                    }
                                                    break;

                                                case 3:
                                                    {
                                                        description = "restore processor extended status supervisor";
                                                        if (rex_w)
                                                            lastdisassembledata.opcode = "xrstors64";
                                                        else
                                                            lastdisassembledata.opcode = "xrstors";
                                                        lastdisassembledata.parameters = modrm(memory, prefix2, 2, 0, ref last);
                                                        offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                    }
                                                    break;

                                                case 4:
                                                    {
                                                        description = "save processor extended state with compaction";
                                                        if (rex_w)
                                                            lastdisassembledata.opcode = "xsavec";
                                                        else
                                                            lastdisassembledata.opcode = "xsavec64";
                                                        lastdisassembledata.parameters = modrm(memory, prefix2, 2, 0, ref last);
                                                        offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                    }
                                                    break;

                                                case 5:
                                                    {
                                                        description = "save processor extended state supervisor";
                                                        if (rex_w)
                                                            lastdisassembledata.opcode = "xsaves";
                                                        else
                                                            lastdisassembledata.opcode = "xsaves64";
                                                        lastdisassembledata.parameters = modrm(memory, prefix2, 2, 0, ref last);
                                                        offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                    }
                                                    break;


                                                case 6:
                                                    {
                                                        if (prefix2.Contains(0x66))
                                                        {
                                                            if (getmod(memory[2]) == 3)  //reg
                                                            {
                                                                description = "read random numer";
                                                                lastdisassembledata.opcode = "rdrand";
                                                                lastdisassembledata.parameters = modrm(memory, prefix2, 2, 1, ref last);
                                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                            }
                                                            else
                                                            {
                                                                description = "copy vmcs data to vmcs region in memory";
                                                                lastdisassembledata.opcode = "vmclear";
                                                                lastdisassembledata.parameters = modrm(memory, prefix2, 2, 0, ref last);

                                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                            }
                                                        }
                                                        else
                                                        if (prefix2.Contains(0xf3))
                                                        {
                                                            description = "enter vmx root operation";
                                                            lastdisassembledata.opcode = "vmxon";
                                                            lastdisassembledata.parameters = modrm(memory, prefix2, 2, 0, ref last);

                                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                        }
                                                        else
                                                        {
                                                            //check if it's a memory or register access
                                                            //if register it's rdrand else vmptrld
                                                            if (getmod(memory[2]) == 3)  //reg
                                                            {
                                                                description = "read random numer";
                                                                lastdisassembledata.opcode = "rdrand";
                                                                lastdisassembledata.parameters = modrm(memory, prefix2, 2, 0, ref last);
                                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                            }
                                                            else
                                                            {
                                                                description = "loads the current vmcs pointer from memory";
                                                                lastdisassembledata.opcode = "vmptrld";
                                                                lastdisassembledata.parameters = modrm(memory, prefix2, 2, 0, ref last);

                                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                            }


                                                        }
                                                    }
                                                    break;

                                                case 7:
                                                    {
                                                        if (getmod(memory[2]) == 3)  //reg
                                                        {
                                                            description = "read random SEED";
                                                            lastdisassembledata.opcode = "rdseed";
                                                            if (prefix2.Contains(0x66))
                                                                lastdisassembledata.parameters = modrm(memory, prefix2, 2, 1, ref last);
                                                            else
                                                                lastdisassembledata.parameters = modrm(memory, prefix2, 2, 0, ref last);

                                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                        }
                                                        else
                                                        {
                                                            description = "stores the current vmcs pointer into memory";
                                                            lastdisassembledata.opcode = "vmptrst";
                                                            lastdisassembledata.parameters = modrm(memory, prefix2, 2, 0, ref last);

                                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                        }
                                                    }
                                                    break;
                                            }

                                        }
                                        break;
                                    case 0xc8:
                                    case 0xc9:
                                    case 0xca:
                                    case 0xcb:
                                    case 0xcc:
                                    case 0xcd:
                                    case 0xce:
                                    case 0xcf:
                                        {
                                            //bswap
                                            description = "byte swap";
                                            lastdisassembledata.opcode = "bswap";
                                            if (prefix2.Contains(0x66))
                                                lastdisassembledata.parameters = rd16((Byte)(memory[1] - 0xc8));
                                            else
                                                lastdisassembledata.parameters = rd((Byte)(memory[1] - 0xc8));

                                            offset += 1;
                                        }
                                        break;

                                    case 0xd0:
                                        {
                                            if (prefix2.Contains(0x66))
                                            {
                                                description = "Packed Double-FP Add/Subtract";
                                                if (hasvex)
                                                    lastdisassembledata.opcode = "vaddsubpd";
                                                else
                                                    lastdisassembledata.opcode = "addsubpd";
                                                lastdisassembledata.parameters = xmm(memory[2]) + modrm(memory, prefix2, 2, 4, ref last, tmrpos.mright);
                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                            else
                                            if (prefix2.Contains(0xf2))
                                            {
                                                description = "Packed Single-FP Add/Subtract";
                                                if (hasvex)
                                                    lastdisassembledata.opcode = "vaddsubps";
                                                else
                                                    lastdisassembledata.opcode = "addsubps";
                                                lastdisassembledata.parameters = xmm(memory[2]) + modrm(memory, prefix2, 2, 4, ref last, tmrpos.mright);
                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                        }
                                        break;

                                    case 0xd1:
                                        {
                                            if (prefix2.Contains(0x66))
                                            {
                                                description = "packed shift right logical";
                                                if (hasvex)
                                                    lastdisassembledata.opcode = "vpsrlw";
                                                else
                                                    lastdisassembledata.opcode = "psrlw";
                                                lastdisassembledata.parameters = xmm(memory[2]) + modrm(memory, prefix2, 2, 4, ref last, tmrpos.mright);
                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                            else
                                            {
                                                description = "packed shift right logical";
                                                lastdisassembledata.opcode = "psrlw";
                                                lastdisassembledata.parameters = mm(memory[2]) + modrm(memory, prefix2, 2, 3, ref last, tmrpos.mright);
                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                        }
                                        break;

                                    case 0xd2:
                                        {
                                            if (prefix2.Contains(0x66))
                                            {
                                                description = "packed shift right logical";
                                                if (hasvex)
                                                    lastdisassembledata.opcode = "vpsrld";
                                                else
                                                    lastdisassembledata.opcode = "psrld";
                                                lastdisassembledata.parameters = xmm(memory[2]) + modrm(memory, prefix2, 2, 4, ref last, tmrpos.mright);
                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                            else
                                            {
                                                description = "packed shift right logical";
                                                lastdisassembledata.opcode = "psrld";
                                                lastdisassembledata.parameters = mm(memory[2]) + modrm(memory, prefix2, 2, 3, ref last, tmrpos.mright);
                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                        }
                                        break;

                                    case 0xd3:
                                        {
                                            if (prefix2.Contains(0x66))
                                            {
                                                description = "packed shift right logical";
                                                if (hasvex)
                                                    lastdisassembledata.opcode = "vpsrlq";
                                                else
                                                    lastdisassembledata.opcode = "psrlq";

                                                lastdisassembledata.parameters = xmm(memory[2]) + modrm(memory, prefix2, 2, 4, ref last, tmrpos.mright);
                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                            else
                                            {
                                                description = "packed shift right logical";
                                                lastdisassembledata.opcode = "psrlq";
                                                lastdisassembledata.parameters = mm(memory[2]) + modrm(memory, prefix2, 2, 3, ref last, tmrpos.mright);
                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                        }
                                        break;

                                    case 0xd4:
                                        {
                                            if (prefix2.Contains(0x66))
                                            {
                                                description = "add packed quadword integers";
                                                if (hasvex)
                                                    lastdisassembledata.opcode = "vpaddq";
                                                else
                                                    lastdisassembledata.opcode = "paddq";

                                                lastdisassembledata.parameters = xmm(memory[2]) + modrm(memory, prefix2, 2, 4, ref last, tmrpos.mright);
                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                            else
                                            {
                                                description = "add packed quadword integers";
                                                lastdisassembledata.opcode = "paddq";
                                                lastdisassembledata.parameters = mm(memory[2]) + modrm(memory, prefix2, 2, 3, ref last, tmrpos.mright);
                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                        }
                                        break;


                                    case 0xd5:
                                        {
                                            if (prefix2.Contains(0x66))
                                            {
                                                description = "packed multiply low";
                                                if (hasvex)
                                                    lastdisassembledata.opcode = "vpmullw";
                                                else
                                                    lastdisassembledata.opcode = "pmullw";
                                                lastdisassembledata.parameters = xmm(memory[2]) + modrm(memory, prefix2, 2, 4, ref last, tmrpos.mright);

                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                            else
                                            {
                                                description = "packed multiply low";
                                                lastdisassembledata.opcode = "pmullw";
                                                lastdisassembledata.parameters = mm(memory[2]) + modrm(memory, prefix2, 2, 3, ref last, tmrpos.mright);

                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                        }
                                        break;

                                    case 0xd6:
                                        {
                                            if (prefix2.Contains(0xf2))
                                            {

                                                description = "move low quadword from xmm to mmx technology register";
                                                lastdisassembledata.opcode = "movdq2q";
                                                lastdisassembledata.parameters = mm(memory[2]) + modrm(memory, prefix2, 2, 3, ref last, tmrpos.mright);

                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                            else
                                            if (prefix2.Contains(0xf3))
                                            {

                                                description = "move low quadword from xmm to mmx technology register";
                                                lastdisassembledata.opcode = "movq2dq";
                                                lastdisassembledata.parameters = xmm(memory[2]) + modrm(memory, prefix2, 2, 3, ref last, tmrpos.mright);

                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                            else
                                            if (prefix2.Contains(0x66))
                                            {
                                                description = "move low quadword from xmm to mmx technology register";
                                                if (hasvex)
                                                    lastdisassembledata.opcode = "vmovq";
                                                else
                                                    lastdisassembledata.opcode = "movq";
                                                lastdisassembledata.parameters = modrm(memory, prefix2, 2, 4, ref last) + xmm(memory[2]);
                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                            else
                                            {
                                                description = "move quadword from mmx technology to xmm register";
                                                lastdisassembledata.opcode = "movq2dq";
                                                lastdisassembledata.parameters = modrm(memory, prefix2, 2, 4, ref last) + mm(memory[2]);
                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }

                                        }
                                        break;


                                    case 0xd7:
                                        {
                                            if (prefix2.Contains(0x66))
                                            {
                                                description = "move byte mask to integer";
                                                if (hasvex)
                                                    lastdisassembledata.opcode = "vpmovmskb";
                                                else
                                                    lastdisassembledata.opcode = "pmovmskb";

                                                opcodeflags.skipextrareg = true;
                                                lastdisassembledata.parameters = r32(memory[2]) + modrm(memory, prefix2, 2, 4, ref last, tmrpos.mright);

                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                            else
                                            {
                                                description = "move byte mask to integer";
                                                lastdisassembledata.opcode = "pmovmskb";
                                                lastdisassembledata.parameters = r32(memory[2]) + modrm(memory, prefix2, 2, 3, ref last, tmrpos.mright);

                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                        }
                                        break;

                                    case 0xd8:
                                        {
                                            if (prefix2.Contains(0x66))
                                            {
                                                description = "packed subtract unsigned with saturation";
                                                if (hasvex)
                                                    lastdisassembledata.opcode = "vpsubusb";
                                                else
                                                    lastdisassembledata.opcode = "psubusb";

                                                lastdisassembledata.parameters = xmm(memory[2]) + modrm(memory, prefix2, 2, 4, ref last, tmrpos.mright);
                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                            else
                                            {
                                                description = "packed subtract unsigned with saturation";
                                                lastdisassembledata.opcode = "psubusb";
                                                lastdisassembledata.parameters = mm(memory[2]) + modrm(memory, prefix2, 2, 3, ref last, tmrpos.mright);
                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                        }
                                        break;

                                    case 0xd9:
                                        {
                                            if (prefix2.Contains(0x66))
                                            {
                                                description = "packed subtract unsigned with saturation";
                                                if (hasvex)
                                                    lastdisassembledata.opcode = "vpsubusw";
                                                else
                                                    lastdisassembledata.opcode = "psubusw";
                                                lastdisassembledata.parameters = xmm(memory[2]) + modrm(memory, prefix2, 2, 4, ref last, tmrpos.mright);
                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                            else
                                            {
                                                description = "packed subtract unsigned with saturation";
                                                lastdisassembledata.opcode = "psubusw";
                                                lastdisassembledata.parameters = mm(memory[2]) + modrm(memory, prefix2, 2, 3, ref last, tmrpos.mright);
                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                        }
                                        break;

                                    case 0xda:
                                        {
                                            if (prefix2.Contains(0x66))
                                            {
                                                description = "packed unsigned integer byte minimum";
                                                if (hasvex)
                                                    lastdisassembledata.opcode = "vpminub";
                                                else
                                                    lastdisassembledata.opcode = "pminub";
                                                lastdisassembledata.parameters = xmm(memory[2]) + modrm(memory, prefix2, 2, 4, ref last, tmrpos.mright);

                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                            else
                                            {
                                                description = "packed unsigned integer byte minimum";
                                                lastdisassembledata.opcode = "pminub";
                                                lastdisassembledata.parameters = mm(memory[2]) + modrm(memory, prefix2, 2, 3, ref last, tmrpos.mright);

                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                        }
                                        break;

                                    case 0xdb:
                                        {
                                            if (prefix2.Contains(0x66))
                                            {
                                                description = "logical and";
                                                if (hasvex)
                                                    lastdisassembledata.opcode = "vpand";
                                                else
                                                    lastdisassembledata.opcode = "pand";

                                                lastdisassembledata.parameters = xmm(memory[2]) + modrm(memory, prefix2, 2, 4, ref last, tmrpos.mright);
                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                            else
                                            {
                                                description = "logical and";
                                                lastdisassembledata.opcode = "pand";
                                                lastdisassembledata.parameters = mm(memory[2]) + modrm(memory, prefix2, 2, 3, ref last, tmrpos.mright);

                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                        }
                                        break;

                                    case 0xdc:
                                        {
                                            if (prefix2.Contains(0x66))
                                            {
                                                description = "packed add unsigned with saturation";
                                                if (hasvex)
                                                    lastdisassembledata.opcode = "vpaddusb";
                                                else
                                                    lastdisassembledata.opcode = "paddusb";
                                                lastdisassembledata.parameters = xmm(memory[2]) + modrm(memory, prefix2, 2, 4, ref last, tmrpos.mright);

                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                            else
                                            {
                                                description = "packed add unsigned with saturation";
                                                lastdisassembledata.opcode = "paddusb";
                                                lastdisassembledata.parameters = mm(memory[2]) + modrm(memory, prefix2, 2, 3, ref last, tmrpos.mright);

                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                        }
                                        break;

                                    case 0xdd:
                                        {
                                            if (prefix2.Contains(0x66))
                                            {
                                                description = "packed add unsigned with saturation";
                                                if (hasvex)
                                                    lastdisassembledata.opcode = "vpaddusw";
                                                else
                                                    lastdisassembledata.opcode = "paddusw";
                                                lastdisassembledata.parameters = xmm(memory[2]) + modrm(memory, prefix2, 2, 4, ref last, tmrpos.mright);

                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                            else
                                            {
                                                description = "packed add unsigned with saturation";
                                                lastdisassembledata.opcode = "paddusw";
                                                lastdisassembledata.parameters = mm(memory[2]) + modrm(memory, prefix2, 2, 3, ref last, tmrpos.mright);

                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                        }
                                        break;

                                    case 0xde:
                                        {
                                            if (prefix2.Contains(0x66))
                                            {
                                                description = "packed unsigned integer byte maximum";
                                                if (hasvex)
                                                    lastdisassembledata.opcode = "vpmaxub";
                                                else
                                                    lastdisassembledata.opcode = "pmaxub";
                                                lastdisassembledata.parameters = xmm(memory[2]) + modrm(memory, prefix2, 2, 4, ref last, tmrpos.mleft);

                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                            else
                                            {
                                                description = "packed unsigned integer byte maximum";
                                                lastdisassembledata.opcode = "pmaxub";
                                                lastdisassembledata.parameters = mm(memory[2]) + modrm(memory, prefix2, 2, 3, ref last, tmrpos.mright);

                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                        }
                                        break;

                                    case 0xdf:
                                        {
                                            if (prefix2.Contains(0x66))
                                            {
                                                description = "logical and not";
                                                if (hasvex)
                                                    lastdisassembledata.opcode = "vpandn";
                                                else
                                                    lastdisassembledata.opcode = "pandn";

                                                lastdisassembledata.parameters = xmm(memory[2]) + modrm(memory, prefix2, 2, 4, ref last, tmrpos.mright);

                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                            else
                                            {
                                                description = "logical and not";
                                                lastdisassembledata.opcode = "pandn";
                                                lastdisassembledata.parameters = mm(memory[2]) + modrm(memory, prefix2, 2, 3, ref last, tmrpos.mright);

                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                        }
                                        break;

                                    case 0xe0:
                                        {
                                            if (prefix2.Contains(0x66))
                                            {
                                                description = "packed average";
                                                if (hasvex)
                                                    lastdisassembledata.opcode = "vpavgb";
                                                else
                                                    lastdisassembledata.opcode = "pavgb";
                                                lastdisassembledata.parameters = xmm(memory[2]) + modrm(memory, prefix2, 2, 4, ref last, tmrpos.mright);

                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                            else
                                            {
                                                description = "packed average";
                                                lastdisassembledata.opcode = "pavgb";
                                                lastdisassembledata.parameters = mm(memory[2]) + modrm(memory, prefix2, 2, 3, ref last, tmrpos.mright);

                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                        }
                                        break;

                                    case 0xe1:
                                        {
                                            if (prefix2.Contains(0x66))
                                            {
                                                description = "packed shift right arithmetic";
                                                if (hasvex)
                                                    lastdisassembledata.opcode = "vpsraw";
                                                else
                                                    lastdisassembledata.opcode = "psraw";
                                                lastdisassembledata.parameters = xmm(memory[2]) + modrm(memory, prefix2, 2, 4, ref last, tmrpos.mright);
                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                            else
                                            {
                                                description = "packed shift right arithmetic";
                                                lastdisassembledata.opcode = "psraw";
                                                lastdisassembledata.parameters = mm(memory[2]) + modrm(memory, prefix2, 2, 3, ref last, tmrpos.mright);
                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                        }
                                        break;

                                    case 0xe2:
                                        {
                                            if (prefix2.Contains(0x66))
                                            {
                                                description = "packed shift left logical";
                                                if (hasvex)
                                                    lastdisassembledata.opcode = "vpsrad";
                                                else
                                                    lastdisassembledata.opcode = "psrad";
                                                lastdisassembledata.parameters = xmm(memory[2]) + modrm(memory, prefix2, 2, 4, ref last, tmrpos.mright);
                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                            else
                                            {
                                                description = "packed shift left logical";
                                                lastdisassembledata.opcode = "psrad";
                                                lastdisassembledata.parameters = mm(memory[2]) + modrm(memory, prefix2, 2, 3, ref last, tmrpos.mright);
                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                        }
                                        break;

                                    case 0xe3:
                                        {
                                            if (prefix2.Contains(0x66))
                                            {
                                                description = "packed average";
                                                if (hasvex)
                                                    lastdisassembledata.opcode = "vpavgw";
                                                else
                                                    lastdisassembledata.opcode = "pavgw";
                                                lastdisassembledata.parameters = xmm(memory[2]) + modrm(memory, prefix2, 2, 4, ref last, tmrpos.mright);

                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                            else
                                            {
                                                description = "packed average";
                                                lastdisassembledata.opcode = "pavgw";
                                                lastdisassembledata.parameters = mm(memory[2]) + modrm(memory, prefix2, 2, 3, ref last, tmrpos.mright);

                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                        }
                                        break;

                                    case 0xe4:
                                        {
                                            if (prefix2.Contains(0x66))
                                            {
                                                description = "packed multiply high unsigned";
                                                if (hasvex)
                                                    lastdisassembledata.opcode = "vpmulhuw";
                                                else
                                                    lastdisassembledata.opcode = "pmulhuw";
                                                lastdisassembledata.parameters = xmm(memory[2]) + modrm(memory, prefix2, 2, 4, ref last, tmrpos.mright);

                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                            else
                                            {
                                                description = "packed multiply high unsigned";
                                                lastdisassembledata.opcode = "pmulhuw";
                                                lastdisassembledata.parameters = mm(memory[2]) + modrm(memory, prefix2, 2, 3, ref last, tmrpos.mright);

                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                        }
                                        break;

                                    case 0xe5:
                                        {
                                            if (prefix2.Contains(0x66))
                                            {
                                                description = "packed multiply high";
                                                if (hasvex)
                                                    lastdisassembledata.opcode = "vpmulhw";
                                                else
                                                    lastdisassembledata.opcode = "pmulhw";
                                                lastdisassembledata.parameters = xmm(memory[2]) + modrm(memory, prefix2, 2, 4, ref last, tmrpos.mright);

                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                            else
                                            {
                                                description = "packed multiply high";
                                                lastdisassembledata.opcode = "pmulhw";
                                                lastdisassembledata.parameters = mm(memory[2]) + modrm(memory, prefix2, 2, 3, ref last, tmrpos.mright);

                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                        }
                                        break;

                                    case 0xe6:
                                        {
                                            if (prefix2.Contains(0xf2))
                                            {

                                                description = "convert two packed signed dwords from param2 to two packed dp-floating point values in param1";
                                                if (hasvex)
                                                    lastdisassembledata.opcode = "vcvtpd2dq";
                                                else
                                                    lastdisassembledata.opcode = "cvtpd2dq";

                                                opcodeflags.skipextrareg = true;
                                                lastdisassembledata.parameters = xmm(memory[2]) + modrm(memory, prefix2, 2, 4, ref last, tmrpos.mright);

                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                            else
                                            if (prefix2.Contains(0xf3))
                                            {

                                                description = "convert two packed signed dwords from param2 to two packed dp-floating point values in param1";
                                                if (hasvex)
                                                    lastdisassembledata.opcode = "vcvtdq2pd";
                                                else
                                                    lastdisassembledata.opcode = "cvtdq2pd";
                                                lastdisassembledata.parameters = xmm(memory[2]) + ',';
                                                opcodeflags.l = false;
                                                lastdisassembledata.parameters = lastdisassembledata.parameters + xmm(memory[2]) + modrm(memory, prefix2, 2, 4, ref last, tmrpos.mright);

                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                            else
                                            {
                                                if (prefix2.Contains(0x66))
                                                {
                                                    description = "convert with truncation packed double-precision floating-point values to packed doubleword integers";
                                                    if (hasvex)
                                                        lastdisassembledata.opcode = "vcvttpd2dq";
                                                    else
                                                        lastdisassembledata.opcode = "cvttpd2dq";

                                                    opcodeflags.skipextrareg = true;
                                                    lastdisassembledata.parameters = xmm(memory[2]) + modrm(memory, prefix2, 2, 4, ref last, tmrpos.mright);
                                                    offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                }
                                            }
                                        }
                                        break;

                                    case 0xe7:
                                        {
                                            if (prefix2.Contains(0x66))
                                            {
                                                if (hasvex)
                                                    lastdisassembledata.opcode = "movntdq";
                                                else
                                                    lastdisassembledata.opcode = "vmovntdq";

                                                lastdisassembledata.parameters = modrm(memory, prefix2, 2, 4, ref last) + xmm(memory[2]);
                                                description = "move double quadword using non-temporal hint";
                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                            else
                                            {
                                                lastdisassembledata.opcode = "movntq";
                                                lastdisassembledata.parameters = modrm(memory, prefix2, 2, 3, ref last) + mm(memory[2]);
                                                description = "move 64 bits non temporal";
                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                        }
                                        break;

                                    case 0xe8:
                                        {
                                            if (prefix2.Contains(0x66))
                                            {
                                                description = "packed subtract with saturation";
                                                if (hasvex)
                                                    lastdisassembledata.opcode = "vpsubsb";
                                                else
                                                    lastdisassembledata.opcode = "psubsb";

                                                lastdisassembledata.parameters = xmm(memory[2]) + modrm(memory, prefix2, 2, 4, ref last, tmrpos.mright);
                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                            else
                                            {
                                                description = "packed subtract with saturation";
                                                lastdisassembledata.opcode = "psubsb";
                                                lastdisassembledata.parameters = mm(memory[2]) + modrm(memory, prefix2, 2, 3, ref last, tmrpos.mright);
                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                        }
                                        break;

                                    case 0xe9:
                                        {
                                            if (prefix2.Contains(0x66))
                                            {
                                                description = "packed subtract with saturation";
                                                if (hasvex)
                                                    lastdisassembledata.opcode = "vpsubsw";
                                                else
                                                    lastdisassembledata.opcode = "psubsw";
                                                lastdisassembledata.parameters = xmm(memory[2]) + modrm(memory, prefix2, 2, 4, ref last, tmrpos.mright);
                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                            else
                                            {
                                                description = "packed subtract with saturation";
                                                lastdisassembledata.opcode = "psubsw";
                                                lastdisassembledata.parameters = mm(memory[2]) + modrm(memory, prefix2, 2, 3, ref last, tmrpos.mright);
                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                        }
                                        break;

                                    case 0xea:
                                        {
                                            if (prefix2.Contains(0x66))
                                            {
                                                description = "packed signed integer word minimum";
                                                if (hasvex)
                                                    lastdisassembledata.opcode = "vpminsw";
                                                else
                                                    lastdisassembledata.opcode = "pminsw";

                                                lastdisassembledata.parameters = xmm(memory[2]) + modrm(memory, prefix2, 2, 4, ref last, tmrpos.mright);

                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                            else
                                            {
                                                description = "packed signed integer word minimum";
                                                lastdisassembledata.opcode = "pminsw";
                                                lastdisassembledata.parameters = mm(memory[2]) + modrm(memory, prefix2, 2, 3, ref last, tmrpos.mright);

                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                        }
                                        break;

                                    case 0xeb:
                                        {
                                            if (prefix2.Contains(0x66))
                                            {
                                                description = "bitwise logical or";
                                                if (hasvex)
                                                    lastdisassembledata.opcode = "vpor";
                                                else
                                                    lastdisassembledata.opcode = "por";
                                                lastdisassembledata.parameters = xmm(memory[2]) + modrm(memory, prefix2, 2, 4, ref last, tmrpos.mright);

                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                            else
                                            {
                                                description = "bitwise logical or";
                                                lastdisassembledata.opcode = "por";
                                                lastdisassembledata.parameters = mm(memory[2]) + modrm(memory, prefix2, 2, 3, ref last, tmrpos.mright);

                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                        }
                                        break;

                                    case 0xec:
                                        {
                                            if (prefix2.Contains(0x66))
                                            {
                                                description = "packed add with saturation";
                                                if (hasvex)
                                                    lastdisassembledata.opcode = "vpaddsb";
                                                else
                                                    lastdisassembledata.opcode = "paddsb";
                                                lastdisassembledata.parameters = xmm(memory[2]) + modrm(memory, prefix2, 2, 4, ref last, tmrpos.mright);

                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                            else
                                            {
                                                description = "packed add with saturation";
                                                lastdisassembledata.opcode = "paddsb";
                                                lastdisassembledata.parameters = mm(memory[2]) + modrm(memory, prefix2, 2, 3, ref last, tmrpos.mright);

                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                        }
                                        break;

                                    case 0xed:
                                        {
                                            if (prefix2.Contains(0x66))
                                            {
                                                description = "packed add with saturation";
                                                if (hasvex)
                                                    lastdisassembledata.opcode = "vpaddsw";
                                                else
                                                    lastdisassembledata.opcode = "paddsw";

                                                lastdisassembledata.parameters = xmm(memory[2]) + modrm(memory, prefix2, 2, 4, ref last, tmrpos.mright);

                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                            else
                                            {
                                                description = "packed add with saturation";
                                                lastdisassembledata.opcode = "paddsw";
                                                lastdisassembledata.parameters = mm(memory[2]) + modrm(memory, prefix2, 2, 3, ref last, tmrpos.mright);

                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                        }
                                        break;

                                    case 0xee:
                                        {
                                            if (prefix2.Contains(0x66))
                                            {
                                                description = "packed signed integer word maximum";
                                                if (hasvex)
                                                    lastdisassembledata.opcode = "vpmaxsw";
                                                else
                                                    lastdisassembledata.opcode = "pmaxsw";
                                                lastdisassembledata.parameters = xmm(memory[2]) + modrm(memory, prefix2, 2, 4, ref last, tmrpos.mright);

                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                            else
                                            {
                                                description = "packed signed integer word maximum";
                                                lastdisassembledata.opcode = "pmaxsw";
                                                lastdisassembledata.parameters = mm(memory[2]) + modrm(memory, prefix2, 2, 3, ref last, tmrpos.mright);

                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                        }
                                        break;

                                    case 0xef:
                                        {
                                            if (prefix2.Contains(0x66))
                                            {
                                                description = "logical exclusive or";
                                                if (hasvex)
                                                    lastdisassembledata.opcode = "vpxor";
                                                else
                                                    lastdisassembledata.opcode = "pxor";

                                                lastdisassembledata.parameters = xmm(memory[2]) + modrm(memory, prefix2, 2, 4, ref last, tmrpos.mright);

                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                            else
                                            {
                                                description = "logical exclusive or";
                                                lastdisassembledata.opcode = "pxor";
                                                lastdisassembledata.parameters = mm(memory[2]) + modrm(memory, prefix2, 2, 3, ref last, tmrpos.mright);

                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                        }
                                        break;

                                    case 0xf0:
                                        {
                                            if (prefix2.Contains(0xf2))
                                            {
                                                description = "load unaligned integer 128 bits";
                                                if (hasvex)
                                                    lastdisassembledata.opcode = "vlddqu";
                                                else
                                                    lastdisassembledata.opcode = "lddqu";

                                                opcodeflags.skipextrareg = true;
                                                lastdisassembledata.parameters = xmm(memory[2]) + modrm(memory, prefix2, 2, 4, ref last, tmrpos.mright);
                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                            else
                                                offset += 1;
                                        }
                                        break;


                                    case 0xf1:
                                        {
                                            if (prefix2.Contains(0x66))
                                            {
                                                description = "packed shift left logical";
                                                lastdisassembledata.opcode = "psllw";
                                                lastdisassembledata.parameters = xmm(memory[2]) + modrm(memory, prefix2, 2, 4, ref last, tmrpos.mright);
                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                            else
                                            {
                                                description = "packed shift left logical";
                                                lastdisassembledata.opcode = "psllw";
                                                lastdisassembledata.parameters = mm(memory[2]) + modrm(memory, prefix2, 2, 3, ref last, tmrpos.mright);
                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                        }
                                        break;

                                    case 0xf2:
                                        {
                                            if (prefix2.Contains(0x66))
                                            {
                                                description = "packed shift left logical";
                                                if (hasvex)
                                                    lastdisassembledata.opcode = "vpslld";
                                                else
                                                    lastdisassembledata.opcode = "pslld";

                                                lastdisassembledata.parameters = xmm(memory[2]) + modrm(memory, prefix2, 2, 4, ref last, tmrpos.mright);
                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                            else
                                            {
                                                description = "packed shift left logical";
                                                lastdisassembledata.opcode = "pslld";
                                                lastdisassembledata.parameters = mm(memory[2]) + modrm(memory, prefix2, 2, 3, ref last, tmrpos.mright);
                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                        }
                                        break;

                                    case 0xf3:
                                        {
                                            if (prefix2.Contains(0x66))
                                            {
                                                description = "packed shift left logical";
                                                if (hasvex)
                                                    lastdisassembledata.opcode = "vpsllq";
                                                else
                                                    lastdisassembledata.opcode = "psllq";

                                                lastdisassembledata.parameters = xmm(memory[2]) + modrm(memory, prefix2, 2, 4, ref last, tmrpos.mright);
                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                            else
                                            {
                                                description = "packed shift left logical";
                                                lastdisassembledata.opcode = "psllq";
                                                lastdisassembledata.parameters = mm(memory[2]) + modrm(memory, prefix2, 2, 3, ref last, tmrpos.mright);
                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                        }
                                        break;

                                    case 0xf4:
                                        {
                                            if (prefix2.Contains(0x66))
                                            {
                                                description = "multiply packed unsigned doubleword integers";
                                                if (hasvex)
                                                    lastdisassembledata.opcode = "pmuludq";
                                                else
                                                    lastdisassembledata.opcode = "vpmuludq";
                                                lastdisassembledata.parameters = xmm(memory[2]) + modrm(memory, prefix2, 2, 4, ref last, tmrpos.mright);

                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                            else
                                            {
                                                description = "multiply packed unsigned doubleword integers";
                                                lastdisassembledata.opcode = "pmuludq";
                                                lastdisassembledata.parameters = mm(memory[2]) + modrm(memory, prefix2, 2, 3, ref last, tmrpos.mright);

                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                        }
                                        break;


                                    case 0xf5:
                                        {
                                            if (prefix2.Contains(0x66))
                                            {
                                                description = "packed multiply and add";
                                                if (hasvex)
                                                    lastdisassembledata.opcode = "vpmaddwd";
                                                else
                                                    lastdisassembledata.opcode = "pmaddwd";

                                                lastdisassembledata.parameters = xmm(memory[2]) + modrm(memory, prefix2, 2, 4, ref last, tmrpos.mright);

                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                            else
                                            {
                                                description = "packed multiply and add";
                                                lastdisassembledata.opcode = "pmaddwd";
                                                lastdisassembledata.parameters = mm(memory[2]) + modrm(memory, prefix2, 2, 3, ref last, tmrpos.mright);

                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                        }
                                        break;

                                    case 0xf6:
                                        {
                                            if (prefix2.Contains(0x66))
                                            {
                                                description = "packed sum of absolute differences";
                                                if (hasvex)
                                                    lastdisassembledata.opcode = "vpsadbw";
                                                else
                                                    lastdisassembledata.opcode = "psadbw";

                                                lastdisassembledata.parameters = xmm(memory[2]) + modrm(memory, prefix2, 2, 4, ref last, tmrpos.mright);

                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                            else
                                            {
                                                description = "packed sum of absolute differences";
                                                lastdisassembledata.opcode = "psadbw";
                                                lastdisassembledata.parameters = mm(memory[2]) + modrm(memory, prefix2, 2, 3, ref last, tmrpos.mright);

                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                        }
                                        break;

                                    case 0xf7:
                                        {
                                            if (prefix2.Contains(0x66))
                                            {
                                                description = "store selected bytes of double quadword";
                                                if (hasvex)
                                                    lastdisassembledata.opcode = "vmaskmovdqu";
                                                else
                                                    lastdisassembledata.opcode = "maskmovdqu";

                                                opcodeflags.skipextrareg = true;
                                                lastdisassembledata.parameters = xmm(memory[2]) + modrm(memory, prefix2, 2, 4, ref last, tmrpos.mright);

                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                            else
                                            {
                                                description = "byte mask write";
                                                lastdisassembledata.opcode = "maskmovq";
                                                lastdisassembledata.parameters = mm(memory[2]) + modrm(memory, prefix2, 2, 3, ref last, tmrpos.mright);

                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                        }
                                        break;

                                    case 0xf8:
                                        {
                                            if (prefix2.Contains(0x66))
                                            {
                                                description = "packed subtract";
                                                if (hasvex)
                                                    lastdisassembledata.opcode = "vpsubb";
                                                else
                                                    lastdisassembledata.opcode = "psubb";
                                                lastdisassembledata.parameters = xmm(memory[2]) + modrm(memory, prefix2, 2, 4, ref last, tmrpos.mright);

                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                            else
                                            {
                                                description = "packed subtract";
                                                lastdisassembledata.opcode = "psubb";
                                                lastdisassembledata.parameters = mm(memory[2]) + modrm(memory, prefix2, 2, 3, ref last, tmrpos.mright);

                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                        }
                                        break;

                                    case 0xf9:
                                        {
                                            if (prefix2.Contains(0x66))
                                            {
                                                description = "packed subtract";
                                                if (hasvex)
                                                    lastdisassembledata.opcode = "vpsubw";
                                                else
                                                    lastdisassembledata.opcode = "psubw";
                                                lastdisassembledata.parameters = xmm(memory[2]) + modrm(memory, prefix2, 2, 4, ref last, tmrpos.mright);

                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                            else
                                            {
                                                description = "packed subtract";
                                                lastdisassembledata.opcode = "psubw";
                                                lastdisassembledata.parameters = mm(memory[2]) + modrm(memory, prefix2, 2, 3, ref last, tmrpos.mright);

                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                        }
                                        break;

                                    case 0xfa:
                                        {
                                            if (prefix2.Contains(0x66))
                                            {
                                                description = "packed subtract";
                                                if (hasvex)
                                                    lastdisassembledata.opcode = "vpsubd";
                                                else
                                                    lastdisassembledata.opcode = "psubd";

                                                lastdisassembledata.parameters = xmm(memory[2]) + modrm(memory, prefix2, 2, 4, ref last, tmrpos.mright);

                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                            else
                                            {
                                                description = "packed subtract";
                                                lastdisassembledata.opcode = "psubd";
                                                lastdisassembledata.parameters = mm(memory[2]) + modrm(memory, prefix2, 2, 3, ref last, tmrpos.mright);

                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                        }
                                        break;

                                    case 0xfb:
                                        {
                                            if (prefix2.Contains(0x66))
                                            {
                                                description = "packed subtract";
                                                lastdisassembledata.opcode = "psubq";
                                                lastdisassembledata.parameters = xmm(memory[2]) + modrm(memory, prefix2, 2, 4, ref last, tmrpos.mright);

                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                            else
                                            {
                                                description = "packed subtract";
                                                lastdisassembledata.opcode = "psubq";
                                                lastdisassembledata.parameters = mm(memory[2]) + modrm(memory, prefix2, 2, 3, ref last, tmrpos.mright);

                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                        }
                                        break;

                                    case 0xfc:
                                        {
                                            if (prefix2.Contains(0x66))
                                            {
                                                description = "packed add";
                                                if (hasvex)
                                                    lastdisassembledata.opcode = "vpaddb";
                                                else
                                                    lastdisassembledata.opcode = "paddb";
                                                lastdisassembledata.parameters = xmm(memory[2]) + modrm(memory, prefix2, 2, 4, ref last, tmrpos.mright);

                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                            else
                                            {
                                                description = "packed add";
                                                lastdisassembledata.opcode = "paddb";
                                                lastdisassembledata.parameters = mm(memory[2]) + modrm(memory, prefix2, 2, 3, ref last, tmrpos.mright);

                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                        }
                                        break;

                                    case 0xfd:
                                        {
                                            if (prefix2.Contains(0x66))
                                            {
                                                description = "packed add";
                                                if (hasvex)
                                                    lastdisassembledata.opcode = "vpaddw";
                                                else
                                                    lastdisassembledata.opcode = "paddw";
                                                lastdisassembledata.parameters = xmm(memory[2]) + modrm(memory, prefix2, 2, 4, ref last, tmrpos.mright);
                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                            else
                                            {
                                                description = "packed add";
                                                lastdisassembledata.opcode = "paddw";
                                                lastdisassembledata.parameters = mm(memory[2]) + modrm(memory, prefix2, 2, 3, ref last, tmrpos.mright);

                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                        }
                                        break;

                                    case 0xfe:
                                        {
                                            if (prefix2.Contains(0x66))
                                            {
                                                description = "packed add";
                                                if (hasvex)
                                                    lastdisassembledata.opcode = "vpaddd";
                                                else
                                                    lastdisassembledata.opcode = "paddd";
                                                lastdisassembledata.parameters = xmm(memory[2]) + modrm(memory, prefix2, 2, 4, ref last, tmrpos.mright);

                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                            else
                                            {
                                                description = "packed add";
                                                lastdisassembledata.opcode = "paddd";
                                                lastdisassembledata.parameters = mm(memory[2]) + modrm(memory, prefix2, 2, 3, ref last, tmrpos.mright);

                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                        }
                                        break;


                                }



                            }
                            break;

                        //

                        //

                        case 0x10:
                            {
                                description = "add with carry";
                                lastdisassembledata.opcode = "adc";
                                lastdisassembledata.parameters = modrm(memory, prefix2, 1, 2, ref last) + r8(memory[1]);
                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                            }
                            break;

                        case 0x11:
                            {
                                description = "add with carry";
                                lastdisassembledata.opcode = "adc";
                                if (prefix2.Contains(0x66))
                                    lastdisassembledata.parameters = modrm(memory, prefix2, 1, 1, ref last) + r16(memory[1]);
                                else
                                    lastdisassembledata.parameters = modrm(memory, prefix2, 1, 0, ref last) + r32(memory[1]);
                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());

                            }
                            break;

                        case 0x12:
                            {
                                description = "add with carry";
                                lastdisassembledata.opcode = "adc";
                                lastdisassembledata.parameters = r8(memory[1]) + modrm(memory, prefix2, 1, 2, ref last, 8, 0, tmrpos.mright);

                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                            }
                            break;

                        case 0x13:
                            {
                                description = "add with carry";
                                lastdisassembledata.opcode = "adc";
                                if (prefix2.Contains(0x66))
                                    lastdisassembledata.parameters = r16(memory[1]) + modrm(memory, prefix2, 1, 1, ref last, tmrpos.mright);
                                else
                                    lastdisassembledata.parameters = r32(memory[1]) + modrm(memory, prefix2, 1, 0, ref last, tmrpos.mright);

                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                            }
                            break;

                        case 0x14:
                            {
                                description = "add with carry";
                                lastdisassembledata.opcode = "adc";
                                lastdisassembledata.parametervaluetype = tdisassemblervaluetype.dvtvalue;
                                lastdisassembledata.parametervalue = (UIntPtr)memory[1];
                                lastdisassembledata.parameters = colorreg + "al" + endcolor + ',' + inttohexs(lastdisassembledata.parametervalue, 2);

                                lastdisassembledata.seperators[lastdisassembledata.seperatorcount] = 1;
                                lastdisassembledata.seperatorcount += 1;

                                offset += 1;
                            }
                            break;

                        case 0x15:
                            {
                                description = "add with carry";
                                lastdisassembledata.opcode = "adc";
                                if (prefix2.Contains(0x66))
                                {
                                    var wordptr = memory.ToIntPtr(1).ReadUInt16();;
                                    lastdisassembledata.parametervaluetype = tdisassemblervaluetype.dvtvalue;
                                    lastdisassembledata.parametervalue = (UIntPtr)wordptr;

                                    lastdisassembledata.parameters = colorreg + "ax" + endcolor + ',' + inttohexs(lastdisassembledata.parametervalue, 4);
                                    offset += 2;
                                }
                                else
                                {
                                    var dwordptr = memory.ToIntPtr(1).ReadUInt32();;
                                    lastdisassembledata.parametervaluetype = tdisassemblervaluetype.dvtvalue;
                                    lastdisassembledata.parametervalue = (UIntPtr)dwordptr;

                                    if (rex_w)
                                        lastdisassembledata.parameters = colorreg + "rax" + endcolor + ',' + inttohexs((UIntPtr)(int)(lastdisassembledata.parametervalue), 8);
                                    else
                                        lastdisassembledata.parameters = colorreg + "eax" + endcolor + ',' + inttohexs(lastdisassembledata.parametervalue, 8);
                                    offset += 4;
                                }

                                lastdisassembledata.seperators[lastdisassembledata.seperatorcount] = 1;
                                lastdisassembledata.seperatorcount += 1;

                            }
                            break;

                        case 0x16:
                            {
                                description = "place ss on the stack";
                                lastdisassembledata.opcode = "push";
                                lastdisassembledata.parameters = colorreg + "ss" + endcolor;
                            }
                            break;

                        case 0x17:
                            {
                                description = "remove ss from the stack";
                                lastdisassembledata.opcode = "pop";
                                lastdisassembledata.parameters = colorreg + "ss" + endcolor;
                            }
                            break;

                        case 0x18:
                            {
                                description = "integer subtraction with borrow";
                                lastdisassembledata.opcode = "sbb";
                                lastdisassembledata.parameters = modrm(memory, prefix2, 1, 2, ref last) + r8(memory[1]);
                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                            }
                            break;

                        case 0x19:
                            {
                                description = "integer subtraction with borrow";
                                lastdisassembledata.opcode = "sbb";
                                if (prefix2.Contains(0x66))
                                    lastdisassembledata.parameters = modrm(memory, prefix2, 1, 1, ref last) + r16(memory[1]);
                                else
                                    lastdisassembledata.parameters = modrm(memory, prefix2, 1, 0, ref last) + r32(memory[1]);
                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                            }
                            break;

                        case 0x1a:
                            {
                                description = "integer subtraction with borrow";
                                lastdisassembledata.opcode = "sbb";
                                lastdisassembledata.parameters = r8(memory[1]) + modrm(memory, prefix2, 1, 2, ref last, 8, 0, tmrpos.mright);

                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                            }
                            break;

                        case 0x1b:
                            {
                                description = "integer subtraction with borrow";
                                lastdisassembledata.opcode = "sbb";
                                if (prefix2.Contains(0x66))
                                    lastdisassembledata.parameters = r16(memory[1]) + modrm(memory, prefix2, 1, 1, ref last, tmrpos.mright);
                                else
                                    lastdisassembledata.parameters = r32(memory[1]) + modrm(memory, prefix2, 1, 0, ref last, tmrpos.mright);


                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                            }
                            break;

                        case 0x1c:
                            {
                                description = "integer subtraction with borrow";
                                lastdisassembledata.opcode = "sbb";
                                lastdisassembledata.parametervaluetype = tdisassemblervaluetype.dvtvalue;
                                lastdisassembledata.parametervalue = (UIntPtr)memory[1];
                                lastdisassembledata.seperators[lastdisassembledata.seperatorcount] = 1;
                                lastdisassembledata.seperatorcount += 1;

                                lastdisassembledata.parameters = colorreg + "al" + endcolor + ',' + inttohexs((UIntPtr)memory[1], 2);


                                offset += 1;
                            }
                            break;

                        case 0x1d:
                            {
                                lastdisassembledata.opcode = "sbb";
                                description = "integer subtraction with borrow";
                                if (prefix2.Contains(0x66))
                                {
                                    var wordptr = memory.ToIntPtr(1).ReadUInt16();;

                                    lastdisassembledata.parametervaluetype = tdisassemblervaluetype.dvtvalue;
                                    lastdisassembledata.parametervalue = (UIntPtr)wordptr;

                                    lastdisassembledata.parameters = colorreg + "ax" + endcolor + ',' + inttohexs((UIntPtr)wordptr, 4);
                                    offset += 2;
                                }
                                else
                                {
                                    var dwordptr = memory.ToIntPtr(1).ReadUInt32();;
                                    lastdisassembledata.parametervaluetype = tdisassemblervaluetype.dvtvalue;
                                    lastdisassembledata.parametervalue = (UIntPtr)dwordptr;

                                    if (rex_w)
                                        lastdisassembledata.parameters = colorreg + "rax" + endcolor + ',' + inttohexs((UIntPtr)(int)(lastdisassembledata.parametervalue), 8);
                                    else
                                        lastdisassembledata.parameters = colorreg + "eax" + endcolor + ',' + inttohexs(lastdisassembledata.parametervalue, 8);

                                    offset += 4;
                                }

                                lastdisassembledata.seperators[lastdisassembledata.seperatorcount] = 1;
                                lastdisassembledata.seperatorcount += 1;

                            }
                            break;

                        case 0x1e:
                            {
                                description = "place ds on the stack";
                                lastdisassembledata.opcode = "push";
                                lastdisassembledata.parameters = colorreg + "ds" + endcolor;
                            }
                            break;

                        case 0x1f:
                            {
                                description = "remove ds from the stack";
                                lastdisassembledata.opcode = "pop";
                                lastdisassembledata.parameters = colorreg + "ds" + endcolor;
                            }
                            break;

                        case 0x20:
                            {
                                description = "logical and";
                                lastdisassembledata.opcode = "and";
                                lastdisassembledata.parameters = modrm(memory, prefix2, 1, 2, ref last) + r8(memory[1]);
                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                            }
                            break;

                        case 0x21:
                            {
                                description = "logical and";
                                lastdisassembledata.opcode = "and";
                                if (prefix2.Contains(0x66))
                                    lastdisassembledata.parameters = modrm(memory, prefix2, 1, 1, ref last) + r16(memory[1]);
                                else
                                    lastdisassembledata.parameters = modrm(memory, prefix2, 1, 0, ref last) + r32(memory[1]);
                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());

                            }
                            break;

                        case 0x22:
                            {
                                description = "logical and";
                                lastdisassembledata.opcode = "and";
                                lastdisassembledata.parameters = r8(memory[1]) + modrm(memory, prefix2, 1, 2, ref last, tmrpos.mright);
                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                            }
                            break;

                        case 0x23:
                            {
                                description = "logical and";
                                lastdisassembledata.opcode = "and";
                                if (prefix2.Contains(0x66))
                                    lastdisassembledata.parameters = r16(memory[1]) + modrm(memory, prefix2, 1, 1, ref last, tmrpos.mright);
                                else
                                    lastdisassembledata.parameters = r32(memory[1]) + modrm(memory, prefix2, 1, 0, ref last, tmrpos.mright);

                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                            }
                            break;


                        case 0x24:
                            {
                                description = "logical and";
                                lastdisassembledata.opcode = "and";
                                lastdisassembledata.parametervaluetype = tdisassemblervaluetype.dvtvalue;
                                lastdisassembledata.parametervalue = (UIntPtr)memory[1];
                                lastdisassembledata.parameters = colorreg + "al" + endcolor + ',' + inttohexs((UIntPtr)memory[1], 2);

                                lastdisassembledata.seperators[lastdisassembledata.seperatorcount] = 1;
                                lastdisassembledata.seperatorcount += 1;


                                offset += 1;
                            }
                            break;

                        case 0x25:
                            {
                                description = "logical and";
                                lastdisassembledata.opcode = "and";
                                lastdisassembledata.seperators[lastdisassembledata.seperatorcount] = 1;
                                lastdisassembledata.seperatorcount += 1;


                                if (prefix2.Contains(0x66))
                                {
                                    var wordptr = memory.ToIntPtr(1).ReadUInt16();;
                                    lastdisassembledata.parametervaluetype = tdisassemblervaluetype.dvtvalue;
                                    lastdisassembledata.parametervalue = (UIntPtr)wordptr;
                                    lastdisassembledata.parameters = colorreg + "ax" + endcolor + ',' + inttohexs(lastdisassembledata.parametervalue, 4);
                                    offset += 2;
                                }
                                else
                                {
                                    var dwordptr = memory.ToIntPtr(1).ReadUInt32();;
                                    lastdisassembledata.parametervaluetype = tdisassemblervaluetype.dvtvalue;
                                    lastdisassembledata.parametervalue = (UIntPtr)dwordptr;

                                    if (rex_w)
                                        lastdisassembledata.parameters = colorreg + "rax" + endcolor + ',' + inttohexs((UIntPtr)(int)(lastdisassembledata.parametervalue), 8);
                                    else
                                        lastdisassembledata.parameters = colorreg + "eax" + endcolor + ',' + inttohexs(lastdisassembledata.parametervalue, 8);
                                    offset += 4;
                                }
                            }
                            break;

                        case 0x27:
                            {
                                description = "decimal adjust al after addition";
                                lastdisassembledata.opcode = "daa";
                            }
                            break;

                        case 0x28:
                            {
                                description = "subtract";
                                lastdisassembledata.opcode = "sub";
                                lastdisassembledata.parameters = modrm(memory, prefix2, 1, 2, ref last) + r8(memory[1]);
                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                            }
                            break;

                        case 0x29:
                            {
                                description = "subtract";
                                lastdisassembledata.opcode = "sub";
                                if (prefix2.Contains(0x66))
                                    lastdisassembledata.parameters = modrm(memory, prefix2, 1, 1, ref last) + r16(memory[1]);
                                else
                                    lastdisassembledata.parameters = modrm(memory, prefix2, 1, 0, ref last) + r32(memory[1]);
                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());

                            }
                            break;

                        case 0x2a:
                            {
                                description = "subtract";
                                lastdisassembledata.opcode = "sub";
                                lastdisassembledata.parameters = r8(memory[1]) + modrm(memory, prefix2, 1, 2, ref last, tmrpos.mright);

                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                            }
                            break;

                        case 0x2b:
                            {
                                description = "subtract";
                                lastdisassembledata.opcode = "sub";
                                if (prefix2.Contains(0x66))
                                    lastdisassembledata.parameters = r16(memory[1]) + modrm(memory, prefix2, 1, 1, ref last, tmrpos.mright);
                                else
                                    lastdisassembledata.parameters = r32(memory[1]) + modrm(memory, prefix2, 1, 0, ref last, tmrpos.mright);

                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                            }
                            break;

                        case 0x2c:
                            {
                                description = "subtract";
                                lastdisassembledata.opcode = "sub";

                                lastdisassembledata.parametervaluetype = tdisassemblervaluetype.dvtvalue;
                                lastdisassembledata.parametervalue = (UIntPtr)memory[1];
                                lastdisassembledata.seperators[lastdisassembledata.seperatorcount] = 1;
                                lastdisassembledata.seperatorcount += 1;

                                lastdisassembledata.parameters = colorreg + "al" + endcolor + ',' + inttohexs((UIntPtr)memory[1], 2);



                                offset += 1;
                            }
                            break;

                        case 0x2d:
                            {
                                description = "subtract";
                                lastdisassembledata.opcode = "sub";


                                lastdisassembledata.seperators[lastdisassembledata.seperatorcount] = 1;
                                lastdisassembledata.seperatorcount += 1;

                                if (prefix2.Contains(0x66))
                                {
                                    var wordptr = memory.ToIntPtr(1).ReadUInt16();;
                                    lastdisassembledata.parametervaluetype = tdisassemblervaluetype.dvtvalue;
                                    lastdisassembledata.parametervalue = (UIntPtr)wordptr;

                                    lastdisassembledata.parameters = colorreg + "ax" + endcolor + ',' + inttohexs((UIntPtr)wordptr, 4);
                                    offset += 2;
                                }
                                else
                                {
                                    var dwordptr = memory.ToIntPtr(1).ReadUInt32();;
                                    lastdisassembledata.parametervaluetype = tdisassemblervaluetype.dvtvalue;
                                    lastdisassembledata.parametervalue = (UIntPtr)dwordptr;


                                    if (rex_w)
                                        lastdisassembledata.parameters = colorreg + "rax" + endcolor + ',' + inttohexs((UIntPtr)(Int32)dwordptr, 8);
                                    else
                                        lastdisassembledata.parameters = colorreg + "eax" + endcolor + ',' + inttohexs((UIntPtr)dwordptr, 8);
                                    offset += 4;
                                }
                            }
                            break;


                        case 0x2f:
                            {
                                description = "decimal adjust al after subtraction";
                                lastdisassembledata.opcode = "das";
                            }
                            break;

                        case 0x30:
                            {
                                description = "logical exclusive or";
                                lastdisassembledata.opcode = "xor";
                                lastdisassembledata.parameters = modrm(memory, prefix2, 1, 2, ref last) + r8(memory[1]);
                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                            }
                            break;

                        case 0x31:
                            {
                                description = "logical exclusive or";
                                lastdisassembledata.opcode = "xor";
                                if (prefix2.Contains(0x66))
                                    lastdisassembledata.parameters = modrm(memory, prefix2, 1, 1, ref last) + r16(memory[1]);
                                else
                                    lastdisassembledata.parameters = modrm(memory, prefix2, 1, 0, ref last) + r32(memory[1]);
                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());

                            }
                            break;

                        case 0x32:
                            {
                                description = "logical exclusive or";
                                lastdisassembledata.opcode = "xor";
                                lastdisassembledata.parameters = r8(memory[1]) + modrm(memory, prefix2, 1, 2, ref last, tmrpos.mright);

                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                            }
                            break;

                        case 0x33:
                            {
                                description = "logical exclusive or";
                                lastdisassembledata.opcode = "xor";
                                if (prefix2.Contains(0x66))
                                    lastdisassembledata.parameters = r16(memory[1]) + modrm(memory, prefix2, 1, 1, ref last, tmrpos.mright);
                                else
                                    lastdisassembledata.parameters = r32(memory[1]) + modrm(memory, prefix2, 1, 0, ref last, tmrpos.mright);

                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                            }
                            break;

                        case 0x34:
                            {
                                description = "logical exclusive or";
                                lastdisassembledata.opcode = "xor";
                                lastdisassembledata.parametervaluetype = tdisassemblervaluetype.dvtvalue;
                                lastdisassembledata.parametervalue = (UIntPtr)memory[1];
                                lastdisassembledata.seperators[lastdisassembledata.seperatorcount] = 1;
                                lastdisassembledata.seperatorcount += 1;

                                lastdisassembledata.parameters = colorreg + "al" + endcolor + ',' + inttohexs((UIntPtr)memory[1], 2);
                                offset += 1;
                            }
                            break;

                        case 0x35:
                            {
                                description = "logical exclusive or";
                                lastdisassembledata.opcode = "xor";


                                lastdisassembledata.seperators[lastdisassembledata.seperatorcount] = 1;
                                lastdisassembledata.seperatorcount += 1;

                                if (prefix2.Contains(0x66))
                                {
                                    var wordptr = memory.ToIntPtr(1).ReadUInt16();;
                                    lastdisassembledata.parametervaluetype = tdisassemblervaluetype.dvtvalue;
                                    lastdisassembledata.parametervalue = (UIntPtr)wordptr;

                                    lastdisassembledata.parameters = colorreg + "ax" + endcolor + ',' + inttohexs((UIntPtr)wordptr, 4);
                                    offset += 2;
                                }
                                else
                                {
                                    var dwordptr = memory.ToIntPtr(1).ReadUInt32();;
                                    lastdisassembledata.parametervaluetype = tdisassemblervaluetype.dvtvalue;
                                    lastdisassembledata.parametervalue = (UIntPtr)dwordptr;

                                    if (rex_w)
                                        lastdisassembledata.parameters = colorreg + "rax" + endcolor + ',' + inttohexs((UIntPtr)(Int32)dwordptr, 8);
                                    else
                                        lastdisassembledata.parameters = colorreg + "eax" + endcolor + ',' + inttohexs((UIntPtr)dwordptr, 8);
                                    offset += 4;
                                }
                            }
                            break;


                        case 0x37:
                            {  //aaa
                                lastdisassembledata.opcode = "aaa";
                                description = "ascii adjust al after addition";
                            }
                            break;

                        //---------
                        case 0x38:
                            {//cmp
                                description = "compare two operands";
                                lastdisassembledata.opcode = "cmp";
                                lastdisassembledata.parameters = modrm(memory, prefix2, 1, 2, ref last) + r8(memory[1]);
                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                            }
                            break;

                        case 0x39:
                            {
                                description = "compare two operands";
                                lastdisassembledata.opcode = "cmp";
                                if (prefix2.Contains(0x66))
                                    lastdisassembledata.parameters = modrm(memory, prefix2, 1, 1, ref last) + r16(memory[1]);
                                else
                                    lastdisassembledata.parameters = modrm(memory, prefix2, 1, 0, ref last) + r32(memory[1]);

                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());

                            }
                            break;

                        case 0x3a:
                            {
                                description = "compare two operands";
                                lastdisassembledata.opcode = "cmp";
                                lastdisassembledata.parameters = r8(memory[1]) + modrm(memory, prefix2, 1, 2, ref last, tmrpos.mright);

                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                            }
                            break;

                        case 0x3b:
                            {
                                description = "compare two operands";
                                lastdisassembledata.opcode = "cmp";
                                if (prefix2.Contains(0x66))
                                    lastdisassembledata.parameters = r16(memory[1]) + modrm(memory, prefix2, 1, 1, ref last, tmrpos.mright);
                                else
                                    lastdisassembledata.parameters = r32(memory[1]) + modrm(memory, prefix2, 1, 0, ref last, tmrpos.mright);

                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                            }
                            break;

                        //---------

                        case 0x3c:
                            {
                                description = "compare two operands";
                                lastdisassembledata.opcode = "cmp";

                                lastdisassembledata.parametervaluetype = tdisassemblervaluetype.dvtvalue;
                                lastdisassembledata.parametervalue = (UIntPtr)memory[1];
                                lastdisassembledata.seperators[lastdisassembledata.seperatorcount] = 1;
                                lastdisassembledata.seperatorcount += 1;

                                lastdisassembledata.parameters = colorreg + "al" + endcolor + ',' + inttohexs((UIntPtr)memory[1], 2);
                                offset += 1;
                            }
                            break;

                        case 0x3d:
                            {
                                description = "compare two operands";
                                lastdisassembledata.opcode = "cmp";
                                lastdisassembledata.seperators[lastdisassembledata.seperatorcount] = 1;
                                lastdisassembledata.seperatorcount += 1;


                                if (prefix2.Contains(0x66))
                                {
                                    var wordptr = memory.ToIntPtr(1).ReadUInt16();;
                                    lastdisassembledata.parametervaluetype = tdisassemblervaluetype.dvtvalue;
                                    lastdisassembledata.parametervalue = (UIntPtr)wordptr;

                                    lastdisassembledata.parameters = colorreg + "ax" + endcolor + ',' + inttohexs((UIntPtr)wordptr, 4);
                                    offset += 2;
                                }
                                else
                                {
                                    var dwordptr = memory.ToIntPtr(1).ReadUInt32();;
                                    lastdisassembledata.parametervaluetype = tdisassemblervaluetype.dvtvalue;
                                    lastdisassembledata.parametervalue = (UIntPtr)dwordptr;


                                    if (rex_w)
                                        lastdisassembledata.parameters = colorreg + "rax" + endcolor + ',' + inttohexs((UIntPtr)(Int32)dwordptr, 8);
                                    else
                                        lastdisassembledata.parameters = colorreg + "eax" + endcolor + ',' + inttohexs((UIntPtr)dwordptr, 8);
                                    offset += 4;
                                }
                            }
                            break;

                        //prefix bytes need fixing
                        case 0x3f:
                            {  //aas
                                if (SelfSymbolHandler.Process.IsX86)
                                {
                                    lastdisassembledata.opcode = "db";
                                    lastdisassembledata.parameters = inttohexs((UIntPtr)0x3f, 1);
                                }
                                else
                                {
                                    lastdisassembledata.opcode = "aas";
                                    description = "ascii adjust al after subtraction";
                                }
                            }
                            break;
                        case 0x40:
                        case 0x41:
                        case 0x42:
                        case 0x43:
                        case 0x44:
                        case 0x45:
                        case 0x46:
                        case 0x47:
                            {
                                description = "increment by 1";
                                lastdisassembledata.opcode = "inc";
                                if (prefix2.Contains(0x66))
                                    lastdisassembledata.parameters = rd16((Byte)(memory[0] - 0x40));
                                else
                                    lastdisassembledata.parameters = rd((Byte)(memory[0] - 0x40));
                            }
                            break;

                        case 0x48:
                        case 0x49:
                        case 0x4a:
                        case 0x4b:
                        case 0x4c:
                        case 0x4d:
                        case 0x4e:
                        case 0x4f:
                            {
                                description = "decrement by 1";
                                lastdisassembledata.opcode = "dec";
                                if (prefix2.Contains(0x66))
                                    lastdisassembledata.parameters = rd16((Byte)(memory[0] - 0x48));
                                else
                                    lastdisassembledata.parameters = rd((Byte)(memory[0] - 0x48));
                            }
                            break;

                        case 0x50:
                        case 0x51:
                        case 0x52:
                        case 0x53:
                        case 0x54:
                        case 0x55:
                        case 0x56:
                        case 0x57:
                            {
                                description = "push word or doubleword onto the stack";

                                if (is64bit) opcodeflags.w = true;

                                lastdisassembledata.opcode = "push";
                                if (prefix2.Contains(0x66))
                                    lastdisassembledata.parameters = rd16((Byte)(memory[0] - 0x50));
                                else
                                    lastdisassembledata.parameters = rd((Byte)(memory[0] - 0x50));
                            }
                            break;

                        case 0x58:
                        case 0x59:
                        case 0x5a:
                        case 0x5b:
                        case 0x5c:
                        case 0x5d:
                        case 0x5e:
                        case 0x5f:
                            {
                                description = "pop a value from the stack";
                                if (is64bit) opcodeflags.w = true; //so rd will pick the 64-bit version
                                lastdisassembledata.opcode = "pop";
                                if (prefix2.Contains(0x66))
                                    lastdisassembledata.parameters = rd16((Byte)(memory[0] - 0x58));
                                else
                                    lastdisassembledata.parameters = rd((Byte)(memory[0] - 0x58));
                            }
                            break;

                        case 0x60:
                            {
                                description = "push all general-purpose registers";
                                if (is64bit) description = description + " (invalid)";
                                if (prefix2.Contains(0x66)) lastdisassembledata.opcode = "pusha";
                                else
                                    lastdisassembledata.opcode = "pushad";

                                if (is64bit)
                                {
                                    description = description + " (invalid)";
                                    lastdisassembledata.opcode = "pushad (invalid)";
                                }
                            }
                            break;

                        case 0x61:
                            {
                                description = "pop all general-purpose registers";
                                if (prefix2.Contains(0x66)) lastdisassembledata.opcode = "popa";
                                else
                                    lastdisassembledata.opcode = "popad";

                                if (is64bit)
                                {
                                    description = description + " (invalid)";
                                    lastdisassembledata.opcode = "popad (invalid)";
                                }

                            }
                            break;

                        case 0x62:
                            {
                                //bound
                                description = "check array index against bounds";
                                lastdisassembledata.opcode = "bound";
                                if (prefix2.Contains(0x66))
                                    lastdisassembledata.parameters = r16(memory[1]) + modrm(memory, prefix2, 1, 1, ref last, tmrpos.mright);
                                else
                                    lastdisassembledata.parameters = r32(memory[1]) + modrm(memory, prefix2, 1, 0, ref last, tmrpos.mright);

                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());

                            }
                            break;

                        case 0x63:
                            {
                                //arpl or movsxd
                                if (is64bit)
                                {
                                    lastdisassembledata.opcode = "movsxd";
                                    opcodeflags.w = false;

                                    lastdisassembledata.parameters = ' ' + r64(memory[1]) + modrm(memory, prefix2, 1, 0, ref last, 32, 0, tmrpos.mright);
                                    offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                    description = "Move doubleword to quadword with signextension";
                                }
                                else
                                {
                                    lastdisassembledata.opcode = "arpl";
                                    lastdisassembledata.parameters = modrm(memory, prefix2, 1, 1, ref last) + r16(memory[1]);
                                    offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                    description = "adjust rpl field of segment selector";
                                }
                            }
                            break;

                        case 0x68:
                            {
                                lastdisassembledata.seperators[lastdisassembledata.seperatorcount] = 1;
                                lastdisassembledata.seperatorcount += 1;

                                if (prefix2.Contains(0x66))
                                {
                                    var wordptr = memory.ToIntPtr(1).ReadUInt16();;
                                    lastdisassembledata.parametervaluetype = tdisassemblervaluetype.dvtvalue;
                                    lastdisassembledata.parametervalue = (UIntPtr)wordptr;

                                    lastdisassembledata.opcode = "push";
                                    lastdisassembledata.parameters = inttohexs((UIntPtr)wordptr, 4);
                                    offset += 2;
                                }
                                else
                                {
                                    var dwordptr = memory.ToIntPtr(1).ReadUInt32();;
                                    lastdisassembledata.parametervaluetype = tdisassemblervaluetype.dvtvalue;
                                    lastdisassembledata.parametervalue = (UIntPtr)dwordptr;

                                    lastdisassembledata.opcode = "push";
                                    if (SelfSymbolHandler.Process.IsX64)
                                        lastdisassembledata.parameters = inttohexs((UIntPtr)(Int32)dwordptr, 8);
                                    else
                                        lastdisassembledata.parameters = inttohexs((UIntPtr)dwordptr, 8);
                                    offset += 4;
                                }
                                description = "push word or doubleword onto the stack (sign extended)";
                            }
                            break;

                        case 0x69:
                            {
                                description = "signed multiply";
                                if (prefix2.Contains(0x66))
                                {
                                    lastdisassembledata.opcode = "imul";
                                    lastdisassembledata.parameters = r16(memory[1]) + modrm(memory, prefix2, 1, 1, ref last, tmrpos.mright);
                                    var wordptr = memory.ReadUInt16((int)last);

                                    lastdisassembledata.parametervaluetype = tdisassemblervaluetype.dvtvalue;
                                    lastdisassembledata.parametervalue = (UIntPtr)wordptr;

                                    offset = (UIntPtr)(offset.ToUInt64() + last - 1 + 2);
                                }
                                else
                                {
                                    lastdisassembledata.opcode = "imul";
                                    lastdisassembledata.parameters = r32(memory[1]) + modrm(memory, prefix2, 1, 0, ref last, tmrpos.mright);
                                    var dwordptr = memory.ReadUInt32((int)last);
                                    if (rex_w)
                                        lastdisassembledata.parameters = lastdisassembledata.parameters + ',' + inttohexs((UIntPtr)(Int32)dwordptr, 8);
                                    else
                                        lastdisassembledata.parameters = lastdisassembledata.parameters + ',' + inttohexs((UIntPtr)dwordptr, 8);

                                    lastdisassembledata.parametervaluetype = tdisassemblervaluetype.dvtvalue;
                                    lastdisassembledata.parametervalue = (UIntPtr)dwordptr;

                                    offset = (UIntPtr)(offset.ToUInt64() + last - 1 + 4);
                                }
                            }
                            break;

                        case 0x6a:
                            {
                                lastdisassembledata.opcode = "push";

                                lastdisassembledata.seperators[lastdisassembledata.seperatorcount] = 1;
                                lastdisassembledata.seperatorcount += 1;

                                lastdisassembledata.parametervaluetype = tdisassemblervaluetype.dvtvalue;
                                lastdisassembledata.parametervalue = (UIntPtr)memory[1];

                                lastdisassembledata.parameters = inttohexs((UIntPtr)memory[1], 2, true, 1);
                                offset += 1;
                                description = "push byte onto the stack";
                            }
                            break;

                        case 0x6b:
                            {

                                description = "signed multiply";
                                lastdisassembledata.opcode = "imul";
                                if (prefix2.Contains(0x66))
                                    lastdisassembledata.parameters = r16(memory[1]) + modrm(memory, prefix2, 1, 1, ref last, tmrpos.mright);
                                else
                                    lastdisassembledata.parameters = r32(memory[1]) + modrm(memory, prefix2, 1, 0, ref last, tmrpos.mright);

                                lastdisassembledata.parametervalue = (UIntPtr)memory[(int)last];
                                lastdisassembledata.parameters = lastdisassembledata.parameters + ',' + inttohexs((UIntPtr)memory[(int)last], 2);
                                offset = (UIntPtr)(offset.ToUInt64() + last - 1 + 1);
                            }
                            break;

                        case 0x6c:
                            {
                                //m8, dx
                                description = "input from port to string";
                                lastdisassembledata.opcode = "insb";
                            }
                            break;

                        case 0x6d:
                            {
                                //m8, dx
                                description = "input from port to string";
                                if (prefix2.Contains(0x66)) lastdisassembledata.opcode = "insw";
                                else
                                    lastdisassembledata.opcode = "insd";
                            }
                            break;

                        case 0x6e:
                            {
                                //m8, dx
                                description = "output string to port";
                                lastdisassembledata.opcode = "outsb";
                            }
                            break;

                        case 0x6f:
                            {
                                //m8, dx
                                description = "output string to port";
                                if (prefix2.Contains(0x66)) lastdisassembledata.opcode = "outsw";
                                else
                                    lastdisassembledata.opcode = "outsd";
                            }
                            break;


                        case 0x70:
                            {
                                description = "jump short if overflow (OF=1)";
                                lastdisassembledata.opcode = "jo";
                                lastdisassembledata.isjump = true;
                                lastdisassembledata.isconditionaljump = true;
                                //if (context != nil)
                                    //lastdisassembledata.willjumpaccordingtocontext = (context->eflags & eflags_of) != 0;

                                offset += 1;

                                lastdisassembledata.seperators[lastdisassembledata.seperatorcount] = 1;
                                lastdisassembledata.seperatorcount += 1;

                                lastdisassembledata.parametervaluetype = tdisassemblervaluetype.dvtaddress;

                                if (is64bit)
                                    lastdisassembledata.parametervalue = (UIntPtr)(offset.ToUInt64() + (UInt64)(SByte)memory[1]);
                                else
                                    lastdisassembledata.parametervalue = (UIntPtr)(UInt32)(offset.ToUInt64() + (UInt64)(SByte)memory[1]);

                                lastdisassembledata.parameters = inttohexs(lastdisassembledata.parametervalue, 8);



                            }
                            break;

                        case 0x71:
                            {
                                description = "jump short if not overflow (OF=0)";
                                lastdisassembledata.opcode = "jno";
                                lastdisassembledata.isjump = true;
                                lastdisassembledata.isconditionaljump = true;
                                //if (context != nil)
                                    //lastdisassembledata.willjumpaccordingtocontext = (context->eflags & eflags_of) == 0;

                                offset += 1;

                                lastdisassembledata.seperators[lastdisassembledata.seperatorcount] = 1;
                                lastdisassembledata.seperatorcount += 1;

                                lastdisassembledata.parametervaluetype = tdisassemblervaluetype.dvtaddress;

                                if (is64bit)
                                    lastdisassembledata.parametervalue = (UIntPtr)(offset.ToUInt64() + (UInt64)(SByte)memory[1]);
                                else
                                    lastdisassembledata.parametervalue = (UIntPtr)(UInt32)(offset.ToUInt64() + (UInt64)(SByte)memory[1]);

                                lastdisassembledata.parameters = inttohexs(lastdisassembledata.parametervalue, 8);

                            }
                            break;

                        case 0x72:
                            {
                                description = "jump short if below/carry (CF=1)";
                                lastdisassembledata.opcode = "jb";
                                lastdisassembledata.isjump = true;
                                lastdisassembledata.isconditionaljump = true;
                                //if (context != nil)
                                    //lastdisassembledata.willjumpaccordingtocontext = (context->eflags & eflags_cf) != 0;
                                offset += 1;

                                lastdisassembledata.seperators[lastdisassembledata.seperatorcount] = 1;
                                lastdisassembledata.seperatorcount += 1;

                                lastdisassembledata.parametervaluetype = tdisassemblervaluetype.dvtaddress;

                                if (is64bit)
                                    lastdisassembledata.parametervalue = (UIntPtr)(offset.ToUInt64() + (UInt64)(SByte)memory[1]);
                                else
                                    lastdisassembledata.parametervalue = (UIntPtr)(UInt32)(offset.ToUInt64() + (UInt64)(SByte)memory[1]);

                                lastdisassembledata.parameters = inttohexs(lastdisassembledata.parametervalue, 8);

                            }
                            break;

                        case 0x73:
                            {
                                description = "jump short if above or equal (CF=0)";
                                lastdisassembledata.opcode = "jae";
                                lastdisassembledata.isjump = true;
                                lastdisassembledata.isconditionaljump = true;
                                //if (context != nil)
                                    //lastdisassembledata.willjumpaccordingtocontext = (context->eflags & eflags_cf) == 0;

                                offset += 1;

                                lastdisassembledata.seperators[lastdisassembledata.seperatorcount] = 1;
                                lastdisassembledata.seperatorcount += 1;

                                lastdisassembledata.parametervaluetype = tdisassemblervaluetype.dvtaddress;

                                if (is64bit)
                                    lastdisassembledata.parametervalue = (UIntPtr)(offset.ToUInt64() + (UInt64)(SByte)memory[1]);
                                else
                                    lastdisassembledata.parametervalue = (UIntPtr)(UInt32)(offset.ToUInt64() + (UInt64)(SByte)memory[1]);

                                lastdisassembledata.parameters = inttohexs(lastdisassembledata.parametervalue, 8);

                            }
                            break;

                        case 0x74:
                            {
                                description = "jump short if equal (ZF=1)";
                                lastdisassembledata.opcode = "je";
                                lastdisassembledata.isjump = true;
                                lastdisassembledata.isconditionaljump = true;
                                //if (context != nil)
                                    //lastdisassembledata.willjumpaccordingtocontext = (context->eflags & eflags_zf) != 0;

                                offset += 1;

                                lastdisassembledata.seperators[lastdisassembledata.seperatorcount] = 1;
                                lastdisassembledata.seperatorcount += 1;

                                lastdisassembledata.parametervaluetype = tdisassemblervaluetype.dvtaddress;

                                if (is64bit)
                                    lastdisassembledata.parametervalue = (UIntPtr)(offset.ToUInt64() + (UInt64)(SByte)memory[1]);
                                else
                                    lastdisassembledata.parametervalue = (UIntPtr)(UInt32)(offset.ToUInt64() + (UInt64)(SByte)memory[1]);



                                lastdisassembledata.parameters = inttohexs(lastdisassembledata.parametervalue, 8);

                            }
                            break;

                        case 0x75:
                            {
                                description = "jump short if not equal (ZF=0)";
                                lastdisassembledata.opcode = "jne";
                                lastdisassembledata.isjump = true;
                                lastdisassembledata.isconditionaljump = true;
                                //if (context != nil)
                                    //lastdisassembledata.willjumpaccordingtocontext = (context->eflags & eflags_zf) == 0;
                                offset += 1;

                                lastdisassembledata.seperators[lastdisassembledata.seperatorcount] = 1;
                                lastdisassembledata.seperatorcount += 1;

                                lastdisassembledata.parametervaluetype = tdisassemblervaluetype.dvtaddress;

                                if (is64bit)
                                    lastdisassembledata.parametervalue = (UIntPtr)(offset.ToUInt64() + (UInt64)(SByte)memory[1]);
                                else
                                    lastdisassembledata.parametervalue = (UIntPtr)(UInt32)(offset.ToUInt64() + (UInt64)(SByte)memory[1]);

                                lastdisassembledata.parameters = inttohexs(lastdisassembledata.parametervalue, 8);

                            }
                            break;

                        case 0x76:
                            {
                                description = "jump short if not above (ZF=1 or CF=1)";
                                lastdisassembledata.opcode = "jna";
                                lastdisassembledata.isjump = true;
                                lastdisassembledata.isconditionaljump = true;
                                //if (context != nil)
                                    //lastdisassembledata.willjumpaccordingtocontext = (context->eflags & (eflags_cf | eflags_zf)) != 0;


                                offset += 1;

                                lastdisassembledata.seperators[lastdisassembledata.seperatorcount] = 1;
                                lastdisassembledata.seperatorcount += 1;

                                lastdisassembledata.parametervaluetype = tdisassemblervaluetype.dvtaddress;

                                if (is64bit)
                                    lastdisassembledata.parametervalue = (UIntPtr)(offset.ToUInt64() + (UInt64)(SByte)memory[1]);
                                else
                                    lastdisassembledata.parametervalue = (UIntPtr)(UInt32)(offset.ToUInt64() + (UInt64)(SByte)memory[1]);

                                lastdisassembledata.parameters = inttohexs(lastdisassembledata.parametervalue, 8);

                            }
                            break;

                        case 0x77:
                            {
                                description = "jump short if above (ZF=0 and CF=0)";
                                lastdisassembledata.opcode = "ja";
                                lastdisassembledata.isjump = true;
                                lastdisassembledata.isconditionaljump = true;
                                //if (context != nil)
                                    //lastdisassembledata.willjumpaccordingtocontext = (context->eflags & (eflags_cf | eflags_zf)) == 0;


                                offset += 1;

                                lastdisassembledata.seperators[lastdisassembledata.seperatorcount] = 1;
                                lastdisassembledata.seperatorcount += 1;

                                lastdisassembledata.parametervaluetype = tdisassemblervaluetype.dvtaddress;

                                if (is64bit)
                                    lastdisassembledata.parametervalue = (UIntPtr)(offset.ToUInt64() + (UInt64)(SByte)memory[1]);
                                else
                                    lastdisassembledata.parametervalue = (UIntPtr)(UInt32)(offset.ToUInt64() + (UInt64)(SByte)memory[1]);

                                lastdisassembledata.parameters = inttohexs(lastdisassembledata.parametervalue, 8);

                            }
                            break;

                        case 0x78:
                            {
                                description = "jump short if sign (SF=1)";
                                lastdisassembledata.opcode = "js";
                                lastdisassembledata.isjump = true;
                                lastdisassembledata.isconditionaljump = true;
                                //if (context != nil)
                                    //lastdisassembledata.willjumpaccordingtocontext = (context->eflags & eflags_sf) != 0;

                                offset += 1;

                                lastdisassembledata.seperators[lastdisassembledata.seperatorcount] = 1;
                                lastdisassembledata.seperatorcount += 1;

                                lastdisassembledata.parametervaluetype = tdisassemblervaluetype.dvtaddress;

                                if (is64bit)
                                    lastdisassembledata.parametervalue = (UIntPtr)(offset.ToUInt64() + (UInt64)(SByte)memory[1]);
                                else
                                    lastdisassembledata.parametervalue = (UIntPtr)(UInt32)(offset.ToUInt64() + (UInt64)(SByte)memory[1]);

                                lastdisassembledata.parameters = inttohexs(lastdisassembledata.parametervalue, 8);

                            }
                            break;

                        case 0x79:
                            {
                                description = "jump short if not sign (SF=0)";
                                lastdisassembledata.opcode = "jns";
                                lastdisassembledata.isjump = true;
                                lastdisassembledata.isconditionaljump = true;
                                //if (context != nil)
                                    //lastdisassembledata.willjumpaccordingtocontext = (context->eflags & eflags_sf) == 0;

                                offset += 1;

                                lastdisassembledata.seperators[lastdisassembledata.seperatorcount] = 1;
                                lastdisassembledata.seperatorcount += 1;

                                lastdisassembledata.parametervaluetype = tdisassemblervaluetype.dvtaddress;

                                if (is64bit)
                                    lastdisassembledata.parametervalue = (UIntPtr)(offset.ToUInt64() + (UInt64)(SByte)memory[1]);
                                else
                                    lastdisassembledata.parametervalue = (UIntPtr)(UInt32)(offset.ToUInt64() + (UInt64)(SByte)memory[1]);

                                lastdisassembledata.parameters = inttohexs(lastdisassembledata.parametervalue, 8);

                            }
                            break;

                        case 0x7a:
                            {
                                description = "jump short if parity (PF=1)";
                                lastdisassembledata.opcode = "jp";
                                lastdisassembledata.isjump = true;
                                lastdisassembledata.isconditionaljump = true;
                                //if (context != nil)
                                    //lastdisassembledata.willjumpaccordingtocontext = (context->eflags & eflags_pf) != 0;

                                offset += 1;

                                lastdisassembledata.seperators[lastdisassembledata.seperatorcount] = 1;
                                lastdisassembledata.seperatorcount += 1;

                                lastdisassembledata.parametervaluetype = tdisassemblervaluetype.dvtaddress;

                                if (is64bit)
                                    lastdisassembledata.parametervalue = (UIntPtr)(offset.ToUInt64() + (UInt64)(SByte)memory[1]);
                                else
                                    lastdisassembledata.parametervalue = (UIntPtr)(UInt32)(offset.ToUInt64() + (UInt64)(SByte)memory[1]);

                                lastdisassembledata.parameters = inttohexs(lastdisassembledata.parametervalue, 8);

                            }
                            break;

                        case 0x7b:
                            {
                                description = "jump short if not parity (PF=0)";
                                lastdisassembledata.opcode = "jnp";
                                lastdisassembledata.isjump = true;
                                lastdisassembledata.isconditionaljump = true;
                                //if (context != nil)
                                    //lastdisassembledata.willjumpaccordingtocontext = (context->eflags & eflags_pf) == 0;

                                offset += 1;

                                lastdisassembledata.seperators[lastdisassembledata.seperatorcount] = 1;
                                lastdisassembledata.seperatorcount += 1;

                                lastdisassembledata.parametervaluetype = tdisassemblervaluetype.dvtaddress;

                                if (is64bit)
                                    lastdisassembledata.parametervalue = (UIntPtr)(offset.ToUInt64() + (UInt64)(SByte)memory[1]);
                                else
                                    lastdisassembledata.parametervalue = (UIntPtr)(UInt32)(offset.ToUInt64() + (UInt64)(SByte)memory[1]);

                                lastdisassembledata.parameters = inttohexs(lastdisassembledata.parametervalue, 8);

                            }
                            break;

                        case 0x7c:
                            {
                                description = "jump short if not greater or equal (SF~=OF)";
                                lastdisassembledata.opcode = "jl"; //jnge
                                lastdisassembledata.isjump = true;
                                lastdisassembledata.isconditionaljump = true;
                                //if (context != nil)
                                    //lastdisassembledata.willjumpaccordingtocontext = (context->eflags & eflags_sf) != (context->eflags & eflags_of);


                                offset += 1;

                                lastdisassembledata.seperators[lastdisassembledata.seperatorcount] = 1;
                                lastdisassembledata.seperatorcount += 1;

                                lastdisassembledata.parametervaluetype = tdisassemblervaluetype.dvtaddress;

                                if (is64bit)
                                    lastdisassembledata.parametervalue = (UIntPtr)(offset.ToUInt64() + (UInt64)(SByte)memory[1]);
                                else
                                    lastdisassembledata.parametervalue = (UIntPtr)(UInt32)(offset.ToUInt64() + (UInt64)(SByte)memory[1]);

                                lastdisassembledata.parameters = inttohexs(lastdisassembledata.parametervalue, 8);

                            }
                            break;

                        case 0x7d:
                            {
                                description = "jump short if not less (greater or equal) (SF=OF)";
                                lastdisassembledata.opcode = "jnl";
                                lastdisassembledata.isjump = true;
                                lastdisassembledata.isconditionaljump = true;
                                //if (context != nil)
                                    //lastdisassembledata.willjumpaccordingtocontext = (context->eflags & eflags_sf) == (context->eflags & eflags_of);


                                offset += 1;

                                lastdisassembledata.seperators[lastdisassembledata.seperatorcount] = 1;
                                lastdisassembledata.seperatorcount += 1;

                                lastdisassembledata.parametervaluetype = tdisassemblervaluetype.dvtaddress;

                                if (is64bit)
                                    lastdisassembledata.parametervalue = (UIntPtr)(offset.ToUInt64() + (UInt64)(SByte)memory[1]);
                                else
                                    lastdisassembledata.parametervalue = (UIntPtr)(UInt32)(offset.ToUInt64() + (UInt64)(SByte)memory[1]);

                                lastdisassembledata.parameters = inttohexs(lastdisassembledata.parametervalue, 8);

                            }
                            break;

                        case 0x7e:
                            {
                                description = "jump short if less or equal (ZF=1 or SF~=OF)";
                                lastdisassembledata.opcode = "jle";
                                lastdisassembledata.isjump = true;
                                lastdisassembledata.isconditionaljump = true;
                                //if (context != nil)
                                    //lastdisassembledata.willjumpaccordingtocontext = ((context->eflags & eflags_sf) != (context->eflags & eflags_of)) || ((context->eflags & eflags_zf) != 0);


                                offset += 1;

                                lastdisassembledata.seperators[lastdisassembledata.seperatorcount] = 1;
                                lastdisassembledata.seperatorcount += 1;

                                if (is64bit)
                                    lastdisassembledata.parametervalue = (UIntPtr)(offset.ToUInt64() + (UInt64)(SByte)memory[1]);
                                else
                                    lastdisassembledata.parametervalue = (UIntPtr)(UInt32)(offset.ToUInt64() + (UInt64)(SByte)memory[1]);

                                lastdisassembledata.parameters = inttohexs(lastdisassembledata.parametervalue, 8);
                                lastdisassembledata.parametervaluetype = tdisassemblervaluetype.dvtaddress;
                            }
                            break;

                        case 0x7f:
                            {
                                description = "jump short if greater (ZF=0 or SF=OF)";
                                lastdisassembledata.opcode = "jg";
                                lastdisassembledata.isjump = true;
                                lastdisassembledata.isconditionaljump = true;
                                //if (context != nil)
                                    //lastdisassembledata.willjumpaccordingtocontext = ((context->eflags & eflags_sf) == (context->eflags & eflags_of)) && ((context->eflags & eflags_zf) == 0);


                                offset += 1;

                                lastdisassembledata.seperators[lastdisassembledata.seperatorcount] = 1;
                                lastdisassembledata.seperatorcount += 1;

                                if (is64bit)
                                    lastdisassembledata.parametervalue = (UIntPtr)(offset.ToUInt64() + (UInt64)(SByte)memory[1]);
                                else
                                    lastdisassembledata.parametervalue = (UIntPtr)(UInt32)(offset.ToUInt64() + (UInt64)(SByte)memory[1]);

                                lastdisassembledata.parameters = inttohexs(lastdisassembledata.parametervalue, 8);
                                lastdisassembledata.parametervaluetype = tdisassemblervaluetype.dvtaddress;
                            }
                            break;

                        case 0x80:
                        case 0x82:
                            {
                                switch (getreg(memory[1]))
                                {
                                    case 0:
                                        {
                                            //add
                                            lastdisassembledata.opcode = "add";
                                            lastdisassembledata.parameters = modrm(memory, prefix2, 1, 2, ref last, 8);
                                            lastdisassembledata.parametervaluetype = tdisassemblervaluetype.dvtvalue;
                                            lastdisassembledata.parametervalue = (UIntPtr)memory[(int)last];
                                            lastdisassembledata.parameters = lastdisassembledata.parameters + inttohexs((UIntPtr)memory[(int)last], 2);
                                            offset = (UIntPtr)(offset.ToUInt64() + last);
                                            description = "add x to y";
                                        }
                                        break;

                                    case 1:
                                        {
                                            //adc
                                            lastdisassembledata.opcode = "or";
                                            lastdisassembledata.parameters = modrm(memory, prefix2, 1, 2, ref last, 8);
                                            lastdisassembledata.parametervaluetype = tdisassemblervaluetype.dvtvalue;
                                            lastdisassembledata.parametervalue = (UIntPtr)memory[(int)last];
                                            lastdisassembledata.parameters = lastdisassembledata.parameters + inttohexs((UIntPtr)memory[(int)last], 2);
                                            offset = (UIntPtr)(offset.ToUInt64() + last);
                                            description = "logical inclusive or";
                                        }
                                        break;


                                    case 2:
                                        {
                                            //adc
                                            lastdisassembledata.opcode = "adc";
                                            lastdisassembledata.parameters = modrm(memory, prefix2, 1, 2, ref last, 8);
                                            lastdisassembledata.parametervaluetype = tdisassemblervaluetype.dvtvalue;
                                            lastdisassembledata.parametervalue = (UIntPtr)memory[(int)last];
                                            lastdisassembledata.parameters = lastdisassembledata.parameters + inttohexs((UIntPtr)memory[(int)last], 2);
                                            offset = (UIntPtr)(offset.ToUInt64() + last);
                                            description = "add with carry";
                                        }
                                        break;

                                    case 3:
                                        {
                                            //sbb
                                            lastdisassembledata.opcode = "sbb";
                                            lastdisassembledata.parameters = modrm(memory, prefix2, 1, 2, ref last, 8);
                                            lastdisassembledata.parametervaluetype = tdisassemblervaluetype.dvtvalue;
                                            lastdisassembledata.parametervalue = (UIntPtr)memory[(int)last];
                                            lastdisassembledata.parameters = lastdisassembledata.parameters + inttohexs((UIntPtr)memory[(int)last], 2);
                                            offset = (UIntPtr)(offset.ToUInt64() + last);
                                            description = "integer subtraction with borrow";
                                        }
                                        break;

                                    case 4:
                                        {
                                            //and
                                            lastdisassembledata.opcode = "and";
                                            lastdisassembledata.parameters = modrm(memory, prefix2, 1, 2, ref last, 8);
                                            lastdisassembledata.parametervaluetype = tdisassemblervaluetype.dvtvalue;
                                            lastdisassembledata.parametervalue = (UIntPtr)memory[(int)last];
                                            lastdisassembledata.parameters = lastdisassembledata.parameters + inttohexs((UIntPtr)memory[(int)last], 2);
                                            offset = (UIntPtr)(offset.ToUInt64() + last);
                                            description = "logical and";
                                        }
                                        break;

                                    case 5:
                                        {
                                            lastdisassembledata.opcode = "sub";
                                            lastdisassembledata.parameters = modrm(memory, prefix2, 1, 2, ref last, 8);
                                            lastdisassembledata.parametervaluetype = tdisassemblervaluetype.dvtvalue;
                                            lastdisassembledata.parametervalue = (UIntPtr)memory[(int)last];
                                            lastdisassembledata.parameters = lastdisassembledata.parameters + inttohexs((UIntPtr)memory[(int)last], 2);
                                            offset = (UIntPtr)(offset.ToUInt64() + last);
                                            description = "subtract";
                                        }
                                        break;

                                    case 6:
                                        {
                                            lastdisassembledata.opcode = "xor";
                                            lastdisassembledata.parameters = modrm(memory, prefix2, 1, 2, ref last, 8);
                                            lastdisassembledata.parametervaluetype = tdisassemblervaluetype.dvtvalue;
                                            lastdisassembledata.parametervalue = (UIntPtr)memory[(int)last];
                                            lastdisassembledata.parameters = lastdisassembledata.parameters + inttohexs((UIntPtr)memory[(int)last], 2);
                                            offset = (UIntPtr)(offset.ToUInt64() + last);
                                            description = "logical exclusive or";
                                        }
                                        break;

                                    case 7:
                                        {
                                            lastdisassembledata.opcode = "cmp";
                                            lastdisassembledata.parameters = modrm(memory, prefix2, 1, 2, ref last, 8);
                                            lastdisassembledata.parametervaluetype = tdisassemblervaluetype.dvtvalue;
                                            lastdisassembledata.parametervalue = (UIntPtr)memory[(int)last];
                                            lastdisassembledata.parameters = lastdisassembledata.parameters + inttohexs((UIntPtr)memory[(int)last], 2);
                                            offset = (UIntPtr)(offset.ToUInt64() + last);
                                            description = "compare two operands";
                                        }
                                        break;

                                }
                            }
                            break;

                        case 0x81:
                            {
                                switch (getreg(memory[1]))
                                {
                                    case 0:
                                        {
                                            //add
                                            if (prefix2.Contains(0x66))
                                            {
                                                lastdisassembledata.opcode = "add";
                                                lastdisassembledata.parameters = modrm(memory, prefix2, 1, 1, ref last, 16);
                                                var wordptr = memory.ReadUInt16((int)last);
                                                lastdisassembledata.parametervaluetype = tdisassemblervaluetype.dvtvalue;
                                                lastdisassembledata.parametervalue = (UIntPtr)wordptr;

                                                lastdisassembledata.parameters = lastdisassembledata.parameters + inttohexs((UIntPtr)wordptr, 4);
                                                offset = (UIntPtr)(offset.ToUInt64() + last - 1 + 2);
                                            }
                                            else
                                            {
                                                lastdisassembledata.opcode = "add";
                                                if (rex_w)
                                                    lastdisassembledata.parameters = modrm(memory, prefix2, 1, 0, ref last, 64);
                                                else
                                                    lastdisassembledata.parameters = modrm(memory, prefix2, 1, 0, ref last);
                                                var dwordptr = memory.ReadUInt32((int)last);
                                                lastdisassembledata.parametervaluetype = tdisassemblervaluetype.dvtvalue;
                                                lastdisassembledata.parametervalue = (UIntPtr)dwordptr;

                                                if (rex_w)
                                                    lastdisassembledata.parameters = lastdisassembledata.parameters + inttohexs((UIntPtr)(Int32)dwordptr, 8);
                                                else
                                                    lastdisassembledata.parameters = lastdisassembledata.parameters + inttohexs((UIntPtr)dwordptr, 8);
                                                offset = (UIntPtr)(offset.ToUInt64() + last - 1 + 4);
                                            }

                                            //                      offset:=offset+last;
                                            description = "add x to y";
                                        }
                                        break;

                                    case 1:
                                        {
                                            if (prefix2.Contains(0x66))
                                            {
                                                lastdisassembledata.opcode = "or";
                                                lastdisassembledata.parameters = modrm(memory, prefix2, 1, 1, ref last, 16);
                                                var wordptr = memory.ReadUInt16((int)last);
                                                lastdisassembledata.parametervaluetype = tdisassemblervaluetype.dvtvalue;
                                                lastdisassembledata.parametervalue = (UIntPtr)wordptr;

                                                lastdisassembledata.parameters = lastdisassembledata.parameters + inttohexs((UIntPtr)wordptr, 4);
                                                offset = (UIntPtr)(offset.ToUInt64() + last - 1 + 2);
                                            }
                                            else
                                            {
                                                lastdisassembledata.opcode = "or";
                                                if (rex_w)
                                                    lastdisassembledata.parameters = modrm(memory, prefix2, 1, 0, ref last, 64);
                                                else
                                                    lastdisassembledata.parameters = modrm(memory, prefix2, 1, 0, ref last);

                                                var dwordptr = memory.ReadUInt32((int)last);
                                                lastdisassembledata.parametervaluetype = tdisassemblervaluetype.dvtvalue;
                                                lastdisassembledata.parametervalue = (UIntPtr)dwordptr;

                                                if (rex_w)
                                                    lastdisassembledata.parameters = lastdisassembledata.parameters + inttohexs((UIntPtr)(Int32)dwordptr, 8);
                                                else
                                                    lastdisassembledata.parameters = lastdisassembledata.parameters + inttohexs((UIntPtr)dwordptr, 8);
                                                offset = (UIntPtr)(offset.ToUInt64() + last - 1 + 4);
                                            }


                                            description = "logical inclusive or";
                                        }
                                        break;

                                    case 2:
                                        {
                                            //adc
                                            if (prefix2.Contains(0x66))
                                            {
                                                lastdisassembledata.opcode = "adc";
                                                lastdisassembledata.parameters = modrm(memory, prefix2, 1, 1, ref last, 16);
                                                var wordptr = memory.ReadUInt16((int)last);
                                                lastdisassembledata.parametervaluetype = tdisassemblervaluetype.dvtvalue;
                                                lastdisassembledata.parametervalue = (UIntPtr)wordptr;

                                                lastdisassembledata.parameters = lastdisassembledata.parameters + inttohexs((UIntPtr)wordptr, 4);
                                                offset = (UIntPtr)(offset.ToUInt64() + last - 1 + 2);
                                            }
                                            else
                                            {
                                                lastdisassembledata.opcode = "adc";
                                                if (rex_w)
                                                    lastdisassembledata.parameters = modrm(memory, prefix2, 1, 0, ref last, 64);
                                                else
                                                    lastdisassembledata.parameters = modrm(memory, prefix2, 1, 0, ref last);
                                                var dwordptr = memory.ReadUInt32((int)last);
                                                lastdisassembledata.parametervaluetype = tdisassemblervaluetype.dvtvalue;
                                                lastdisassembledata.parametervalue = (UIntPtr)dwordptr;

                                                if (rex_w)
                                                    lastdisassembledata.parameters = lastdisassembledata.parameters + inttohexs((UIntPtr)(Int32)dwordptr, 8);
                                                else
                                                    lastdisassembledata.parameters = lastdisassembledata.parameters + inttohexs((UIntPtr)dwordptr, 8);
                                                offset = (UIntPtr)(offset.ToUInt64() + last - 1 + 4);
                                            }


                                            description = "add with carry";
                                        }
                                        break;

                                    case 3:
                                        {
                                            if (prefix2.Contains(0x66))
                                            {
                                                lastdisassembledata.opcode = "sbb";
                                                lastdisassembledata.parameters = modrm(memory, prefix2, 1, 1, ref last, 16);
                                                var wordptr = memory.ReadUInt16((int)last);
                                                lastdisassembledata.parametervaluetype = tdisassemblervaluetype.dvtvalue;
                                                lastdisassembledata.parametervalue = (UIntPtr)wordptr;

                                                lastdisassembledata.parameters = lastdisassembledata.parameters + inttohexs((UIntPtr)wordptr, 4);
                                                offset = (UIntPtr)(offset.ToUInt64() + last - 1 + 2);
                                            }
                                            else
                                            {
                                                lastdisassembledata.opcode = "sbb";
                                                if (rex_w)
                                                    lastdisassembledata.parameters = modrm(memory, prefix2, 1, 0, ref last, 64);
                                                else
                                                    lastdisassembledata.parameters = modrm(memory, prefix2, 1, 0, ref last);
                                                var dwordptr = memory.ReadUInt32((int)last);
                                                lastdisassembledata.parametervaluetype = tdisassemblervaluetype.dvtvalue;
                                                lastdisassembledata.parametervalue = (UIntPtr)dwordptr;

                                                if (rex_w)
                                                    lastdisassembledata.parameters = lastdisassembledata.parameters + inttohexs((UIntPtr)(Int32)dwordptr, 8);
                                                else
                                                    lastdisassembledata.parameters = lastdisassembledata.parameters + inttohexs((UIntPtr)dwordptr, 8);
                                                offset = (UIntPtr)(offset.ToUInt64() + last - 1 + 4);
                                            }


                                            description = "integer subtraction with borrow";
                                        }
                                        break;


                                    case 4:
                                        {
                                            //and
                                            if (prefix2.Contains(0x66))
                                            {
                                                lastdisassembledata.opcode = "and";
                                                lastdisassembledata.parameters = modrm(memory, prefix2, 1, 1, ref last, 16);
                                                var wordptr = memory.ReadUInt16((int)last);
                                                lastdisassembledata.parametervaluetype = tdisassemblervaluetype.dvtvalue;
                                                lastdisassembledata.parametervalue = (UIntPtr)wordptr;

                                                lastdisassembledata.parameters = lastdisassembledata.parameters + inttohexs((UIntPtr)wordptr, 4);
                                                offset = (UIntPtr)(offset.ToUInt64() + last - 1 + 2);
                                            }
                                            else
                                            {
                                                lastdisassembledata.opcode = "and";
                                                if (rex_w)
                                                    lastdisassembledata.parameters = modrm(memory, prefix2, 1, 0, ref last, 64);
                                                else
                                                    lastdisassembledata.parameters = modrm(memory, prefix2, 1, 0, ref last);
                                                var dwordptr = memory.ReadUInt32((int)last);
                                                lastdisassembledata.parametervaluetype = tdisassemblervaluetype.dvtvalue;
                                                lastdisassembledata.parametervalue = (UIntPtr)dwordptr;

                                                if (rex_w)
                                                    lastdisassembledata.parameters = lastdisassembledata.parameters + inttohexs((UIntPtr)(Int32)dwordptr, 8);
                                                else
                                                    lastdisassembledata.parameters = lastdisassembledata.parameters + inttohexs((UIntPtr)dwordptr, 8);
                                                offset = (UIntPtr)(offset.ToUInt64() + last - 1 + 4);
                                            }


                                            description = "logical and";
                                        }
                                        break;

                                    case 5:
                                        {
                                            if (prefix2.Contains(0x66))
                                            {
                                                lastdisassembledata.opcode = "sub";
                                                lastdisassembledata.parameters = modrm(memory, prefix2, 1, 1, ref last);
                                                var wordptr = memory.ReadUInt16((int)last);
                                                lastdisassembledata.parametervaluetype = tdisassemblervaluetype.dvtvalue;
                                                lastdisassembledata.parametervalue = (UIntPtr)wordptr;

                                                lastdisassembledata.parameters = lastdisassembledata.parameters + inttohexs((UIntPtr)wordptr, 4);
                                                offset = (UIntPtr)(offset.ToUInt64() + last - 1 + 2);
                                            }
                                            else
                                            {
                                                lastdisassembledata.opcode = "sub";
                                                if (rex_w)
                                                    lastdisassembledata.parameters = modrm(memory, prefix2, 1, 0, ref last, 64);
                                                else
                                                    lastdisassembledata.parameters = modrm(memory, prefix2, 1, 0, ref last);
                                                var dwordptr = memory.ReadUInt32((int)last);
                                                lastdisassembledata.parametervaluetype = tdisassemblervaluetype.dvtvalue;
                                                lastdisassembledata.parametervalue = (UIntPtr)dwordptr;

                                                if (rex_w)
                                                    lastdisassembledata.parameters = lastdisassembledata.parameters + inttohexs((UIntPtr)(Int32)dwordptr, 8);
                                                else
                                                    lastdisassembledata.parameters = lastdisassembledata.parameters + inttohexs((UIntPtr)dwordptr, 8);
                                                offset = (UIntPtr)(offset.ToUInt64() + last - 1 + 4);
                                            }


                                            description = "subtract";
                                        }
                                        break;

                                    case 6:
                                        {
                                            if (prefix2.Contains(0x66))
                                            {
                                                lastdisassembledata.opcode = "xor";
                                                lastdisassembledata.parameters = modrm(memory, prefix2, 1, 1, ref last, 16);
                                                var wordptr = memory.ReadUInt16((int)last);
                                                lastdisassembledata.parametervaluetype = tdisassemblervaluetype.dvtvalue;
                                                lastdisassembledata.parametervalue = (UIntPtr)wordptr;

                                                lastdisassembledata.parameters = lastdisassembledata.parameters + inttohexs((UIntPtr)wordptr, 4);
                                                offset = (UIntPtr)(offset.ToUInt64() + last - 1 + 2);
                                            }
                                            else
                                            {
                                                lastdisassembledata.opcode = "xor";
                                                if (rex_w)
                                                    lastdisassembledata.parameters = modrm(memory, prefix2, 1, 0, ref last, 64);
                                                else
                                                    lastdisassembledata.parameters = modrm(memory, prefix2, 1, 0, ref last);
                                                var dwordptr = memory.ReadUInt32((int)last);
                                                lastdisassembledata.parametervaluetype = tdisassemblervaluetype.dvtvalue;
                                                lastdisassembledata.parametervalue = (UIntPtr)dwordptr;

                                                if (rex_w)
                                                    lastdisassembledata.parameters = lastdisassembledata.parameters + inttohexs((UIntPtr)(Int32)dwordptr, 8);
                                                else
                                                    lastdisassembledata.parameters = lastdisassembledata.parameters + inttohexs((UIntPtr)dwordptr, 8);
                                                offset = (UIntPtr)(offset.ToUInt64() + last - 1 + 4);
                                            }
                                            description = "logical exclusive or";
                                        }
                                        break;

                                    case 7:
                                        {
                                            //cmp
                                            if (prefix2.Contains(0x66))
                                            {
                                                lastdisassembledata.opcode = "cmp";
                                                lastdisassembledata.parameters = modrm(memory, prefix2, 1, 1, ref last, 16);
                                                var wordptr = memory.ReadUInt16((int)last);
                                                lastdisassembledata.parametervaluetype = tdisassemblervaluetype.dvtvalue;
                                                lastdisassembledata.parametervalue = (UIntPtr)wordptr;

                                                lastdisassembledata.parameters = lastdisassembledata.parameters + inttohexs((UIntPtr)wordptr, 4);
                                                offset = (UIntPtr)(offset.ToUInt64() + last - 1 + 2);
                                            }
                                            else
                                            {
                                                lastdisassembledata.opcode = "cmp";
                                                if (rex_w)
                                                {
                                                    lastdisassembledata.parameters = modrm(memory, prefix2, 1, 0, ref last, 64);
                                                    lastdisassembledata.datasize = 8; ;
                                                }
                                                else
                                                    lastdisassembledata.parameters = modrm(memory, prefix2, 1, 0, ref last);
                                                var dwordptr = memory.ReadUInt32((int)last);
                                                lastdisassembledata.parametervaluetype = tdisassemblervaluetype.dvtvalue;
                                                lastdisassembledata.parametervalue = (UIntPtr)dwordptr;

                                                if (rex_w)
                                                    lastdisassembledata.parameters = lastdisassembledata.parameters + inttohexs((UIntPtr)(Int32)dwordptr, 8);
                                                else
                                                    lastdisassembledata.parameters = lastdisassembledata.parameters + inttohexs((UIntPtr)dwordptr, 8);
                                                offset = (UIntPtr)(offset.ToUInt64() + last - 1 + 4);
                                            }

                                            description = "compare two operands";
                                        }
                                        break;


                                }
                            }
                            break;

                        case 0x83:
                            {
                                switch (getreg(memory[1]))
                                {
                                    case 0:
                                        {
                                            if (prefix2.Contains(0x66))
                                            {
                                                lastdisassembledata.opcode = "add";
                                                lastdisassembledata.parameters = modrm(memory, prefix2, 1, 1, ref last, 16);
                                                lastdisassembledata.parametervaluetype = tdisassemblervaluetype.dvtvalue;
                                                lastdisassembledata.parametervalue = (UIntPtr)memory[(int)last];

                                                lastdisassembledata.parameters = lastdisassembledata.parameters + inttohexs((UIntPtr)memory[(int)last], 2, true);
                                            }
                                            else
                                            {
                                                lastdisassembledata.opcode = "add";

                                                if (rex_w)
                                                {
                                                    lastdisassembledata.parameters = modrm(memory, prefix2, 1, 0, ref last, 64);
                                                    lastdisassembledata.parametervaluetype = tdisassemblervaluetype.dvtvalue;
                                                    lastdisassembledata.parametervalue = (UIntPtr)memory[(int)last];
                                                    lastdisassembledata.parameters = lastdisassembledata.parameters + inttohexs((UIntPtr)memory[(int)last], 2, true);
                                                }
                                                else
                                                {
                                                    lastdisassembledata.parameters = modrm(memory, prefix2, 1, 0, ref last, 32);
                                                    lastdisassembledata.parametervaluetype = tdisassemblervaluetype.dvtvalue;
                                                    lastdisassembledata.parametervalue = (UIntPtr)memory[(int)last];

                                                    lastdisassembledata.parameters = lastdisassembledata.parameters + inttohexs((UIntPtr)memory[(int)last], 2, true);
                                                }

                                            }

                                            offset = (UIntPtr)(offset.ToUInt64() + last);
                                            description = "add (sign extended)";
                                        }
                                        break;

                                    case 1:
                                        {
                                            if (prefix2.Contains(0x66))
                                            {
                                                lastdisassembledata.opcode = "or";
                                                lastdisassembledata.parameters = modrm(memory, prefix2, 1, 1, ref last, 16);
                                                lastdisassembledata.parametervaluetype = tdisassemblervaluetype.dvtvalue;
                                                lastdisassembledata.parametervalue = (UIntPtr)memory[(int)last];

                                                lastdisassembledata.parameters = lastdisassembledata.parameters + inttohexs((UIntPtr)memory[(int)last], 2);
                                            }
                                            else
                                            {
                                                lastdisassembledata.opcode = "or";
                                                if (rex_w)
                                                {
                                                    lastdisassembledata.parameters = modrm(memory, prefix2, 1, 0, ref last, 64);
                                                    lastdisassembledata.parametervaluetype = tdisassemblervaluetype.dvtvalue;
                                                    lastdisassembledata.parametervalue = (UIntPtr)memory[(int)last];
                                                    lastdisassembledata.parameters = lastdisassembledata.parameters + inttohexs((UIntPtr)memory[(int)last], 2);
                                                }
                                                else
                                                {
                                                    lastdisassembledata.parameters = modrm(memory, prefix2, 1, 0, ref last, 32);
                                                    lastdisassembledata.parametervaluetype = tdisassemblervaluetype.dvtvalue;
                                                    lastdisassembledata.parametervalue = (UIntPtr)memory[(int)last];
                                                    lastdisassembledata.parameters = lastdisassembledata.parameters + inttohexs((UIntPtr)memory[(int)last], 2);
                                                }
                                            }

                                            offset = (UIntPtr)(offset.ToUInt64() + last);
                                            description = "add (sign extended)";
                                        }
                                        break;


                                    case 2:
                                        {
                                            if (prefix2.Contains(0x66))
                                            {
                                                lastdisassembledata.opcode = "adc";
                                                lastdisassembledata.parameters = modrm(memory, prefix2, 1, 1, ref last, 16);
                                                lastdisassembledata.parametervaluetype = tdisassemblervaluetype.dvtvalue;
                                                lastdisassembledata.parametervalue = (UIntPtr)memory[(int)last];
                                                lastdisassembledata.parameters = lastdisassembledata.parameters + inttohexs((UIntPtr)memory[(int)last], 2);
                                            }
                                            else
                                            {
                                                lastdisassembledata.opcode = "adc";
                                                if (rex_w)
                                                {
                                                    lastdisassembledata.parameters = modrm(memory, prefix2, 1, 0, ref last, 64);
                                                    lastdisassembledata.parametervaluetype = tdisassemblervaluetype.dvtvalue;
                                                    lastdisassembledata.parametervalue = (UIntPtr)memory[(int)last];
                                                    lastdisassembledata.parameters = lastdisassembledata.parameters + inttohexs((UIntPtr)memory[(int)last], 2);
                                                }
                                                else
                                                {
                                                    lastdisassembledata.parameters = modrm(memory, prefix2, 1, 0, ref last, 32);
                                                    lastdisassembledata.parametervaluetype = tdisassemblervaluetype.dvtvalue;
                                                    lastdisassembledata.parametervalue = (UIntPtr)memory[(int)last];
                                                    lastdisassembledata.parameters = lastdisassembledata.parameters + inttohexs((UIntPtr)memory[(int)last], 2);
                                                }

                                            }

                                            offset = (UIntPtr)(offset.ToUInt64() + last);
                                            description = "add with carry (sign extended)";
                                        }
                                        break;

                                    case 3:
                                        {
                                            if (prefix2.Contains(0x66))
                                            {
                                                lastdisassembledata.opcode = "sbb";
                                                lastdisassembledata.parameters = modrm(memory, prefix2, 1, 1, ref last, 16);
                                                lastdisassembledata.parametervaluetype = tdisassemblervaluetype.dvtvalue;
                                                lastdisassembledata.parametervalue = (UIntPtr)memory[(int)last];

                                                lastdisassembledata.parameters = lastdisassembledata.parameters + inttohexs((UIntPtr)memory[(int)last], 2);
                                            }
                                            else
                                            {
                                                lastdisassembledata.opcode = "sbb";
                                                if (rex_w)
                                                {
                                                    lastdisassembledata.parameters = modrm(memory, prefix2, 1, 0, ref last, 64);
                                                    lastdisassembledata.parametervaluetype = tdisassemblervaluetype.dvtvalue;
                                                    lastdisassembledata.parametervalue = (UIntPtr)memory[(int)last];
                                                    lastdisassembledata.parameters = lastdisassembledata.parameters + inttohexs((UIntPtr)memory[(int)last], 2);
                                                }
                                                else
                                                {
                                                    lastdisassembledata.parameters = modrm(memory, prefix2, 1, 0, ref last, 32);
                                                    lastdisassembledata.parametervaluetype = tdisassemblervaluetype.dvtvalue;
                                                    lastdisassembledata.parametervalue = (UIntPtr)memory[(int)last];
                                                    lastdisassembledata.parameters = lastdisassembledata.parameters + inttohexs((UIntPtr)memory[(int)last], 2);
                                                }
                                            }

                                            offset = (UIntPtr)(offset.ToUInt64() + last);
                                            description = "integer subtraction with borrow (sign extended)";
                                        }
                                        break;

                                    case 4:
                                        {
                                            //and
                                            if (prefix2.Contains(0x66))
                                            {
                                                lastdisassembledata.opcode = "and";
                                                lastdisassembledata.parameters = modrm(memory, prefix2, 1, 1, ref last, 16);
                                                lastdisassembledata.parametervaluetype = tdisassemblervaluetype.dvtvalue;
                                                lastdisassembledata.parametervalue = (UIntPtr)memory[(int)last];
                                                lastdisassembledata.parameters = lastdisassembledata.parameters + inttohexs((UIntPtr)memory[(int)last], 2);
                                            }
                                            else
                                            {
                                                lastdisassembledata.opcode = "and";
                                                if (rex_w)
                                                {
                                                    lastdisassembledata.parameters = modrm(memory, prefix2, 1, 0, ref last, 64);
                                                    lastdisassembledata.parametervaluetype = tdisassemblervaluetype.dvtvalue;
                                                    lastdisassembledata.parametervalue = (UIntPtr)memory[(int)last];
                                                    lastdisassembledata.parameters = lastdisassembledata.parameters + inttohexs((UIntPtr)memory[(int)last], 2);
                                                }
                                                else
                                                {
                                                    lastdisassembledata.parameters = modrm(memory, prefix2, 1, 0, ref last, 32);
                                                    lastdisassembledata.parametervaluetype = tdisassemblervaluetype.dvtvalue;
                                                    lastdisassembledata.parametervalue = (UIntPtr)memory[(int)last];
                                                    lastdisassembledata.parameters = lastdisassembledata.parameters + inttohexs((UIntPtr)memory[(int)last], 2);
                                                }

                                            }

                                            offset = (UIntPtr)(offset.ToUInt64() + last);
                                            description = "logical and (sign extended)";
                                        }
                                        break;

                                    case 5:
                                        {
                                            if (prefix2.Contains(0x66))
                                            {
                                                lastdisassembledata.opcode = "sub";
                                                lastdisassembledata.parameters = modrm(memory, prefix2, 1, 1, ref last, 16);
                                                lastdisassembledata.parametervaluetype = tdisassemblervaluetype.dvtvalue;
                                                lastdisassembledata.parametervalue = (UIntPtr)memory[(int)last];
                                                lastdisassembledata.parameters = lastdisassembledata.parameters + inttohexs((UIntPtr)memory[(int)last], 2);
                                            }
                                            else
                                            {
                                                lastdisassembledata.opcode = "sub";
                                                if (rex_w)
                                                {
                                                    lastdisassembledata.parameters = modrm(memory, prefix2, 1, 0, ref last, 64);
                                                    lastdisassembledata.parametervaluetype = tdisassemblervaluetype.dvtvalue;
                                                    lastdisassembledata.parametervalue = (UIntPtr)memory[(int)last];
                                                    lastdisassembledata.parameters = lastdisassembledata.parameters + inttohexs((UIntPtr)memory[(int)last], 2);
                                                }
                                                else
                                                {
                                                    lastdisassembledata.parameters = modrm(memory, prefix2, 1, 0, ref last, 32);
                                                    lastdisassembledata.parametervaluetype = tdisassemblervaluetype.dvtvalue;
                                                    lastdisassembledata.parametervalue = (UIntPtr)memory[(int)last];
                                                    lastdisassembledata.parameters = lastdisassembledata.parameters + inttohexs((UIntPtr)memory[(int)last], 2);
                                                }
                                            }

                                            offset = (UIntPtr)(offset.ToUInt64() + last);
                                            description = "subtract";
                                        }
                                        break;

                                    case 6:
                                        {
                                            if (prefix2.Contains(0x66))
                                            {
                                                lastdisassembledata.opcode = "xor";
                                                lastdisassembledata.parameters = modrm(memory, prefix2, 1, 1, ref last, 16);
                                                lastdisassembledata.parametervaluetype = tdisassemblervaluetype.dvtvalue;
                                                lastdisassembledata.parametervalue = (UIntPtr)memory[(int)last];
                                                lastdisassembledata.parameters = lastdisassembledata.parameters + inttohexs((UIntPtr)memory[(int)last], 2);
                                            }
                                            else
                                            {
                                                lastdisassembledata.opcode = "xor";
                                                if (rex_w)
                                                {
                                                    lastdisassembledata.parameters = modrm(memory, prefix2, 1, 0, ref last, 64);
                                                    lastdisassembledata.parametervaluetype = tdisassemblervaluetype.dvtvalue;
                                                    lastdisassembledata.parametervalue = (UIntPtr)memory[(int)last];
                                                    lastdisassembledata.parameters = lastdisassembledata.parameters + inttohexs((UIntPtr)memory[(int)last], 2);
                                                }
                                                else
                                                {
                                                    lastdisassembledata.parameters = modrm(memory, prefix2, 1, 0, ref last, 32);
                                                    lastdisassembledata.parametervaluetype = tdisassemblervaluetype.dvtvalue;
                                                    lastdisassembledata.parametervalue = (UIntPtr)memory[(int)last];
                                                    lastdisassembledata.parameters = lastdisassembledata.parameters + inttohexs((UIntPtr)memory[(int)last], 2);
                                                }
                                            }

                                            offset = (UIntPtr)(offset.ToUInt64() + last);
                                            description = "logical exclusive or";
                                        }
                                        break;

                                    case 7:
                                        {
                                            //cmp
                                            if (prefix2.Contains(0x66))
                                            {
                                                lastdisassembledata.opcode = "cmp";
                                                lastdisassembledata.parameters = modrm(memory, prefix2, 1, 1, ref last, 16);
                                                lastdisassembledata.parametervaluetype = tdisassemblervaluetype.dvtvalue;
                                                lastdisassembledata.parametervalue = (UIntPtr)memory[(int)last];
                                                lastdisassembledata.parameters = lastdisassembledata.parameters + inttohexs((UIntPtr)memory[(int)last], 2);
                                            }
                                            else
                                            {
                                                lastdisassembledata.opcode = "cmp";
                                                if (rex_w)
                                                {
                                                    lastdisassembledata.parameters = modrm(memory, prefix2, 1, 0, ref last, 64);
                                                    lastdisassembledata.parametervaluetype = tdisassemblervaluetype.dvtvalue;
                                                    lastdisassembledata.parametervalue = (UIntPtr)memory[(int)last];
                                                    lastdisassembledata.parameters = lastdisassembledata.parameters + inttohexs((UIntPtr)memory[(int)last], 2);
                                                }
                                                else
                                                {
                                                    lastdisassembledata.parameters = modrm(memory, prefix2, 1, 0, ref last, 32);
                                                    lastdisassembledata.parametervaluetype = tdisassemblervaluetype.dvtvalue;
                                                    lastdisassembledata.parametervalue = (UIntPtr)memory[(int)last];
                                                    lastdisassembledata.parameters = lastdisassembledata.parameters + inttohexs((UIntPtr)memory[(int)last], 2);
                                                }
                                            }

                                            offset = (UIntPtr)(offset.ToUInt64() + last);
                                            description = "compare two operands";
                                        }
                                        break;


                                }
                            }
                            break;

                        case 0x84:
                            {
                                description = "logical compare";
                                lastdisassembledata.opcode = "test";
                                lastdisassembledata.parameters = modrm(memory, prefix2, 1, 2, ref last) + r8(memory[1]);
                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                            }
                            break;

                        case 0x85:
                            {
                                description = "logical compare";
                                lastdisassembledata.opcode = "test";
                                if (prefix2.Contains(0x66))
                                    lastdisassembledata.parameters = modrm(memory, prefix2, 1, 1, ref last) + r16(memory[1]);
                                else
                                    lastdisassembledata.parameters = modrm(memory, prefix2, 1, 0, ref last) + r32(memory[1]);
                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                            }
                            break;

                        case 0x86:
                            {
                                description = "exchange memory with register";
                                lastdisassembledata.opcode = "xchg";
                                lastdisassembledata.parameters = modrm(memory, prefix2, 1, 2, ref last) + r8(memory[1]);
                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                            }
                            break;

                        case 0x87:
                            {
                                description = "exchange memory with register";
                                lastdisassembledata.opcode = "xchg";
                                if (prefix2.Contains(0x66))
                                    lastdisassembledata.parameters = modrm(memory, prefix2, 1, 1, ref last) + r16(memory[1]);
                                else
                                    lastdisassembledata.parameters = modrm(memory, prefix2, 1, 0, ref last) + r32(memory[1]);
                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                            }
                            break;

                        case 0x88:
                            {
                                description = "copy memory";
                                lastdisassembledata.opcode = "mov";
                                lastdisassembledata.parameters = modrm(memory, prefix2, 1, 2, ref last) + r8(memory[1]);
                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                            }
                            break;

                        case 0x89:
                            {
                                description = "copy memory";
                                lastdisassembledata.opcode = "mov";
                                if (prefix2.Contains(0x66))
                                    lastdisassembledata.parameters = modrm(memory, prefix2, 1, 1, ref last) + r16(memory[1]);
                                else
                                    lastdisassembledata.parameters = modrm(memory, prefix2, 1, 0, ref last) + r32(memory[1]);
                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                            }
                            break;

                        case 0x8a:
                            {
                                description = "copy memory";
                                lastdisassembledata.opcode = "mov";
                                lastdisassembledata.parameters = r8(memory[1]) + modrm(memory, prefix2, 1, 2, ref last, tmrpos.mright);

                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                            }
                            break;

                        case 0x8b:
                            {
                                description = "copy memory";
                                lastdisassembledata.opcode = "mov";
                                if (prefix2.Contains(0x66))
                                    lastdisassembledata.parameters = r16(memory[1]) + modrm(memory, prefix2, 1, 1, ref last, tmrpos.mright);
                                else
                                    lastdisassembledata.parameters = r32(memory[1]) + modrm(memory, prefix2, 1, 0, ref last, tmrpos.mright);

                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                            }
                            break;

                        case 0x8c:
                            {
                                description = "copy memory";
                                lastdisassembledata.opcode = "mov";
                                lastdisassembledata.parameters = modrm(memory, prefix2, 1, 1, ref last) + sreg(memory[1]);
                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                            }
                            break;

                        case 0x8d:
                            {
                                description = "load effective address";
                                lastdisassembledata.opcode = "lea";
                                if (prefix2.Contains(0x66))
                                {
                                    if (SelfSymbolHandler.Process.IsX64 & (prefix2.Contains(0x67)))
                                        lastdisassembledata.parameters = r16(memory[1]) + modrm(memory, prefix2, 1, 1, ref last, 0, 32, tmrpos.mright);
                                    else
                                        lastdisassembledata.parameters = r16(memory[1]) + modrm(memory, prefix2, 1, 1, ref last, 0, 0, tmrpos.mright);
                                }
                                else
                                {
                                    if (SelfSymbolHandler.Process.IsX64 & (prefix2.Contains(0x67)))
                                        lastdisassembledata.parameters = r32(memory[1]) + modrm(memory, prefix2, 1, 0, ref last, 0, 32, tmrpos.mright);
                                    else
                                        lastdisassembledata.parameters = r32(memory[1]) + modrm(memory, prefix2, 1, 0, ref last, 0, 0, tmrpos.mright);
                                }

                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                            }
                            break;

                        case 0x8e:
                            {
                                description = "copy memory";
                                lastdisassembledata.opcode = "mov";
                                lastdisassembledata.parameters = sreg(memory[1]) + modrm(memory, prefix2, 1, 1, ref last, tmrpos.mright);

                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                            }
                            break;

                        case 0x8f:
                            {
                                switch (getreg(memory[1]))
                                {
                                    case 0:
                                        {
                                            description = "pop a value from the stack";
                                            lastdisassembledata.opcode = "pop";
                                            if (prefix2.Contains(0x66))
                                                lastdisassembledata.parameters = modrm(memory, prefix2, 1, 1, ref last, 16);
                                            else
                                                lastdisassembledata.parameters = modrm(memory, prefix2, 1, 0, ref last);

                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                        }
                                        break;

                                    default:
                                        {
                                            lastdisassembledata.opcode = "db";
                                            lastdisassembledata.parameters = colorhex + "8f" + endcolor;
                                            description = "undefined by the intel specification";
                                        }
                                        break;
                                }
                            }
                            break;


                        case 0x90:
                            {
                                description = "no operation";
                                lastdisassembledata.opcode = "nop";
                                if (prefixsize > 0)
                                    lastdisassembledata.parameters = inttohexs((UIntPtr)(prefixsize + 1), 1);
                            }
                            break;

                        case 0x91:
                        case 0x92:
                        case 0x93:
                        case 0x94:
                        case 0x95:
                        case 0x96:
                        case 0x97:
                            {
                                description = "exchange register with register";
                                lastdisassembledata.opcode = "xchg";

                                if (prefix2.Contains(0x66))
                                    lastdisassembledata.parameters = colorreg + "ax" + endcolor + ',' + rd16((Byte)(memory[0] - 0x90));
                                else
                                {
                                    if (rex_w)
                                        lastdisassembledata.parameters = colorreg + "rax" + endcolor + ',' + rd((Byte)(memory[0] - 0x90));
                                    else
                                        lastdisassembledata.parameters = colorreg + "eax" + endcolor + ',' + rd((Byte)(memory[0] - 0x90));
                                }
                            }
                            break;


                        case 0x98:
                            {
                                //cbw/cwde
                                if (prefix2.Contains(0x66))
                                {
                                    lastdisassembledata.opcode = "cbw";
                                    description = "convert byte to word";
                                }
                                else
                                {
                                    if (rex_w)
                                    {
                                        lastdisassembledata.opcode = "cdqe";
                                        description = "convert doubleword to quadword";
                                    }
                                    else
                                    {
                                        lastdisassembledata.opcode = "cwde";
                                        description = "convert word to doubleword";
                                    }
                                }
                            }
                            break;

                        case 0x99:
                            {
                                if (prefix2.Contains(0x66))
                                {
                                    description = "convert word to doubleword";
                                    lastdisassembledata.opcode = "cwd";
                                }
                                else
                                {

                                    if (rex_w)
                                    {
                                        lastdisassembledata.opcode = "cqo";
                                        description = "convert quadword to octword";
                                    }
                                    else
                                    {
                                        lastdisassembledata.opcode = "cdq";
                                        description = "convert doubleword to quadword";
                                    }
                                }
                            }
                            break;

                        case 0x9a:
                            {
                                description = "call procedure";
                                var wordptr = memory.ReadUInt16(5);

                                lastdisassembledata.seperators[lastdisassembledata.seperatorcount] = 1;
                                lastdisassembledata.seperatorcount += 1;

                                lastdisassembledata.seperators[lastdisassembledata.seperatorcount] = 5;
                                lastdisassembledata.seperatorcount += 1;



                                if (is64bit)
                                    lastdisassembledata.opcode = "call (invalid)";
                                else
                                    lastdisassembledata.opcode = "call";


                                lastdisassembledata.parameters = inttohexs((UIntPtr)wordptr, 4) + ':';
                                var dwordptr = memory.ToIntPtr(1).ReadUInt32();;

                                lastdisassembledata.parametervaluetype = tdisassemblervaluetype.dvtaddress;
                                lastdisassembledata.parametervalue = (UIntPtr)dwordptr;

                                offset += 6;
                            }
                            break;

                        case 0x9b:
                            {
                                switch (memory[1])
                                {

                                    case 0xd9:
                                        {
                                            switch (getreg(memory[2]))
                                            {
                                                case 6:
                                                    {
                                                        description = "store fpu environment";
                                                        lastdisassembledata.opcode = "wait:fstenv";
                                                        lastdisassembledata.parameters = modrm(memory, prefix2, 2, 0, ref last);
                                                        offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                    }
                                                    break;


                                                case 7:
                                                    {
                                                        description = "store control word";
                                                        lastdisassembledata.opcode = "wait:fstcw";
                                                        lastdisassembledata.parameters = modrm(memory, prefix2, 2, 0, ref last);
                                                        offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                    }
                                                    break;

                                                default:
                                                    {
                                                        description = "wait";
                                                        lastdisassembledata.opcode = "wait";
                                                    }
                                                    break;

                                            }
                                        }
                                        break;

                                    case 0xdb:
                                        {
                                            switch (memory[2])
                                            {
                                                case 0xe2:
                                                    {
                                                        description = "clear exceptions";
                                                        lastdisassembledata.opcode = "wait:fclex";
                                                        offset += 2;
                                                    }
                                                    break;

                                                case 0xe3:
                                                    {
                                                        description = "initialize floaring-point unit";
                                                        lastdisassembledata.opcode = "wait:finit";
                                                        offset += 2;
                                                    }
                                                    break;
                                                default:
                                                    {
                                                        description = "wait";
                                                        lastdisassembledata.opcode = "wait";
                                                    }
                                                    break;
                                            }
                                        }
                                        break;

                                    case 0xdd:
                                        {
                                            switch (getreg(memory[2]))
                                            {
                                                case 6:
                                                    {
                                                        description = "store fpu state";
                                                        lastdisassembledata.opcode = "wait:fsave";
                                                        lastdisassembledata.parameters = modrm(memory, prefix2, 2, 0, ref last);
                                                        offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                    }
                                                    break;

                                                case 7:
                                                    {
                                                        description = "store status word";
                                                        lastdisassembledata.opcode = "wait:fstsw";
                                                        lastdisassembledata.parameters = modrm(memory, prefix2, 2, 0, ref last);
                                                        offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                    }
                                                    break;

                                                default:
                                                    {
                                                        description = "wait";
                                                        lastdisassembledata.opcode = "wait";
                                                    }
                                                    break;
                                            }
                                        }
                                        break;

                                    case 0xdf:
                                        {
                                            switch (memory[2])
                                            {
                                                case 0xe0:
                                                    {
                                                        description = "store status word";
                                                        lastdisassembledata.opcode = "wait:fstsw ax";
                                                        offset += 2;
                                                    }
                                                    break;

                                                default:
                                                    {
                                                        description = "wait";
                                                        lastdisassembledata.opcode = "wait";
                                                    }
                                                    break;
                                            }
                                        }
                                        break;

                                    default:
                                        {
                                            description = "wait";
                                            lastdisassembledata.opcode = "wait";
                                        }
                                        break;

                                }

                            }
                            break;

                        case 0x9c:
                            {
                                description = "push eflags register onto the stack";
                                if (prefix2.Contains(0x66)) lastdisassembledata.opcode = "pushf";
                                else
                                {
                                    if (is64bit)
                                        lastdisassembledata.opcode = "pushfq";
                                    else
                                        lastdisassembledata.opcode = "pushfd";
                                }
                            }
                            break;

                        case 0x9d:
                            {
                                description = "pop stack into eflags register";
                                if (prefix2.Contains(0x66)) lastdisassembledata.opcode = "popf";
                                else
                                {
                                    if (is64bit)
                                        lastdisassembledata.opcode = "popfq";
                                    else
                                        lastdisassembledata.opcode = "popfd";
                                }
                            }
                            break;

                        case 0x9e:
                            {
                                description = "store ah into flags";
                                lastdisassembledata.opcode = "sahf";
                            }
                            break;

                        case 0x9f:
                            {
                                description = "load status flag into ah register";
                                lastdisassembledata.opcode = "lahf";
                            }
                            break;

                        case 0xa0:
                            {
                                description = "copy memory";
                                var dwordptr = memory.ToIntPtr(1).ReadUInt32();;
                                lastdisassembledata.opcode = "mov";
                                lastdisassembledata.parametervaluetype = tdisassemblervaluetype.dvtaddress;
                                lastdisassembledata.parametervalue = (UIntPtr)dwordptr;
                                lastdisassembledata.seperators[lastdisassembledata.seperatorcount] = 1;
                                lastdisassembledata.seperatorcount += 1;


                                if (SelfSymbolHandler.Process.IsX64)
                                {
                                    lastdisassembledata.parameters = colorreg + "al" + endcolor + ',' + getsegmentoverride(prefix2) + '[' + inttohexs((UIntPtr)dwordptr, 8) + ']';
                                    offset += 8;
                                }
                                else
                                {
                                    lastdisassembledata.parameters = colorreg + "al" + endcolor + ',' + getsegmentoverride(prefix2) + '[' + inttohexs((UIntPtr)dwordptr, 8) + ']';
                                    offset += 4;
                                }


                            }
                            break;

                        case 0xa1:
                            {
                                description = "copy memory";
                                lastdisassembledata.opcode = "mov";
                                var dwordptr = memory.ToIntPtr(1).ReadUInt32();;


                                lastdisassembledata.parametervaluetype = tdisassemblervaluetype.dvtaddress;
                                lastdisassembledata.parametervalue = (UIntPtr)dwordptr;
                                lastdisassembledata.seperators[lastdisassembledata.seperatorcount] = 1;
                                lastdisassembledata.seperatorcount += 1;

                                if (prefix2.Contains(0x66))
                                {
                                    lastdisassembledata.parameters = colorreg + "ax" + endcolor + ',' + getsegmentoverride(prefix2) + '[' + inttohexs((UIntPtr)dwordptr, 8) + ']';
                                }
                                else
                                {
                                    if (rex_w)
                                        lastdisassembledata.parameters = colorreg + "rax" + endcolor + ',';
                                    else
                                        lastdisassembledata.parameters = colorreg + "eax" + endcolor + ',';


                                    if (SelfSymbolHandler.Process.IsX64)
                                        lastdisassembledata.parameters = lastdisassembledata.parameters + getsegmentoverride(prefix2) + '[' + inttohexs((UIntPtr)dwordptr, 8) + ']';
                                    else
                                        lastdisassembledata.parameters = lastdisassembledata.parameters + getsegmentoverride(prefix2) + '[' + inttohexs((UIntPtr)dwordptr, 8) + ']';

                                }

                                if (SelfSymbolHandler.Process.IsX64)
                                    offset += 8;
                                else
                                    offset += 4;

                            }
                            break;

                        case 0xa2:
                            {
                                description = "copy memory";
                                var dwordptr = memory.ToIntPtr(1).ReadUInt32();;
                                lastdisassembledata.opcode = "mov";

                                lastdisassembledata.parametervaluetype = tdisassemblervaluetype.dvtaddress;
                                lastdisassembledata.parametervalue = (UIntPtr)dwordptr;
                                lastdisassembledata.seperators[lastdisassembledata.seperatorcount] = 1;
                                lastdisassembledata.seperatorcount += 1;

                                if (SelfSymbolHandler.Process.IsX64)
                                    lastdisassembledata.parameters = getsegmentoverride(prefix2) + '[' + inttohexs((UIntPtr)dwordptr, 8) + "]," + colorreg + "al" + endcolor;
                                else
                                    lastdisassembledata.parameters = getsegmentoverride(prefix2) + '[' + inttohexs((UIntPtr)dwordptr, 8) + "]," + colorreg + "al" + endcolor;

                                if (SelfSymbolHandler.Process.IsX64)
                                    offset += 8;
                                else
                                    offset += 4;
                            }
                            break;

                        case 0xa3:
                            {
                                description = "copy memory";
                                lastdisassembledata.opcode = "mov";
                                var dwordptr = memory.ToIntPtr(1).ReadUInt32();;

                                lastdisassembledata.parametervaluetype = tdisassemblervaluetype.dvtaddress;
                                lastdisassembledata.parametervalue = (UIntPtr)dwordptr;
                                lastdisassembledata.seperators[lastdisassembledata.seperatorcount] = 1;
                                lastdisassembledata.seperatorcount += 1;

                                if (SelfSymbolHandler.Process.IsX64)
                                    lastdisassembledata.parameters = getsegmentoverride(prefix2) + '[' + inttohexs((UIntPtr)dwordptr, 8) + "],";
                                else
                                    lastdisassembledata.parameters = getsegmentoverride(prefix2) + '[' + inttohexs((UIntPtr)dwordptr, 8) + "],";

                                if (prefix2.Contains(0x66))
                                    lastdisassembledata.parameters = lastdisassembledata.parameters + colorreg + "ax" + endcolor;
                                else
                                {
                                    if (rex_w)
                                        lastdisassembledata.parameters = lastdisassembledata.parameters + colorreg + "rax" + endcolor;
                                    else
                                        lastdisassembledata.parameters = lastdisassembledata.parameters + colorreg + "eax" + endcolor;
                                }

                                if (SelfSymbolHandler.Process.IsX64)
                                    offset += 8;
                                else
                                    offset += 4;
                            }
                            break;

                        case 0xa4:
                            {
                                description = "move data from string to string";
                                lastdisassembledata.opcode = "movsb";
                            }
                            break;

                        case 0xa5:
                            {
                                description = "move data from string to string";
                                if (prefix2.Contains(0x66))
                                    lastdisassembledata.opcode = "movsw";
                                else
                                {
                                    if (rex_w)
                                        lastdisassembledata.opcode = "movsq";
                                    else
                                        lastdisassembledata.opcode = "movsd";
                                }
                            }
                            break;

                        case 0xa6:
                            {
                                description = "compare string operands";
                                lastdisassembledata.opcode = "cmpsb";
                            }
                            break;

                        case 0xa7:
                            {
                                description = "compare string operands";
                                if (prefix2.Contains(0x66))
                                    lastdisassembledata.opcode = "cmpsw";
                                else
                                {
                                    if (rex_w)
                                        lastdisassembledata.opcode = "cmpsq";
                                    else
                                        lastdisassembledata.opcode = "cmpsd";
                                }
                            }
                            break;

                        case 0xa8:
                            {
                                description = "logical compare";
                                lastdisassembledata.opcode = "test";

                                lastdisassembledata.parametervaluetype = tdisassemblervaluetype.dvtvalue;
                                lastdisassembledata.parametervalue = (UIntPtr)memory[1];
                                lastdisassembledata.seperators[lastdisassembledata.seperatorcount] = 1;
                                lastdisassembledata.seperatorcount += 1;

                                lastdisassembledata.parameters = colorreg + "al" + endcolor + ',' + inttohexs((UIntPtr)memory[1], 2);
                                offset += 1;
                            }
                            break;

                        case 0xa9:
                            {
                                description = "logical compare";
                                lastdisassembledata.opcode = "test";

                                lastdisassembledata.seperators[lastdisassembledata.seperatorcount] = 1;
                                lastdisassembledata.seperatorcount += 1;

                                if (prefix2.Contains(0x66))
                                {
                                    var wordptr = memory.ToIntPtr(1).ReadUInt16();;
                                    lastdisassembledata.parametervaluetype = tdisassemblervaluetype.dvtvalue;
                                    lastdisassembledata.parametervalue = (UIntPtr)wordptr;

                                    lastdisassembledata.parameters = colorreg + "ax" + endcolor + ',' + inttohexs((UIntPtr)wordptr, 4);
                                    offset += 2;
                                }
                                else
                                {
                                    var dwordptr = memory.ToIntPtr(1).ReadUInt32();;
                                    lastdisassembledata.parametervaluetype = tdisassemblervaluetype.dvtvalue;
                                    lastdisassembledata.parametervalue = (UIntPtr)dwordptr;

                                    if (rex_w)
                                        lastdisassembledata.parameters = colorreg + "rax" + endcolor + ',' + inttohexs((UIntPtr)(Int32)dwordptr, 8);
                                    else
                                        lastdisassembledata.parameters = colorreg + "eax" + endcolor + ',' + inttohexs((UIntPtr)dwordptr, 8);
                                    offset += 4;
                                }
                            }
                            break;

                        case 0xaa:
                            {
                                description = "store string";
                                lastdisassembledata.opcode = "stosb";
                            }
                            break;

                        case 0xab:
                            {
                                description = "store string";
                                if (prefix2.Contains(0x66)) lastdisassembledata.opcode = "stosw";
                                else
                                {
                                    if (rex_w)
                                        lastdisassembledata.opcode = "stosq";
                                    else
                                        lastdisassembledata.opcode = "stosd";
                                }
                            }
                            break;

                        case 0xac:
                            {
                                description = "load string";
                                lastdisassembledata.opcode = "lodsb";
                            }
                            break;

                        case 0xad:
                            {
                                description = "load string";
                                if (prefix2.Contains(0x66)) lastdisassembledata.opcode = "lodsw";
                                else
                                {
                                    if (rex_w)
                                        lastdisassembledata.opcode = "lodsq";
                                    else
                                        lastdisassembledata.opcode = "lodsd";
                                }
                            }
                            break;

                        case 0xae:
                            {
                                description = "compare al with byte at es:edi and set status flag";
                                lastdisassembledata.opcode = "scasb";
                            }
                            break;

                        case 0xaf:
                            {
                                description = "scan string";
                                if (prefix2.Contains(0x66)) lastdisassembledata.opcode = "scasw";
                                else
                                {
                                    if (rex_w)
                                        lastdisassembledata.opcode = "scasq";
                                    else
                                        lastdisassembledata.opcode = "scasd";
                                }
                            }
                            break;

                        case 0xb0:
                        case 0xb1:
                        case 0xb2:
                        case 0xb3:
                        case 0xb4:
                        case 0xb5:
                        case 0xb6:
                        case 0xb7:
                            {
                                description = "copy memory";
                                lastdisassembledata.opcode = "mov";
                                lastdisassembledata.parametervaluetype = tdisassemblervaluetype.dvtvalue;
                                lastdisassembledata.parametervalue = (UIntPtr)memory[1];
                                lastdisassembledata.seperators[lastdisassembledata.seperatorcount] = 1;
                                lastdisassembledata.seperatorcount += 1;

                                //              if Rex_B

                                lastdisassembledata.parameters = rd8((Byte)(memory[0] - 0xb0)) + ',' + inttohexs((UIntPtr)memory[1], 2);
                                offset += 1;
                            }
                            break;

                        case 0xb8:
                        case 0xb9:
                        case 0xba:
                        case 0xbb:
                        case 0xbc:
                        case 0xbd:
                        case 0xbe:
                        case 0xbf:
                            {
                                description = "copy memory";

                                lastdisassembledata.seperators[lastdisassembledata.seperatorcount] = 1;
                                lastdisassembledata.seperatorcount += 1;


                                if (prefix2.Contains(0x66))
                                {
                                    var wordptr = memory.ToIntPtr(1).ReadUInt16();;
                                    lastdisassembledata.parametervaluetype = tdisassemblervaluetype.dvtvalue;
                                    lastdisassembledata.parametervalue = (UIntPtr)wordptr;

                                    lastdisassembledata.opcode = "mov";
                                    lastdisassembledata.parameters = rd16((Byte)(memory[0] - 0xb8)) + ',' + inttohexs((UIntPtr)wordptr, 4);
                                    offset += 2;
                                }
                                else
                                {
                                    var dwordptr = memory.ToIntPtr(1).ReadUInt32();;
                                    lastdisassembledata.parametervaluetype = tdisassemblervaluetype.dvtvalue;


                                    if (rex_w)
                                    {
                                        lastdisassembledata.opcode = "mov";
                                        lastdisassembledata.parametervalue = (UIntPtr)dwordptr;
                                        lastdisassembledata.parameters = rd((Byte)(memory[0] - 0xb8)) + ',' + inttohexs((UIntPtr)dwordptr, 16);
                                        offset += 8;
                                    }
                                    else
                                    {
                                        lastdisassembledata.opcode = "mov";
                                        lastdisassembledata.parametervalue = (UIntPtr)dwordptr;

                                        lastdisassembledata.parameters = rd((Byte)(memory[0] - 0xb8)) + ',' + inttohexs((UIntPtr)dwordptr, 8);
                                        offset += 4;
                                    }
                                }
                            }
                            break;

                        case 0xc0:
                            {
                                switch (getreg(memory[1]))
                                {
                                    case 0:
                                        {
                                            lastdisassembledata.opcode = "rol";
                                            lastdisassembledata.parameters = modrm(memory, prefix2, 1, 2, ref last, 8);

                                            lastdisassembledata.parametervaluetype = tdisassemblervaluetype.dvtvalue;
                                            lastdisassembledata.parametervalue = (UIntPtr)memory[(int)last];

                                            lastdisassembledata.parameters = lastdisassembledata.parameters + inttohexs((UIntPtr)memory[(int)last], 2);
                                            description = "rotate eight bits left " + (memory[(int)last]) + " times";
                                            offset = (UIntPtr)(offset.ToUInt64() + last);
                                        }
                                        break;

                                    case 1:
                                        {
                                            lastdisassembledata.opcode = "ror";
                                            lastdisassembledata.parameters = modrm(memory, prefix2, 1, 2, ref last, 8);
                                            lastdisassembledata.parametervaluetype = tdisassemblervaluetype.dvtvalue;
                                            lastdisassembledata.parametervalue = (UIntPtr)memory[(int)last];
                                            lastdisassembledata.parameters = lastdisassembledata.parameters + inttohexs((UIntPtr)memory[(int)last], 2);
                                            description = "rotate eight bits right " + (memory[(int)last]) + " times";
                                            offset = (UIntPtr)(offset.ToUInt64() + last);
                                        }
                                        break;

                                    case 2:
                                        {
                                            lastdisassembledata.opcode = "rcl";
                                            lastdisassembledata.parameters = modrm(memory, prefix2, 1, 2, ref last, 8);
                                            lastdisassembledata.parametervaluetype = tdisassemblervaluetype.dvtvalue;
                                            lastdisassembledata.parametervalue = (UIntPtr)memory[(int)last];
                                            lastdisassembledata.parameters = lastdisassembledata.parameters + inttohexs((UIntPtr)memory[(int)last], 2);
                                            description = "rotate nine bits left " + (memory[(int)last]) + " times";
                                            offset = (UIntPtr)(offset.ToUInt64() + last);
                                        }
                                        break;

                                    case 3:
                                        {
                                            lastdisassembledata.opcode = "rcr";
                                            lastdisassembledata.parameters = modrm(memory, prefix2, 1, 2, ref last, 8);
                                            lastdisassembledata.parametervaluetype = tdisassemblervaluetype.dvtvalue;
                                            lastdisassembledata.parametervalue = (UIntPtr)memory[(int)last];
                                            lastdisassembledata.parameters = lastdisassembledata.parameters + inttohexs((UIntPtr)memory[(int)last], 2);
                                            description = "rotate nine bits right " + (memory[(int)last]) + " times";
                                            offset = (UIntPtr)(offset.ToUInt64() + last);
                                        }
                                        break;

                                    case 4:
                                        {
                                            lastdisassembledata.opcode = "shl";
                                            lastdisassembledata.parameters = modrm(memory, prefix2, 1, 2, ref last, 8);
                                            lastdisassembledata.parametervaluetype = tdisassemblervaluetype.dvtvalue;
                                            lastdisassembledata.parametervalue = (UIntPtr)memory[(int)last];
                                            lastdisassembledata.parameters = lastdisassembledata.parameters + inttohexs((UIntPtr)memory[(int)last], 2);
                                            description = "multiply by 2, " + (memory[(int)last]) + " times";
                                            offset = (UIntPtr)(offset.ToUInt64() + last);
                                        }
                                        break;

                                    case 5:
                                        {
                                            lastdisassembledata.opcode = "shr";
                                            lastdisassembledata.parameters = modrm(memory, prefix2, 1, 2, ref last, 8);
                                            lastdisassembledata.parametervaluetype = tdisassemblervaluetype.dvtvalue;
                                            lastdisassembledata.parametervalue = (UIntPtr)memory[(int)last];
                                            lastdisassembledata.parameters = lastdisassembledata.parameters + inttohexs((UIntPtr)memory[(int)last], 2);
                                            description = "unsigned divide by 2, " + (memory[(int)last]) + " times";
                                            offset = (UIntPtr)(offset.ToUInt64() + last);
                                        }
                                        break;

                                    /*not in intel spec*/
                                    case 6:
                                        {
                                            lastdisassembledata.opcode = "rol";
                                            lastdisassembledata.parameters = modrm(memory, prefix2, 1, 2, ref last, 8);
                                            lastdisassembledata.parametervaluetype = tdisassemblervaluetype.dvtvalue;
                                            lastdisassembledata.parametervalue = (UIntPtr)memory[(int)last];
                                            lastdisassembledata.parameters = lastdisassembledata.parameters + inttohexs((UIntPtr)memory[(int)last], 2);
                                            description = "rotate eight bits left " + (memory[(int)last]) + " times";
                                            offset = (UIntPtr)(offset.ToUInt64() + last);
                                        }
                                        break;
                                    /*^^^^^^^^^^^^^^^^^^*/

                                    case 7:
                                        {
                                            lastdisassembledata.opcode = "sar";
                                            lastdisassembledata.parameters = modrm(memory, prefix2, 1, 2, ref last, 8);
                                            lastdisassembledata.parametervaluetype = tdisassemblervaluetype.dvtvalue;
                                            lastdisassembledata.parametervalue = (UIntPtr)memory[(int)last];
                                            lastdisassembledata.parameters = lastdisassembledata.parameters + inttohexs((UIntPtr)memory[(int)last], 2);
                                            description = "signed divide by 2, " + (memory[(int)last]) + " times";
                                            offset = (UIntPtr)(offset.ToUInt64() + last);
                                        }
                                        break;

                                }
                            }
                            break;

                        case 0xc1:
                            {
                                switch (getreg(memory[1]))
                                {
                                    case 0:
                                        {
                                            if (prefix2.Contains(0x66))
                                            {
                                                lastdisassembledata.opcode = "rol";
                                                lastdisassembledata.parameters = modrm(memory, prefix2, 1, 1, ref last, 16);
                                                lastdisassembledata.parametervaluetype = tdisassemblervaluetype.dvtvalue;
                                                lastdisassembledata.parametervalue = (UIntPtr)memory[(int)last];
                                                lastdisassembledata.parameters = lastdisassembledata.parameters + inttohexs((UIntPtr)memory[(int)last], 2);
                                                description = "rotate 16 bits left " + (memory[(int)last]) + " times";
                                                offset = (UIntPtr)(offset.ToUInt64() + last);
                                            }
                                            else
                                            {
                                                lastdisassembledata.opcode = "rol";
                                                lastdisassembledata.parameters = modrm(memory, prefix2, 1, 0, ref last);
                                                lastdisassembledata.parametervaluetype = tdisassemblervaluetype.dvtvalue;
                                                lastdisassembledata.parametervalue = (UIntPtr)memory[(int)last];

                                                lastdisassembledata.parameters = lastdisassembledata.parameters + inttohexs((UIntPtr)memory[(int)last], 2);
                                                description = "rotate 32 bits left " + (memory[(int)last]) + " times";
                                                offset = (UIntPtr)(offset.ToUInt64() + last);
                                            }
                                        }
                                        break;

                                    case 1:
                                        {
                                            if (prefix2.Contains(0x66))
                                            {
                                                lastdisassembledata.opcode = "ror";
                                                lastdisassembledata.parameters = modrm(memory, prefix2, 1, 1, ref last, 16);
                                                lastdisassembledata.parametervaluetype = tdisassemblervaluetype.dvtvalue;
                                                lastdisassembledata.parametervalue = (UIntPtr)memory[(int)last];
                                                lastdisassembledata.parameters = lastdisassembledata.parameters + inttohexs((UIntPtr)memory[(int)last], 2);
                                                description = "rotate 16 bits right " + (memory[(int)last]) + " times";
                                                offset = (UIntPtr)(offset.ToUInt64() + last);
                                            }
                                            else
                                            {
                                                lastdisassembledata.opcode = "ror";
                                                lastdisassembledata.parameters = modrm(memory, prefix2, 1, 0, ref last);
                                                lastdisassembledata.parametervaluetype = tdisassemblervaluetype.dvtvalue;
                                                lastdisassembledata.parametervalue = (UIntPtr)memory[(int)last];
                                                lastdisassembledata.parameters = lastdisassembledata.parameters + inttohexs((UIntPtr)memory[(int)last], 2);
                                                description = "rotate 32 bits right " + (memory[(int)last]) + " times";
                                                offset = (UIntPtr)(offset.ToUInt64() + last);
                                            }
                                        }
                                        break;

                                    case 2:
                                        {
                                            if (prefix2.Contains(0x66))
                                            {
                                                lastdisassembledata.opcode = "rcl";
                                                lastdisassembledata.parameters = modrm(memory, prefix2, 1, 1, ref last, 16);
                                                lastdisassembledata.parametervaluetype = tdisassemblervaluetype.dvtvalue;
                                                lastdisassembledata.parametervalue = (UIntPtr)memory[(int)last];
                                                lastdisassembledata.parameters = lastdisassembledata.parameters + inttohexs((UIntPtr)memory[(int)last], 2);
                                                description = "rotate 17 bits left " + (memory[(int)last]) + " times";
                                                offset = (UIntPtr)(offset.ToUInt64() + last);
                                            }
                                            else
                                            {
                                                lastdisassembledata.opcode = "rcl";
                                                lastdisassembledata.parameters = modrm(memory, prefix2, 1, 0, ref last);
                                                lastdisassembledata.parametervaluetype = tdisassemblervaluetype.dvtvalue;
                                                lastdisassembledata.parametervalue = (UIntPtr)memory[(int)last];
                                                lastdisassembledata.parameters = lastdisassembledata.parameters + inttohexs((UIntPtr)memory[(int)last], 2);
                                                description = "rotate 33 bits left " + (memory[(int)last]) + " times";
                                                offset = (UIntPtr)(offset.ToUInt64() + last);
                                            }
                                        }
                                        break;

                                    case 3:
                                        {
                                            if (prefix2.Contains(0x66))
                                            {
                                                lastdisassembledata.opcode = "rcr";
                                                lastdisassembledata.parameters = modrm(memory, prefix2, 1, 1, ref last, 16);
                                                lastdisassembledata.parametervaluetype = tdisassemblervaluetype.dvtvalue;
                                                lastdisassembledata.parametervalue = (UIntPtr)memory[(int)last];
                                                lastdisassembledata.parameters = lastdisassembledata.parameters + inttohexs((UIntPtr)memory[(int)last], 2);
                                                description = "rotate 17 bits right " + (memory[(int)last]) + " times";
                                                offset = (UIntPtr)(offset.ToUInt64() + last);
                                            }
                                            else
                                            {
                                                lastdisassembledata.opcode = "rcr";
                                                lastdisassembledata.parameters = modrm(memory, prefix2, 1, 0, ref last);
                                                lastdisassembledata.parametervaluetype = tdisassemblervaluetype.dvtvalue;
                                                lastdisassembledata.parametervalue = (UIntPtr)memory[(int)last];
                                                lastdisassembledata.parameters = lastdisassembledata.parameters + inttohexs((UIntPtr)memory[(int)last], 2);
                                                description = "rotate 33 bits right " + (memory[(int)last]) + " times";
                                                offset = (UIntPtr)(offset.ToUInt64() + last);
                                            }
                                        }
                                        break;

                                    case 4:
                                        {
                                            if (prefix2.Contains(0x66))
                                            {
                                                lastdisassembledata.opcode = "shl";
                                                lastdisassembledata.parameters = modrm(memory, prefix2, 1, 1, ref last, 16);
                                                lastdisassembledata.parametervaluetype = tdisassemblervaluetype.dvtvalue;
                                                lastdisassembledata.parametervalue = (UIntPtr)memory[(int)last];
                                                lastdisassembledata.parameters = lastdisassembledata.parameters + inttohexs((UIntPtr)memory[(int)last], 2);
                                                description = "multiply by 2 " + (memory[(int)last]) + " times";
                                                offset = (UIntPtr)(offset.ToUInt64() + last);
                                            }
                                            else
                                            {
                                                lastdisassembledata.opcode = "shl";
                                                lastdisassembledata.parameters = modrm(memory, prefix2, 1, 0, ref last);
                                                lastdisassembledata.parametervaluetype = tdisassemblervaluetype.dvtvalue;
                                                lastdisassembledata.parametervalue = (UIntPtr)memory[(int)last];
                                                lastdisassembledata.parameters = lastdisassembledata.parameters + inttohexs((UIntPtr)memory[(int)last], 2);
                                                description = "multiply by 2 " + (memory[(int)last]) + " times";
                                                offset = (UIntPtr)(offset.ToUInt64() + last);
                                            }
                                        }
                                        break;

                                    case 5:
                                        {
                                            if (prefix2.Contains(0x66))
                                            {
                                                lastdisassembledata.opcode = "shr";
                                                lastdisassembledata.parameters = modrm(memory, prefix2, 1, 1, ref last, 16);
                                                lastdisassembledata.parametervaluetype = tdisassemblervaluetype.dvtvalue;
                                                lastdisassembledata.parametervalue = (UIntPtr)memory[(int)last];
                                                lastdisassembledata.parameters = lastdisassembledata.parameters + inttohexs((UIntPtr)memory[(int)last], 2);
                                                description = "unsigned divide by 2 " + (memory[(int)last]) + " times";
                                                offset = (UIntPtr)(offset.ToUInt64() + last);
                                            }
                                            else
                                            {
                                                lastdisassembledata.opcode = "shr";
                                                lastdisassembledata.parameters = modrm(memory, prefix2, 1, 0, ref last);
                                                lastdisassembledata.parametervaluetype = tdisassemblervaluetype.dvtvalue;
                                                lastdisassembledata.parametervalue = (UIntPtr)memory[(int)last];
                                                lastdisassembledata.parameters = lastdisassembledata.parameters + inttohexs((UIntPtr)memory[(int)last], 2);
                                                description = "unsigned divide by 2 " + (memory[(int)last]) + " times";
                                                offset = (UIntPtr)(offset.ToUInt64() + last);
                                            }
                                        }
                                        break;

                                    case 7:
                                        {
                                            if (prefix2.Contains(0x66))
                                            {
                                                lastdisassembledata.opcode = "sar";
                                                lastdisassembledata.parameters = modrm(memory, prefix2, 1, 1, ref last, 16);
                                                lastdisassembledata.parametervaluetype = tdisassemblervaluetype.dvtvalue;
                                                lastdisassembledata.parametervalue = (UIntPtr)memory[(int)last];
                                                lastdisassembledata.parameters = lastdisassembledata.parameters + inttohexs((UIntPtr)memory[(int)last], 2);
                                                description = "signed divide by 2 " + (memory[(int)last]) + " times";
                                                offset = (UIntPtr)(offset.ToUInt64() + last);
                                            }
                                            else
                                            {
                                                lastdisassembledata.opcode = "sar";
                                                lastdisassembledata.parameters = modrm(memory, prefix2, 1, 0, ref last);
                                                lastdisassembledata.parametervaluetype = tdisassemblervaluetype.dvtvalue;
                                                lastdisassembledata.parametervalue = (UIntPtr)memory[(int)last];
                                                lastdisassembledata.parameters = lastdisassembledata.parameters + inttohexs((UIntPtr)memory[(int)last], 2);
                                                description = "signed divide by 2 " + (memory[(int)last]) + " times";
                                                offset = (UIntPtr)(offset.ToUInt64() + last);
                                            }
                                        }
                                        break;

                                }
                            }
                            break;

                        case 0xc2:
                            {

                                var wordptr = memory.ToIntPtr(1).ReadUInt16();;
                                lastdisassembledata.parametervaluetype = tdisassemblervaluetype.dvtvalue;
                                lastdisassembledata.parametervalue = (UIntPtr)wordptr;
                                lastdisassembledata.seperators[lastdisassembledata.seperatorcount] = 1;
                                lastdisassembledata.seperatorcount += 1;

                                lastdisassembledata.opcode = "ret";
                                lastdisassembledata.isret = true;
                                lastdisassembledata.parameters = inttohexs((UIntPtr)wordptr, 4);
                                offset += 2;

                                description = "near return to calling procedure and pop " + (lastdisassembledata.parametervalue) + " bytes from stack";


                            }
                            break;

                        case 0xc3:
                            {
                                description = "near return to calling procedure";
                                lastdisassembledata.opcode = "ret";
                                lastdisassembledata.isret = true;
                            }
                            break;

                        case 0xc4:
                            {
                                if (SelfSymbolHandler.Process.IsX64 == false)
                                {
                                    description = "load far pointer";
                                    lastdisassembledata.opcode = "les";
                                    if (prefix2.Contains(0x66))
                                        lastdisassembledata.parameters = r16(memory[1]) + modrm(memory, prefix2, 1, 1, ref last, tmrpos.mright);
                                    else
                                        lastdisassembledata.parameters = r32(memory[1]) + modrm(memory, prefix2, 1, 0, ref last, tmrpos.mright);

                                    offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                }
                            }
                            break;

                        case 0xc5:
                            {
                                if (SelfSymbolHandler.Process.IsX64 == false)
                                {
                                    description = "load far pointer";
                                    lastdisassembledata.opcode = "lds";
                                    if (prefix2.Contains(0x66))
                                        lastdisassembledata.parameters = r16(memory[1]) + modrm(memory, prefix2, 1, 1, ref last, tmrpos.mright);
                                    else
                                        lastdisassembledata.parameters = r32(memory[1]) + modrm(memory, prefix2, 1, 0, ref last, tmrpos.mright);

                                    offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                }
                            }
                            break;

                        case 0xc6:
                            {
                                if (memory[1] == 0xf8)
                                {
                                    offset += 1;
                                    lastdisassembledata.opcode = "xabort";
                                    description = "transactional abort";

                                    lastdisassembledata.parametervaluetype = tdisassemblervaluetype.dvtvalue;
                                    lastdisassembledata.parametervalue = (UIntPtr)memory[2];
                                    lastdisassembledata.seperators[lastdisassembledata.seperatorcount] = 1;
                                    lastdisassembledata.seperatorcount += 1;
                                    lastdisassembledata.parameters = inttohexs((UIntPtr)memory[2], 2);

                                }
                                else
                                    switch (getreg(memory[1]))
                                    {
                                        case 0:
                                            {
                                                description = "copy memory";
                                                lastdisassembledata.opcode = "mov";
                                                lastdisassembledata.parameters = modrm(memory, prefix2, 1, 2, ref last, 8);
                                                lastdisassembledata.parametervaluetype = tdisassemblervaluetype.dvtvalue;
                                                lastdisassembledata.parametervalue = (UIntPtr)memory[(int)last];

                                                lastdisassembledata.parameters = lastdisassembledata.parameters + inttohexs((UIntPtr)memory[(int)last], 2);
                                                offset = (UIntPtr)(offset.ToUInt64() + last);
                                            }
                                            break;

                                        default:
                                            {
                                                description = "not defined by the intel documentation";
                                                lastdisassembledata.opcode = "db";
                                                lastdisassembledata.parameters = inttohexs((UIntPtr)memory[0], 2);
                                            }
                                            break;
                                    }
                            }
                            break;

                        case 0xc7:
                            {
                                if (memory[1] == 0xf8)
                                {
                                    description = "Transactional Begin";
                                    lastdisassembledata.opcode = "xbegin";

                                    if (markiprelativeinstructions)
                                    {
                                        lastdisassembledata.riprelative = 1;
                                        riprelative = true;
                                    }
                                    offset += 4;
                                    lastdisassembledata.parametervaluetype = tdisassemblervaluetype.dvtaddress;



                                    if (is64bit)
                                        lastdisassembledata.parametervalue = (UIntPtr)(offset.ToUInt64() + (UInt64)memory.ReadInt32(2));
                                    else
                                        lastdisassembledata.parametervalue = (UIntPtr)(UInt32)(offset.ToUInt64() + (UInt64)memory.ReadInt32(2));

                                    lastdisassembledata.parameters = inttohexs(lastdisassembledata.parametervalue, 8);

                                    lastdisassembledata.seperators[lastdisassembledata.seperatorcount] = 1;
                                    lastdisassembledata.seperatorcount += 1;

                                }
                                else
                                    switch (getreg(memory[1]))
                                    {
                                        case 0:
                                            {
                                                description = "copy memory";
                                                if (prefix2.Contains(0x66))
                                                {
                                                    lastdisassembledata.opcode = "mov";
                                                    lastdisassembledata.parameters = modrm(memory, prefix2, 1, 1, ref last, 16);

                                                    var wordptr = memory.ReadUInt16((int)last);
                                                    lastdisassembledata.parametervaluetype = tdisassemblervaluetype.dvtvalue;
                                                    lastdisassembledata.parametervalue = (UIntPtr)wordptr;

                                                    lastdisassembledata.parameters = lastdisassembledata.parameters + inttohexs((UIntPtr)wordptr, 4);
                                                    offset = (UIntPtr)(offset.ToUInt64() + last + 1);
                                                }
                                                else
                                                {
                                                    lastdisassembledata.opcode = "mov";

                                                    if (rex_w)
                                                        lastdisassembledata.parameters = modrm(memory, prefix2, 1, 0, ref last, 64);
                                                    else
                                                        lastdisassembledata.parameters = modrm(memory, prefix2, 1, 0, ref last);

                                                    var dwordptr = memory.ReadUInt32((int)last);
                                                    lastdisassembledata.parametervaluetype = tdisassemblervaluetype.dvtvalue;
                                                    lastdisassembledata.parametervalue = (UIntPtr)dwordptr;


                                                    if (rex_w)
                                                        lastdisassembledata.parameters = lastdisassembledata.parameters + inttohexs((UIntPtr)(Int32)dwordptr, 8);
                                                    else
                                                        lastdisassembledata.parameters = lastdisassembledata.parameters + inttohexs((UIntPtr)dwordptr, 8);

                                                    offset = (UIntPtr)(offset.ToUInt64() + last + 3);
                                                }
                                            }
                                            break;

                                        default:
                                            {
                                                description = "not defined by the intel documentation";
                                                lastdisassembledata.opcode = "db";
                                                lastdisassembledata.parameters = inttohexs((UIntPtr)memory[0], 2);
                                            }
                                            break;

                                    }
                            }
                            break;

                        case 0xc8:
                            {
                                description = "make stack frame for procedure parameters";
                                var wordptr = memory.ToIntPtr(1).ReadUInt16();;
                                lastdisassembledata.parametervaluetype = tdisassemblervaluetype.dvtvalue;
                                lastdisassembledata.parametervalue = (UIntPtr)wordptr;
                                lastdisassembledata.seperators[lastdisassembledata.seperatorcount] = 1;
                                lastdisassembledata.seperatorcount += 1;
                                lastdisassembledata.seperators[lastdisassembledata.seperatorcount] = 3;
                                lastdisassembledata.seperatorcount += 1;


                                lastdisassembledata.opcode = "enter";
                                lastdisassembledata.parameters = inttohexs((UIntPtr)wordptr, 4) + ',' + inttohexs((UIntPtr)memory[3], 2);
                                offset += 3;
                            }
                            break;

                        case 0xc9:
                            {
                                description = "high level procedure exit";
                                lastdisassembledata.opcode = "leave";
                            }
                            break;

                        case 0xca:
                            {
                                description = "far return to calling procedure and pop 2 bytes from stack";
                                var wordptr = memory.ToIntPtr(1).ReadUInt16();;
                                lastdisassembledata.opcode = "ret";
                                lastdisassembledata.isret = true;

                                lastdisassembledata.parametervaluetype = tdisassemblervaluetype.dvtvalue;
                                lastdisassembledata.parametervalue = (UIntPtr)wordptr;
                                lastdisassembledata.seperators[lastdisassembledata.seperatorcount] = 1;
                                lastdisassembledata.seperatorcount += 1;

                                lastdisassembledata.parameters = inttohexs((UIntPtr)wordptr, 4);
                                offset += 2;
                            }
                            break;

                        case 0xcb:
                            {
                                description = "far return to calling procedure";
                                lastdisassembledata.opcode = "ret";
                                lastdisassembledata.isret = true;
                            }
                            break;

                        case 0xcc:
                            {
                                //should not be shown if its being debugged using int 3'
                                description = "call to interrupt procedure-3:trap to debugger";
                                lastdisassembledata.opcode = "int 3";
                            }
                            break;

                        case 0xcd:
                            {
                                description = "call to interrupt procedure";
                                lastdisassembledata.opcode = "int";
                                lastdisassembledata.parametervaluetype = tdisassemblervaluetype.dvtvalue;
                                lastdisassembledata.parametervalue = (UIntPtr)memory[1];
                                lastdisassembledata.seperators[lastdisassembledata.seperatorcount] = 1;
                                lastdisassembledata.seperatorcount += 1;

                                lastdisassembledata.parameters = inttohexs((UIntPtr)memory[1], 2);
                                offset += 1;
                            }
                            break;

                        case 0xce:
                            {
                                description = "call to interrupt procedure-4:if overflow flag=1";
                                lastdisassembledata.opcode = "into";
                            }
                            break;

                        case 0xcf:
                            {
                                description = "interrupt return";
                                if (prefix2.Contains(0x66)) lastdisassembledata.opcode = "iret";
                                else
                                {
                                    if (rex_w)
                                        lastdisassembledata.opcode = "iretq";
                                    else
                                        lastdisassembledata.opcode = "iretd";
                                }
                            }
                            break;

                        case 0xd0:
                            {
                                switch (getreg(memory[1]))
                                {
                                    case 0:
                                        {
                                            description = "rotate eight bits left once";
                                            lastdisassembledata.opcode = "rol";
                                            lastdisassembledata.parameters = modrm(memory, prefix2, 1, 2, ref last, 8) + '1';
                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                        }
                                        break;

                                    case 1:
                                        {
                                            description = "rotate eight bits right once";
                                            lastdisassembledata.opcode = "ror";
                                            lastdisassembledata.parameters = modrm(memory, prefix2, 1, 2, ref last, 8) + '1';
                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                        }
                                        break;


                                    case 2:
                                        {
                                            description = "rotate nine bits left once";
                                            lastdisassembledata.opcode = "rcl";
                                            lastdisassembledata.parameters = modrm(memory, prefix2, 1, 2, ref last, 8) + '1';
                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                        }
                                        break;

                                    case 3:
                                        {
                                            description = "rotate nine bits right once";
                                            lastdisassembledata.opcode = "rcr";
                                            lastdisassembledata.parameters = modrm(memory, prefix2, 1, 2, ref last, 8) + '1';
                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                        }
                                        break;

                                    case 4:
                                        {
                                            description = "multiply by 2, once";
                                            lastdisassembledata.opcode = "shl";
                                            lastdisassembledata.parameters = modrm(memory, prefix2, 1, 2, ref last, 8) + '1';
                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                        }
                                        break;

                                    case 5:
                                        {
                                            description = "unsigned divide by 2, once";
                                            lastdisassembledata.opcode = "shr";
                                            lastdisassembledata.parameters = modrm(memory, prefix2, 1, 2, ref last, 8) + '1';
                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                        }
                                        break;

                                    case 6:
                                        {
                                            description = "not defined by the intel documentation";
                                            lastdisassembledata.opcode = "db";
                                            lastdisassembledata.parameters = inttohexs((UIntPtr)memory[0], 2) + ' ' + inttohexs((UIntPtr)memory[1], 2);
                                        }
                                        break;

                                    case 7:
                                        {
                                            description = "signed divide by 2, once";
                                            lastdisassembledata.opcode = "sar";
                                            lastdisassembledata.parameters = modrm(memory, prefix2, 1, 2, ref last, 8) + '1';
                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                        }
                                        break;

                                }
                            }
                            break;

                        case 0xd1:
                            {
                                switch (getreg(memory[1]))
                                {
                                    case 0:
                                        {
                                            if (prefix2.Contains(0x66))
                                            {
                                                description = "rotate 16 bits left once";
                                                lastdisassembledata.opcode = "rol";
                                                lastdisassembledata.parameters = modrm(memory, prefix2, 1, 1, ref last, 16) + '1';
                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                            else
                                            {
                                                description = "rotate 32 bits left once";
                                                lastdisassembledata.opcode = "rol";
                                                lastdisassembledata.parameters = modrm(memory, prefix2, 1, 0, ref last) + '1';
                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                        }
                                        break;

                                    case 1:
                                        {
                                            if (prefix2.Contains(0x66))
                                            {
                                                description = "rotate 16 bits right once";
                                                lastdisassembledata.opcode = "ror";
                                                lastdisassembledata.parameters = modrm(memory, prefix2, 1, 1, ref last, 16) + '1';
                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                            else
                                            {
                                                description = "rotate 32 bits right once";
                                                lastdisassembledata.opcode = "ror";
                                                lastdisassembledata.parameters = modrm(memory, prefix2, 1, 0, ref last) + '1';
                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                        }
                                        break;

                                    case 2:
                                        {
                                            if (prefix2.Contains(0x66))
                                            {
                                                description = "rotate 17 bits left once";
                                                lastdisassembledata.opcode = "rcl";
                                                lastdisassembledata.parameters = modrm(memory, prefix2, 1, 1, ref last, 16) + '1';
                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                            else
                                            {
                                                description = "rotate 33 bits left once";
                                                lastdisassembledata.opcode = "rcl";
                                                lastdisassembledata.parameters = modrm(memory, prefix2, 1, 0, ref last) + '1';
                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                        }
                                        break;

                                    case 3:
                                        {
                                            if (prefix2.Contains(0x66))
                                            {
                                                description = "rotate 17 bits right once";
                                                lastdisassembledata.opcode = "rcr";
                                                lastdisassembledata.parameters = modrm(memory, prefix2, 1, 1, ref last, 16) + '1';
                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                            else
                                            {
                                                description = "rotate 33 bits right once";
                                                lastdisassembledata.opcode = "rcr";
                                                lastdisassembledata.parameters = modrm(memory, prefix2, 1, 0, ref last) + '1';
                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                        }
                                        break;

                                    case 4:
                                        {
                                            if (prefix2.Contains(0x66))
                                            {
                                                description = "multiply by 2, once";
                                                lastdisassembledata.opcode = "shl";
                                                lastdisassembledata.parameters = modrm(memory, prefix2, 1, 1, ref last, 16) + '1';
                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                            else
                                            {
                                                description = "multiply by 2, once";
                                                lastdisassembledata.opcode = "shl";
                                                lastdisassembledata.parameters = modrm(memory, prefix2, 1, 0, ref last) + '1';
                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                        }
                                        break;

                                    case 5:
                                        {
                                            if (prefix2.Contains(0x66))
                                            {
                                                description = "unsigned divide by 2, once";
                                                lastdisassembledata.opcode = "shr";
                                                lastdisassembledata.parameters = modrm(memory, prefix2, 1, 1, ref last, 16) + '1';
                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                            else
                                            {
                                                description = "unsigned divide by 2, once";
                                                lastdisassembledata.opcode = "shr";
                                                lastdisassembledata.parameters = modrm(memory, prefix2, 1, 0, ref last) + '1';
                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                        }
                                        break;

                                    case 6:
                                        {
                                            description = "undefined by the intel documentation";
                                            lastdisassembledata.opcode = "db";
                                            lastdisassembledata.parameters = inttohexs((UIntPtr)memory[0], 2);
                                        }
                                        break;

                                    case 7:
                                        {
                                            if (prefix2.Contains(0x66))
                                            {
                                                description = "signed divide by 2, once";
                                                lastdisassembledata.opcode = "sar";
                                                lastdisassembledata.parameters = modrm(memory, prefix2, 1, 1, ref last, 16) + '1';
                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                            else
                                            {
                                                description = "signed divide by 2, once";
                                                lastdisassembledata.opcode = "sar";
                                                lastdisassembledata.parameters = modrm(memory, prefix2, 1, 0, ref last) + '1';
                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                        }
                                        break;

                                }
                            }
                            break;


                        case 0xd2:
                            {
                                switch (getreg(memory[1]))
                                {
                                    case 0:
                                        {
                                            description = "rotate eight bits left cl times";
                                            lastdisassembledata.opcode = "rol";
                                            lastdisassembledata.parameters = modrm(memory, prefix2, 1, 2, ref last, 8) + colorreg + "cl" + endcolor;
                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                        }
                                        break;

                                    case 1:
                                        {
                                            description = "rotate eight bits right cl times";
                                            lastdisassembledata.opcode = "ror";
                                            lastdisassembledata.parameters = modrm(memory, prefix2, 1, 2, ref last, 8) + colorreg + "cl" + endcolor;
                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                        }
                                        break;

                                    case 2:
                                        {
                                            description = "rotate nine bits left cl times";
                                            lastdisassembledata.opcode = "rcl";
                                            lastdisassembledata.parameters = modrm(memory, prefix2, 1, 2, ref last, 8) + colorreg + "cl" + endcolor;
                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                        }
                                        break;

                                    case 3:
                                        {
                                            description = "rotate nine bits right cl times";
                                            lastdisassembledata.opcode = "rcr";
                                            lastdisassembledata.parameters = modrm(memory, prefix2, 1, 2, ref last, 8) + colorreg + "cl" + endcolor;
                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                        }
                                        break;

                                    case 4:
                                        {
                                            description = "multiply by 2, cl times";
                                            lastdisassembledata.opcode = "shl";
                                            lastdisassembledata.parameters = modrm(memory, prefix2, 1, 2, ref last, 8) + colorreg + "cl" + endcolor;
                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                        }
                                        break;

                                    case 5:
                                        {
                                            description = "unsigned divide by 2, cl times";
                                            lastdisassembledata.opcode = "shr";
                                            lastdisassembledata.parameters = modrm(memory, prefix2, 1, 2, ref last, 8) + colorreg + "cl" + endcolor;
                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                        }
                                        break;

                                    case 6:
                                        {
                                            description = "multiply by 2, cl times";
                                            lastdisassembledata.opcode = "shl";
                                            lastdisassembledata.parameters = modrm(memory, prefix2, 1, 2, ref last, 8) + colorreg + "cl" + endcolor;
                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                        }
                                        break;

                                    case 7:
                                        {
                                            description = "signed divide by 2, cl times";
                                            lastdisassembledata.opcode = "sar";
                                            lastdisassembledata.parameters = modrm(memory, prefix2, 1, 2, ref last, 8) + colorreg + "cl" + endcolor;
                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                        }
                                        break;


                                }
                            }
                            break;

                        case 0xd3:
                            {
                                switch (getreg(memory[1]))
                                {
                                    case 0:
                                        {
                                            if (prefix2.Contains(0x66))
                                            {
                                                description = "rotate 16 bits left cl times";
                                                lastdisassembledata.opcode = "rol";
                                                lastdisassembledata.parameters = modrm(memory, prefix2, 1, 1, ref last, 16) + colorreg + "cl" + endcolor;
                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                            else
                                            {
                                                description = "rotate 32 bits left cl times";
                                                lastdisassembledata.opcode = "rol";
                                                lastdisassembledata.parameters = modrm(memory, prefix2, 1, 0, ref last) + colorreg + "cl" + endcolor;
                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                        }
                                        break;

                                    case 1:
                                        {
                                            if (prefix2.Contains(0x66))
                                            {
                                                description = "rotate 16 bits right cl times";
                                                lastdisassembledata.opcode = "ror";
                                                lastdisassembledata.parameters = modrm(memory, prefix2, 1, 1, ref last, 16) + colorreg + "cl" + endcolor;
                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                            else
                                            {
                                                description = "rotate 32 bits right cl times";
                                                lastdisassembledata.opcode = "ror";
                                                lastdisassembledata.parameters = modrm(memory, prefix2, 1, 0, ref last) + colorreg + "cl" + endcolor;
                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                        }
                                        break;

                                    case 2:
                                        {
                                            if (prefix2.Contains(0x66))
                                            {
                                                description = "rotate 17 bits left cl times";
                                                lastdisassembledata.opcode = "rcl";
                                                lastdisassembledata.parameters = modrm(memory, prefix2, 1, 1, ref last, 16) + colorreg + "cl" + endcolor;
                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                            else
                                            {
                                                description = "rotate 33 bits left cl times";
                                                lastdisassembledata.opcode = "rcl";
                                                lastdisassembledata.parameters = modrm(memory, prefix2, 1, 0, ref last) + colorreg + "cl" + endcolor;
                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                        }
                                        break;

                                    case 3:
                                        {
                                            if (prefix2.Contains(0x66))
                                            {
                                                description = "rotate 17 bits right cl times";
                                                lastdisassembledata.opcode = "rcr";
                                                lastdisassembledata.parameters = modrm(memory, prefix2, 1, 1, ref last, 16) + colorreg + "cl" + endcolor;
                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                            else
                                            {
                                                description = "rotate 33 bits right cl times";
                                                lastdisassembledata.opcode = "rcr";
                                                lastdisassembledata.parameters = modrm(memory, prefix2, 1, 0, ref last) + colorreg + "cl" + endcolor;
                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                        }
                                        break;

                                    case 4:
                                        {
                                            if (prefix2.Contains(0x66))
                                            {
                                                description = "multiply by 2, cl times";
                                                lastdisassembledata.opcode = "shl";
                                                lastdisassembledata.parameters = modrm(memory, prefix2, 1, 1, ref last, 16) + colorreg + "cl" + endcolor;
                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                            else
                                            {
                                                description = "multiply by 2, cl times";
                                                lastdisassembledata.opcode = "shl";
                                                lastdisassembledata.parameters = modrm(memory, prefix2, 1, 0, ref last) + colorreg + "cl" + endcolor;
                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                        }
                                        break;

                                    case 5:
                                        {
                                            if (prefix2.Contains(0x66))
                                            {
                                                description = "unsigned divide by 2, cl times";
                                                lastdisassembledata.opcode = "shr";
                                                lastdisassembledata.parameters = modrm(memory, prefix2, 1, 1, ref last, 16) + colorreg + "cl" + endcolor;
                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                            else
                                            {
                                                description = "unsigned divide by 2, cl times";
                                                lastdisassembledata.opcode = "shr";
                                                lastdisassembledata.parameters = modrm(memory, prefix2, 1, 0, ref last) + colorreg + "cl" + endcolor;
                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                        }
                                        break;

                                    case 7:
                                        {
                                            if (prefix2.Contains(0x66))
                                            {
                                                description = "signed divide by 2, cl times";
                                                lastdisassembledata.opcode = "sar";
                                                lastdisassembledata.parameters = modrm(memory, prefix2, 1, 1, ref last, 16) + colorreg + "cl" + endcolor;
                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                            else
                                            {
                                                description = "signed divide by 2, cl times";
                                                lastdisassembledata.opcode = "sar";
                                                lastdisassembledata.parameters = modrm(memory, prefix2, 1, 0, ref last) + colorreg + "cl" + endcolor;
                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                        }
                                        break;

                                }
                            }
                            break;


                        case 0xd4:
                            {  // aam
                                offset += 1;
                                lastdisassembledata.opcode = "aam";
                                description = "ascii adjust ax after multiply";

                                lastdisassembledata.parametervaluetype = tdisassemblervaluetype.dvtvalue;
                                lastdisassembledata.parametervalue = (UIntPtr)memory[1];
                                lastdisassembledata.seperators[lastdisassembledata.seperatorcount] = 1;
                                lastdisassembledata.seperatorcount += 1;

                                if (memory[1] != 0xa)
                                    lastdisassembledata.parameters = inttohexs((UIntPtr)memory[1], 2);
                            }
                            break;

                        case 0xd5:
                            {  // aad
                                offset += 1;
                                lastdisassembledata.opcode = "aad";
                                description = "ascii adjust ax before division";
                                lastdisassembledata.parametervaluetype = tdisassemblervaluetype.dvtvalue;
                                lastdisassembledata.parametervalue = (UIntPtr)memory[1];
                                lastdisassembledata.seperators[lastdisassembledata.seperatorcount] = 1;
                                lastdisassembledata.seperatorcount += 1;

                                if (memory[1] != 0xa) lastdisassembledata.parameters = inttohexs((UIntPtr)memory[1], 2);
                            }
                            break;

                        case 0xd7:
                            {
                                description = "table look-up translation";
                                lastdisassembledata.opcode = "xlatb";
                            }
                            break;

                        case 0xd8:
                            {
                                switch (getreg(memory[1]))
                                {
                                    case 0:
                                        {
                                            //fadd
                                            description = "add";
                                            lastdisassembledata.opcode = "fadd";
                                            last = 2;
                                            if (memory[1] >= 0xc0)
                                                lastdisassembledata.parameters = "st(0),st(" + (memory[1] - 0xc0) + ')';
                                            else
                                                lastdisassembledata.parameters = modrm(memory, prefix2, 1, 0, ref last, 32);

                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                        }
                                        break;

                                    case 1:
                                        {
                                            description = "multiply";
                                            last = 2;
                                            if (memory[1] >= 0xc8)
                                            {
                                                lastdisassembledata.opcode = "fmul";
                                                lastdisassembledata.parameters = "st(0),st(" + (memory[1] - 0xc8) + ')';
                                            }
                                            else
                                            {
                                                lastdisassembledata.opcode = "fmul";
                                                lastdisassembledata.parameters = modrm(memory, prefix2, 1, 0, ref last, 32);

                                            }
                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                        }
                                        break;


                                    case 2:
                                        {
                                            description = "compare real";
                                            last = 2;
                                            if (memory[1] >= 0xd0)
                                            {
                                                lastdisassembledata.opcode = "fcom";
                                                lastdisassembledata.parameters = "st(0),st(" + (memory[1] - 0xd0) + ')';
                                            }
                                            else
                                            {
                                                lastdisassembledata.opcode = "fcom";
                                                lastdisassembledata.parameters = modrm(memory, prefix2, 1, 0, ref last, 32);

                                            }
                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                        }
                                        break;

                                    case 3:
                                        {
                                            description = "compare real and pop register stack";
                                            last = 2;
                                            if (memory[1] >= 0xd8)
                                            {
                                                lastdisassembledata.opcode = "fcomp";
                                                lastdisassembledata.parameters = "st(0),st(" + (memory[1] - 0xd8) + ')';
                                            }
                                            else
                                            {
                                                lastdisassembledata.opcode = "fcomp";
                                                lastdisassembledata.parameters = modrm(memory, prefix2, 1, 0, ref last, 32);

                                            }
                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                        }
                                        break;

                                    case 4:
                                        {
                                            description = "substract";
                                            last = 2;
                                            if (memory[1] >= 0xe0)
                                            {
                                                lastdisassembledata.opcode = "fsub";
                                                lastdisassembledata.parameters = "st(0),st(" + (memory[1] - 0xe0) + ')';
                                            }
                                            else
                                            {
                                                lastdisassembledata.opcode = "fsub";
                                                lastdisassembledata.parameters = modrm(memory, prefix2, 1, 0, ref last, 32);

                                            }
                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                        }
                                        break;

                                    case 5:
                                        {
                                            description = "reverse substract";
                                            last = 2;
                                            if (memory[1] >= 0xe8)
                                            {
                                                lastdisassembledata.opcode = "fsubr";
                                                lastdisassembledata.parameters = "st(0),st(" + (memory[1] - 0xe8) + ')';
                                            }
                                            else
                                            {
                                                lastdisassembledata.opcode = "fsubr";
                                                lastdisassembledata.parameters = modrm(memory, prefix2, 1, 0, ref last, 32);

                                            }
                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                        }
                                        break;

                                    case 6:
                                        {
                                            description = "divide";
                                            last = 2;
                                            if (memory[1] >= 0xf0)
                                            {
                                                lastdisassembledata.opcode = "fdiv";
                                                lastdisassembledata.parameters = "st(0),st(" + (memory[1] - 0xf0) + ')';
                                            }
                                            else
                                            {
                                                lastdisassembledata.opcode = "fdiv";
                                                lastdisassembledata.parameters = modrm(memory, prefix2, 1, 0, ref last, 32);

                                            }
                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                        }
                                        break;

                                    case 7:
                                        {
                                            description = "reverse divide";
                                            last = 2;
                                            if (memory[1] >= 0xf8)
                                            {
                                                lastdisassembledata.opcode = "fdivr";
                                                lastdisassembledata.parameters = "st(0),st(" + (memory[1] - 0xf8) + ')';
                                            }
                                            else
                                            {
                                                lastdisassembledata.opcode = "fdivr";
                                                lastdisassembledata.parameters = modrm(memory, prefix2, 1, 0, ref last, 32);

                                            }
                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                        }
                                        break;
                                }

                            }
                            break;

                        case 0xd9:
                            {
                                lastdisassembledata.isfloat = true;
                                if (AMathUtils.InRangeX(memory[1], 0x00, 0xbf))
                                {
                                    switch (getreg(memory[1]))
                                    {
                                        case 0:
                                            {
                                                description = "load floating point value";
                                                lastdisassembledata.opcode = "fld";
                                                lastdisassembledata.parameters = modrm(memory, prefix2, 1, 0, ref last, 32);

                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                            break;

                                        case 2:
                                            {
                                                description = "store single";
                                                lastdisassembledata.opcode = "fst";
                                                lastdisassembledata.parameters = modrm(memory, prefix2, 1, 0, ref last, 32);

                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                            break;

                                        case 3:
                                            {
                                                description = "store single";
                                                lastdisassembledata.opcode = "fstp";
                                                lastdisassembledata.parameters = modrm(memory, prefix2, 1, 0, ref last, 32);

                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                            break;

                                        case 4:
                                            {
                                                description = "load fpu environment";
                                                lastdisassembledata.opcode = "fldenv";
                                                lastdisassembledata.parameters = modrm(memory, prefix2, 1, 0, ref last);

                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                            break;

                                        case 5:
                                            {
                                                description = "load control word";
                                                lastdisassembledata.opcode = "fldcw";
                                                lastdisassembledata.parameters = modrm(memory, prefix2, 1, 0, ref last);

                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                            break;

                                        case 6:
                                            {
                                                description = "store fpu environment";
                                                lastdisassembledata.opcode = "fnstenv";
                                                lastdisassembledata.parameters = modrm(memory, prefix2, 1, 0, ref last);

                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                            break;

                                        case 7:
                                            {
                                                description = "store control word";
                                                lastdisassembledata.opcode = "fnstcw";
                                                lastdisassembledata.parameters = modrm(memory, prefix2, 1, 0, ref last);

                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                            break;
                                    }
                                }
                                else if (AMathUtils.InRangeX(memory[1], 0xc0, 0xc7))
                                {
                                    description = "push st(i) onto the fpu register stack";
                                    lastdisassembledata.opcode = "fld";
                                    lastdisassembledata.parameters = "st(" + (memory[1] - 0xc0) + ')';
                                    offset += 1;
                                }
                                else if (AMathUtils.InRangeX(memory[1], 0xc8, 0xcf))
                                {
                                    description = "exchange register contents";
                                    lastdisassembledata.opcode = "fxch";
                                    lastdisassembledata.parameters = "st(" + (memory[1] - 0xc8) + ')';
                                    offset += 1;
                                }
                                else if (AMathUtils.InRangeX(memory[1], 0xd9, 0xdf))
                                {
                                    description = "exchange register contents";
                                    lastdisassembledata.opcode = "fxch";
                                    lastdisassembledata.parameters = "st(" + (memory[1] - 0xd9) + ')';
                                    offset += 1;
                                }
                                else
                                {
                                    switch (memory[1])
                                    {
                                        case 0xd0:
                                            {
                                                description = "no operation";
                                                lastdisassembledata.opcode = "fnop";
                                                offset += 1;
                                            }
                                            break;

                                        case 0xe0:
                                            {
                                                description = "change sign";
                                                lastdisassembledata.opcode = "fchs";
                                                offset += 1;
                                            }
                                            break;

                                        case 0xe1:
                                            {
                                                description = "absolute value";
                                                lastdisassembledata.opcode = "fabs";
                                                offset += 1;
                                            }
                                            break;

                                        case 0xe4:
                                            {
                                                description = "test";
                                                lastdisassembledata.opcode = "ftst";
                                                offset += 1;
                                            }
                                            break;

                                        case 0xe5:
                                            {
                                                description = "examine";
                                                lastdisassembledata.opcode = "fxam";
                                                offset += 1;
                                            }
                                            break;



                                        case 0xe8:
                                            {
                                                description = "Push +1.0 onto the FPU register stack";
                                                lastdisassembledata.opcode = "fld1";
                                                offset += 1;
                                            }
                                            break;

                                        case 0xe9:
                                            {
                                                description = "Push log2(10) onto the FPU register stack";
                                                lastdisassembledata.opcode = "fldl2t";
                                                offset += 1;
                                            }
                                            break;

                                        case 0xea:
                                            {
                                                description = "Push log2(e) onto the FPU register stack";
                                                lastdisassembledata.opcode = "fldl2e";
                                                offset += 1;
                                            }
                                            break;

                                        case 0xeb:
                                            {
                                                description = "Push \"pi\" onto the FPU register stackload constant";
                                                lastdisassembledata.opcode = "fldpi";
                                                offset += 1;
                                            }
                                            break;

                                        case 0xec:
                                            {
                                                description = "Push log10(2) onto the FPU register stack";
                                                lastdisassembledata.opcode = "fldlg2";
                                                offset += 1;
                                            }
                                            break;

                                        case 0xed:
                                            {
                                                description = "Push log e(2) onto the FPU register stack";
                                                lastdisassembledata.opcode = "fldln2";
                                                offset += 1;
                                            }
                                            break;

                                        case 0xee:
                                            {
                                                description = "Push +0.0 onto the FPU register stack";
                                                lastdisassembledata.opcode = "fldz";
                                                offset += 1;
                                            }
                                            break;


                                        case 0xf0:
                                            {
                                                description = "compute 2^x-1";
                                                lastdisassembledata.opcode = "f2xm1";
                                                offset += 1;
                                            }
                                            break;

                                        case 0xf1:
                                            {
                                                description = "compute y*log(2)x";
                                                lastdisassembledata.opcode = "fyl2x";
                                                offset += 1;
                                            }
                                            break;

                                        case 0xf2:
                                            {
                                                description = "partial tangent";
                                                lastdisassembledata.opcode = "fptan";
                                                offset += 1;
                                            }
                                            break;

                                        case 0xf3:
                                            {
                                                description = "partial arctangent";
                                                lastdisassembledata.opcode = "fpatan";
                                                offset += 1;
                                            }
                                            break;

                                        case 0xf4:
                                            {
                                                description = "extract exponent and significand";
                                                lastdisassembledata.opcode = "fxtract";
                                                offset += 1;
                                            }
                                            break;

                                        case 0xf5:
                                            {
                                                description = "partial remainder";
                                                lastdisassembledata.opcode = "fprem1";
                                                offset += 1;
                                            }
                                            break;

                                        case 0xf6:
                                            {
                                                description = "decrement stack-top pointer";
                                                lastdisassembledata.opcode = "fdecstp";
                                                offset += 1;
                                            }
                                            break;

                                        case 0xf7:
                                            {
                                                description = "increment stack-top pointer";
                                                lastdisassembledata.opcode = "fincstp";
                                                offset += 1;
                                            }
                                            break;

                                        case 0xf8:
                                            {
                                                description = "partial remainder";
                                                lastdisassembledata.opcode = "fprem";
                                                offset += 1;
                                            }
                                            break;

                                        case 0xf9:
                                            {
                                                description = "compute y*log(2)(x+1)";
                                                lastdisassembledata.opcode = "fyl2xp1";
                                                offset += 1;
                                            }
                                            break;

                                        case 0xfa:
                                            {
                                                description = "square root";
                                                lastdisassembledata.opcode = "fsqrt";
                                                offset += 1;
                                            }
                                            break;

                                        case 0xfb:
                                            {
                                                description = "sine and cosine";
                                                lastdisassembledata.opcode = "fsincos";
                                                offset += 1;
                                            }
                                            break;


                                        case 0xfc:
                                            {
                                                description = "round to integer";
                                                lastdisassembledata.opcode = "frndint";
                                                offset += 1;
                                            }
                                            break;

                                        case 0xfd:
                                            {
                                                description = "scale";
                                                lastdisassembledata.opcode = "fscale";
                                                offset += 1;
                                            }
                                            break;

                                        case 0xfe:
                                            {
                                                description = "sine";
                                                lastdisassembledata.opcode = "fsin";
                                                offset += 1;
                                            }
                                            break;

                                        case 0xff:
                                            {
                                                description = "cosine";
                                                lastdisassembledata.opcode = "fcos";
                                                offset += 1;
                                            }
                                            break;
                                    }
                                }
                            }
                            break;

                        case 0xda:
                            {
                                if (memory[1] < 0xbf)
                                {
                                    switch (getreg(memory[1]))
                                    {
                                        case 0:
                                            {
                                                description = "add";
                                                lastdisassembledata.opcode = "fiadd";
                                                lastdisassembledata.parameters = modrm(memory, prefix2, 1, 0, ref last);

                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                            break;

                                        case 1:
                                            {
                                                description = "multiply";
                                                lastdisassembledata.opcode = "fimul";
                                                lastdisassembledata.parameters = modrm(memory, prefix2, 1, 0, ref last);

                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                            break;

                                        case 2:
                                            {
                                                description = "compare integer";
                                                lastdisassembledata.opcode = "ficom";
                                                lastdisassembledata.parameters = modrm(memory, prefix2, 1, 0, ref last);

                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                            break;

                                        case 3:
                                            {
                                                description = "compare integer";
                                                lastdisassembledata.opcode = "ficomp";
                                                lastdisassembledata.parameters = modrm(memory, prefix2, 1, 0, ref last);

                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                            break;

                                        case 4:
                                            {
                                                description = "subtract";
                                                lastdisassembledata.opcode = "fisub";
                                                lastdisassembledata.parameters = modrm(memory, prefix2, 1, 0, ref last);

                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                            break;

                                        case 5:
                                            {
                                                description = "reverse subtract";
                                                lastdisassembledata.opcode = "fisubr";
                                                lastdisassembledata.parameters = modrm(memory, prefix2, 1, 0, ref last);

                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                            break;


                                        case 6:
                                            {
                                                description = "divide";
                                                lastdisassembledata.opcode = "fidiv";
                                                lastdisassembledata.parameters = modrm(memory, prefix2, 1, 0, ref last, 32);

                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                            break;

                                        case 7:
                                            {
                                                description = "reverse divide";
                                                lastdisassembledata.opcode = "fidivr";
                                                lastdisassembledata.parameters = modrm(memory, prefix2, 1, 0, ref last);

                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                            break;
                                    }
                                }
                                else
                                {
                                    switch (getreg(memory[1]))
                                    {
                                        case 0:
                                            {
                                                description = "floating-point: move if below";
                                                lastdisassembledata.opcode = "fcmovb";
                                                lastdisassembledata.parameters = "st(0),st(" + (memory[1] - 0xc0) + ')';
                                                offset += 1;
                                            }
                                            break;

                                        case 1:
                                            {
                                                description = "floating-point: move if equal";
                                                lastdisassembledata.opcode = "fcmove";
                                                lastdisassembledata.parameters = "st(0),st(" + (memory[1] - 0xc8) + ')';
                                                offset += 1;
                                            }
                                            break;

                                        case 2:
                                            {
                                                description = "floating-point: move if below or equal";
                                                lastdisassembledata.opcode = "fcmovbe";
                                                lastdisassembledata.parameters = "st(0),st(" + (memory[1] - 0xd0) + ')';
                                                offset += 1;
                                            }
                                            break;

                                        case 3:
                                            {
                                                description = "floating-point: move if unordered";
                                                lastdisassembledata.opcode = "fcmovu";
                                                lastdisassembledata.parameters = "st(0),st(" + (memory[1] - 0xd8) + ')';
                                                offset += 1;
                                            }
                                            break;

                                        case 5:
                                            {
                                                switch (memory[1])
                                                {
                                                    case 0xe9:
                                                        {
                                                            description = "unordered compare real";
                                                            lastdisassembledata.opcode = "fucompp";
                                                            offset += 1;
                                                        }
                                                        break;
                                                }
                                            }
                                            break;
                                    }
                                }
                            }
                            break;

                        case 0xdb:
                            {
                                switch (memory[1])
                                {
                                    case 0x0:
                                    case 0x1:
                                    case 0x2:
                                    case 0x3:
                                    case 0x4:
                                    case 0x5:
                                    case 0x6:
                                    case 0x7:
                                    case 0x8:
                                    case 0x9:
                                    case 0xa:
                                    case 0xb:
                                    case 0xc:
                                    case 0xd:
                                    case 0xe:
                                    case 0xf:
                                    case 0x10:
                                    case 0x11:
                                    case 0x12:
                                    case 0x13:
                                    case 0x14:
                                    case 0x15:
                                    case 0x16:
                                    case 0x17:
                                    case 0x18:
                                    case 0x19:
                                    case 0x1a:
                                    case 0x1b:
                                    case 0x1c:
                                    case 0x1d:
                                    case 0x1e:
                                    case 0x1f:
                                    case 0x20:
                                    case 0x21:
                                    case 0x22:
                                    case 0x23:
                                    case 0x24:
                                    case 0x25:
                                    case 0x26:
                                    case 0x27:
                                    case 0x28:
                                    case 0x29:
                                    case 0x2a:
                                    case 0x2b:
                                    case 0x2c:
                                    case 0x2d:
                                    case 0x2e:
                                    case 0x2f:
                                    case 0x30:
                                    case 0x31:
                                    case 0x32:
                                    case 0x33:
                                    case 0x34:
                                    case 0x35:
                                    case 0x36:
                                    case 0x37:
                                    case 0x38:
                                    case 0x39:
                                    case 0x3a:
                                    case 0x3b:
                                    case 0x3c:
                                    case 0x3d:
                                    case 0x3e:
                                    case 0x3f:
                                    case 0x40:
                                    case 0x41:
                                    case 0x42:
                                    case 0x43:
                                    case 0x44:
                                    case 0x45:
                                    case 0x46:
                                    case 0x47:
                                    case 0x48:
                                    case 0x49:
                                    case 0x4a:
                                    case 0x4b:
                                    case 0x4c:
                                    case 0x4d:
                                    case 0x4e:
                                    case 0x4f:
                                    case 0x50:
                                    case 0x51:
                                    case 0x52:
                                    case 0x53:
                                    case 0x54:
                                    case 0x55:
                                    case 0x56:
                                    case 0x57:
                                    case 0x58:
                                    case 0x59:
                                    case 0x5a:
                                    case 0x5b:
                                    case 0x5c:
                                    case 0x5d:
                                    case 0x5e:
                                    case 0x5f:
                                    case 0x60:
                                    case 0x61:
                                    case 0x62:
                                    case 0x63:
                                    case 0x64:
                                    case 0x65:
                                    case 0x66:
                                    case 0x67:
                                    case 0x68:
                                    case 0x69:
                                    case 0x6a:
                                    case 0x6b:
                                    case 0x6c:
                                    case 0x6d:
                                    case 0x6e:
                                    case 0x6f:
                                    case 0x70:
                                    case 0x71:
                                    case 0x72:
                                    case 0x73:
                                    case 0x74:
                                    case 0x75:
                                    case 0x76:
                                    case 0x77:
                                    case 0x78:
                                    case 0x79:
                                    case 0x7a:
                                    case 0x7b:
                                    case 0x7c:
                                    case 0x7d:
                                    case 0x7e:
                                    case 0x7f:
                                    case 0x80:
                                    case 0x81:
                                    case 0x82:
                                    case 0x83:
                                    case 0x84:
                                    case 0x85:
                                    case 0x86:
                                    case 0x87:
                                    case 0x88:
                                    case 0x89:
                                    case 0x8a:
                                    case 0x8b:
                                    case 0x8c:
                                    case 0x8d:
                                    case 0x8e:
                                    case 0x8f:
                                    case 0x90:
                                    case 0x91:
                                    case 0x92:
                                    case 0x93:
                                    case 0x94:
                                    case 0x95:
                                    case 0x96:
                                    case 0x97:
                                    case 0x98:
                                    case 0x99:
                                    case 0x9a:
                                    case 0x9b:
                                    case 0x9c:
                                    case 0x9d:
                                    case 0x9e:
                                    case 0x9f:
                                    case 0xa0:
                                    case 0xa1:
                                    case 0xa2:
                                    case 0xa3:
                                    case 0xa4:
                                    case 0xa5:
                                    case 0xa6:
                                    case 0xa7:
                                    case 0xa8:
                                    case 0xa9:
                                    case 0xaa:
                                    case 0xab:
                                    case 0xac:
                                    case 0xad:
                                    case 0xae:
                                    case 0xaf:
                                    case 0xb0:
                                    case 0xb1:
                                    case 0xb2:
                                    case 0xb3:
                                    case 0xb4:
                                    case 0xb5:
                                    case 0xb6:
                                    case 0xb7:
                                    case 0xb8:
                                    case 0xb9:
                                    case 0xba:
                                    case 0xbb:
                                    case 0xbc:
                                    case 0xbd:
                                    case 0xbe:
                                    case 0xbf:
                                        {
                                            switch (getreg(memory[1]))
                                            {
                                                case 0:
                                                    {
                                                        description = "load integer";
                                                        lastdisassembledata.opcode = "fild";
                                                        lastdisassembledata.parameters = modrm(memory, prefix2, 1, 0, ref last, 32);

                                                        offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                    }
                                                    break;

                                                case 1:
                                                    {
                                                        description = "store integer with truncation";
                                                        lastdisassembledata.opcode = "fisttp";
                                                        lastdisassembledata.parameters = modrm(memory, prefix2, 1, 0, ref last, 32);

                                                        offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                    }
                                                    break;

                                                case 2:
                                                    {
                                                        description = "store integer";
                                                        lastdisassembledata.opcode = "fist";
                                                        lastdisassembledata.parameters = modrm(memory, prefix2, 1, 0, ref last, 32);

                                                        offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                    }
                                                    break;

                                                case 3:
                                                    {
                                                        description = "store integer";
                                                        lastdisassembledata.opcode = "fistp";
                                                        lastdisassembledata.parameters = modrm(memory, prefix2, 1, 0, ref last, 32);

                                                        offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                    }
                                                    break;

                                                case 5:
                                                    {
                                                        lastdisassembledata.isfloat = true;
                                                        description = "load floating point value";
                                                        lastdisassembledata.opcode = "fld";
                                                        lastdisassembledata.parameters = modrm(memory, prefix2, 1, 0, ref last, 80);

                                                        offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                    }
                                                    break;

                                                case 7:
                                                    {
                                                        lastdisassembledata.isfloat = true;
                                                        description = "store extended";
                                                        lastdisassembledata.opcode = "fstp";
                                                        lastdisassembledata.parameters = modrm(memory, prefix2, 1, 0, ref last, 80);

                                                        offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                    }
                                                    break;

                                            }
                                        }
                                        break;

                                    case 0xc0:
                                    case 0xc1:
                                    case 0xc2:
                                    case 0xc3:
                                    case 0xc4:
                                    case 0xc5:
                                    case 0xc6:
                                    case 0xc7:
                                        {
                                            description = "floating-point: move if not below";
                                            lastdisassembledata.opcode = "fcmovnb";
                                            lastdisassembledata.parameters = "st(0),st(" + (memory[1] - 0xc0) + ')';
                                            offset += 1;
                                        }
                                        break;

                                    case 0xc8:
                                    case 0xc9:
                                    case 0xca:
                                    case 0xcb:
                                    case 0xcc:
                                    case 0xcd:
                                    case 0xce:
                                    case 0xcf:
                                        {
                                            description = "floating-point: move if not equal";
                                            lastdisassembledata.opcode = "fcmovne";
                                            lastdisassembledata.parameters = "st(0),st(" + (memory[1] - 0xc8) + ')';
                                            offset += 1;
                                        }
                                        break;

                                    case 0xd0:
                                    case 0xd1:
                                    case 0xd2:
                                    case 0xd3:
                                    case 0xd4:
                                    case 0xd5:
                                    case 0xd6:
                                    case 0xd7:
                                        {
                                            description = "floating-point: move if not below or equal";
                                            lastdisassembledata.opcode = "fcmovnbe";
                                            lastdisassembledata.parameters = "st(0),st(" + (memory[1] - 0xd0) + ')';
                                            offset += 1;
                                        }
                                        break;

                                    case 0xd8:
                                    case 0xd9:
                                    case 0xda:
                                    case 0xdb:
                                    case 0xdc:
                                    case 0xdd:
                                    case 0xde:
                                    case 0xdf:
                                        {
                                            description = "floating-point: move if not unordered";
                                            lastdisassembledata.opcode = "fcmovnu";
                                            lastdisassembledata.parameters = "st(0),st(" + (memory[1] - 0xd8) + ')';
                                            offset += 1;
                                        }
                                        break;

                                    case 0xe2:
                                        {
                                            description = "clear exceptions";
                                            lastdisassembledata.opcode = "fnclex";
                                            offset += 1;
                                        }
                                        break;

                                    case 0xe3:
                                        {
                                            description = "initialize floating-point unit";
                                            lastdisassembledata.opcode = "fninit";
                                            offset += 1;
                                        }
                                        break;

                                    case 0xe8:
                                    case 0xe9:
                                    case 0xea:
                                    case 0xeb:
                                    case 0xec:
                                    case 0xed:
                                    case 0xee:
                                    case 0xef:
                                        {
                                            description = "floating-point: compare real and set eflags";
                                            lastdisassembledata.opcode = "fucomi";
                                            lastdisassembledata.parameters = "st(0),st(" + (memory[1] - 0xe8) + ')';
                                            offset += 1;
                                        }
                                        break;

                                    case 0xf0:
                                    case 0xf1:
                                    case 0xf2:
                                    case 0xf3:
                                    case 0xf4:
                                    case 0xf5:
                                    case 0xf6:
                                    case 0xf7:
                                        {
                                            description = "floating-point: compare real and set eflags";
                                            lastdisassembledata.opcode = "fcomi";
                                            lastdisassembledata.parameters = "st(0),st(" + (memory[1] - 0xf0) + ')';
                                            offset += 1;
                                        }
                                        break;
                                }


                            }
                            break;

                        case 0xdc:
                            {
                                lastdisassembledata.isfloat = true;
                                switch (getreg(memory[1]))
                                {
                                    case 0:
                                        {
                                            //fadd
                                            description = "add";
                                            last = 2;
                                            if (memory[1] >= 0xc0)
                                            {
                                                lastdisassembledata.opcode = "fadd";
                                                lastdisassembledata.parameters = "st(" + (memory[1] - 0xc0) + "),st(0)";
                                            }
                                            else
                                            {
                                                lastdisassembledata.opcode = "fadd";
                                                lastdisassembledata.parameters = modrm(memory, prefix2, 1, 0, ref last, 64);

                                            }
                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                        }
                                        break;

                                    case 1:
                                        {
                                            description = "multiply";
                                            last = 2;
                                            if (memory[1] >= 0xc8)
                                            {
                                                lastdisassembledata.opcode = "fmul";
                                                lastdisassembledata.parameters = "st(" + (memory[1] - 0xc8) + "),st(0)";
                                            }
                                            else
                                            {
                                                lastdisassembledata.opcode = "fmul";
                                                lastdisassembledata.parameters = modrm(memory, prefix2, 1, 0, ref last, 64);

                                            }
                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                        }
                                        break;

                                    case 2:
                                        {
                                            description = "compare real";
                                            last = 2;
                                            lastdisassembledata.opcode = "fcom";
                                            lastdisassembledata.parameters = modrm(memory, prefix2, 1, 0, ref last, 64);

                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                        }
                                        break;

                                    case 3:
                                        {
                                            description = "compare real";
                                            last = 2;
                                            lastdisassembledata.opcode = "fcomp";
                                            lastdisassembledata.parameters = modrm(memory, prefix2, 1, 0, ref last, 64);

                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                        }
                                        break;

                                    case 4:
                                        {
                                            description = "subtract";
                                            last = 2;
                                            if (memory[1] >= 0xe0)
                                            {
                                                lastdisassembledata.opcode = "fsubr";
                                                lastdisassembledata.parameters = "st(" + (memory[1] - 0xe0) + "),st(0)";
                                            }
                                            else
                                            {
                                                lastdisassembledata.opcode = "fsub";
                                                lastdisassembledata.parameters = modrm(memory, prefix2, 1, 0, ref last, 64);

                                            }
                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                        }
                                        break;

                                    case 5:
                                        {
                                            description = "reverse subtract";
                                            last = 2;
                                            if (memory[1] >= 0xe8)
                                            {
                                                lastdisassembledata.opcode = "fsub";
                                                lastdisassembledata.parameters = "st(" + (memory[1] - 0xe8) + "),st(0)";
                                            }
                                            else
                                            {
                                                lastdisassembledata.opcode = "fsubr";
                                                lastdisassembledata.parameters = modrm(memory, prefix2, 1, 0, ref last, 64);

                                            }


                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                        }
                                        break;


                                    case 6:
                                        {
                                            description = "divide";
                                            last = 2;
                                            if (memory[1] >= 0xf0)
                                            {
                                                lastdisassembledata.opcode = "fdivr";
                                                lastdisassembledata.parameters = "st(" + (memory[1] - 0xf0) + "),st(0)";
                                            }
                                            else
                                            {
                                                lastdisassembledata.opcode = "fdiv";
                                                lastdisassembledata.parameters = modrm(memory, prefix2, 1, 0, ref last, 64);

                                            }
                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                        }
                                        break;

                                    case 7:
                                        {
                                            description = "reverse divide";
                                            last = 2;
                                            if (memory[1] >= 0xf8)
                                            {
                                                lastdisassembledata.opcode = "fdiv";
                                                lastdisassembledata.parameters = "st(" + (memory[1] - 0xf8) + "),st(0)";
                                            }
                                            else
                                            {
                                                lastdisassembledata.opcode = "fdivr";
                                                lastdisassembledata.parameters = modrm(memory, prefix2, 1, 0, ref last, 64);

                                            }
                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                        }
                                        break;
                                }
                            }
                            break;

                        case 0xdd:
                            {
                                switch (memory[1])
                                {
                                    case 0x0:
                                    case 0x1:
                                    case 0x2:
                                    case 0x3:
                                    case 0x4:
                                    case 0x5:
                                    case 0x6:
                                    case 0x7:
                                    case 0x8:
                                    case 0x9:
                                    case 0xa:
                                    case 0xb:
                                    case 0xc:
                                    case 0xd:
                                    case 0xe:
                                    case 0xf:
                                    case 0x10:
                                    case 0x11:
                                    case 0x12:
                                    case 0x13:
                                    case 0x14:
                                    case 0x15:
                                    case 0x16:
                                    case 0x17:
                                    case 0x18:
                                    case 0x19:
                                    case 0x1a:
                                    case 0x1b:
                                    case 0x1c:
                                    case 0x1d:
                                    case 0x1e:
                                    case 0x1f:
                                    case 0x20:
                                    case 0x21:
                                    case 0x22:
                                    case 0x23:
                                    case 0x24:
                                    case 0x25:
                                    case 0x26:
                                    case 0x27:
                                    case 0x28:
                                    case 0x29:
                                    case 0x2a:
                                    case 0x2b:
                                    case 0x2c:
                                    case 0x2d:
                                    case 0x2e:
                                    case 0x2f:
                                    case 0x30:
                                    case 0x31:
                                    case 0x32:
                                    case 0x33:
                                    case 0x34:
                                    case 0x35:
                                    case 0x36:
                                    case 0x37:
                                    case 0x38:
                                    case 0x39:
                                    case 0x3a:
                                    case 0x3b:
                                    case 0x3c:
                                    case 0x3d:
                                    case 0x3e:
                                    case 0x3f:
                                    case 0x40:
                                    case 0x41:
                                    case 0x42:
                                    case 0x43:
                                    case 0x44:
                                    case 0x45:
                                    case 0x46:
                                    case 0x47:
                                    case 0x48:
                                    case 0x49:
                                    case 0x4a:
                                    case 0x4b:
                                    case 0x4c:
                                    case 0x4d:
                                    case 0x4e:
                                    case 0x4f:
                                    case 0x50:
                                    case 0x51:
                                    case 0x52:
                                    case 0x53:
                                    case 0x54:
                                    case 0x55:
                                    case 0x56:
                                    case 0x57:
                                    case 0x58:
                                    case 0x59:
                                    case 0x5a:
                                    case 0x5b:
                                    case 0x5c:
                                    case 0x5d:
                                    case 0x5e:
                                    case 0x5f:
                                    case 0x60:
                                    case 0x61:
                                    case 0x62:
                                    case 0x63:
                                    case 0x64:
                                    case 0x65:
                                    case 0x66:
                                    case 0x67:
                                    case 0x68:
                                    case 0x69:
                                    case 0x6a:
                                    case 0x6b:
                                    case 0x6c:
                                    case 0x6d:
                                    case 0x6e:
                                    case 0x6f:
                                    case 0x70:
                                    case 0x71:
                                    case 0x72:
                                    case 0x73:
                                    case 0x74:
                                    case 0x75:
                                    case 0x76:
                                    case 0x77:
                                    case 0x78:
                                    case 0x79:
                                    case 0x7a:
                                    case 0x7b:
                                    case 0x7c:
                                    case 0x7d:
                                    case 0x7e:
                                    case 0x7f:
                                    case 0x80:
                                    case 0x81:
                                    case 0x82:
                                    case 0x83:
                                    case 0x84:
                                    case 0x85:
                                    case 0x86:
                                    case 0x87:
                                    case 0x88:
                                    case 0x89:
                                    case 0x8a:
                                    case 0x8b:
                                    case 0x8c:
                                    case 0x8d:
                                    case 0x8e:
                                    case 0x8f:
                                    case 0x90:
                                    case 0x91:
                                    case 0x92:
                                    case 0x93:
                                    case 0x94:
                                    case 0x95:
                                    case 0x96:
                                    case 0x97:
                                    case 0x98:
                                    case 0x99:
                                    case 0x9a:
                                    case 0x9b:
                                    case 0x9c:
                                    case 0x9d:
                                    case 0x9e:
                                    case 0x9f:
                                    case 0xa0:
                                    case 0xa1:
                                    case 0xa2:
                                    case 0xa3:
                                    case 0xa4:
                                    case 0xa5:
                                    case 0xa6:
                                    case 0xa7:
                                    case 0xa8:
                                    case 0xa9:
                                    case 0xaa:
                                    case 0xab:
                                    case 0xac:
                                    case 0xad:
                                    case 0xae:
                                    case 0xaf:
                                    case 0xb0:
                                    case 0xb1:
                                    case 0xb2:
                                    case 0xb3:
                                    case 0xb4:
                                    case 0xb5:
                                    case 0xb6:
                                    case 0xb7:
                                    case 0xb8:
                                    case 0xb9:
                                    case 0xba:
                                    case 0xbb:
                                    case 0xbc:
                                    case 0xbd:
                                    case 0xbe:
                                    case 0xbf:
                                        {
                                            switch (getreg(memory[1]))
                                            {
                                                case 0:
                                                    {
                                                        lastdisassembledata.isfloat = true;
                                                        description = "load floating point value";
                                                        lastdisassembledata.opcode = "fld";
                                                        lastdisassembledata.parameters = modrm(memory, prefix2, 1, 0, ref last, 64);

                                                        offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                    }
                                                    break;

                                                case 1:
                                                    {
                                                        description = "store integer with truncation";
                                                        lastdisassembledata.opcode = "fisttp";
                                                        lastdisassembledata.parameters = modrm(memory, prefix2, 1, 0, ref last, 64);

                                                        offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                    }
                                                    break;

                                                case 2:
                                                    {
                                                        lastdisassembledata.isfloat = true;
                                                        description = "store double";
                                                        lastdisassembledata.opcode = "fst";
                                                        lastdisassembledata.parameters = modrm(memory, prefix2, 1, 0, ref last, 64);

                                                        offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                    }
                                                    break;

                                                case 3:
                                                    {
                                                        lastdisassembledata.isfloat = true;
                                                        description = "store double";
                                                        lastdisassembledata.opcode = "fstp";
                                                        lastdisassembledata.parameters = modrm(memory, prefix2, 1, 0, ref last, 64);

                                                        offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                    }
                                                    break;

                                                case 4:
                                                    {
                                                        description = "restore fpu state";
                                                        lastdisassembledata.opcode = "frstor";
                                                        lastdisassembledata.parameters = modrm(memory, prefix2, 1, 0, ref last);

                                                        offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                    }
                                                    break;

                                                case 6:
                                                    {
                                                        description = "store fpu state";
                                                        lastdisassembledata.opcode = "fnsave";
                                                        lastdisassembledata.parameters = modrm(memory, prefix2, 1, 0, ref last);

                                                        offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                    }
                                                    break;

                                                case 7:
                                                    {
                                                        description = "store status word";
                                                        lastdisassembledata.opcode = "fnstsw";
                                                        lastdisassembledata.parameters = modrm(memory, prefix2, 1, 0, ref last);

                                                        offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                    }
                                                    break;

                                            }

                                        }
                                        break;

                                    case 0xc0:
                                    case 0xc1:
                                    case 0xc2:
                                    case 0xc3:
                                    case 0xc4:
                                    case 0xc5:
                                    case 0xc6:
                                    case 0xc7:
                                        {
                                            description = "free floating-point register";
                                            lastdisassembledata.opcode = "ffree";
                                            lastdisassembledata.parameters = "st(" + (memory[1] - 0xc0) + ')';
                                            offset += 1;
                                        }
                                        break;

                                    case 0xd0:
                                    case 0xd1:
                                    case 0xd2:
                                    case 0xd3:
                                    case 0xd4:
                                    case 0xd5:
                                    case 0xd6:
                                    case 0xd7:
                                        {
                                            description = "store real";
                                            lastdisassembledata.opcode = "fst";
                                            lastdisassembledata.parameters = "st(" + (memory[1] - 0xd0) + ')';
                                            offset += 1;
                                        }
                                        break;

                                    case 0xd8:
                                    case 0xd9:
                                    case 0xda:
                                    case 0xdb:
                                    case 0xdc:
                                    case 0xdd:
                                    case 0xde:
                                    case 0xdf:
                                        {
                                            description = "store real";
                                            lastdisassembledata.opcode = "fstp";
                                            lastdisassembledata.parameters = "st(" + (memory[1] - 0xd8) + ')';
                                            offset += 1;
                                        }
                                        break;

                                    case 0xe0:
                                    case 0xe1:
                                    case 0xe2:
                                    case 0xe3:
                                    case 0xe4:
                                    case 0xe5:
                                    case 0xe6:
                                    case 0xe7:
                                        {
                                            description = "unordered compare real";
                                            lastdisassembledata.opcode = "fucom";
                                            lastdisassembledata.parameters = "st(" + (memory[1] - 0xe0) + ')';
                                            offset += 1;
                                        }
                                        break;

                                    case 0xe8:
                                    case 0xe9:
                                    case 0xea:
                                    case 0xeb:
                                    case 0xec:
                                    case 0xed:
                                    case 0xee:
                                    case 0xef:
                                        {
                                            description = "unordered compare real";
                                            lastdisassembledata.opcode = "fucomp";
                                            lastdisassembledata.parameters = "st(" + (memory[1] - 0xe8) + ')';
                                            offset += 1;
                                        }
                                        break;
                                    default:
                                        {
                                            lastdisassembledata.opcode = "db";
                                            lastdisassembledata.parameters = inttohexs((UIntPtr)memory[0], 2);
                                        }
                                        break;

                                }
                            }
                            break;

                        case 0xde:
                            {
                                switch (getreg(memory[1]))
                                {
                                    case 0:
                                        {
                                            //faddp
                                            description = "add and pop";
                                            last = 2;
                                            if (memory[1] == 0xc1) lastdisassembledata.opcode = "faddp";
                                            else
                                            if (memory[1] >= 0xc0)
                                            {
                                                lastdisassembledata.opcode = "faddp";
                                                lastdisassembledata.parameters = "st(" + (memory[1] - 0xc0) + "),st(0)";
                                            }
                                            else
                                            {
                                                description = "add";
                                                lastdisassembledata.opcode = "fiadd";
                                                lastdisassembledata.parameters = modrm(memory, prefix2, 1, 0, ref last);

                                            }
                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                        }
                                        break;

                                    case 1:
                                        {
                                            description = "multiply";
                                            last = 2;
                                            if (memory[1] >= 0xc8)
                                            {
                                                lastdisassembledata.opcode = "fmulp";
                                                lastdisassembledata.parameters = "st(" + (memory[1] - 0xc8) + "),st(0)";
                                            }
                                            else
                                            {
                                                lastdisassembledata.opcode = "fimul";
                                                lastdisassembledata.parameters = modrm(memory, prefix2, 1, 0, ref last);

                                            }

                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                        }
                                        break;

                                    case 2:
                                        {
                                            description = "compare integer";
                                            last = 2;
                                            lastdisassembledata.opcode = "ficom";
                                            lastdisassembledata.parameters = modrm(memory, prefix2, 1, 0, ref last);
                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                        }
                                        break;


                                    case 3:
                                        {
                                            if (memory[1] < 0xc0)
                                            {
                                                description = "compare integer";
                                                lastdisassembledata.opcode = "ficomp";
                                                lastdisassembledata.parameters = modrm(memory, prefix2, 1, 0, ref last);

                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }

                                            if (memory[1] == 0xd9)
                                            {
                                                description = "compare real and pop register stack twice";
                                                lastdisassembledata.opcode = "fcompp";
                                                offset += 1;
                                            }
                                        }
                                        break;

                                    case 4:
                                        {
                                            description = "subtract";
                                            last = 2;
                                            if (memory[1] >= 0xe0)
                                            {
                                                lastdisassembledata.opcode = "fsubrp";
                                                lastdisassembledata.parameters = "st(" + (memory[1] - 0xe0) + "),st(0)";
                                            }
                                            else
                                            {
                                                lastdisassembledata.opcode = "fisub";
                                                lastdisassembledata.parameters = modrm(memory, prefix2, 1, 0, ref last);

                                            }
                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                        }
                                        break;


                                    case 5:
                                        {
                                            description = "reverse divide";
                                            last = 2;
                                            if (memory[1] >= 0xe8)
                                            {
                                                description = "subtract and pop from stack";
                                                lastdisassembledata.opcode = "fsubp";
                                                lastdisassembledata.parameters = "st(" + (memory[1] - 0xe8) + "),st(0)";
                                            }
                                            else
                                            {
                                                lastdisassembledata.opcode = "fisubr";
                                                lastdisassembledata.parameters = modrm(memory, prefix2, 1, 0, ref last);

                                            }

                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                        }
                                        break;


                                    case 6:
                                        {
                                            description = "reverse divide";
                                            last = 2;
                                            if (memory[1] >= 0xf0)
                                            {
                                                lastdisassembledata.opcode = "fdivrp";
                                                lastdisassembledata.parameters = "st(" + (memory[1] - 0xf0) + "),st(0)";
                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                            else
                                            {
                                                description = "divide";
                                                lastdisassembledata.opcode = "fidiv";
                                                lastdisassembledata.parameters = modrm(memory, prefix2, 1, 1, ref last, 16);

                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                        }
                                        break;

                                    case 7:
                                        {
                                            description = "divide";
                                            last = 2;
                                            if (memory[1] >= 0xf8)
                                            {
                                                lastdisassembledata.opcode = "fdivp";
                                                lastdisassembledata.parameters = "st(" + (memory[1] - 0xf8) + "),st(0)";
                                            }
                                            else
                                            {
                                                lastdisassembledata.opcode = "fdivr";
                                                lastdisassembledata.parameters = modrm(memory, prefix2, 1, 0, ref last);

                                            }
                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                        }
                                        break;

                                }
                            }
                            break;

                        case 0xdf:
                            {
                                if (AMathUtils.InRangeX(memory[1], 0xc0, 0xc7))
                                {
                                    description = "free floating-point register and pop (might not work)";
                                    lastdisassembledata.opcode = "ffreep";
                                    lastdisassembledata.parameters = "st(" + (memory[1] - 0xc0) + ')';
                                    offset += 1;
                                }
                                else
                                    switch (getreg(memory[1]))
                                    {
                                        case 0:
                                            {
                                                description = "load integer";
                                                lastdisassembledata.opcode = "fild";
                                                lastdisassembledata.parameters = modrm(memory, prefix2, 1, 0, ref last, 16);

                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                            break;

                                        case 1:
                                            {
                                                description = "store integer with truncation";
                                                lastdisassembledata.opcode = "fisttp";
                                                lastdisassembledata.parameters = modrm(memory, prefix2, 1, 0, ref last, 16);

                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                            break;

                                        case 2:
                                            {
                                                description = "store integer";
                                                lastdisassembledata.opcode = "fist";
                                                lastdisassembledata.parameters = modrm(memory, prefix2, 1, 0, ref last, 16);

                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                            break;

                                        case 3:
                                            {
                                                description = "store integer";
                                                lastdisassembledata.opcode = "fistp";
                                                lastdisassembledata.parameters = modrm(memory, prefix2, 1, 0, ref last, 16);

                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                            break;

                                        case 4:
                                            {
                                                description = "load binary coded decimal";
                                                last = 2;
                                                if (memory[1] >= 0xe0)
                                                {
                                                    lastdisassembledata.opcode = "fnstsw";
                                                    lastdisassembledata.parameters = colorreg + "ax" + endcolor;
                                                }
                                                else
                                                {
                                                    lastdisassembledata.opcode = "fbld";
                                                    lastdisassembledata.parameters = modrm(memory, prefix2, 1, 0, ref last, 80);

                                                }
                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                            break;

                                        case 5:
                                            {
                                                if (memory[1] < 0xc0)
                                                {
                                                    description = "load integer";
                                                    lastdisassembledata.opcode = "fild";
                                                    lastdisassembledata.parameters = modrm(memory, prefix2, 1, 0, ref last, 64);

                                                    offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                }

                                                if (memory[1] >= 0xe8)
                                                {
                                                    description = "compare real and set eflags";
                                                    lastdisassembledata.opcode = "fucomip";
                                                    lastdisassembledata.parameters = "st(0),st(" + (memory[1] - 0xe8) + ')';
                                                    offset += 1;
                                                }
                                            }
                                            break;

                                        case 6:
                                            {
                                                if (memory[1] >= 0xf0)
                                                {
                                                    description = "compare real and set eflags";
                                                    lastdisassembledata.opcode = "fcomip";
                                                    lastdisassembledata.parameters = "st(0),st(" + (memory[1] - 0xf0) + ')';
                                                    offset += 1;
                                                }
                                                else
                                                {
                                                    description = "store bcd integer and pop";
                                                    lastdisassembledata.opcode = "fbstp";
                                                    lastdisassembledata.parameters = modrm(memory, prefix2, 1, 0, ref last, 80);

                                                    offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                                }
                                            }
                                            break;

                                        case 7:
                                            {
                                                description = "store integer";
                                                lastdisassembledata.opcode = "fistp";
                                                lastdisassembledata.parameters = modrm(memory, prefix2, 1, 0, ref last, 64);

                                                offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                            }
                                            break;

                                        default:
                                            {
                                                lastdisassembledata.opcode = "db";
                                                lastdisassembledata.parameters = inttohexs((UIntPtr)memory[0], 2);
                                            }
                                            break;
                                    }

                            }
                            break;

                        case 0xe0:
                            {
                                description = "loop according to ecx counter";
                                lastdisassembledata.isjump = true;
                                lastdisassembledata.isconditionaljump = true;
                                //if (context != nil)
                                    //lastdisassembledata.willjumpaccordingtocontext = (context->eflags & eflags_zf) == 0;

                                lastdisassembledata.opcode = "loopne";

                                offset += 1;

                                lastdisassembledata.parametervaluetype = tdisassemblervaluetype.dvtaddress;
                                if (is64bit)
                                    lastdisassembledata.parametervalue = (UIntPtr)(offset.ToUInt64() + (UInt64)(SByte)memory[1]);
                                else
                                    lastdisassembledata.parametervalue = (UIntPtr)(UInt32)(offset.ToUInt64() + (UInt64)(SByte)memory[1]);

                                lastdisassembledata.parameters = inttohexs(lastdisassembledata.parametervalue, 8);

                                lastdisassembledata.seperators[lastdisassembledata.seperatorcount] = 1;
                                lastdisassembledata.seperatorcount += 1;
                            }
                            break;

                        case 0xe1:
                            {
                                description = "loop according to ecx counter";
                                lastdisassembledata.isjump = true;
                                lastdisassembledata.isconditionaljump = true;
                                //if (context != nil)
                                    //lastdisassembledata.willjumpaccordingtocontext = (context->eflags & eflags_zf) != 0;

                                lastdisassembledata.opcode = "loope";
                                offset += 1;

                                lastdisassembledata.parametervaluetype = tdisassemblervaluetype.dvtaddress;
                                if (is64bit)
                                    lastdisassembledata.parametervalue = (UIntPtr)(offset.ToUInt64() + (UInt64)(SByte)memory[1]);
                                else
                                    lastdisassembledata.parametervalue = (UIntPtr)(UInt32)(offset.ToUInt64() + (UInt64)(SByte)memory[1]);

                                lastdisassembledata.parameters = inttohexs(lastdisassembledata.parametervalue, 8);

                                lastdisassembledata.seperators[lastdisassembledata.seperatorcount] = 1;
                                lastdisassembledata.seperatorcount += 1;
                            }
                            break;

                        case 0xe2:
                            {
                                description = "loop according to ecx counting";
                                lastdisassembledata.opcode = "loop";
                                // todo readd me
                                //if context<>nil then
                                //lastdisassembledata.willJumpAccordingToContext:=context^.{$ifdef CPU64}RCX{$else}ECX{$endif}<>0;

                                lastdisassembledata.isjump = true;
                                offset += 1;

                                lastdisassembledata.parametervaluetype = tdisassemblervaluetype.dvtaddress;
                                if (is64bit)
                                    lastdisassembledata.parametervalue = (UIntPtr)(offset.ToUInt64() + (UInt64)(SByte)memory[1]);
                                else
                                    lastdisassembledata.parametervalue = (UIntPtr)(UInt32)(offset.ToUInt64() + (UInt64)(SByte)memory[1]);

                                lastdisassembledata.parameters = inttohexs(lastdisassembledata.parametervalue, 8);

                                lastdisassembledata.seperators[lastdisassembledata.seperatorcount] = 1;
                                lastdisassembledata.seperatorcount += 1;
                            }
                            break;

                        case 0xe3:
                            {
                                description = "jump short if cx=0";
                                lastdisassembledata.isjump = true;
                                lastdisassembledata.isconditionaljump = true;

                                if (prefix2.Contains(0x66))
                                {
                                    lastdisassembledata.opcode = "jcxz";
                                    // todo readd me
                                    //if context<>nil then
                                    //lastdisassembledata.willJumpAccordingToContext:=((context^.{$ifdef CPU64}RCX{$else}ECX{$endif}) and $ffff)=0;

                                }
                                else
                                {
                                    lastdisassembledata.opcode = "jecxz";
                                    // todo readd me
                                    //if context<>nil then
                                    //lastdisassembledata.willJumpAccordingToContext:=context^.{$ifdef CPU64}RCX{$else}ECX{$endif}=0;

                                }
                                offset += 1;

                                lastdisassembledata.parametervaluetype = tdisassemblervaluetype.dvtaddress;



                                if (is64bit)
                                    lastdisassembledata.parametervalue = (UIntPtr)(offset.ToUInt64() + (UInt64)(SByte)memory[1]);
                                else
                                    lastdisassembledata.parametervalue = (UIntPtr)(UInt32)(offset.ToUInt64() + (UInt64)(SByte)memory[1]);

                                lastdisassembledata.parameters = inttohexs(lastdisassembledata.parametervalue, 8);

                                lastdisassembledata.seperators[lastdisassembledata.seperatorcount] = 1;
                                lastdisassembledata.seperatorcount += 1;
                            }
                            break;

                        case 0xe4:
                            {
                                description = "input from port";
                                lastdisassembledata.opcode = "in";
                                lastdisassembledata.parametervaluetype = tdisassemblervaluetype.dvtvalue;
                                lastdisassembledata.parametervalue = (UIntPtr)memory[1];
                                lastdisassembledata.seperators[lastdisassembledata.seperatorcount] = 1;
                                lastdisassembledata.seperatorcount += 1;

                                lastdisassembledata.parameters = colorreg + "al" + endcolor + ',' + inttohexs((UIntPtr)memory[1], 2);
                                offset += 1;

                            }
                            break;

                        case 0xe5:
                            {
                                description = "input from port";
                                lastdisassembledata.opcode = "in";

                                lastdisassembledata.parametervaluetype = tdisassemblervaluetype.dvtvalue;
                                lastdisassembledata.parametervalue = (UIntPtr)memory[1];
                                lastdisassembledata.seperators[lastdisassembledata.seperatorcount] = 1;
                                lastdisassembledata.seperatorcount += 1;


                                if (prefix2.Contains(0x66)) lastdisassembledata.parameters = colorreg + "ax" + endcolor + ',' + inttohexs((UIntPtr)memory[1], 2);
                                else lastdisassembledata.parameters = colorreg + "eax" + endcolor + ',' + inttohexs((UIntPtr)memory[1], 2);
                                offset += 1;

                            }
                            break;

                        case 0xe6:
                            {
                                description = "output to port";
                                lastdisassembledata.opcode = "out";
                                lastdisassembledata.parameters = inttohexs((UIntPtr)memory[1], 2) + ',' + colorreg + "al" + endcolor;
                                offset += 1;

                                lastdisassembledata.parametervaluetype = tdisassemblervaluetype.dvtvalue;
                                lastdisassembledata.parametervalue = (UIntPtr)memory[1];
                                lastdisassembledata.seperators[lastdisassembledata.seperatorcount] = 1;
                                lastdisassembledata.seperatorcount += 1;
                            }
                            break;

                        case 0xe7:
                            {
                                description = "output toport";
                                lastdisassembledata.opcode = "out";
                                if (prefix2.Contains(0x66))
                                    lastdisassembledata.parameters = inttohexs((UIntPtr)memory[1], 2) + ',' + colorreg + "ax" + endcolor;
                                else
                                    lastdisassembledata.parameters = inttohexs((UIntPtr)memory[1], 2) + ',' + colorreg + "eax" + endcolor;

                                offset += 1;

                                lastdisassembledata.parametervaluetype = tdisassemblervaluetype.dvtvalue;
                                lastdisassembledata.parametervalue = (UIntPtr)memory[1];
                                lastdisassembledata.seperators[lastdisassembledata.seperatorcount] = 1;
                                lastdisassembledata.seperatorcount += 1;
                            }
                            break;

                        case 0xe8:
                            {
                                //call
                                //this time no $66 prefix because it will only run in win32
                                description = "call procedure";
                                lastdisassembledata.opcode = "call";
                                lastdisassembledata.isjump = true;
                                lastdisassembledata.iscall = true;

                                if (markiprelativeinstructions)
                                {
                                    lastdisassembledata.riprelative = 1;
                                    riprelative = true;
                                }
                                offset += 4;
                                lastdisassembledata.parametervaluetype = tdisassemblervaluetype.dvtaddress;

                                if (is64bit)
                                    lastdisassembledata.parametervalue = (UIntPtr)(offset.ToUInt64() + (UInt64)memory.ReadInt32(1));
                                else
                                    lastdisassembledata.parametervalue = (UIntPtr)(UInt32)(offset.ToUInt64() + (UInt64)memory.ReadInt32(1));

                                lastdisassembledata.parameters = inttohexs(lastdisassembledata.parametervalue, 8);

                                lastdisassembledata.seperators[lastdisassembledata.seperatorcount] = 1;
                                lastdisassembledata.seperatorcount += 1;

                            }
                            break;

                        case 0xe9:
                            {
                                description = "jump near";
                                lastdisassembledata.isjump = true;

                                if (prefix2.Contains(0x66))
                                {
                                    lastdisassembledata.opcode = "jmp";

                                    offset += 2;
                                    lastdisassembledata.parametervaluetype = tdisassemblervaluetype.dvtaddress;
                                    lastdisassembledata.parametervalue = (UIntPtr)(UInt32)(offset.ToUInt64() + (UInt64)memory.ReadInt16(1));
                                    lastdisassembledata.parameters = inttohexs(lastdisassembledata.parametervalue, 8);
                                }
                                else
                                {
                                    lastdisassembledata.opcode = "jmp";

                                    if (markiprelativeinstructions)
                                    {
                                        lastdisassembledata.riprelative = 1;
                                        riprelative = true;
                                    }

                                    offset += 4;
                                    lastdisassembledata.parametervaluetype = tdisassemblervaluetype.dvtaddress;

                                    if (is64bit)
                                        lastdisassembledata.parametervalue = (UIntPtr)(offset.ToUInt64() + (UInt16)memory.ReadInt32(1));
                                    else
                                        lastdisassembledata.parametervalue = (UIntPtr)(UInt32)(offset.ToUInt64() + (UInt16)memory.ReadInt32(1));

                                    lastdisassembledata.parameters = inttohexs(lastdisassembledata.parametervalue, 8);
                                }

                                lastdisassembledata.seperators[lastdisassembledata.seperatorcount] = 1;
                                lastdisassembledata.seperatorcount += 1;

                            }
                            break;

                        case 0xea:
                            {
                                description = "jump far";
                                lastdisassembledata.isjump = true;

                                lastdisassembledata.seperators[lastdisassembledata.seperatorcount] = 1;
                                lastdisassembledata.seperatorcount += 1;
                                lastdisassembledata.seperators[lastdisassembledata.seperatorcount] = 5;
                                lastdisassembledata.seperatorcount += 1;


                                var wordptr = memory.ToIntPtr(5).ReadUInt16();
                                lastdisassembledata.opcode = "jmp";
                                lastdisassembledata.parameters = inttohexs((UIntPtr)wordptr, 4) + ':';
                                var dwordptr = memory.ToIntPtr(1).ReadUInt32();

                                lastdisassembledata.parametervaluetype = tdisassemblervaluetype.dvtaddress;
                                lastdisassembledata.parametervalue = (UIntPtr)dwordptr;


                                lastdisassembledata.parameters = lastdisassembledata.parameters + inttohexs((UIntPtr)dwordptr, 8);
                                offset += 6;
                            }
                            break;

                        case 0xeb:
                            {
                                description = "jump short";
                                lastdisassembledata.opcode = "jmp";
                                lastdisassembledata.isjump = true;

                                offset += 1;

                                if (is64bit)
                                    lastdisassembledata.parametervalue = (UIntPtr)(offset.ToUInt64() + (UInt64)(SByte)memory[1]);
                                else
                                    lastdisassembledata.parametervalue = (UIntPtr)(UInt32)(offset.ToUInt64() + (UInt64)(SByte)memory[1]);

                                lastdisassembledata.parameters = inttohexs(lastdisassembledata.parametervalue, 8);

                                lastdisassembledata.parametervaluetype = tdisassemblervaluetype.dvtaddress;

                                lastdisassembledata.seperators[lastdisassembledata.seperatorcount] = 1;
                                lastdisassembledata.seperatorcount += 1;

                            }
                            break;

                        case 0xec:
                            {
                                description = "input from port";
                                lastdisassembledata.opcode = "in";
                                lastdisassembledata.parameters = colorreg + "al" + endcolor + ',' + colorreg + "dx" + endcolor;
                            }
                            break;

                        case 0xed:
                            {
                                description = "input from port";
                                lastdisassembledata.opcode = "in";
                                if (prefix2.Contains(0x66)) lastdisassembledata.parameters = colorreg + "ax" + endcolor + ',' + colorreg + "dx" + endcolor;
                                else
                                    lastdisassembledata.parameters = colorreg + "eax" + endcolor + ',' + colorreg + "dx" + endcolor;
                            }
                            break;

                        case 0xee:
                            {
                                description = "input from port";
                                lastdisassembledata.opcode = "out";
                                lastdisassembledata.parameters = colorreg + "dx" + endcolor + ',' + colorreg + "al" + endcolor;
                            }
                            break;

                        case 0xef:
                            {
                                description = "input from port";
                                lastdisassembledata.opcode = "out";
                                if (prefix2.Contains(0x66)) lastdisassembledata.parameters = colorreg + "dx" + endcolor + ',' + colorreg + "ax" + endcolor;
                                else
                                    lastdisassembledata.parameters = colorreg + "dx" + endcolor + ',' + colorreg + "eax" + endcolor;
                            }
                            break;

                        case 0xf3:
                            {
                                ;

                            }
                            break;

                        case 0xf4:
                            {
                                description = "halt";
                                lastdisassembledata.opcode = "hlt";
                            }
                            break;

                        case 0xf5:
                            {
                                description = "complement carry flag";
                                lastdisassembledata.opcode = "cmc";
                            }
                            break;

                        case 0xf6:
                            {
                                switch (getreg(memory[1]))
                                {
                                    case 0:
                                        {
                                            description = "logical compare";
                                            lastdisassembledata.opcode = "test";
                                            lastdisassembledata.parameters = modrm(memory, prefix2, 1, 2, ref last, 8);
                                            lastdisassembledata.parameters = lastdisassembledata.parameters + inttohexs((UIntPtr)memory[(int)last], 2);
                                            lastdisassembledata.parametervaluetype = tdisassemblervaluetype.dvtvalue;
                                            lastdisassembledata.parametervalue = (UIntPtr)memory[(int)last];


                                            offset = (UIntPtr)(offset.ToUInt64() + last);
                                        }
                                        break;

                                    case 2:
                                        {
                                            description = "one's complement negation";
                                            lastdisassembledata.opcode = "not";
                                            lastdisassembledata.parameters = modrm(memory, prefix2, 1, 2, ref last, 8);

                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                        }
                                        break;

                                    case 3:
                                        {
                                            description = "two's complement negation";
                                            lastdisassembledata.opcode = "neg";
                                            lastdisassembledata.parameters = modrm(memory, prefix2, 1, 2, ref last, 8);

                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                        }
                                        break;

                                    case 4:
                                        {
                                            description = "unsigned multiply";
                                            lastdisassembledata.opcode = "mul";
                                            lastdisassembledata.parameters = modrm(memory, prefix2, 1, 2, ref last, 8);

                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                        }
                                        break;

                                    case 5:
                                        {
                                            description = "signed multiply";
                                            lastdisassembledata.opcode = "imul";
                                            lastdisassembledata.parameters = modrm(memory, prefix2, 1, 2, ref last, 8);

                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                        }
                                        break;

                                    case 6:
                                        {
                                            description = "unsigned divide";
                                            lastdisassembledata.opcode = "div";
                                            lastdisassembledata.parameters = modrm(memory, prefix2, 1, 2, ref last, 8);

                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                        }
                                        break;

                                    case 7:
                                        {
                                            description = "signed divide";
                                            lastdisassembledata.opcode = "idiv";
                                            lastdisassembledata.parameters = modrm(memory, prefix2, 1, 2, ref last, 8);

                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                        }
                                        break;
                                    default:
                                        {
                                            lastdisassembledata.opcode = "db";
                                            lastdisassembledata.parameters = inttohexs((UIntPtr)memory[0], 2);
                                        }
                                        break;

                                }
                            }
                            break;

                        case 0xf7:
                            {
                                switch (getreg(memory[1]))
                                {
                                    case 0:
                                        {
                                            description = "logical compare";
                                            if (prefix2.Contains(0x66))
                                            {
                                                lastdisassembledata.opcode = "test";
                                                lastdisassembledata.parameters = modrm(memory, prefix2, 1, 1, ref last, 16);
                                                var wordptr = memory.ReadUInt16((int)last);
                                                lastdisassembledata.parametervaluetype = tdisassemblervaluetype.dvtaddress;
                                                lastdisassembledata.parametervalue = (UIntPtr)wordptr;

                                                lastdisassembledata.parameters = lastdisassembledata.parameters + inttohexs((UIntPtr)wordptr, 4);
                                                offset = (UIntPtr)(offset.ToUInt64() + last + 1);
                                            }
                                            else
                                            {
                                                lastdisassembledata.opcode = "test";
                                                lastdisassembledata.parameters = modrm(memory, prefix2, 1, 0, ref last);
                                                var dwordptr = memory.ReadUInt32((int)last);
                                                lastdisassembledata.parametervaluetype = tdisassemblervaluetype.dvtaddress;
                                                lastdisassembledata.parametervalue = (UIntPtr)dwordptr;
                                                if (rex_w)
                                                    lastdisassembledata.parameters = lastdisassembledata.parameters + inttohexs((UIntPtr)(Int32)dwordptr, 8);
                                                else
                                                    lastdisassembledata.parameters = lastdisassembledata.parameters + inttohexs((UIntPtr)dwordptr, 8);
                                                offset = (UIntPtr)(offset.ToUInt64() + last + 3);
                                            }
                                        }
                                        break;

                                    case 2:
                                        {
                                            description = "one's complement negation";
                                            lastdisassembledata.opcode = "not";
                                            if (prefix2.Contains(0x66))
                                                lastdisassembledata.parameters = modrm(memory, prefix2, 1, 1, ref last, 16);
                                            else
                                                lastdisassembledata.parameters = modrm(memory, prefix2, 1, 0, ref last);

                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                        }
                                        break;

                                    case 3:
                                        {
                                            description = "two's complement negation";
                                            lastdisassembledata.opcode = "neg";
                                            if (prefix2.Contains(0x66))
                                                lastdisassembledata.parameters = modrm(memory, prefix2, 1, 1, ref last, 16);
                                            else
                                                lastdisassembledata.parameters = modrm(memory, prefix2, 1, 0, ref last);


                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                        }
                                        break;

                                    case 4:
                                        {
                                            description = "unsigned multiply";
                                            lastdisassembledata.opcode = "mul";
                                            if (prefix2.Contains(0x66))
                                                lastdisassembledata.parameters = modrm(memory, prefix2, 1, 1, ref last, 16);
                                            else
                                                lastdisassembledata.parameters = modrm(memory, prefix2, 1, 0, ref last);


                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                        }
                                        break;

                                    case 5:
                                        {
                                            description = "signed multiply";
                                            lastdisassembledata.opcode = "imul";
                                            if (prefix2.Contains(0x66))
                                                lastdisassembledata.parameters = modrm(memory, prefix2, 1, 1, ref last, 16);
                                            else
                                                lastdisassembledata.parameters = modrm(memory, prefix2, 1, 0, ref last);

                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                        }
                                        break;

                                    case 6:
                                        {
                                            description = "unsigned divide";
                                            lastdisassembledata.opcode = "div";
                                            if (prefix2.Contains(0x66))
                                                lastdisassembledata.parameters = modrm(memory, prefix2, 1, 1, ref last, 16);
                                            else
                                                lastdisassembledata.parameters = modrm(memory, prefix2, 1, 0, ref last);


                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                        }
                                        break;

                                    case 7:
                                        {
                                            description = "signed divide";
                                            lastdisassembledata.opcode = "idiv";
                                            if (prefix2.Contains(0x66))
                                                lastdisassembledata.parameters = modrm(memory, prefix2, 1, 1, ref last, 16);
                                            else
                                                lastdisassembledata.parameters = modrm(memory, prefix2, 1, 0, ref last);


                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                        }
                                        break;

                                    default:
                                        {
                                            lastdisassembledata.opcode = "db";
                                            lastdisassembledata.parameters = inttohexs((UIntPtr)memory[0], 2);
                                        }
                                        break;
                                }
                            }
                            break;

                        case 0xf8:
                            {
                                description = "clear carry flag";
                                lastdisassembledata.opcode = "clc";
                            }
                            break;

                        case 0xf9:
                            {
                                description = "set carry flag";
                                lastdisassembledata.opcode = "stc";
                            }
                            break;

                        case 0xfa:
                            {
                                description = "clear interrupt flag";
                                lastdisassembledata.opcode = "cli";
                            }
                            break;

                        case 0xfb:
                            {
                                description = "set interrupt flag";
                                lastdisassembledata.opcode = "sti";
                            }
                            break;

                        case 0xfc:
                            {
                                description = "clear direction flag";
                                lastdisassembledata.opcode = "cld";
                            }
                            break;

                        case 0xfd:
                            {
                                description = "set direction flag";
                                lastdisassembledata.opcode = "std";
                            }
                            break;

                        case 0xfe:
                            {
                                switch (getreg(memory[1]))
                                {
                                    case 0:
                                        {
                                            description = "increment by 1";
                                            lastdisassembledata.opcode = "inc";
                                            lastdisassembledata.parameters = modrm(memory, prefix2, 1, 2, ref last, 8);

                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                        }
                                        break;

                                    case 1:
                                        {
                                            description = "decrement by 1";
                                            lastdisassembledata.opcode = "dec";
                                            lastdisassembledata.parameters = modrm(memory, prefix2, 1, 2, ref last, 7);

                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                        }
                                        break;

                                    default:
                                        {
                                            lastdisassembledata.opcode = "db";
                                            lastdisassembledata.parameters = inttohexs((UIntPtr)memory[0], 2);
                                        }
                                        break;
                                }
                            }
                            break;

                        case 0xff:
                            {
                                switch (getreg(memory[1]))
                                {
                                    case 0:
                                        {
                                            description = "increment by 1";
                                            lastdisassembledata.opcode = "inc";
                                            if (prefix2.Contains(0x66))
                                                lastdisassembledata.parameters = modrm(memory, prefix2, 1, 1, ref last, 16);
                                            else
                                                lastdisassembledata.parameters = modrm(memory, prefix2, 1, 0, ref last);


                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                        }
                                        break;

                                    case 1:
                                        {
                                            description = "decrement by 1";
                                            lastdisassembledata.opcode = "dec";
                                            if (prefix2.Contains(0x66))
                                                lastdisassembledata.parameters = modrm(memory, prefix2, 1, 1, ref last, 16);
                                            else
                                                lastdisassembledata.parameters = modrm(memory, prefix2, 1, 0, ref last);

                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                        }
                                        break;

                                    case 2:
                                        {
                                            //call
                                            description = "call procedure";
                                            lastdisassembledata.opcode = "call";
                                            lastdisassembledata.isjump = true;
                                            lastdisassembledata.iscall = true;

                                            if (memory[1] >= 0xc0)
                                            {
                                                if (is64bit)
                                                    lastdisassembledata.parameters = modrm(memory, prefix2, 1, 0, ref last, 64);
                                                else
                                                    lastdisassembledata.parameters = modrm(memory, prefix2, 1, 0, ref last, 32);

                                            }
                                            else
                                            {
                                                if (is64bit)
                                                {

                                                    if ((memory[1] == 0x15) && (memory.ReadUInt32(2) == 2) && (memory.ReadUInt16(6) == 0x8eb))  //special 16 byte call
                                                    {
                                                        lastdisassembledata.parameters = inttohexs((UIntPtr)memory.ReadUInt64(8), 8);
                                                        lastdisassembledata.parametervalue = (UIntPtr)memory.ReadUInt64(8);
                                                        lastdisassembledata.parametervaluetype = tdisassemblervaluetype.dvtaddress;

                                                        last += 8 + 4 + 2 + 2;

                                                        lastdisassembledata.seperators[0] = 2;
                                                        lastdisassembledata.seperators[1] = 2 + 4;
                                                        lastdisassembledata.seperators[2] = 2 + 4 + 2;
                                                        lastdisassembledata.seperatorcount = 3;

                                                    }
                                                    else
                                                        lastdisassembledata.parameters = modrm(memory, prefix2, 1, 0, ref last, 64);
                                                }
                                                else
                                                    lastdisassembledata.parameters = modrm(memory, prefix2, 1, 0, ref last, 32);
                                            }

                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                        }
                                        break;

                                    case 3:
                                        {
                                            //call
                                            description = "call procedure";
                                            lastdisassembledata.opcode = "call";
                                            lastdisassembledata.isjump = true;
                                            lastdisassembledata.iscall = true;

                                            if (is64bit)
                                                lastdisassembledata.parameters = modrm(memory, prefix2, 1, 0, ref last, 64);
                                            else
                                                lastdisassembledata.parameters = modrm(memory, prefix2, 1, 0, ref last, 32);

                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                        }
                                        break;

                                    case 4:
                                        {
                                            //jmp
                                            description = "jump near";
                                            lastdisassembledata.opcode = "jmp";
                                            lastdisassembledata.isjump = true;


                                            if (is64bit)
                                            {
                                                if ((memory[1] == 0x25) && (memory.ReadUInt32(2) == 0))  //special 14 byte jmp
                                                {
                                                    lastdisassembledata.parametervalue = (UIntPtr)memory.ReadUInt64(6);
                                                    lastdisassembledata.parametervaluetype = tdisassemblervaluetype.dvtaddress;

                                                    lastdisassembledata.parameters = inttohexs((UIntPtr)memory.ReadUInt64(6), 8);
                                                    last += 8 + 4 + 2;

                                                    lastdisassembledata.seperators[0] = 2;
                                                    lastdisassembledata.seperators[1] = 2 + 4;
                                                    lastdisassembledata.seperatorcount = 2;

                                                }
                                                else
                                                    lastdisassembledata.parameters = modrm(memory, prefix2, 1, 0, ref last, 64);
                                            }
                                            else
                                                lastdisassembledata.parameters = modrm(memory, prefix2, 1, 0, ref last, 32);


                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                        }
                                        break;

                                    case 5:
                                        {
                                            //jmp
                                            description = "jump far";
                                            lastdisassembledata.opcode = "jmp far";
                                            lastdisassembledata.parameters = modrm(memory, prefix2, 1, 0, ref last);
                                            lastdisassembledata.isjump = true;

                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                        }
                                        break;

                                    case 6:
                                        {
                                            description = "push word or doubleword onto the stack";
                                            lastdisassembledata.opcode = "push";
                                            if (prefix2.Contains(0x66))
                                                lastdisassembledata.parameters = modrm(memory, prefix2, 1, 1, ref last);
                                            else
                                                lastdisassembledata.parameters = modrm(memory, prefix2, 1, 0, ref last);


                                            offset = (UIntPtr)((last - 1) + offset.ToUInt64());
                                        }
                                        break;
                                    default:
                                        {
                                            lastdisassembledata.opcode = "db";
                                            lastdisassembledata.parameters = inttohexs((UIntPtr)memory[0], 2);
                                        }
                                        break;

                                }

                            }
                            break;

                        default:
                            {
                                lastdisassembledata.opcode = "db";
                                lastdisassembledata.parameters = AStringUtils.IntToHex(memory[0], 2);
                            }
                            break;
                    }
                    #endregion
                    if (lastdisassembledata.parameters != "" && lastdisassembledata.parameters[lastdisassembledata.parameters.Length - 1] == ',')
                        lastdisassembledata.parameters = UStringUtils.SubStr(lastdisassembledata.parameters, 0, -1); // todo check if this actually shrinks
                    lastdisassembledata.description = description;
                    //copy the remaining bytes
                    k = lastdisassembledata.bytes.Length;
                    if ((offset.ToIntPtr().ToInt64() - initialoffset.ToIntPtr().ToInt64()) < k)
                        offset = initialoffset + k;
                    lastdisassembledata.bytes.SetLength((int)(offset.ToUInt64() - initialoffset.ToUInt64()));
                    if ((k >= 32) || (k < 0))
                    {
                        //asm
                        //  db $cc;
                        //end;
                        MessageBox.Show(AStringUtils.IntToHex(startoffset, 8) + "disassembler error 1", "debug here");
                    }
                    td = (UInt32)(offset.ToUInt64() - initialoffset.ToUInt64() - (UInt64)k);
                    i = (int)(k + td);
                    if ((td >= 32) || (i >= 32) || (i < 0))
                    {
                        //asm
                        //  db $cc;
                        //end;
                        MessageBox.Show(AStringUtils.IntToHex(startoffset, 8) + "disassembler error 2", "debug here");
                    }
            
                    if (td > 0)
                    {
                        breaknow = false;
                        try
                        {
                            fixed (Byte* p1 = lastdisassembledata.bytes.Buffer)
                            {
                                var p2 = (Byte*)_memory.ToIntPtr();
                                AArrayUtils.CopyMemory(p1, k, p2, k, (int)td);
                            }
                        }
                        catch
                        {
                            breaknow = true;
                        }
                        if (breaknow)
                        {
                            //asm
                            //nop
                            //end;
                            MessageBox.Show(AStringUtils.IntToHex(startoffset, 8) + "disassembler error 3", "debug here");
                        }
                    }
                    //adjust for the prefix.
                    if (k != 0)
                    {
                        for (i = 0; i <= lastdisassembledata.seperatorcount - 1; i++)
                            lastdisassembledata.seperators[i] += prefixsize;
            
                        if (lastdisassembledata.riprelative != 0)
                            lastdisassembledata.riprelative += prefixsize;
                    }
                    //  result:=result+'- '+tempresult;
                    if (riprelative)
                    {
                        //add the current offset to the code between []
                        lastdisassembledata.modrmvalue = (UIntPtr)(offset.ToUInt64() + ((UIntPtr)((int)lastdisassembledata.modrmvalue)).ToUInt64()); //sign extended increase
                        i = AStringUtils.Pos("[", lastdisassembledata.parameters);
                        j = AStringUtils.PosEx("]", lastdisassembledata.parameters, i);
                        tempaddress = lastdisassembledata.modrmvalue;
                        tempresult = AStringUtils.Copy(lastdisassembledata.parameters, 1, i);
                        tempresult += inttohexs(tempaddress, 8);
                        lastdisassembledata.parameters = tempresult + AStringUtils.Copy(lastdisassembledata.parameters, j, lastdisassembledata.parameters.Length);
                    }
                }
                else
                {
                    lastdisassembledata.opcode = "??";
                    offset += 1;
                }
                // todo handle cloak
                //# ifdef windows
                //string result;
                //lastdisassembledata.iscloaked = hascloakedregioninrange(lastdisassembledata.address, length(lastdisassembledata.bytes), va, pa);
                //#else
                lastdisassembledata.iscloaked = false;
                //#endif
                if (!dataonly)
                {
                    result = AStringUtils.IntToHex(lastdisassembledata.address, 8) + " - " + getlastbytestring();
                    result += " - ";
                    result = result + lastdisassembledata.prefix + lastdisassembledata.opcode;
                    result += ' ';
                    result += lastdisassembledata.parameters;
                }
                // todo handle custom override
                //if (assigned(onpostdisassemble))
                //{
                //    tempresult = result;
                //    tempdescription = description;
                //
                //    if (onpostdisassemble(self, initialoffset, LastDisassembleData, tempresult, tempdescription))
                //    {
                //        result = tempresult;
                //        description = tempdescription;
                //
                //        if (length(lastdisassembledata.bytes) > 0)
                //            offset = initialoffset + length(lastdisassembledata.bytes);
                //    }
                //}
            }
            catch
            {
                //outputdebugstring(AStringUtils.IntToHex(startoffset,8)+':disassembler exception:'+e.message);
                ///MessageBox(0,pchar('disassembler exception at '+ AStringUtils.IntToHex(startoffset,8)+#13#10+e.message+#13#10+#13#10+'Please provide dark byte the bytes that are at this address so he can fix it'#13#10'(Open another CE instance and in the hexadecimal view go to this address)'),'debug here',MB_OK);
                throw new Exception("error make this work");
            }
            return result;
        }
        #endregion
    }
}
